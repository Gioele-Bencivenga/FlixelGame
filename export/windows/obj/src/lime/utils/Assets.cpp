// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetBundle
#include <lime/utils/AssetBundle.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_Preloader
#include <lime/utils/Preloader.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_48_exists,"lime.utils.Assets","exists",0x1d422f71,"lime.utils.Assets.exists","lime/utils/Assets.hx",48,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_73_getAsset,"lime.utils.Assets","getAsset",0x8d49da4f,"lime.utils.Assets.getAsset","lime/utils/Assets.hx",73,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_159_getAudioBuffer,"lime.utils.Assets","getAudioBuffer",0x84c07015,"lime.utils.Assets.getAudioBuffer","lime/utils/Assets.hx",159,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_170_getBytes,"lime.utils.Assets","getBytes",0x24a878ca,"lime.utils.Assets.getBytes","lime/utils/Assets.hx",170,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_181_getFont,"lime.utils.Assets","getFont",0x6eb05e50,"lime.utils.Assets.getFont","lime/utils/Assets.hx",181,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_193_getImage,"lime.utils.Assets","getImage",0x24798fba,"lime.utils.Assets.getImage","lime/utils/Assets.hx",193,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_197_getLibrary,"lime.utils.Assets","getLibrary",0xdfc4ad1a,"lime.utils.Assets.getLibrary","lime/utils/Assets.hx",197,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_213_getPath,"lime.utils.Assets","getPath",0x7541e626,"lime.utils.Assets.getPath","lime/utils/Assets.hx",213,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_245_getText,"lime.utils.Assets","getText",0x77e9cd2e,"lime.utils.Assets.getText","lime/utils/Assets.hx",245,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_249_hasLibrary,"lime.utils.Assets","hasLibrary",0x1b170ed6,"lime.utils.Assets.hasLibrary","lime/utils/Assets.hx",249,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_259_isLocal,"lime.utils.Assets","isLocal",0x6de3bdec,"lime.utils.Assets.isLocal","lime/utils/Assets.hx",259,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_277_isValidAudio,"lime.utils.Assets","isValidAudio",0xfba1fa19,"lime.utils.Assets.isValidAudio","lime/utils/Assets.hx",277,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_284_isValidImage,"lime.utils.Assets","isValidImage",0x918aa09e,"lime.utils.Assets.isValidImage","lime/utils/Assets.hx",284,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_288_list,"lime.utils.Assets","list",0x96ec2eb3,"lime.utils.Assets.list","lime/utils/Assets.hx",288,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_305_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",305,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_357_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",357,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_378_loadAudioBuffer,"lime.utils.Assets","loadAudioBuffer",0xa72805bb,"lime.utils.Assets.loadAudioBuffer","lime/utils/Assets.hx",378,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_383_loadBytes,"lime.utils.Assets","loadBytes",0x23caadf0,"lime.utils.Assets.loadBytes","lime/utils/Assets.hx",383,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_388_loadFont,"lime.utils.Assets","loadFont",0xbb998fea,"lime.utils.Assets.loadFont","lime/utils/Assets.hx",388,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_393_loadImage,"lime.utils.Assets","loadImage",0x239bc4e0,"lime.utils.Assets.loadImage","lime/utils/Assets.hx",393,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_397_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",397,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_414_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",414,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_435_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",435,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_458_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",458,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_479_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",479,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_489_loadText,"lime.utils.Assets","loadText",0xc4d2fec8,"lime.utils.Assets.loadText","lime/utils/Assets.hx",489,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_493_registerLibrary,"lime.utils.Assets","registerLibrary",0xb6301ea3,"lime.utils.Assets.registerLibrary","lime/utils/Assets.hx",493,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_515_unloadLibrary,"lime.utils.Assets","unloadLibrary",0xc816d6c7,"lime.utils.Assets.unloadLibrary","lime/utils/Assets.hx",515,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_546___cacheBreak,"lime.utils.Assets","__cacheBreak",0xe7faf592,"lime.utils.Assets.__cacheBreak","lime/utils/Assets.hx",546,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_550___libraryNotFound,"lime.utils.Assets","__libraryNotFound",0x7dfa37b5,"lime.utils.Assets.__libraryNotFound","lime/utils/Assets.hx",550,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_568_library_onChange,"lime.utils.Assets","library_onChange",0x3a89dec8,"lime.utils.Assets.library_onChange","lime/utils/Assets.hx",568,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_39_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",39,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_40_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",40,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_42_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",42,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_44_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",44,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_45_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",45,0x95055f23)
namespace lime{
namespace utils{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b49805f;
}

 ::lime::utils::AssetCache Assets_obj::cache;

 ::lime::app::_Event_Void_Void Assets_obj::onChange;

 ::haxe::ds::StringMap Assets_obj::bundlePaths;

::String Assets_obj::defaultRootPath;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::haxe::ds::StringMap Assets_obj::libraryPaths;

bool Assets_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_48_exists)
HXLINE(  50)		if (hx::IsNull( type )) {
HXLINE(  52)			type = HX_("BINARY",01,68,8e,9f);
            		}
HXLINE(  55)		::String id1 = id;
HXDLIN(  55)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  55)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN(  55)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN(  55)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE(  57)		if (hx::IsNotNull( symbol_library )) {
HXLINE(  59)			return symbol_library->exists(symbol_symbolName,type);
            		}
HXLINE(  63)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::Dynamic Assets_obj::getAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_73_getAsset)
HXLINE(  75)		bool _hx_tmp;
HXDLIN(  75)		if (useCache) {
HXLINE(  75)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE(  75)			_hx_tmp = false;
            		}
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  77)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE(  81)				useCache = false;
HXDLIN(  81)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE(  84)				 ::Dynamic font = ::lime::utils::Assets_obj::cache->font->get(id);
HXLINE(  86)				if (hx::IsNotNull( font )) {
HXLINE(  88)					return font;
            				}
HXLINE(  83)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE(  92)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::cache->image->get(id)) );
HXLINE(  94)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE(  96)					return image;
            				}
HXLINE(  91)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 100)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::cache->audio->get(id)) );
HXLINE( 102)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 104)					return audio;
            				}
HXLINE(  99)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 108)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 108)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 111)				return null();
            			}
            			_hx_goto_1:;
            		}
HXLINE( 115)		::String id1 = id;
HXDLIN( 115)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 115)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 115)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 115)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 117)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 119)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 121)				if (symbol_library->isLocal(symbol_symbolName,type)) {
HXLINE( 123)					 ::Dynamic asset = symbol_library->getAsset(symbol_symbolName,type);
HXLINE( 125)					bool _hx_tmp1;
HXDLIN( 125)					if (useCache) {
HXLINE( 125)						_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 125)						_hx_tmp1 = false;
            					}
HXDLIN( 125)					if (_hx_tmp1) {
HXLINE( 127)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
HXLINE( 130)					return asset;
            				}
            				else {
HXLINE( 134)					::lime::utils::Log_obj::error((((type + HX_(" asset \"",d2,25,2a,5d)) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),134,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            				}
            			}
            			else {
HXLINE( 139)				::lime::utils::Log_obj::error(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),139,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            			}
            		}
            		else {
HXLINE( 144)			::String _hx_tmp2 = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 144)			::lime::utils::Log_obj::error(_hx_tmp2,hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),144,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            		}
HXLINE( 148)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,getAsset,return )

 ::lime::media::AudioBuffer Assets_obj::getAudioBuffer(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_159_getAudioBuffer)
HXDLIN( 159)		return ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::getAsset(id,HX_("SOUND",af,c4,ba,fe),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getAudioBuffer,return )

 ::haxe::io::Bytes Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_170_getBytes)
HXDLIN( 170)		return ( ( ::haxe::io::Bytes)(::lime::utils::Assets_obj::getAsset(id,HX_("BINARY",01,68,8e,9f),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::lime::text::Font Assets_obj::getFont(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_181_getFont)
HXDLIN( 181)		return ( ( ::lime::text::Font)(::lime::utils::Assets_obj::getAsset(id,HX_("FONT",cf,25,81,2e),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::graphics::Image Assets_obj::getImage(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_193_getImage)
HXDLIN( 193)		return ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::getAsset(id,HX_("IMAGE",3b,57,57,3b),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

 ::lime::utils::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_197_getLibrary)
HXLINE( 198)		bool _hx_tmp;
HXDLIN( 198)		if (hx::IsNotNull( name )) {
HXLINE( 198)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 198)			_hx_tmp = true;
            		}
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 200)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 203)		return ( ( ::lime::utils::AssetLibrary)(::lime::utils::Assets_obj::libraries->get(name)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_213_getPath)
HXLINE( 215)		::String id1 = id;
HXDLIN( 215)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 215)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 215)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 215)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 217)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 219)			::String type = null();
HXDLIN( 219)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 221)				return symbol_library->getPath(symbol_symbolName);
            			}
            			else {
HXLINE( 225)				::lime::utils::Log_obj::error(((HX_("There is no asset with an ID of \"",b0,92,42,96) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),225,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 230)			::String _hx_tmp = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 230)			::lime::utils::Log_obj::error(_hx_tmp,hx::SourceInfo(HX_("lime/utils/Assets.hx",23,5f,05,95),230,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 234)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_245_getText)
HXDLIN( 245)		return ( (::String)(::lime::utils::Assets_obj::getAsset(id,HX_("TEXT",ad,94,ba,37),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

bool Assets_obj::hasLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_249_hasLibrary)
HXLINE( 250)		bool _hx_tmp;
HXDLIN( 250)		if (hx::IsNotNull( name )) {
HXLINE( 250)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 250)			_hx_tmp = true;
            		}
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 252)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 255)		return ::lime::utils::Assets_obj::libraries->exists(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasLibrary,return )

bool Assets_obj::isLocal(::String id,::String type,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_259_isLocal)
HXLINE( 261)		bool _hx_tmp;
HXDLIN( 261)		if (useCache) {
HXLINE( 261)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 261)			_hx_tmp = false;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 263)			if (::lime::utils::Assets_obj::cache->exists(id,type)) {
HXLINE( 263)				return true;
            			}
            		}
HXLINE( 266)		::String id1 = id;
HXDLIN( 266)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 266)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 266)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 266)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 267)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 267)			return symbol_library->isLocal(symbol_symbolName,type);
            		}
            		else {
HXLINE( 267)			return false;
            		}
HXDLIN( 267)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

bool Assets_obj::isValidAudio( ::lime::media::AudioBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_277_isValidAudio)
HXDLIN( 277)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidAudio,return )

bool Assets_obj::isValidImage( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_284_isValidImage)
HXDLIN( 284)		if (hx::IsNotNull( image )) {
HXDLIN( 284)			return hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN( 284)			return false;
            		}
HXDLIN( 284)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidImage,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_288_list)
HXLINE( 289)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 291)		{
HXLINE( 291)			 ::Dynamic library = ::lime::utils::Assets_obj::libraries->iterator();
HXDLIN( 291)			while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 291)				 ::lime::utils::AssetLibrary library1 = ( ( ::lime::utils::AssetLibrary)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 293)				::Array< ::String > libraryItems = library1->list(type);
HXLINE( 295)				if (hx::IsNotNull( libraryItems )) {
HXLINE( 297)					items = items->concat(libraryItems);
            				}
            			}
            		}
HXLINE( 301)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_305_loadAsset)
HXLINE( 307)		bool _hx_tmp;
HXDLIN( 307)		if (useCache) {
HXLINE( 307)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 307)			_hx_tmp = false;
            		}
HXDLIN( 307)		if (_hx_tmp) {
HXLINE( 309)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 313)				useCache = false;
HXDLIN( 313)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 316)				 ::Dynamic font = ::lime::utils::Assets_obj::cache->font->get(id);
HXLINE( 318)				if (hx::IsNotNull( font )) {
HXLINE( 320)					return ::lime::app::Future_obj::withValue(font);
            				}
HXLINE( 315)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 324)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::cache->image->get(id)) );
HXLINE( 326)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE( 328)					return ::lime::app::Future_obj::withValue(image);
            				}
HXLINE( 323)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 332)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::cache->audio->get(id)) );
HXLINE( 334)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 336)					return ::lime::app::Future_obj::withValue(audio);
            				}
HXLINE( 331)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 340)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 340)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 343)				return null();
            			}
            			_hx_goto_16:;
            		}
HXLINE( 347)		::String id1 = id;
HXDLIN( 347)		int colonIndex = id1.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 347)		::String symbol_libraryName = id1.substring(0,colonIndex);
HXDLIN( 347)		::String symbol_symbolName = id1.substring((colonIndex + 1),null());
HXDLIN( 347)		 ::lime::utils::AssetLibrary symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 349)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 351)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 353)				 ::lime::app::Future future = symbol_library->loadAsset(symbol_symbolName,type);
HXLINE( 355)				bool _hx_tmp1;
HXDLIN( 355)				if (useCache) {
HXLINE( 355)					_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 355)					_hx_tmp1 = false;
            				}
HXDLIN( 355)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id,::String,type) HXARGC(1)
            					void _hx_run( ::Dynamic asset){
            						HX_STACKFRAME(&_hx_pos_df5754140b017d9f_357_loadAsset)
HXLINE( 357)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 357)					future->onComplete( ::Dynamic(new _hx_Closure_0(id,type)));
            				}
HXLINE( 360)				return future;
            			}
            			else {
HXLINE( 364)				return ::lime::app::Future_obj::withError(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 369)			return ::lime::app::Future_obj::withError(::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName));
            		}
HXLINE( 349)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadAsset,return )

 ::lime::app::Future Assets_obj::loadAudioBuffer(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_378_loadAudioBuffer)
HXDLIN( 378)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("SOUND",af,c4,ba,fe),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadAudioBuffer,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_383_loadBytes)
HXDLIN( 383)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("BINARY",01,68,8e,9f),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_388_loadFont)
HXDLIN( 388)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("FONT",cf,25,81,2e),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadImage(::String id,hx::Null< bool >  __o_useCache){
            		bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_393_loadImage)
HXDLIN( 393)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("IMAGE",3b,57,57,3b),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadImage,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_397_loadLibrary)
HXLINE( 398)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 401)		 ::lime::utils::AssetLibrary library = ::lime::utils::Assets_obj::getLibrary(id);
HXLINE( 403)		if (hx::IsNotNull( library )) {
HXLINE( 405)			return library->load();
            		}
HXLINE( 408)		::String path = id;
HXLINE( 409)		::String rootPath = null();
HXLINE( 411)		if (::lime::utils::Assets_obj::bundlePaths->exists(id)) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetBundle bundle){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_414_loadLibrary)
HXLINE( 415)				if (hx::IsNull( bundle )) {
HXLINE( 417)					promise->error(((HX_("Cannot load bundle for library \"",c5,5d,78,0c) + id) + HX_("\"",22,00,00,00)));
HXLINE( 418)					return;
            				}
HXLINE( 421)				 ::lime::utils::AssetLibrary library1 = ::lime::utils::AssetLibrary_obj::fromBundle(bundle);
HXLINE( 423)				if (hx::IsNull( library1 )) {
HXLINE( 425)					promise->error(((HX_("Cannot open library \"",44,cc,55,e7) + id) + HX_("\"",22,00,00,00)));
            				}
            				else {
HXLINE( 429)					::lime::utils::Assets_obj::libraries->set(id,library1);
HXLINE( 430)					library1->onChange->add(::lime::utils::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 431)					 ::lime::app::Future _hx_tmp = library1->load();
HXDLIN( 431)					promise->completeWith(_hx_tmp);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::Dynamic _){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_435_loadLibrary)
HXLINE( 435)				promise->error(((HX_("There is no asset library with an ID of \"",8b,06,e2,9a) + id) + HX_("\"",22,00,00,00)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 413)			::lime::utils::AssetBundle_obj::loadFromFile(::lime::utils::Assets_obj::bundlePaths->get_string(id))->onComplete( ::Dynamic(new _hx_Closure_0(id,promise)))->onError( ::Dynamic(new _hx_Closure_1(id,promise)));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetManifest manifest){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_458_loadLibrary)
HXLINE( 459)				if (hx::IsNull( manifest )) {
HXLINE( 461)					promise->error(((HX_("Cannot parse asset manifest for library \"",cf,1e,cc,48) + id) + HX_("\"",22,00,00,00)));
HXLINE( 462)					return;
            				}
HXLINE( 465)				 ::lime::utils::AssetLibrary library2 = ::lime::utils::AssetLibrary_obj::fromManifest(manifest);
HXLINE( 467)				if (hx::IsNull( library2 )) {
HXLINE( 469)					promise->error(((HX_("Cannot open library \"",44,cc,55,e7) + id) + HX_("\"",22,00,00,00)));
            				}
            				else {
HXLINE( 473)					::lime::utils::Assets_obj::libraries->set(id,library2);
HXLINE( 474)					library2->onChange->add(::lime::utils::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 475)					 ::lime::app::Future _hx_tmp1 = library2->load();
HXDLIN( 475)					promise->completeWith(_hx_tmp1);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_479_loadLibrary)
HXLINE( 479)				promise->error(((HX_("There is no asset library with an ID of \"",8b,06,e2,9a) + id) + HX_("\"",22,00,00,00)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 440)			if (::lime::utils::Assets_obj::libraryPaths->exists(id)) {
HXLINE( 442)				path = ::lime::utils::Assets_obj::libraryPaths->get_string(id);
HXLINE( 443)				::String rootPath1;
HXDLIN( 443)				if ((::lime::utils::Assets_obj::defaultRootPath != HX_("",00,00,00,00))) {
HXLINE( 443)					rootPath1 = (::lime::utils::Assets_obj::defaultRootPath + HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE( 443)					rootPath1 = HX_("",00,00,00,00);
            				}
HXDLIN( 443)				rootPath = (rootPath1 + ::haxe::io::Path_obj::directory(path));
            			}
            			else {
HXLINE( 447)				if (::StringTools_obj::endsWith(path,HX_(".bundle",30,4a,b8,4e))) {
HXLINE( 449)					rootPath = path;
HXLINE( 450)					path = (path + HX_("/library.json",2a,a7,07,47));
            				}
HXLINE( 453)				::String rootPath2;
HXDLIN( 453)				if ((::lime::utils::Assets_obj::defaultRootPath != HX_("",00,00,00,00))) {
HXLINE( 453)					rootPath2 = (::lime::utils::Assets_obj::defaultRootPath + HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE( 453)					rootPath2 = HX_("",00,00,00,00);
            				}
HXDLIN( 453)				rootPath = (rootPath2 + ::haxe::io::Path_obj::directory(path));
HXLINE( 454)				path = ::lime::utils::Assets_obj::_hx___cacheBreak(path);
            			}
HXLINE( 457)			::lime::utils::AssetManifest_obj::loadFromFile(path,rootPath)->onComplete( ::Dynamic(new _hx_Closure_2(id,promise)))->onError( ::Dynamic(new _hx_Closure_3(id,promise)));
            		}
HXLINE( 484)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_489_loadText)
HXDLIN( 489)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("TEXT",ad,94,ba,37),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::lime::utils::AssetLibrary library){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_493_registerLibrary)
HXLINE( 494)		if (::lime::utils::Assets_obj::libraries->exists(name)) {
HXLINE( 496)			if (hx::IsEq( ::lime::utils::Assets_obj::libraries->get(name),library )) {
HXLINE( 498)				return;
            			}
            			else {
HXLINE( 502)				::lime::utils::Assets_obj::unloadLibrary(name);
            			}
            		}
HXLINE( 506)		if (hx::IsNotNull( library )) {
HXLINE( 508)			library->onChange->add(::lime::utils::Assets_obj::library_onChange_dyn(),null(),null());
            		}
HXLINE( 511)		::lime::utils::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::unloadLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_515_unloadLibrary)
HXLINE( 517)		 ::lime::utils::AssetLibrary library = ( ( ::lime::utils::AssetLibrary)(::lime::utils::Assets_obj::libraries->get(name)) );
HXLINE( 519)		if (hx::IsNotNull( library )) {
HXLINE( 521)			::lime::utils::Assets_obj::cache->clear((name + HX_(":",3a,00,00,00)));
HXLINE( 522)			library->onChange->remove(::lime::utils::Assets_obj::library_onChange_dyn());
HXLINE( 523)			library->unload();
            		}
HXLINE( 526)		::lime::utils::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

::String Assets_obj::_hx___cacheBreak(::String path){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_546___cacheBreak)
HXDLIN( 546)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,_hx___cacheBreak,return )

::String Assets_obj::_hx___libraryNotFound(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_550___libraryNotFound)
HXLINE( 551)		bool _hx_tmp;
HXDLIN( 551)		if (hx::IsNotNull( name )) {
HXLINE( 551)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 551)			_hx_tmp = true;
            		}
HXDLIN( 551)		if (_hx_tmp) {
HXLINE( 553)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 556)		bool _hx_tmp1;
HXDLIN( 556)		bool _hx_tmp2;
HXDLIN( 556)		if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 556)			_hx_tmp2 = hx::IsNotNull( ::lime::app::Application_obj::current->_hx___preloader );
            		}
            		else {
HXLINE( 556)			_hx_tmp2 = false;
            		}
HXDLIN( 556)		if (_hx_tmp2) {
HXLINE( 556)			_hx_tmp1 = !(::lime::app::Application_obj::current->_hx___preloader->complete);
            		}
            		else {
HXLINE( 556)			_hx_tmp1 = false;
            		}
HXDLIN( 556)		if (_hx_tmp1) {
HXLINE( 558)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\", or it is not yet preloaded",db,ac,d4,2f));
            		}
            		else {
HXLINE( 562)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\"",22,00,00,00));
            		}
HXLINE( 556)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,_hx___libraryNotFound,return )

void Assets_obj::library_onChange(){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_568_library_onChange)
HXLINE( 569)		::lime::utils::Assets_obj::cache->clear(null());
HXLINE( 570)		::lime::utils::Assets_obj::onChange->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,library_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { outValue = ( onChange ); return true; }
		if (HX_FIELD_EQ(inName,"getAsset") ) { outValue = getAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = ( libraries ); return true; }
		if (HX_FIELD_EQ(inName,"loadAsset") ) { outValue = loadAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasLibrary") ) { outValue = hasLibrary_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bundlePaths") ) { outValue = ( bundlePaths ); return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { outValue = ( libraryPaths ); return true; }
		if (HX_FIELD_EQ(inName,"isValidAudio") ) { outValue = isValidAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidImage") ) { outValue = isValidImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__cacheBreak") ) { outValue = _hx___cacheBreak_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { outValue = getAudioBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultRootPath") ) { outValue = ( defaultRootPath ); return true; }
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { outValue = loadAudioBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"library_onChange") ) { outValue = library_onChange_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__libraryNotFound") ) { outValue = _hx___libraryNotFound_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::lime::utils::AssetCache >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=ioValue.Cast<  ::lime::app::_Event_Void_Void >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bundlePaths") ) { bundlePaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { libraryPaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultRootPath") ) { defaultRootPath=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::lime::utils::AssetCache */ ,(void *) &Assets_obj::cache,HX_("cache",42,9a,14,41)},
	{hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(void *) &Assets_obj::onChange,HX_("onChange",ef,87,1f,97)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::bundlePaths,HX_("bundlePaths",4c,90,3b,70)},
	{hx::fsString,(void *) &Assets_obj::defaultRootPath,HX_("defaultRootPath",c8,76,96,0a)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::libraries,HX_("libraries",19,50,f8,18)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::libraryPaths,HX_("libraryPaths",33,26,5e,06)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_MARK_MEMBER_NAME(Assets_obj::bundlePaths,"bundlePaths");
	HX_MARK_MEMBER_NAME(Assets_obj::defaultRootPath,"defaultRootPath");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_VISIT_MEMBER_NAME(Assets_obj::bundlePaths,"bundlePaths");
	HX_VISIT_MEMBER_NAME(Assets_obj::defaultRootPath,"defaultRootPath");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_("cache",42,9a,14,41),
	HX_("onChange",ef,87,1f,97),
	HX_("bundlePaths",4c,90,3b,70),
	HX_("defaultRootPath",c8,76,96,0a),
	HX_("libraries",19,50,f8,18),
	HX_("libraryPaths",33,26,5e,06),
	HX_("exists",dc,1d,e0,bf),
	HX_("getAsset",7a,79,10,86),
	HX_("getAudioBuffer",80,41,e3,26),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getFont",85,0d,43,16),
	HX_("getImage",e5,2e,40,1d),
	HX_("getLibrary",05,ad,d1,8e),
	HX_("getPath",5b,95,d4,1c),
	HX_("getText",63,7c,7c,1f),
	HX_("hasLibrary",c1,0e,24,ca),
	HX_("isLocal",21,6d,76,15),
	HX_("isValidAudio",c4,0a,df,47),
	HX_("isValidImage",49,b1,c7,dd),
	HX_("list",5e,1c,b3,47),
	HX_("loadAsset",ea,b5,70,41),
	HX_("loadAudioBuffer",f0,71,7c,e3),
	HX_("loadBytes",65,54,cf,d8),
	HX_("loadFont",15,2f,60,b4),
	HX_("loadImage",55,6b,a0,d8),
	HX_("loadLibrary",75,e5,0d,10),
	HX_("loadText",f3,9d,99,bd),
	HX_("registerLibrary",d8,8a,84,f2),
	HX_("unloadLibrary",bc,5b,48,31),
	HX_("__cacheBreak",3d,06,38,34),
	HX_("__libraryNotFound",2a,db,69,c9),
	HX_("library_onChange",f3,20,14,c8),
	::String(null())
};

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.utils.Assets",39,6e,7e,b0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_39_boot)
HXDLIN(  39)		cache =  ::lime::utils::AssetCache_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_40_boot)
HXDLIN(  40)		onChange =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_42_boot)
HXDLIN(  42)		bundlePaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_44_boot)
HXDLIN(  44)		libraries =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_45_boot)
HXDLIN(  45)		libraryPaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace lime
} // end namespace utils
