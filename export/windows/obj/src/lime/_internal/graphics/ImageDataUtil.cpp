// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_StackBlur
#include <lime/_internal/graphics/StackBlur.h>
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_33_displaceMap,"lime._internal.graphics.ImageDataUtil","displaceMap",0x5f09aa44,"lime._internal.graphics.ImageDataUtil.displaceMap","lime/_internal/graphics/ImageDataUtil.hx",33,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_139_bilinear,"lime._internal.graphics.ImageDataUtil","bilinear",0x779ce56b,"lime._internal.graphics.ImageDataUtil.bilinear","lime/_internal/graphics/ImageDataUtil.hx",139,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_143_lerpRGBA,"lime._internal.graphics.ImageDataUtil","lerpRGBA",0x6898e12a,"lime._internal.graphics.ImageDataUtil.lerpRGBA","lime/_internal/graphics/ImageDataUtil.hx",143,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_155_lerp4f,"lime._internal.graphics.ImageDataUtil","lerp4f",0x5c714ca8,"lime._internal.graphics.ImageDataUtil.lerp4f","lime/_internal/graphics/ImageDataUtil.hx",155,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_160_lerp,"lime._internal.graphics.ImageDataUtil","lerp",0x85985576,"lime._internal.graphics.ImageDataUtil.lerp","lime/_internal/graphics/ImageDataUtil.hx",160,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_164_colorTransform,"lime._internal.graphics.ImageDataUtil","colorTransform",0x125b6f48,"lime._internal.graphics.ImageDataUtil.colorTransform","lime/_internal/graphics/ImageDataUtil.hx",164,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_206_copyChannel,"lime._internal.graphics.ImageDataUtil","copyChannel",0xecaa286f,"lime._internal.graphics.ImageDataUtil.copyChannel","lime/_internal/graphics/ImageDataUtil.hx",206,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_295_copyPixels,"lime._internal.graphics.ImageDataUtil","copyPixels",0xd2d56101,"lime._internal.graphics.ImageDataUtil.copyPixels","lime/_internal/graphics/ImageDataUtil.hx",295,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_504_fillRect,"lime._internal.graphics.ImageDataUtil","fillRect",0x041873c6,"lime._internal.graphics.ImageDataUtil.fillRect","lime/_internal/graphics/ImageDataUtil.hx",504,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_554_floodFill,"lime._internal.graphics.ImageDataUtil","floodFill",0x35740402,"lime._internal.graphics.ImageDataUtil.floodFill","lime/_internal/graphics/ImageDataUtil.hx",554,0x59dddace)
static const int _hx_array_data_0eb0fdcf_29[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_0eb0fdcf_30[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_638_gaussianBlur,"lime._internal.graphics.ImageDataUtil","gaussianBlur",0xb8d3c441,"lime._internal.graphics.ImageDataUtil.gaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",638,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_664_getColorBoundsRect,"lime._internal.graphics.ImageDataUtil","getColorBoundsRect",0x8aa490c5,"lime._internal.graphics.ImageDataUtil.getColorBoundsRect","lime/_internal/graphics/ImageDataUtil.hx",664,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_808_getPixel,"lime._internal.graphics.ImageDataUtil","getPixel",0xb9da048f,"lime._internal.graphics.ImageDataUtil.getPixel","lime/_internal/graphics/ImageDataUtil.hx",808,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_827_getPixel32,"lime._internal.graphics.ImageDataUtil","getPixel32",0x67cfb2ee,"lime._internal.graphics.ImageDataUtil.getPixel32","lime/_internal/graphics/ImageDataUtil.hx",827,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_845_getPixels,"lime._internal.graphics.ImageDataUtil","getPixels",0xe4e9f904,"lime._internal.graphics.ImageDataUtil.getPixels","lime/_internal/graphics/ImageDataUtil.hx",845,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_898_merge,"lime._internal.graphics.ImageDataUtil","merge",0xf318fed9,"lime._internal.graphics.ImageDataUtil.merge","lime/_internal/graphics/ImageDataUtil.hx",898,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_947_multiplyAlpha,"lime._internal.graphics.ImageDataUtil","multiplyAlpha",0xed49d7bb,"lime._internal.graphics.ImageDataUtil.multiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",947,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_973_resize,"lime._internal.graphics.ImageDataUtil","resize",0xc3399ab3,"lime._internal.graphics.ImageDataUtil.resize","lime/_internal/graphics/ImageDataUtil.hx",973,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1062_resizeBuffer,"lime._internal.graphics.ImageDataUtil","resizeBuffer",0x76145413,"lime._internal.graphics.ImageDataUtil.resizeBuffer","lime/_internal/graphics/ImageDataUtil.hx",1062,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1098_setFormat,"lime._internal.graphics.ImageDataUtil","setFormat",0x391f851a,"lime._internal.graphics.ImageDataUtil.setFormat","lime/_internal/graphics/ImageDataUtil.hx",1098,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1176_setPixel,"lime._internal.graphics.ImageDataUtil","setPixel",0x68375e03,"lime._internal.graphics.ImageDataUtil.setPixel","lime/_internal/graphics/ImageDataUtil.hx",1176,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1204_setPixel32,"lime._internal.graphics.ImageDataUtil","setPixel32",0x6b4d5162,"lime._internal.graphics.ImageDataUtil.setPixel32","lime/_internal/graphics/ImageDataUtil.hx",1204,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1226_setPixels,"lime._internal.graphics.ImageDataUtil","setPixels",0xc83ae510,"lime._internal.graphics.ImageDataUtil.setPixels","lime/_internal/graphics/ImageDataUtil.hx",1226,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1284_threshold,"lime._internal.graphics.ImageDataUtil","threshold",0x108d444c,"lime._internal.graphics.ImageDataUtil.threshold","lime/_internal/graphics/ImageDataUtil.hx",1284,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1397_unmultiplyAlpha,"lime._internal.graphics.ImageDataUtil","unmultiplyAlpha",0x3b9ff802,"lime._internal.graphics.ImageDataUtil.unmultiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1397,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1423___boxBlur,"lime._internal.graphics.ImageDataUtil","__boxBlur",0xee145fd3,"lime._internal.graphics.ImageDataUtil.__boxBlur","lime/_internal/graphics/ImageDataUtil.hx",1423,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1443___boxBlurH,"lime._internal.graphics.ImageDataUtil","__boxBlurH",0x63bf7915,"lime._internal.graphics.ImageDataUtil.__boxBlurH","lime/_internal/graphics/ImageDataUtil.hx",1443,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1490___boxBlurT,"lime._internal.graphics.ImageDataUtil","__boxBlurT",0x63bf7921,"lime._internal.graphics.ImageDataUtil.__boxBlurT","lime/_internal/graphics/ImageDataUtil.hx",1490,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1542___calculateSourceOffset,"lime._internal.graphics.ImageDataUtil","__calculateSourceOffset",0x5e2fc695,"lime._internal.graphics.ImageDataUtil.__calculateSourceOffset","lime/_internal/graphics/ImageDataUtil.hx",1542,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1561___getBoxesForGaussianBlur,"lime._internal.graphics.ImageDataUtil","__getBoxesForGaussianBlur",0xdeeea6e9,"lime._internal.graphics.ImageDataUtil.__getBoxesForGaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",1561,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1580___pixelCompare,"lime._internal.graphics.ImageDataUtil","__pixelCompare",0xf2ff119e,"lime._internal.graphics.ImageDataUtil.__pixelCompare","lime/_internal/graphics/ImageDataUtil.hx",1580,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1629___translatePixel,"lime._internal.graphics.ImageDataUtil","__translatePixel",0xf39bf4f7,"lime._internal.graphics.ImageDataUtil.__translatePixel","lime/_internal/graphics/ImageDataUtil.hx",1629,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fa36321;
}

void ImageDataUtil_obj::displaceMap( ::lime::graphics::Image target, ::lime::graphics::Image source, ::lime::graphics::Image map, ::lime::math::Vector2 mapPoint, ::lime::math::Vector4 componentX, ::lime::math::Vector4 componentY,bool smooth){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_33_displaceMap)
HXLINE(  34)		 ::lime::utils::ArrayBufferView targetData = target->buffer->data;
HXLINE(  35)		 ::lime::utils::ArrayBufferView sourceData = source->buffer->data;
HXLINE(  36)		 ::lime::utils::ArrayBufferView mapData = map->buffer->data;
HXLINE(  38)		int targetFormat = target->buffer->format;
HXLINE(  39)		int sourceFormat = source->buffer->format;
HXLINE(  40)		int mapFormat = map->buffer->format;
HXLINE(  42)		bool targetPremultiplied = target->get_premultiplied();
HXLINE(  43)		bool sourcePremultiplied = source->get_premultiplied();
HXLINE(  44)		bool mapPremultiplied = map->get_premultiplied();
HXLINE(  46)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,source,null());
HXLINE(  47)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView mapView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,map,null());
HXLINE(  49)		int row;
HXLINE(  51)		int sourceOffset;
HXLINE(  53)		int sourcePixel;
HXLINE(  54)		int mapPixel;
HXLINE(  55)		int targetPixel;
HXLINE(  57)		Float mapPixelX;
HXLINE(  58)		Float mapPixelY;
HXLINE(  59)		Float mapPixelA;
HXLINE(  62)		int s1;
HXLINE(  63)		int s2;
HXLINE(  64)		int s3;
HXLINE(  65)		int s4;
HXLINE(  67)		int mPointXFloor;
HXLINE(  68)		int mPointYFloor;
HXLINE(  70)		int disOffsetXFloor;
HXLINE(  71)		int disOffsetYFloor;
HXLINE(  73)		Float disX;
HXLINE(  74)		Float disY;
HXLINE(  76)		{
HXLINE(  76)			int _g = 0;
HXDLIN(  76)			int _g1 = sourceView->height;
HXDLIN(  76)			while((_g < _g1)){
HXLINE(  76)				_g = (_g + 1);
HXDLIN(  76)				int y = (_g - 1);
HXLINE(  78)				row = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE(  80)				{
HXLINE(  80)					int _g2 = 0;
HXDLIN(  80)					int _g11 = sourceView->width;
HXDLIN(  80)					while((_g2 < _g11)){
HXLINE(  80)						_g2 = (_g2 + 1);
HXDLIN(  80)						int x = (_g2 - 1);
HXLINE(  82)						sourceOffset = (row + (x * 4));
HXLINE(  84)						mPointXFloor = ::Std_obj::_hx_int(mapPoint->x);
HXLINE(  85)						mPointYFloor = ::Std_obj::_hx_int(mapPoint->y);
HXLINE(  87)						if (smooth) {
HXLINE(  89)							{
HXLINE(  89)								int offset = ((sourceView->byteOffset + (sourceView->stride * ((y - mPointYFloor) + 1))) + ((x - mPointXFloor) * 4));
HXDLIN(  89)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  89)										int r = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) );
HXDLIN(  89)										int g = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int b = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										s1 = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  89)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) );
HXDLIN(  89)										s1 = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  89)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) );
HXDLIN(  89)										s1 = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  89)								if (mapPremultiplied) {
HXLINE(  89)									bool _hx_tmp;
HXDLIN(  89)									if (((s1 & 255) != 0)) {
HXLINE(  89)										_hx_tmp = ((s1 & 255) != 255);
            									}
            									else {
HXLINE(  89)										_hx_tmp = false;
            									}
HXDLIN(  89)									if (_hx_tmp) {
HXLINE(  89)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s1 & 255)) ));
HXDLIN(  89)										{
HXLINE(  89)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											s1 = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s1 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  90)							{
HXLINE(  90)								int offset1 = ((sourceView->byteOffset + (sourceView->stride * (y - mPointYFloor))) + (((x - mPointXFloor) + 1) * 4));
HXDLIN(  90)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  90)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) );
HXDLIN(  90)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										s2 = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  90)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) );
HXDLIN(  90)										s2 = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  90)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) );
HXDLIN(  90)										s2 = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  90)								if (mapPremultiplied) {
HXLINE(  90)									bool _hx_tmp1;
HXDLIN(  90)									if (((s2 & 255) != 0)) {
HXLINE(  90)										_hx_tmp1 = ((s2 & 255) != 255);
            									}
            									else {
HXLINE(  90)										_hx_tmp1 = false;
            									}
HXDLIN(  90)									if (_hx_tmp1) {
HXLINE(  90)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s2 & 255)) ));
HXDLIN(  90)										{
HXLINE(  90)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											s2 = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s2 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  91)							{
HXLINE(  91)								int offset2 = ((sourceView->byteOffset + (sourceView->stride * ((y - mPointYFloor) + 1))) + (((x - mPointXFloor) + 1) * 4));
HXDLIN(  91)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  91)										int r8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) );
HXDLIN(  91)										int g8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int b6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										s3 = (((((r8 & 255) << 24) | ((g8 & 255) << 16)) | ((b6 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  91)										int r9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int g9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										int b7 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) );
HXDLIN(  91)										s3 = (((((r9 & 255) << 24) | ((g9 & 255) << 16)) | ((b7 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  91)										int r10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										int g10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int b8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) );
HXDLIN(  91)										s3 = (((((r10 & 255) << 24) | ((g10 & 255) << 16)) | ((b8 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  91)								if (mapPremultiplied) {
HXLINE(  91)									bool _hx_tmp2;
HXDLIN(  91)									if (((s3 & 255) != 0)) {
HXLINE(  91)										_hx_tmp2 = ((s3 & 255) != 255);
            									}
            									else {
HXLINE(  91)										_hx_tmp2 = false;
            									}
HXDLIN(  91)									if (_hx_tmp2) {
HXLINE(  91)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s3 & 255)) ));
HXDLIN(  91)										{
HXLINE(  91)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int r11 = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int g11 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											s3 = (((((r11 & 255) << 24) | ((g11 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s3 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  92)							{
HXLINE(  92)								int offset3 = ((sourceView->byteOffset + (sourceView->stride * (y - mPointYFloor))) + ((x - mPointXFloor) * 4));
HXDLIN(  92)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  92)										int r12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) );
HXDLIN(  92)										int g12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int b9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										s4 = (((((r12 & 255) << 24) | ((g12 & 255) << 16)) | ((b9 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  92)										int r13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int g13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										int b10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) );
HXDLIN(  92)										s4 = (((((r13 & 255) << 24) | ((g13 & 255) << 16)) | ((b10 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  92)										int r14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										int g14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int b11 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) );
HXDLIN(  92)										s4 = (((((r14 & 255) << 24) | ((g14 & 255) << 16)) | ((b11 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  92)								if (mapPremultiplied) {
HXLINE(  92)									bool _hx_tmp3;
HXDLIN(  92)									if (((s4 & 255) != 0)) {
HXLINE(  92)										_hx_tmp3 = ((s4 & 255) != 255);
            									}
            									else {
HXLINE(  92)										_hx_tmp3 = false;
            									}
HXDLIN(  92)									if (_hx_tmp3) {
HXLINE(  92)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s4 & 255)) ));
HXDLIN(  92)										{
HXLINE(  92)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int r15 = ( (int)(( ::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int g15 = ( (int)(( ::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											s4 = (((((r15 & 255) << 24) | ((g15 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s4 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  94)							mapPixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,(mapPoint->x - ( (Float)(mPointXFloor) )),(mapPoint->y - ( (Float)(mPointYFloor) )));
            						}
            						else {
HXLINE(  98)							int offset4 = ((mapView->byteOffset + (mapView->stride * (y - mPointYFloor))) + ((x - mPointXFloor) * 4));
HXDLIN(  98)							switch((int)(mapFormat)){
            								case (int)0: {
HXLINE(  98)									int r16 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) );
HXDLIN(  98)									int g16 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int b12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									mapPixel = (((((r16 & 255) << 24) | ((g16 & 255) << 16)) | ((b12 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE(  98)									int r17 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int g17 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									int b13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) );
HXDLIN(  98)									mapPixel = (((((r17 & 255) << 24) | ((g17 & 255) << 16)) | ((b13 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE(  98)									int r18 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									int g18 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int b14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) );
HXDLIN(  98)									mapPixel = (((((r18 & 255) << 24) | ((g18 & 255) << 16)) | ((b14 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN(  98)							if (mapPremultiplied) {
HXLINE(  98)								bool _hx_tmp4;
HXDLIN(  98)								if (((mapPixel & 255) != 0)) {
HXLINE(  98)									_hx_tmp4 = ((mapPixel & 255) != 255);
            								}
            								else {
HXLINE(  98)									_hx_tmp4 = false;
            								}
HXDLIN(  98)								if (_hx_tmp4) {
HXLINE(  98)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((mapPixel & 255)) ));
HXDLIN(  98)									{
HXLINE(  98)										 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int r19 = ( (int)(( ::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int g19 = ( (int)(( ::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										mapPixel = (((((r19 & 255) << 24) | ((g19 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((mapPixel & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 101)						mapPixelA = (( (Float)((mapPixel & 255)) ) / ((Float)255.0));
HXLINE( 102)						mapPixelX = ((( (Float)(((hx::UShr(mapPixel,24) & 255) - 128)) ) / ((Float)255.0)) * mapPixelA);
HXLINE( 103)						mapPixelY = ((( (Float)(((hx::UShr(mapPixel,16) & 255) - 128)) ) / ((Float)255.0)) * mapPixelA);
HXLINE( 105)						disX = ((mapPixelX * componentX->x) + (mapPixelY * componentY->x));
HXLINE( 106)						disY = ((mapPixelX * componentX->y) + (mapPixelY * componentY->y));
HXLINE( 108)						disOffsetXFloor = ::Math_obj::floor((disX * ( (Float)(sourceView->width) )));
HXLINE( 109)						disOffsetYFloor = ::Math_obj::floor((disY * ( (Float)(sourceView->height) )));
HXLINE( 111)						if (smooth) {
HXLINE( 113)							{
HXLINE( 113)								int offset5 = ((sourceView->byteOffset + (sourceView->stride * ((y + disOffsetYFloor) + 1))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 113)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 113)										int r20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) );
HXDLIN( 113)										int g20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int b15 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										s1 = (((((r20 & 255) << 24) | ((g20 & 255) << 16)) | ((b15 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 113)										int r21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int g21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										int b16 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) );
HXDLIN( 113)										s1 = (((((r21 & 255) << 24) | ((g21 & 255) << 16)) | ((b16 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 113)										int r22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										int g22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int b17 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) );
HXDLIN( 113)										s1 = (((((r22 & 255) << 24) | ((g22 & 255) << 16)) | ((b17 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 113)								if (sourcePremultiplied) {
HXLINE( 113)									bool _hx_tmp5;
HXDLIN( 113)									if (((s1 & 255) != 0)) {
HXLINE( 113)										_hx_tmp5 = ((s1 & 255) != 255);
            									}
            									else {
HXLINE( 113)										_hx_tmp5 = false;
            									}
HXDLIN( 113)									if (_hx_tmp5) {
HXLINE( 113)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s1 & 255)) ));
HXDLIN( 113)										{
HXLINE( 113)											 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int r23 = ( (int)(( ::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int g23 = ( (int)(( ::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											s1 = (((((r23 & 255) << 24) | ((g23 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s1 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 114)							{
HXLINE( 114)								int offset6 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + (((x + disOffsetXFloor) + 1) * 4));
HXDLIN( 114)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 114)										int r24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) );
HXDLIN( 114)										int g24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int b18 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										s2 = (((((r24 & 255) << 24) | ((g24 & 255) << 16)) | ((b18 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 114)										int r25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int g25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										int b19 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) );
HXDLIN( 114)										s2 = (((((r25 & 255) << 24) | ((g25 & 255) << 16)) | ((b19 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 114)										int r26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										int g26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int b20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) );
HXDLIN( 114)										s2 = (((((r26 & 255) << 24) | ((g26 & 255) << 16)) | ((b20 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 114)								if (sourcePremultiplied) {
HXLINE( 114)									bool _hx_tmp6;
HXDLIN( 114)									if (((s2 & 255) != 0)) {
HXLINE( 114)										_hx_tmp6 = ((s2 & 255) != 255);
            									}
            									else {
HXLINE( 114)										_hx_tmp6 = false;
            									}
HXDLIN( 114)									if (_hx_tmp6) {
HXLINE( 114)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s2 & 255)) ));
HXDLIN( 114)										{
HXLINE( 114)											 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int r27 = ( (int)(( ::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int g27 = ( (int)(( ::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											s2 = (((((r27 & 255) << 24) | ((g27 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s2 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 115)							{
HXLINE( 115)								int offset7 = ((sourceView->byteOffset + (sourceView->stride * ((y + disOffsetYFloor) + 1))) + (((x + disOffsetXFloor) + 1) * 4));
HXDLIN( 115)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 115)										int r28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) );
HXDLIN( 115)										int g28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int b21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										s3 = (((((r28 & 255) << 24) | ((g28 & 255) << 16)) | ((b21 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 115)										int r29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int g29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										int b22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) );
HXDLIN( 115)										s3 = (((((r29 & 255) << 24) | ((g29 & 255) << 16)) | ((b22 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 115)										int r30 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										int g30 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int b23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) );
HXDLIN( 115)										s3 = (((((r30 & 255) << 24) | ((g30 & 255) << 16)) | ((b23 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 115)								if (sourcePremultiplied) {
HXLINE( 115)									bool _hx_tmp7;
HXDLIN( 115)									if (((s3 & 255) != 0)) {
HXLINE( 115)										_hx_tmp7 = ((s3 & 255) != 255);
            									}
            									else {
HXLINE( 115)										_hx_tmp7 = false;
            									}
HXDLIN( 115)									if (_hx_tmp7) {
HXLINE( 115)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s3 & 255)) ));
HXDLIN( 115)										{
HXLINE( 115)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int r31 = ( (int)(( ::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int g31 = ( (int)(( ::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											s3 = (((((r31 & 255) << 24) | ((g31 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s3 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 116)							{
HXLINE( 116)								int offset8 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 116)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 116)										int r32 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) );
HXDLIN( 116)										int g32 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int b24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										s4 = (((((r32 & 255) << 24) | ((g32 & 255) << 16)) | ((b24 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 116)										int r33 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int g33 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										int b25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) );
HXDLIN( 116)										s4 = (((((r33 & 255) << 24) | ((g33 & 255) << 16)) | ((b25 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 116)										int r34 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										int g34 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int b26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) );
HXDLIN( 116)										s4 = (((((r34 & 255) << 24) | ((g34 & 255) << 16)) | ((b26 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 116)								if (sourcePremultiplied) {
HXLINE( 116)									bool _hx_tmp8;
HXDLIN( 116)									if (((s4 & 255) != 0)) {
HXLINE( 116)										_hx_tmp8 = ((s4 & 255) != 255);
            									}
            									else {
HXLINE( 116)										_hx_tmp8 = false;
            									}
HXDLIN( 116)									if (_hx_tmp8) {
HXLINE( 116)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s4 & 255)) ));
HXDLIN( 116)										{
HXLINE( 116)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int r35 = ( (int)(( ::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int g35 = ( (int)(( ::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											s4 = (((((r35 & 255) << 24) | ((g35 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s4 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 118)							sourcePixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,((disX * ( (Float)(sourceView->width) )) - ( (Float)(disOffsetXFloor) )),((disY * ( (Float)(sourceView->height) )) - ( (Float)(disOffsetYFloor) )));
            						}
            						else {
HXLINE( 122)							int offset9 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 122)							switch((int)(sourceFormat)){
            								case (int)0: {
HXLINE( 122)									int r36 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) );
HXDLIN( 122)									int g36 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int b27 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r36 & 255) << 24) | ((g36 & 255) << 16)) | ((b27 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 122)									int r37 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int g37 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									int b28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r37 & 255) << 24) | ((g37 & 255) << 16)) | ((b28 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 122)									int r38 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									int g38 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int b29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r38 & 255) << 24) | ((g38 & 255) << 16)) | ((b29 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN( 122)							if (sourcePremultiplied) {
HXLINE( 122)								bool _hx_tmp9;
HXDLIN( 122)								if (((sourcePixel & 255) != 0)) {
HXLINE( 122)									_hx_tmp9 = ((sourcePixel & 255) != 255);
            								}
            								else {
HXLINE( 122)									_hx_tmp9 = false;
            								}
HXDLIN( 122)								if (_hx_tmp9) {
HXLINE( 122)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 122)									{
HXLINE( 122)										 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int r39 = ( (int)(( ::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int g39 = ( (int)(( ::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										sourcePixel = (((((r39 & 255) << 24) | ((g39 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 125)						{
HXLINE( 125)							if (targetPremultiplied) {
HXLINE( 125)								if (((sourcePixel & 255) == 0)) {
HXLINE( 125)									if ((sourcePixel != 0)) {
HXLINE( 125)										sourcePixel = 0;
            									}
            								}
            								else {
HXLINE( 125)									if (((sourcePixel & 255) != 255)) {
HXLINE( 125)										 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 125)										::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this31->buffer->b,(this31->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 125)										sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            									}
            								}
            							}
HXDLIN( 125)							switch((int)(targetFormat)){
            								case (int)0: {
HXLINE( 125)									{
HXLINE( 125)										int val = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val1 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val1);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val2 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val2);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val3 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val3);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 125)									{
HXLINE( 125)										int val4 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val4);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val5 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val5);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val6 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val6);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val7 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val7);
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 125)									{
HXLINE( 125)										int val8 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val8);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val9 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val9);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val10 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val10);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val11 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val11);
            									}
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 129)		target->dirty = true;
HXLINE( 130)		target->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,displaceMap,(void))

int ImageDataUtil_obj::bilinear(int s1,int s2,int s3,int s4,Float su,Float sv){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_139_bilinear)
HXDLIN( 139)		int _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s4,s2,su);
HXDLIN( 139)		return ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(_hx_tmp,::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s1,s3,su),sv);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,bilinear,return )

int ImageDataUtil_obj::lerpRGBA(int v0,int v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_143_lerpRGBA)
HXLINE( 144)		int this1 = 0;
HXDLIN( 144)		int result = this1;
HXLINE( 145)		{
HXLINE( 145)			int value = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,24) & 255)) ),( (Float)((hx::UShr(v1,24) & 255)) ),x));
HXDLIN( 145)			result = (((((value & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 146)		{
HXLINE( 146)			int value1 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,16) & 255)) ),( (Float)((hx::UShr(v1,16) & 255)) ),x));
HXDLIN( 146)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 147)		{
HXLINE( 147)			int value2 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,8) & 255)) ),( (Float)((hx::UShr(v1,8) & 255)) ),x));
HXDLIN( 147)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 148)		{
HXLINE( 148)			int value3 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((v0 & 255)) ),( (Float)((v1 & 255)) ),x));
HXDLIN( 148)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | (value3 & 255));
            		}
HXLINE( 150)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerpRGBA,return )

 ::lime::math::Vector4 ImageDataUtil_obj::lerp4f( ::lime::math::Vector4 v0, ::lime::math::Vector4 v1,Float x){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_155_lerp4f)
HXDLIN( 155)		Float _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->x,v1->x,x);
HXDLIN( 155)		Float _hx_tmp1 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->y,v1->y,x);
HXDLIN( 155)		Float _hx_tmp2 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->z,v1->z,x);
HXDLIN( 155)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->w,v1->w,x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp4f,return )

Float ImageDataUtil_obj::lerp(Float v0,Float v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_160_lerp)
HXDLIN( 160)		return (((((Float)1.0) - x) * v0) + (x * v1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp,return )

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_164_colorTransform)
HXLINE( 165)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 166)		if (hx::IsNull( data )) {
HXLINE( 166)			return;
            		}
HXLINE( 169)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 169)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE( 173)			int format = image->buffer->format;
HXLINE( 174)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 176)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 178)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE( 179)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE( 180)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE( 181)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE( 183)			int row;
HXDLIN( 183)			int offset;
HXDLIN( 183)			int pixel;
HXLINE( 185)			{
HXLINE( 185)				int _g = 0;
HXDLIN( 185)				int _g1 = dataView->height;
HXDLIN( 185)				while((_g < _g1)){
HXLINE( 185)					_g = (_g + 1);
HXDLIN( 185)					int y = (_g - 1);
HXLINE( 187)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 189)					{
HXLINE( 189)						int _g2 = 0;
HXDLIN( 189)						int _g11 = dataView->width;
HXDLIN( 189)						while((_g2 < _g11)){
HXLINE( 189)							_g2 = (_g2 + 1);
HXDLIN( 189)							int x = (_g2 - 1);
HXLINE( 191)							offset = (row + (x * 4));
HXLINE( 193)							{
HXLINE( 193)								switch((int)(format)){
            									case (int)0: {
HXLINE( 193)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 193)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 193)										pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 193)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 193)								if (premultiplied) {
HXLINE( 193)									bool _hx_tmp;
HXDLIN( 193)									if (((pixel & 255) != 0)) {
HXLINE( 193)										_hx_tmp = ((pixel & 255) != 255);
            									}
            									else {
HXLINE( 193)										_hx_tmp = false;
            									}
HXDLIN( 193)									if (_hx_tmp) {
HXLINE( 193)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 193)										{
HXLINE( 193)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 194)							{
HXLINE( 194)								int r4 = ( (int)(( ::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + (hx::UShr(pixel,24) & 255))) & 255)) );
HXDLIN( 194)								int g4 = ( (int)(( ::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + (hx::UShr(pixel,16) & 255))) & 255)) );
HXDLIN( 194)								int b3 = ( (int)(( ::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + (hx::UShr(pixel,8) & 255))) & 255)) );
HXDLIN( 194)								pixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + (pixel & 255))) & 255)) ) & 255));
            							}
HXLINE( 195)							{
HXLINE( 195)								if (premultiplied) {
HXLINE( 195)									if (((pixel & 255) == 0)) {
HXLINE( 195)										if ((pixel != 0)) {
HXLINE( 195)											pixel = 0;
            										}
            									}
            									else {
HXLINE( 195)										if (((pixel & 255) != 255)) {
HXLINE( 195)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 195)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN( 195)											pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 195)								switch((int)(format)){
            									case (int)0: {
HXLINE( 195)										{
HXLINE( 195)											int val = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 195)										{
HXLINE( 195)											int val4 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 195)										{
HXLINE( 195)											int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val11 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 200)		image->dirty = true;
HXLINE( 201)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_206_copyChannel)
HXLINE( 207)		int destIdx;
HXDLIN( 207)		switch((int)(destChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 207)				destIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 207)				destIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				destIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 207)				destIdx = 3;
            			}
            			break;
            		}
HXLINE( 215)		int srcIdx;
HXDLIN( 215)		switch((int)(sourceChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 215)				srcIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				srcIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 215)				srcIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 215)				srcIdx = 3;
            			}
            			break;
            		}
HXLINE( 223)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 224)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 226)		bool _hx_tmp;
HXDLIN( 226)		if (hx::IsNotNull( srcData )) {
HXLINE( 226)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 226)			_hx_tmp = true;
            		}
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 226)			return;
            		}
HXLINE( 229)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 229)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 233)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 234)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 236)			int srcFormat = sourceImage->buffer->format;
HXLINE( 237)			int destFormat = image->buffer->format;
HXLINE( 238)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 239)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 241)			int srcPosition;
HXDLIN( 241)			int destPosition;
HXDLIN( 241)			int srcPixel;
HXDLIN( 241)			int destPixel;
HXDLIN( 241)			int value = 0;
HXLINE( 247)			{
HXLINE( 247)				int _g = 0;
HXDLIN( 247)				int _g1 = destView->height;
HXDLIN( 247)				while((_g < _g1)){
HXLINE( 247)					_g = (_g + 1);
HXDLIN( 247)					int y = (_g - 1);
HXLINE( 249)					srcPosition = (srcView->byteOffset + (srcView->stride * y));
HXLINE( 250)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 252)					{
HXLINE( 252)						int _g2 = 0;
HXDLIN( 252)						int _g11 = destView->width;
HXDLIN( 252)						while((_g2 < _g11)){
HXLINE( 252)							_g2 = (_g2 + 1);
HXDLIN( 252)							int x = (_g2 - 1);
HXLINE( 254)							{
HXLINE( 254)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 254)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 254)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 254)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) );
HXDLIN( 254)										srcPixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 254)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 254)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 254)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 254)										srcPixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 254)								if (srcPremultiplied) {
HXLINE( 254)									bool _hx_tmp1;
HXDLIN( 254)									if (((srcPixel & 255) != 0)) {
HXLINE( 254)										_hx_tmp1 = ((srcPixel & 255) != 255);
            									}
            									else {
HXLINE( 254)										_hx_tmp1 = false;
            									}
HXDLIN( 254)									if (_hx_tmp1) {
HXLINE( 254)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((srcPixel & 255)) ));
HXDLIN( 254)										{
HXLINE( 254)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 254)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 254)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 254)											srcPixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((srcPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 255)							{
HXLINE( 255)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 255)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 255)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 255)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 255)										destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 255)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 255)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 255)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 255)										destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 255)								if (destPremultiplied) {
HXLINE( 255)									bool _hx_tmp2;
HXDLIN( 255)									if (((destPixel & 255) != 0)) {
HXLINE( 255)										_hx_tmp2 = ((destPixel & 255) != 255);
            									}
            									else {
HXLINE( 255)										_hx_tmp2 = false;
            									}
HXDLIN( 255)									if (_hx_tmp2) {
HXLINE( 255)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 255)										{
HXLINE( 255)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 255)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 255)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 255)											destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 257)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 260)									value = (hx::UShr(srcPixel,24) & 255);
            								}
            								break;
            								case (int)1: {
HXLINE( 262)									value = (hx::UShr(srcPixel,16) & 255);
            								}
            								break;
            								case (int)2: {
HXLINE( 264)									value = (hx::UShr(srcPixel,8) & 255);
            								}
            								break;
            								case (int)3: {
HXLINE( 266)									value = (srcPixel & 255);
            								}
            								break;
            							}
HXLINE( 269)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 272)									destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 274)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 276)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)3: {
HXLINE( 278)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value & 255));
            								}
            								break;
            							}
HXLINE( 281)							{
HXLINE( 281)								if (destPremultiplied) {
HXLINE( 281)									if (((destPixel & 255) == 0)) {
HXLINE( 281)										if ((destPixel != 0)) {
HXLINE( 281)											destPixel = 0;
            										}
            									}
            									else {
HXLINE( 281)										if (((destPixel & 255) != 255)) {
HXLINE( 281)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 281)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 281)											destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 281)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 281)										{
HXLINE( 281)											int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val3 = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 281)										{
HXLINE( 281)											int val4 = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 281)										{
HXLINE( 281)											int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            										}
HXDLIN( 281)										{
HXLINE( 281)											int val11 = (destPixel & 255);
HXDLIN( 281)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
HXLINE( 283)							srcPosition = (srcPosition + 4);
HXLINE( 284)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 289)		image->dirty = true;
HXLINE( 290)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_295_copyPixels)
HXLINE( 296)		bool _hx_tmp;
HXDLIN( 296)		bool _hx_tmp1;
HXDLIN( 296)		bool _hx_tmp2;
HXDLIN( 296)		bool _hx_tmp3;
HXDLIN( 296)		bool _hx_tmp4;
HXDLIN( 296)		bool _hx_tmp5;
HXDLIN( 296)		bool _hx_tmp6;
HXDLIN( 296)		bool _hx_tmp7;
HXDLIN( 296)		bool _hx_tmp8;
HXDLIN( 296)		bool _hx_tmp9;
HXDLIN( 296)		bool _hx_tmp10;
HXDLIN( 296)		if ((image->width == sourceImage->width)) {
HXLINE( 296)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 296)			_hx_tmp10 = false;
            		}
HXDLIN( 296)		if (_hx_tmp10) {
HXLINE( 296)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 296)			_hx_tmp9 = false;
            		}
HXDLIN( 296)		if (_hx_tmp9) {
HXLINE( 296)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 296)			_hx_tmp8 = false;
            		}
HXDLIN( 296)		if (_hx_tmp8) {
HXLINE( 296)			_hx_tmp7 = (sourceRect->x == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp7 = false;
            		}
HXDLIN( 296)		if (_hx_tmp7) {
HXLINE( 296)			_hx_tmp6 = (sourceRect->y == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp6 = false;
            		}
HXDLIN( 296)		if (_hx_tmp6) {
HXLINE( 296)			_hx_tmp5 = (destPoint->x == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp5 = false;
            		}
HXDLIN( 296)		if (_hx_tmp5) {
HXLINE( 296)			_hx_tmp4 = (destPoint->y == 0);
            		}
            		else {
HXLINE( 296)			_hx_tmp4 = false;
            		}
HXDLIN( 296)		if (_hx_tmp4) {
HXLINE( 296)			_hx_tmp3 = hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 296)			_hx_tmp3 = false;
            		}
HXDLIN( 296)		if (_hx_tmp3) {
HXLINE( 296)			_hx_tmp2 = hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 296)			_hx_tmp2 = false;
            		}
HXDLIN( 296)		if (_hx_tmp2) {
HXLINE( 296)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 296)			_hx_tmp1 = false;
            		}
HXDLIN( 296)		if (_hx_tmp1) {
HXLINE( 307)			int _hx_tmp11 = image->get_format();
HXLINE( 296)			_hx_tmp = (_hx_tmp11 == sourceImage->get_format());
            		}
            		else {
HXLINE( 296)			_hx_tmp = false;
            		}
HXDLIN( 296)		if (_hx_tmp) {
HXLINE( 309)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 309)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 309)			::cpp::VirtualArray array = null();
HXDLIN( 309)			int offset = 0;
HXDLIN( 309)			bool _hx_tmp12;
HXDLIN( 309)			if (hx::IsNotNull( view )) {
HXLINE( 309)				_hx_tmp12 = hx::IsNull( array );
            			}
            			else {
HXLINE( 309)				_hx_tmp12 = false;
            			}
HXDLIN( 309)			if (_hx_tmp12) {
HXLINE( 309)				_this->buffer->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 309)				bool _hx_tmp13;
HXDLIN( 309)				if (hx::IsNotNull( array )) {
HXLINE( 309)					_hx_tmp13 = hx::IsNull( view );
            				}
            				else {
HXLINE( 309)					_hx_tmp13 = false;
            				}
HXDLIN( 309)				if (_hx_tmp13) {
HXLINE( 309)					_this->copyFromArray(array,offset);
            				}
            				else {
HXLINE( 309)					HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            				}
            			}
            		}
            		else {
HXLINE( 314)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 314)				::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 318)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 319)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 321)				bool _hx_tmp14;
HXDLIN( 321)				if (hx::IsNotNull( sourceData )) {
HXLINE( 321)					_hx_tmp14 = hx::IsNull( destData );
            				}
            				else {
HXLINE( 321)					_hx_tmp14 = true;
            				}
HXDLIN( 321)				if (_hx_tmp14) {
HXLINE( 321)					return;
            				}
HXLINE( 323)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 324)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 325)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 327)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 328)				int destFormat = image->buffer->format;
HXLINE( 330)				int sourcePosition;
HXDLIN( 330)				int destPosition;
HXLINE( 331)				Float sourceAlpha;
HXDLIN( 331)				Float destAlpha;
HXDLIN( 331)				Float oneMinusSourceAlpha;
HXDLIN( 331)				Float blendAlpha;
HXLINE( 332)				int sourcePixel;
HXDLIN( 332)				int destPixel;
HXLINE( 334)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 335)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 336)				int sourceBytesPerPixel = ::Std_obj::_hx_int((( (Float)(sourceImage->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 337)				int destBytesPerPixel = ::Std_obj::_hx_int((( (Float)(image->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 339)				bool useAlphaImage;
HXDLIN( 339)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 339)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 339)					useAlphaImage = false;
            				}
HXLINE( 340)				bool blend;
HXDLIN( 340)				bool blend1;
HXDLIN( 340)				if (!(mergeAlpha)) {
HXLINE( 340)					if (useAlphaImage) {
HXLINE( 340)						blend1 = !(image->get_transparent());
            					}
            					else {
HXLINE( 340)						blend1 = false;
            					}
            				}
            				else {
HXLINE( 340)					blend1 = true;
            				}
HXDLIN( 340)				if (!(blend1)) {
HXLINE( 340)					bool blend2;
HXDLIN( 340)					if (!(mergeAlpha)) {
HXLINE( 340)						blend2 = !(image->get_transparent());
            					}
            					else {
HXLINE( 340)						blend2 = false;
            					}
HXDLIN( 340)					if (blend2) {
HXLINE( 340)						blend = sourceImage->get_transparent();
            					}
            					else {
HXLINE( 340)						blend = false;
            					}
            				}
            				else {
HXLINE( 340)					blend = true;
            				}
HXLINE( 342)				if (!(useAlphaImage)) {
HXLINE( 344)					if (blend) {
HXLINE( 346)						int _g = 0;
HXDLIN( 346)						int _g1 = destView->height;
HXDLIN( 346)						while((_g < _g1)){
HXLINE( 346)							_g = (_g + 1);
HXDLIN( 346)							int y = (_g - 1);
HXLINE( 348)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 349)							destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 351)							{
HXLINE( 351)								int _g2 = 0;
HXDLIN( 351)								int _g11 = destView->width;
HXDLIN( 351)								while((_g2 < _g11)){
HXLINE( 351)									_g2 = (_g2 + 1);
HXDLIN( 351)									int x = (_g2 - 1);
HXLINE( 353)									{
HXLINE( 353)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 353)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 353)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 353)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 353)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 353)												int r1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 353)												int g1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 353)												int b1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 353)												sourcePixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 353)												int r2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 353)												int g2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 353)												int b2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 353)												sourcePixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 353)										if (sourcePremultiplied) {
HXLINE( 353)											bool _hx_tmp15;
HXDLIN( 353)											if (((sourcePixel & 255) != 0)) {
HXLINE( 353)												_hx_tmp15 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 353)												_hx_tmp15 = false;
            											}
HXDLIN( 353)											if (_hx_tmp15) {
HXLINE( 353)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 353)												{
HXLINE( 353)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 353)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 353)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 353)													sourcePixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 354)									{
HXLINE( 354)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 354)												int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 354)												int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 354)												int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 354)												destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 354)												int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 354)												int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 354)												int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 354)												destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 354)												int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 354)												int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 354)												int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 354)												destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 354)										if (destPremultiplied) {
HXLINE( 354)											bool _hx_tmp16;
HXDLIN( 354)											if (((destPixel & 255) != 0)) {
HXLINE( 354)												_hx_tmp16 = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 354)												_hx_tmp16 = false;
            											}
HXDLIN( 354)											if (_hx_tmp16) {
HXLINE( 354)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 354)												{
HXLINE( 354)													 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 354)													 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 354)													 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 354)													destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 356)									sourceAlpha = (( (Float)((sourcePixel & 255)) ) / ((Float)255.0));
HXLINE( 357)									destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 358)									oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 359)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 361)									if ((blendAlpha == 0)) {
HXLINE( 363)										destPixel = 0;
            									}
            									else {
HXLINE( 367)										{
HXLINE( 367)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 367)											int value = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 367)											destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 370)										{
HXLINE( 370)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 370)											int value1 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 370)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 373)										{
HXLINE( 373)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 373)											int value2 = ( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 373)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 376)										{
HXLINE( 376)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 376)											int value3 = ( (int)(( ::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 376)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            										}
            									}
HXLINE( 379)									{
HXLINE( 379)										if (destPremultiplied) {
HXLINE( 379)											if (((destPixel & 255) == 0)) {
HXLINE( 379)												if ((destPixel != 0)) {
HXLINE( 379)													destPixel = 0;
            												}
            											}
            											else {
HXLINE( 379)												if (((destPixel & 255) != 255)) {
HXLINE( 379)													 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 379)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this11->buffer->b,(this11->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 379)													destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 379)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 379)												{
HXLINE( 379)													int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val3 = (destPixel & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 379)												{
HXLINE( 379)													int val4 = (destPixel & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 379)												{
HXLINE( 379)													int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            												}
HXDLIN( 379)												{
HXLINE( 379)													int val11 = (destPixel & 255);
HXDLIN( 379)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 381)									sourcePosition = (sourcePosition + 4);
HXLINE( 382)									destPosition = (destPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 386)						bool _hx_tmp17;
HXDLIN( 386)						bool _hx_tmp18;
HXDLIN( 386)						if ((sourceFormat == destFormat)) {
HXLINE( 386)							_hx_tmp18 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 386)							_hx_tmp18 = false;
            						}
HXDLIN( 386)						if (_hx_tmp18) {
HXLINE( 386)							_hx_tmp17 = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 386)							_hx_tmp17 = false;
            						}
HXDLIN( 386)						if (_hx_tmp17) {
HXLINE( 390)							int _g3 = 0;
HXDLIN( 390)							int _g12 = destView->height;
HXDLIN( 390)							while((_g3 < _g12)){
HXLINE( 390)								_g3 = (_g3 + 1);
HXDLIN( 390)								int y1 = (_g3 - 1);
HXLINE( 392)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y1));
HXLINE( 393)								destPosition = (destView->byteOffset + (destView->stride * y1));
HXLINE( 399)								destData->buffer->blit(destPosition,sourceData->buffer,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 405)							int _g4 = 0;
HXDLIN( 405)							int _g13 = destView->height;
HXDLIN( 405)							while((_g4 < _g13)){
HXLINE( 405)								_g4 = (_g4 + 1);
HXDLIN( 405)								int y2 = (_g4 - 1);
HXLINE( 407)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y2));
HXLINE( 408)								destPosition = (destView->byteOffset + (destView->stride * y2));
HXLINE( 410)								{
HXLINE( 410)									int _g5 = 0;
HXDLIN( 410)									int _g14 = destView->width;
HXDLIN( 410)									while((_g5 < _g14)){
HXLINE( 410)										_g5 = (_g5 + 1);
HXDLIN( 410)										int x1 = (_g5 - 1);
HXLINE( 412)										{
HXLINE( 412)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 412)													int r8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 412)													int g8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 412)													int b6 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 412)													sourcePixel = (((((r8 & 255) << 24) | ((g8 & 255) << 16)) | ((b6 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            												case (int)1: {
HXLINE( 412)													int r9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 412)													int g9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 412)													int b7 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 412)													sourcePixel = (((((r9 & 255) << 24) | ((g9 & 255) << 16)) | ((b7 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            												}
            												break;
            												case (int)2: {
HXLINE( 412)													int r10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 412)													int g10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 412)													int b8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 412)													sourcePixel = (((((r10 & 255) << 24) | ((g10 & 255) << 16)) | ((b8 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            											}
HXDLIN( 412)											if (sourcePremultiplied) {
HXLINE( 412)												bool _hx_tmp19;
HXDLIN( 412)												if (((sourcePixel & 255) != 0)) {
HXLINE( 412)													_hx_tmp19 = ((sourcePixel & 255) != 255);
            												}
            												else {
HXLINE( 412)													_hx_tmp19 = false;
            												}
HXDLIN( 412)												if (_hx_tmp19) {
HXLINE( 412)													::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 412)													{
HXLINE( 412)														 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 412)														int r11 = ( (int)(( ::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 412)														 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 412)														int g11 = ( (int)(( ::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 412)														 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 412)														sourcePixel = (((((r11 & 255) << 24) | ((g11 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
            										}
HXLINE( 413)										{
HXLINE( 413)											if (destPremultiplied) {
HXLINE( 413)												if (((sourcePixel & 255) == 0)) {
HXLINE( 413)													if ((sourcePixel != 0)) {
HXLINE( 413)														sourcePixel = 0;
            													}
            												}
            												else {
HXLINE( 413)													if (((sourcePixel & 255) != 255)) {
HXLINE( 413)														 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 413)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this15->buffer->b,(this15->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 413)														sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 413)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 413)													{
HXLINE( 413)														int val12 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val13 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val13);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val14 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val14);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val15 = (sourcePixel & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val15);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 413)													{
HXLINE( 413)														int val16 = (sourcePixel & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val17 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val17);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val18 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val18);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val19 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val19);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 413)													{
HXLINE( 413)														int val20 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val21 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val21);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val22 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val22);
            													}
HXDLIN( 413)													{
HXLINE( 413)														int val23 = (sourcePixel & 255);
HXDLIN( 413)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val23);
            													}
            												}
            												break;
            											}
            										}
HXLINE( 415)										sourcePosition = (sourcePosition + 4);
HXLINE( 416)										destPosition = (destPosition + 4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 423)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 424)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 425)					int alphaPosition;
HXDLIN( 425)					int alphaPixel;
HXLINE( 427)					Float alphaView;
HXDLIN( 427)					if (hx::IsNull( alphaPoint )) {
HXLINE( 427)						alphaView = ( (Float)(0) );
            					}
            					else {
HXLINE( 427)						alphaView = alphaPoint->x;
            					}
HXDLIN( 427)					Float alphaView1;
HXDLIN( 427)					if (hx::IsNull( alphaPoint )) {
HXLINE( 427)						alphaView1 = ( (Float)(0) );
            					}
            					else {
HXLINE( 427)						alphaView1 = alphaPoint->y;
            					}
HXDLIN( 427)					 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView alphaView2 =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(sourceView->x + alphaView),(sourceView->y + alphaView1),sourceView->width,sourceView->height));
HXLINE( 429)					int _hx_tmp20 = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 429)					int _hx_tmp21 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 429)					destView->clip(_hx_tmp20,_hx_tmp21,alphaView2->width,alphaView2->height);
HXLINE( 431)					if (blend) {
HXLINE( 433)						int _g6 = 0;
HXDLIN( 433)						int _g15 = destView->height;
HXDLIN( 433)						while((_g6 < _g15)){
HXLINE( 433)							_g6 = (_g6 + 1);
HXDLIN( 433)							int y3 = (_g6 - 1);
HXLINE( 435)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y3));
HXLINE( 436)							destPosition = (destView->byteOffset + (destView->stride * y3));
HXLINE( 437)							alphaPosition = (alphaView2->byteOffset + (alphaView2->stride * y3));
HXLINE( 439)							{
HXLINE( 439)								int _g7 = 0;
HXDLIN( 439)								int _g16 = destView->width;
HXDLIN( 439)								while((_g7 < _g16)){
HXLINE( 439)									_g7 = (_g7 + 1);
HXDLIN( 439)									int x2 = (_g7 - 1);
HXLINE( 441)									{
HXLINE( 441)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 441)												int r12 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 441)												int g12 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 441)												int b9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 441)												sourcePixel = (((((r12 & 255) << 24) | ((g12 & 255) << 16)) | ((b9 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 441)												int r13 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 441)												int g13 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 441)												int b10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 441)												sourcePixel = (((((r13 & 255) << 24) | ((g13 & 255) << 16)) | ((b10 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 441)												int r14 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 441)												int g14 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 441)												int b11 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 441)												sourcePixel = (((((r14 & 255) << 24) | ((g14 & 255) << 16)) | ((b11 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 441)										if (sourcePremultiplied) {
HXLINE( 441)											bool _hx_tmp22;
HXDLIN( 441)											if (((sourcePixel & 255) != 0)) {
HXLINE( 441)												_hx_tmp22 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 441)												_hx_tmp22 = false;
            											}
HXDLIN( 441)											if (_hx_tmp22) {
HXLINE( 441)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 441)												{
HXLINE( 441)													 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 441)													int r15 = ( (int)(( ::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 441)													 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 441)													int g15 = ( (int)(( ::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 441)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 441)													sourcePixel = (((((r15 & 255) << 24) | ((g15 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 442)									{
HXLINE( 442)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 442)												int r16 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 442)												int g16 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 442)												int b12 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 442)												destPixel = (((((r16 & 255) << 24) | ((g16 & 255) << 16)) | ((b12 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 442)												int r17 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 442)												int g17 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 442)												int b13 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 442)												destPixel = (((((r17 & 255) << 24) | ((g17 & 255) << 16)) | ((b13 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 442)												int r18 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 442)												int g18 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 442)												int b14 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 442)												destPixel = (((((r18 & 255) << 24) | ((g18 & 255) << 16)) | ((b14 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 442)										if (destPremultiplied) {
HXLINE( 442)											bool _hx_tmp23;
HXDLIN( 442)											if (((destPixel & 255) != 0)) {
HXLINE( 442)												_hx_tmp23 = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 442)												_hx_tmp23 = false;
            											}
HXDLIN( 442)											if (_hx_tmp23) {
HXLINE( 442)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 442)												{
HXLINE( 442)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)													int r19 = ( (int)(( ::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 442)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)													int g19 = ( (int)(( ::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 442)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 442)													destPixel = (((((r19 & 255) << 24) | ((g19 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 443)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 443)											int r20 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 443)											int g20 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 443)											int b15 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 443)											alphaPixel = (((((r20 & 255) << 24) | ((g20 & 255) << 16)) | ((b15 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 443)											int r21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 443)											int g21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 443)											int b16 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 443)											alphaPixel = (((((r21 & 255) << 24) | ((g21 & 255) << 16)) | ((b16 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 443)											int r22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 443)											int g22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 443)											int b17 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 443)											alphaPixel = (((((r22 & 255) << 24) | ((g22 & 255) << 16)) | ((b17 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 445)									sourceAlpha = ((( (Float)((alphaPixel & 255)) ) / ((Float)255.0)) * (( (Float)((sourcePixel & 255)) ) / ((Float)255.0)));
HXLINE( 447)									if ((sourceAlpha > 0)) {
HXLINE( 449)										destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 450)										oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 451)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 453)										{
HXLINE( 453)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 453)											int value4 = ( (int)(( ::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 453)											destPixel = (((((value4 & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 456)										{
HXLINE( 456)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 456)											int value5 = ( (int)(( ::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 456)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value5 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 459)										{
HXLINE( 459)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 459)											int value6 = ( (int)(( ::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 459)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value6 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 462)										{
HXLINE( 462)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 462)											int value7 = ( (int)(( ::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 462)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value7 & 255));
            										}
HXLINE( 464)										{
HXLINE( 464)											if (destPremultiplied) {
HXLINE( 464)												if (((destPixel & 255) == 0)) {
HXLINE( 464)													if ((destPixel != 0)) {
HXLINE( 464)														destPixel = 0;
            													}
            												}
            												else {
HXLINE( 464)													if (((destPixel & 255) != 255)) {
HXLINE( 464)														 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 464)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this26->buffer->b,(this26->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 464)														destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 464)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 464)													{
HXLINE( 464)														int val24 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val25 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val25);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val26 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val26);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val27 = (destPixel & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val27);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 464)													{
HXLINE( 464)														int val28 = (destPixel & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val29 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val29);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val30 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val30);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val31 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val31);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 464)													{
HXLINE( 464)														int val32 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val33 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val33);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val34 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val34);
            													}
HXDLIN( 464)													{
HXLINE( 464)														int val35 = (destPixel & 255);
HXDLIN( 464)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val35);
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 467)									sourcePosition = (sourcePosition + 4);
HXLINE( 468)									destPosition = (destPosition + 4);
HXLINE( 469)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 475)						int _g8 = 0;
HXDLIN( 475)						int _g17 = destView->height;
HXDLIN( 475)						while((_g8 < _g17)){
HXLINE( 475)							_g8 = (_g8 + 1);
HXDLIN( 475)							int y4 = (_g8 - 1);
HXLINE( 477)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y4));
HXLINE( 478)							destPosition = (destView->byteOffset + (destView->stride * y4));
HXLINE( 479)							alphaPosition = (alphaView2->byteOffset + (alphaView2->stride * y4));
HXLINE( 481)							{
HXLINE( 481)								int _g9 = 0;
HXDLIN( 481)								int _g18 = destView->width;
HXDLIN( 481)								while((_g9 < _g18)){
HXLINE( 481)									_g9 = (_g9 + 1);
HXDLIN( 481)									int x3 = (_g9 - 1);
HXLINE( 483)									{
HXLINE( 483)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 483)												int r23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 483)												int g23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 483)												int b18 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 483)												sourcePixel = (((((r23 & 255) << 24) | ((g23 & 255) << 16)) | ((b18 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 483)												int r24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 483)												int g24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 483)												int b19 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 483)												sourcePixel = (((((r24 & 255) << 24) | ((g24 & 255) << 16)) | ((b19 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 483)												int r25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 483)												int g25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 483)												int b20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 483)												sourcePixel = (((((r25 & 255) << 24) | ((g25 & 255) << 16)) | ((b20 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 483)										if (sourcePremultiplied) {
HXLINE( 483)											bool _hx_tmp24;
HXDLIN( 483)											if (((sourcePixel & 255) != 0)) {
HXLINE( 483)												_hx_tmp24 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 483)												_hx_tmp24 = false;
            											}
HXDLIN( 483)											if (_hx_tmp24) {
HXLINE( 483)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 483)												{
HXLINE( 483)													 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 483)													int r26 = ( (int)(( ::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 483)													 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 483)													int g26 = ( (int)(( ::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 483)													 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 483)													sourcePixel = (((((r26 & 255) << 24) | ((g26 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 484)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 484)											int r27 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 484)											int g27 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 484)											int b21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 484)											alphaPixel = (((((r27 & 255) << 24) | ((g27 & 255) << 16)) | ((b21 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 484)											int r28 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 484)											int g28 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 484)											int b22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 484)											alphaPixel = (((((r28 & 255) << 24) | ((g28 & 255) << 16)) | ((b22 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 484)											int r29 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 484)											int g29 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 484)											int b23 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 484)											alphaPixel = (((((r29 & 255) << 24) | ((g29 & 255) << 16)) | ((b23 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 486)									{
HXLINE( 486)										int value8 = ::Math_obj::round((( (Float)((sourcePixel & 255)) ) * (( (Float)((alphaPixel & 255)) ) / ( (Float)(255) ))));
HXDLIN( 486)										sourcePixel = ((((((hx::UShr(sourcePixel,24) & 255) & 255) << 24) | (((hx::UShr(sourcePixel,16) & 255) & 255) << 16)) | (((hx::UShr(sourcePixel,8) & 255) & 255) << 8)) | (value8 & 255));
            									}
HXLINE( 487)									{
HXLINE( 487)										if (destPremultiplied) {
HXLINE( 487)											if (((sourcePixel & 255) == 0)) {
HXLINE( 487)												if ((sourcePixel != 0)) {
HXLINE( 487)													sourcePixel = 0;
            												}
            											}
            											else {
HXLINE( 487)												if (((sourcePixel & 255) != 255)) {
HXLINE( 487)													 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 487)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this30->buffer->b,(this30->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 487)													sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 487)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 487)												{
HXLINE( 487)													int val36 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val36);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val37 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val37);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val38 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val38);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val39 = (sourcePixel & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val39);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 487)												{
HXLINE( 487)													int val40 = (sourcePixel & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val40);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val41 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val41);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val42 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val42);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val43 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val43);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 487)												{
HXLINE( 487)													int val44 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val44);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val45 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val45);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val46 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val46);
            												}
HXDLIN( 487)												{
HXLINE( 487)													int val47 = (sourcePixel & 255);
HXDLIN( 487)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val47);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 489)									sourcePosition = (sourcePosition + 4);
HXLINE( 490)									destPosition = (destPosition + 4);
HXLINE( 491)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 499)		image->dirty = true;
HXLINE( 500)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_504_fillRect)
HXLINE( 505)		int fillColor;
HXLINE( 507)		switch((int)(format)){
            			case (int)1: {
HXLINE( 510)				int argb = color;
HXDLIN( 510)				int this1 = 0;
HXDLIN( 510)				int rgba = this1;
HXDLIN( 510)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN( 510)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 512)				int bgra = color;
HXDLIN( 512)				int this2 = 0;
HXDLIN( 512)				int rgba1 = this2;
HXDLIN( 512)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 512)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 514)				fillColor = color;
            			}
            		}
HXLINE( 517)		if (!(image->get_transparent())) {
HXLINE( 519)			fillColor = ((((((hx::UShr(fillColor,24) & 255) & 255) << 24) | (((hx::UShr(fillColor,16) & 255) & 255) << 16)) | (((hx::UShr(fillColor,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE( 522)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 523)		if (hx::IsNull( data )) {
HXLINE( 523)			return;
            		}
HXLINE( 526)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 526)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_fill_rect(hx::DynamicPtr(image),hx::DynamicPtr(rect),((fillColor >> 16) & 65535),(fillColor & 65535));
            		}
            		else {
HXLINE( 531)			int format1 = image->buffer->format;
HXLINE( 532)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 533)			if (premultiplied) {
HXLINE( 533)				if (((fillColor & 255) == 0)) {
HXLINE( 533)					if ((fillColor != 0)) {
HXLINE( 533)						fillColor = 0;
            					}
            				}
            				else {
HXLINE( 533)					if (((fillColor & 255) != 255)) {
HXLINE( 533)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 533)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((fillColor & 255) * 4)))) );
HXDLIN( 533)						fillColor = ((((((((hx::UShr(fillColor,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(fillColor,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(fillColor,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((fillColor & 255) & 255));
            					}
            				}
            			}
HXLINE( 535)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 536)			int row;
HXLINE( 538)			{
HXLINE( 538)				int _g = 0;
HXDLIN( 538)				int _g1 = dataView->height;
HXDLIN( 538)				while((_g < _g1)){
HXLINE( 538)					_g = (_g + 1);
HXDLIN( 538)					int y = (_g - 1);
HXLINE( 540)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 542)					{
HXLINE( 542)						int _g2 = 0;
HXDLIN( 542)						int _g11 = dataView->width;
HXDLIN( 542)						while((_g2 < _g11)){
HXLINE( 542)							_g2 = (_g2 + 1);
HXDLIN( 542)							int x = (_g2 - 1);
HXLINE( 544)							{
HXLINE( 544)								int offset = (row + (x * 4));
HXDLIN( 544)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 544)										{
HXLINE( 544)											int val = (hx::UShr(fillColor,24) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val1 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val2 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val3 = (fillColor & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 544)										{
HXLINE( 544)											int val4 = (fillColor & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val5 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val6 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val7 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 544)										{
HXLINE( 544)											int val8 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val9 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val10 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN( 544)										{
HXLINE( 544)											int val11 = (fillColor & 255);
HXDLIN( 544)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 549)		image->dirty = true;
HXLINE( 550)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_554_floodFill)
HXLINE( 555)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 556)		if (hx::IsNull( data )) {
HXLINE( 556)			return;
            		}
HXLINE( 558)		if ((format == 1)) {
HXLINE( 558)			color = (((color & 16777215) << 8) | ((color >> 24) & 255));
            		}
HXLINE( 561)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 561)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_flood_fill(hx::DynamicPtr(image),x,y,((color >> 16) & 65535),(color & 65535));
            		}
            		else {
HXLINE( 566)			int format1 = image->buffer->format;
HXLINE( 567)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 569)			int fillColor = color;
HXLINE( 571)			int hitColor;
HXLINE( 572)			{
HXLINE( 572)				int offset = (((y + image->offsetY) * (image->buffer->width * 4)) + ((x + image->offsetX) * 4));
HXDLIN( 572)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 572)						int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 572)						int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 572)						int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 572)						hitColor = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            					}
            					break;
            					case (int)1: {
HXLINE( 572)						int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 572)						int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 572)						int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 572)						hitColor = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            					}
            					break;
            					case (int)2: {
HXLINE( 572)						int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 572)						int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 572)						int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 572)						hitColor = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            					}
            					break;
            				}
HXDLIN( 572)				if (premultiplied) {
HXLINE( 572)					bool _hx_tmp;
HXDLIN( 572)					if (((hitColor & 255) != 0)) {
HXLINE( 572)						_hx_tmp = ((hitColor & 255) != 255);
            					}
            					else {
HXLINE( 572)						_hx_tmp = false;
            					}
HXDLIN( 572)					if (_hx_tmp) {
HXLINE( 572)						::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((hitColor & 255)) ));
HXDLIN( 572)						{
HXLINE( 572)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 572)							int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 572)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 572)							int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 572)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 572)							hitColor = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((hitColor & 255) & 255));
            						}
            					}
            				}
            			}
HXLINE( 574)			if (!(image->get_transparent())) {
HXLINE( 576)				fillColor = ((((((hx::UShr(fillColor,24) & 255) & 255) << 24) | (((hx::UShr(fillColor,16) & 255) & 255) << 16)) | (((hx::UShr(fillColor,8) & 255) & 255) << 8)) | 255);
HXLINE( 577)				hitColor = ((((((hx::UShr(hitColor,24) & 255) & 255) << 24) | (((hx::UShr(hitColor,16) & 255) & 255) << 16)) | (((hx::UShr(hitColor,8) & 255) & 255) << 8)) | 255);
            			}
HXLINE( 580)			if ((fillColor == hitColor)) {
HXLINE( 580)				return;
            			}
HXLINE( 582)			if (premultiplied) {
HXLINE( 582)				if (((fillColor & 255) == 0)) {
HXLINE( 582)					if ((fillColor != 0)) {
HXLINE( 582)						fillColor = 0;
            					}
            				}
            				else {
HXLINE( 582)					if (((fillColor & 255) != 255)) {
HXLINE( 582)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 582)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + ((fillColor & 255) * 4)))) );
HXDLIN( 582)						fillColor = ((((((((hx::UShr(fillColor,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(fillColor,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(fillColor,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((fillColor & 255) & 255));
            					}
            				}
            			}
HXLINE( 584)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_29,4);
HXLINE( 585)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_30,4);
HXLINE( 587)			int minX = -(image->offsetX);
HXLINE( 588)			int minY = -(image->offsetY);
HXLINE( 589)			int maxX = (minX + image->width);
HXLINE( 590)			int maxY = (minY + image->height);
HXLINE( 592)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 593)			queue->push(x);
HXLINE( 594)			queue->push(y);
HXLINE( 596)			 ::Dynamic curPointX;
HXDLIN( 596)			 ::Dynamic curPointY;
HXDLIN( 596)			int nextPointX;
HXDLIN( 596)			int nextPointY;
HXDLIN( 596)			int nextPointOffset;
HXDLIN( 596)			int readColor;
HXLINE( 603)			while((queue->length > 0)){
HXLINE( 605)				curPointY = queue->pop();
HXLINE( 606)				curPointX = queue->pop();
HXLINE( 608)				{
HXLINE( 608)					int _g = 0;
HXDLIN( 608)					while((_g < 4)){
HXLINE( 608)						_g = (_g + 1);
HXDLIN( 608)						int i = (_g - 1);
HXLINE( 610)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 611)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 613)						bool _hx_tmp1;
HXDLIN( 613)						bool _hx_tmp2;
HXDLIN( 613)						bool _hx_tmp3;
HXDLIN( 613)						if ((nextPointX >= minX)) {
HXLINE( 613)							_hx_tmp3 = (nextPointY < minY);
            						}
            						else {
HXLINE( 613)							_hx_tmp3 = true;
            						}
HXDLIN( 613)						if (!(_hx_tmp3)) {
HXLINE( 613)							_hx_tmp2 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 613)							_hx_tmp2 = true;
            						}
HXDLIN( 613)						if (!(_hx_tmp2)) {
HXLINE( 613)							_hx_tmp1 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 613)							_hx_tmp1 = true;
            						}
HXDLIN( 613)						if (_hx_tmp1) {
HXLINE( 615)							continue;
            						}
HXLINE( 618)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * 4);
HXLINE( 619)						{
HXLINE( 619)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 619)									int r4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) );
HXDLIN( 619)									int g4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 619)									int b3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 619)									readColor = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 619)									int r5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 619)									int g5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 619)									int b4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) );
HXDLIN( 619)									readColor = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 619)									int r6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 619)									int g6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 619)									int b5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) );
HXDLIN( 619)									readColor = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN( 619)							if (premultiplied) {
HXLINE( 619)								bool _hx_tmp4;
HXDLIN( 619)								if (((readColor & 255) != 0)) {
HXLINE( 619)									_hx_tmp4 = ((readColor & 255) != 255);
            								}
            								else {
HXLINE( 619)									_hx_tmp4 = false;
            								}
HXDLIN( 619)								if (_hx_tmp4) {
HXLINE( 619)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((readColor & 255)) ));
HXDLIN( 619)									{
HXLINE( 619)										 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 619)										int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 619)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 619)										int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 619)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 619)										readColor = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((readColor & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 621)						if ((readColor == hitColor)) {
HXLINE( 623)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 623)									{
HXLINE( 623)										int val = (hx::UShr(fillColor,24) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val1 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val1);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val2 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val2);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val3 = (fillColor & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val3);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 623)									{
HXLINE( 623)										int val4 = (fillColor & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val5 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val5);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val6 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val6);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val7 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val7);
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 623)									{
HXLINE( 623)										int val8 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val9 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val9);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val10 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val10);
            									}
HXDLIN( 623)									{
HXLINE( 623)										int val11 = (fillColor & 255);
HXDLIN( 623)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val11);
            									}
            								}
            								break;
            							}
HXLINE( 625)							queue->push(nextPointX);
HXLINE( 626)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 632)		image->dirty = true;
HXLINE( 633)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::graphics::Image ImageDataUtil_obj::gaussianBlur( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality,hx::Null< Float >  __o_strength, ::Dynamic color){
            		Float blurX = __o_blurX.Default(4);
            		Float blurY = __o_blurY.Default(4);
            		int quality = __o_quality.Default(1);
            		Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_638_gaussianBlur)
HXLINE( 642)		bool imagePremultiplied = image->get_premultiplied();
HXLINE( 643)		if (imagePremultiplied) {
HXLINE( 643)			image->set_premultiplied(false);
            		}
HXLINE( 653)		::lime::_internal::graphics::StackBlur_obj::blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
HXLINE( 655)		image->dirty = true;
HXLINE( 656)		image->version++;
HXLINE( 658)		if (imagePremultiplied) {
HXLINE( 658)			image->set_premultiplied(true);
            		}
HXLINE( 660)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ImageDataUtil_obj,gaussianBlur,return )

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,bool findColor,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_664_getColorBoundsRect)
HXLINE( 665)		int left = (image->width + 1);
HXLINE( 666)		int right = 0;
HXLINE( 667)		int top = (image->height + 1);
HXLINE( 668)		int bottom = 0;
HXLINE( 670)		int _color;
HXDLIN( 670)		int _mask;
HXLINE( 672)		switch((int)(format)){
            			case (int)1: {
HXLINE( 675)				int argb = color;
HXDLIN( 675)				int this1 = 0;
HXDLIN( 675)				int rgba = this1;
HXDLIN( 675)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN( 675)				_color = rgba;
HXLINE( 676)				int argb1 = mask;
HXDLIN( 676)				int this2 = 0;
HXDLIN( 676)				int rgba1 = this2;
HXDLIN( 676)				rgba1 = ((((((hx::UShr(argb1,16) & 255) & 255) << 24) | (((hx::UShr(argb1,8) & 255) & 255) << 16)) | (((argb1 & 255) & 255) << 8)) | ((hx::UShr(argb1,24) & 255) & 255));
HXDLIN( 676)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 679)				int bgra = color;
HXDLIN( 679)				int this3 = 0;
HXDLIN( 679)				int rgba2 = this3;
HXDLIN( 679)				rgba2 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 679)				_color = rgba2;
HXLINE( 680)				int bgra1 = mask;
HXDLIN( 680)				int this4 = 0;
HXDLIN( 680)				int rgba3 = this4;
HXDLIN( 680)				rgba3 = ((((((hx::UShr(bgra1,8) & 255) & 255) << 24) | (((hx::UShr(bgra1,16) & 255) & 255) << 16)) | (((hx::UShr(bgra1,24) & 255) & 255) << 8)) | ((bgra1 & 255) & 255));
HXDLIN( 680)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 683)				_color = color;
HXLINE( 684)				_mask = mask;
            			}
            		}
HXLINE( 687)		if (!(image->get_transparent())) {
HXLINE( 689)			_color = ((((((hx::UShr(_color,24) & 255) & 255) << 24) | (((hx::UShr(_color,16) & 255) & 255) << 16)) | (((hx::UShr(_color,8) & 255) & 255) << 8)) | 255);
HXLINE( 690)			_mask = ((((((hx::UShr(_mask,24) & 255) & 255) << 24) | (((hx::UShr(_mask,16) & 255) & 255) << 16)) | (((hx::UShr(_mask,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE( 693)		int pixel;
HXDLIN( 693)		bool hit;
HXLINE( 695)		{
HXLINE( 695)			int _g = 0;
HXDLIN( 695)			int _g1 = image->width;
HXDLIN( 695)			while((_g < _g1)){
HXLINE( 695)				_g = (_g + 1);
HXDLIN( 695)				int x = (_g - 1);
HXLINE( 697)				hit = false;
HXLINE( 699)				{
HXLINE( 699)					int _g2 = 0;
HXDLIN( 699)					int _g11 = image->height;
HXDLIN( 699)					while((_g2 < _g11)){
HXLINE( 699)						_g2 = (_g2 + 1);
HXDLIN( 699)						int y = (_g2 - 1);
HXLINE( 701)						pixel = image->getPixel32(x,y,0);
HXLINE( 702)						if (findColor) {
HXLINE( 702)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 702)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 704)						if (hit) {
HXLINE( 706)							if ((x < left)) {
HXLINE( 706)								left = x;
            							}
HXLINE( 707)							goto _hx_goto_33;
            						}
            					}
            					_hx_goto_33:;
            				}
HXLINE( 711)				if (hit) {
HXLINE( 713)					goto _hx_goto_32;
            				}
            			}
            			_hx_goto_32:;
            		}
HXLINE( 717)		int ix;
HXLINE( 719)		{
HXLINE( 719)			int _g21 = 0;
HXDLIN( 719)			int _g3 = image->width;
HXDLIN( 719)			while((_g21 < _g3)){
HXLINE( 719)				_g21 = (_g21 + 1);
HXDLIN( 719)				int x1 = (_g21 - 1);
HXLINE( 721)				ix = ((image->width - 1) - x1);
HXLINE( 722)				hit = false;
HXLINE( 724)				{
HXLINE( 724)					int _g22 = 0;
HXDLIN( 724)					int _g31 = image->height;
HXDLIN( 724)					while((_g22 < _g31)){
HXLINE( 724)						_g22 = (_g22 + 1);
HXDLIN( 724)						int y1 = (_g22 - 1);
HXLINE( 726)						pixel = image->getPixel32(ix,y1,0);
HXLINE( 727)						if (findColor) {
HXLINE( 727)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 727)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 729)						if (hit) {
HXLINE( 731)							if ((ix > right)) {
HXLINE( 731)								right = ix;
            							}
HXLINE( 732)							goto _hx_goto_35;
            						}
            					}
            					_hx_goto_35:;
            				}
HXLINE( 736)				if (hit) {
HXLINE( 738)					goto _hx_goto_34;
            				}
            			}
            			_hx_goto_34:;
            		}
HXLINE( 742)		{
HXLINE( 742)			int _g4 = 0;
HXDLIN( 742)			int _g5 = image->height;
HXDLIN( 742)			while((_g4 < _g5)){
HXLINE( 742)				_g4 = (_g4 + 1);
HXDLIN( 742)				int y2 = (_g4 - 1);
HXLINE( 744)				hit = false;
HXLINE( 746)				{
HXLINE( 746)					int _g41 = 0;
HXDLIN( 746)					int _g51 = image->width;
HXDLIN( 746)					while((_g41 < _g51)){
HXLINE( 746)						_g41 = (_g41 + 1);
HXDLIN( 746)						int x2 = (_g41 - 1);
HXLINE( 748)						pixel = image->getPixel32(x2,y2,0);
HXLINE( 749)						if (findColor) {
HXLINE( 749)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 749)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 751)						if (hit) {
HXLINE( 753)							if ((y2 < top)) {
HXLINE( 753)								top = y2;
            							}
HXLINE( 754)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
HXLINE( 758)				if (hit) {
HXLINE( 760)					goto _hx_goto_36;
            				}
            			}
            			_hx_goto_36:;
            		}
HXLINE( 764)		int iy;
HXLINE( 766)		{
HXLINE( 766)			int _g6 = 0;
HXDLIN( 766)			int _g7 = image->height;
HXDLIN( 766)			while((_g6 < _g7)){
HXLINE( 766)				_g6 = (_g6 + 1);
HXDLIN( 766)				int y3 = (_g6 - 1);
HXLINE( 768)				iy = ((image->height - 1) - y3);
HXLINE( 769)				hit = false;
HXLINE( 771)				{
HXLINE( 771)					int _g61 = 0;
HXDLIN( 771)					int _g71 = image->width;
HXDLIN( 771)					while((_g61 < _g71)){
HXLINE( 771)						_g61 = (_g61 + 1);
HXDLIN( 771)						int x3 = (_g61 - 1);
HXLINE( 773)						pixel = image->getPixel32(x3,iy,0);
HXLINE( 774)						if (findColor) {
HXLINE( 774)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 774)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 776)						if (hit) {
HXLINE( 778)							if ((iy > bottom)) {
HXLINE( 778)								bottom = iy;
            							}
HXLINE( 779)							goto _hx_goto_39;
            						}
            					}
            					_hx_goto_39:;
            				}
HXLINE( 783)				if (hit) {
HXLINE( 785)					goto _hx_goto_38;
            				}
            			}
            			_hx_goto_38:;
            		}
HXLINE( 789)		int w = (right - left);
HXLINE( 790)		int h = (bottom - top);
HXLINE( 792)		if ((w > 0)) {
HXLINE( 792)			w = (w + 1);
            		}
HXLINE( 793)		if ((h > 0)) {
HXLINE( 793)			h = (h + 1);
            		}
HXLINE( 795)		if ((w < 0)) {
HXLINE( 795)			w = 0;
            		}
HXLINE( 796)		if ((h < 0)) {
HXLINE( 796)			h = 0;
            		}
HXLINE( 798)		if ((left == right)) {
HXLINE( 798)			w = 1;
            		}
HXLINE( 799)		if ((top == bottom)) {
HXLINE( 799)			h = 1;
            		}
HXLINE( 801)		if ((left > image->width)) {
HXLINE( 801)			left = 0;
            		}
HXLINE( 802)		if ((top > image->height)) {
HXLINE( 802)			top = 0;
            		}
HXLINE( 804)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_808_getPixel)
HXLINE( 809)		int pixel;
HXLINE( 811)		{
HXLINE( 811)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 811)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN( 811)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 811)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 811)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 811)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 811)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 811)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE( 811)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 811)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 811)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 811)					pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE( 811)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 811)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 811)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 811)					pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN( 811)			if (premultiplied) {
HXLINE( 811)				bool _hx_tmp;
HXDLIN( 811)				if (((pixel & 255) != 0)) {
HXLINE( 811)					_hx_tmp = ((pixel & 255) != 255);
            				}
            				else {
HXLINE( 811)					_hx_tmp = false;
            				}
HXDLIN( 811)				if (_hx_tmp) {
HXLINE( 811)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 811)					{
HXLINE( 811)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 811)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 811)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 811)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 811)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 811)						pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE( 813)		pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 0);
HXLINE( 815)		switch((int)(format)){
            			case (int)1: {
HXLINE( 818)				int this4 = 0;
HXDLIN( 818)				int argb = this4;
HXDLIN( 818)				argb = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 818)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 820)				int this5 = 0;
HXDLIN( 820)				int bgra = this5;
HXDLIN( 820)				bgra = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 820)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 822)				return pixel;
            			}
            		}
HXLINE( 815)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_827_getPixel32)
HXLINE( 828)		int pixel;
HXLINE( 830)		{
HXLINE( 830)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 830)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN( 830)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 830)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 830)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 830)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 830)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 830)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE( 830)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 830)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 830)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 830)					pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE( 830)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 830)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 830)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 830)					pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN( 830)			if (premultiplied) {
HXLINE( 830)				bool _hx_tmp;
HXDLIN( 830)				if (((pixel & 255) != 0)) {
HXLINE( 830)					_hx_tmp = ((pixel & 255) != 255);
            				}
            				else {
HXLINE( 830)					_hx_tmp = false;
            				}
HXDLIN( 830)				if (_hx_tmp) {
HXLINE( 830)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 830)					{
HXLINE( 830)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 830)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 830)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 830)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 830)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 830)						pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE( 833)		switch((int)(format)){
            			case (int)1: {
HXLINE( 836)				int this4 = 0;
HXDLIN( 836)				int argb = this4;
HXDLIN( 836)				argb = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 836)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 838)				int this5 = 0;
HXDLIN( 838)				int bgra = this5;
HXDLIN( 838)				bgra = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 838)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 840)				return pixel;
            			}
            		}
HXLINE( 833)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_845_getPixels)
HXLINE( 846)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 846)			return null();
            		}
HXLINE( 848)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 849)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * 4));
HXLINE( 852)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 852)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 856)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 857)			int sourceFormat = image->buffer->format;
HXLINE( 858)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 860)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 861)			int position;
HXDLIN( 861)			int argb;
HXDLIN( 861)			int bgra;
HXDLIN( 861)			int pixel;
HXLINE( 862)			int destPosition = 0;
HXLINE( 864)			{
HXLINE( 864)				int _g = 0;
HXDLIN( 864)				int _g1 = dataView->height;
HXDLIN( 864)				while((_g < _g1)){
HXLINE( 864)					_g = (_g + 1);
HXDLIN( 864)					int y = (_g - 1);
HXLINE( 866)					position = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 868)					{
HXLINE( 868)						int _g2 = 0;
HXDLIN( 868)						int _g11 = dataView->width;
HXDLIN( 868)						while((_g2 < _g11)){
HXLINE( 868)							_g2 = (_g2 + 1);
HXDLIN( 868)							int x = (_g2 - 1);
HXLINE( 870)							{
HXLINE( 870)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 870)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) );
HXDLIN( 870)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 870)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 870)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 870)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 870)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 870)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) );
HXDLIN( 870)										pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 870)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 870)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 870)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) );
HXDLIN( 870)										pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 870)								if (premultiplied) {
HXLINE( 870)									bool _hx_tmp;
HXDLIN( 870)									if (((pixel & 255) != 0)) {
HXLINE( 870)										_hx_tmp = ((pixel & 255) != 255);
            									}
            									else {
HXLINE( 870)										_hx_tmp = false;
            									}
HXDLIN( 870)									if (_hx_tmp) {
HXLINE( 870)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 870)										{
HXLINE( 870)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 870)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 870)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 870)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 870)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 870)											pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 872)							switch((int)(format)){
            								case (int)1: {
HXLINE( 875)									int this4 = 0;
HXDLIN( 875)									int argb1 = this4;
HXDLIN( 875)									argb1 = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 875)									argb = argb1;
HXLINE( 876)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 878)									int this5 = 0;
HXDLIN( 878)									int bgra1 = this5;
HXDLIN( 878)									bgra1 = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 878)									bgra = bgra1;
HXLINE( 879)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 883)							{
HXLINE( 883)								destPosition = (destPosition + 1);
HXDLIN( 883)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,24) & 255)) );
            							}
HXLINE( 884)							{
HXLINE( 884)								destPosition = (destPosition + 1);
HXDLIN( 884)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,16) & 255)) );
            							}
HXLINE( 885)							{
HXLINE( 885)								destPosition = (destPosition + 1);
HXDLIN( 885)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,8) & 255)) );
            							}
HXLINE( 886)							{
HXLINE( 886)								destPosition = (destPosition + 1);
HXDLIN( 886)								bytes->b[(destPosition - 1)] = ( (unsigned char)((pixel & 255)) );
            							}
HXLINE( 888)							position = (position + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 893)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_898_merge)
HXLINE( 899)		bool _hx_tmp;
HXDLIN( 899)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 899)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 899)			_hx_tmp = true;
            		}
HXDLIN( 899)		if (_hx_tmp) {
HXLINE( 899)			return;
            		}
HXLINE( 902)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 902)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 907)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 908)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 910)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 911)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 912)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 913)			int destFormat = image->buffer->format;
HXLINE( 914)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 915)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 917)			int sourcePosition;
HXDLIN( 917)			int destPosition;
HXDLIN( 917)			int sourcePixel;
HXDLIN( 917)			int destPixel;
HXLINE( 919)			{
HXLINE( 919)				int _g = 0;
HXDLIN( 919)				int _g1 = destView->height;
HXDLIN( 919)				while((_g < _g1)){
HXLINE( 919)					_g = (_g + 1);
HXDLIN( 919)					int y = (_g - 1);
HXLINE( 921)					sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 922)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 924)					{
HXLINE( 924)						int _g2 = 0;
HXDLIN( 924)						int _g11 = destView->width;
HXDLIN( 924)						while((_g2 < _g11)){
HXLINE( 924)							_g2 = (_g2 + 1);
HXDLIN( 924)							int x = (_g2 - 1);
HXLINE( 926)							{
HXLINE( 926)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 926)										int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 926)										int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 926)										int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 926)										sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 926)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 926)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 926)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 926)										sourcePixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 926)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 926)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 926)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 926)										sourcePixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 926)								if (sourcePremultiplied) {
HXLINE( 926)									bool _hx_tmp1;
HXDLIN( 926)									if (((sourcePixel & 255) != 0)) {
HXLINE( 926)										_hx_tmp1 = ((sourcePixel & 255) != 255);
            									}
            									else {
HXLINE( 926)										_hx_tmp1 = false;
            									}
HXDLIN( 926)									if (_hx_tmp1) {
HXLINE( 926)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 926)										{
HXLINE( 926)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 926)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 926)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 926)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 926)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 926)											sourcePixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 927)							{
HXLINE( 927)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 927)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 927)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 927)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 927)										destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 927)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 927)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 927)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 927)										destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 927)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 927)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 927)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 927)										destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 927)								if (destPremultiplied) {
HXLINE( 927)									bool _hx_tmp2;
HXDLIN( 927)									if (((destPixel & 255) != 0)) {
HXLINE( 927)										_hx_tmp2 = ((destPixel & 255) != 255);
            									}
            									else {
HXLINE( 927)										_hx_tmp2 = false;
            									}
HXDLIN( 927)									if (_hx_tmp2) {
HXLINE( 927)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 927)										{
HXLINE( 927)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 927)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 927)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 927)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 927)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 927)											destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 929)							{
HXLINE( 929)								int value = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,24) & 255) * redMultiplier) + ((hx::UShr(destPixel,24) & 255) * (256 - redMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 929)								destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 930)							{
HXLINE( 930)								int value1 = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,16) & 255) * greenMultiplier) + ((hx::UShr(destPixel,16) & 255) * (256 - greenMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 930)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 931)							{
HXLINE( 931)								int value2 = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,8) & 255) * blueMultiplier) + ((hx::UShr(destPixel,8) & 255) * (256 - blueMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 931)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 932)							{
HXLINE( 932)								int value3 = ::Std_obj::_hx_int((( (Float)((((sourcePixel & 255) * alphaMultiplier) + ((destPixel & 255) * (256 - alphaMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 932)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            							}
HXLINE( 934)							{
HXLINE( 934)								if (destPremultiplied) {
HXLINE( 934)									if (((destPixel & 255) == 0)) {
HXLINE( 934)										if ((destPixel != 0)) {
HXLINE( 934)											destPixel = 0;
            										}
            									}
            									else {
HXLINE( 934)										if (((destPixel & 255) != 255)) {
HXLINE( 934)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 934)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 934)											destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 934)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 934)										{
HXLINE( 934)											int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val3 = (destPixel & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 934)										{
HXLINE( 934)											int val4 = (destPixel & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 934)										{
HXLINE( 934)											int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            										}
HXDLIN( 934)										{
HXLINE( 934)											int val11 = (destPixel & 255);
HXDLIN( 934)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
HXLINE( 936)							sourcePosition = (sourcePosition + 4);
HXLINE( 937)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 942)		image->dirty = true;
HXLINE( 943)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_947_multiplyAlpha)
HXLINE( 948)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 949)		bool _hx_tmp;
HXDLIN( 949)		if (hx::IsNotNull( data )) {
HXLINE( 949)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 949)			_hx_tmp = true;
            		}
HXDLIN( 949)		if (_hx_tmp) {
HXLINE( 949)			return;
            		}
HXLINE( 952)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 952)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 956)			int format = image->buffer->format;
HXLINE( 957)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE( 958)			int pixel;
HXLINE( 960)			{
HXLINE( 960)				int _g = 0;
HXDLIN( 960)				int _g1 = length;
HXDLIN( 960)				while((_g < _g1)){
HXLINE( 960)					_g = (_g + 1);
HXDLIN( 960)					int i = (_g - 1);
HXLINE( 962)					{
HXLINE( 962)						int offset = (i * 4);
HXDLIN( 962)						switch((int)(format)){
            							case (int)0: {
HXLINE( 962)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 962)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 962)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 962)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE( 962)								int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 962)								int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 962)								int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 962)								pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE( 962)								int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 962)								int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 962)								int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 962)								pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
            					}
HXLINE( 963)					{
HXLINE( 963)						int offset1 = (i * 4);
HXDLIN( 963)						if (((pixel & 255) == 0)) {
HXLINE( 963)							if ((pixel != 0)) {
HXLINE( 963)								pixel = 0;
            							}
            						}
            						else {
HXLINE( 963)							if (((pixel & 255) != 255)) {
HXLINE( 963)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 963)								::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN( 963)								pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
HXDLIN( 963)						switch((int)(format)){
            							case (int)0: {
HXLINE( 963)								{
HXLINE( 963)									int val = (hx::UShr(pixel,24) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val3 = (pixel & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 963)								{
HXLINE( 963)									int val4 = (pixel & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val5);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val6);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val7);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 963)								{
HXLINE( 963)									int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val9);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val10);
            								}
HXDLIN( 963)								{
HXLINE( 963)									int val11 = (pixel & 255);
HXDLIN( 963)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val11);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 967)		image->buffer->premultiplied = true;
HXLINE( 968)		image->dirty = true;
HXLINE( 969)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_973_resize)
HXLINE( 974)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 975)		bool _hx_tmp;
HXDLIN( 975)		if ((buffer->width == newWidth)) {
HXLINE( 975)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE( 975)			_hx_tmp = false;
            		}
HXDLIN( 975)		if (_hx_tmp) {
HXLINE( 975)			return;
            		}
HXLINE( 976)		 ::Dynamic elements = ((newWidth * newHeight) * 4);
HXDLIN( 976)		 ::haxe::io::Bytes buffer1 = null();
HXDLIN( 976)		::cpp::VirtualArray array = null();
HXDLIN( 976)		 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 976)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 976)		 ::Dynamic len = null();
HXDLIN( 976)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 976)		if (hx::IsNotNull( elements )) {
HXLINE( 976)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            		}
            		else {
HXLINE( 976)			if (hx::IsNotNull( array )) {
HXLINE( 976)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 976)				_this->byteOffset = 0;
HXDLIN( 976)				_this->length = array->get_length();
HXDLIN( 976)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 976)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 976)				_this->buffer = this2;
HXDLIN( 976)				_this->copyFromArray(array,null());
HXDLIN( 976)				this1 = _this;
            			}
            			else {
HXLINE( 976)				if (hx::IsNotNull( vector )) {
HXLINE( 976)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 976)					::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 976)					_this1->byteOffset = 0;
HXDLIN( 976)					_this1->length = array1->get_length();
HXDLIN( 976)					_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 976)					 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 976)					_this1->buffer = this3;
HXDLIN( 976)					_this1->copyFromArray(array1,null());
HXDLIN( 976)					this1 = _this1;
            				}
            				else {
HXLINE( 976)					if (hx::IsNotNull( view )) {
HXLINE( 976)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 976)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 976)						int srcLength = view->length;
HXDLIN( 976)						int srcByteOffset = view->byteOffset;
HXDLIN( 976)						int srcElementSize = view->bytesPerElement;
HXDLIN( 976)						int elementSize = _this2->bytesPerElement;
HXDLIN( 976)						if ((view->type == _this2->type)) {
HXLINE( 976)							int srcLength1 = srcData->length;
HXDLIN( 976)							int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 976)							 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 976)							_this2->buffer = this4;
HXDLIN( 976)							_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE( 976)							HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            						}
HXDLIN( 976)						_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 976)						_this2->byteOffset = 0;
HXDLIN( 976)						_this2->length = srcLength;
HXDLIN( 976)						this1 = _this2;
            					}
            					else {
HXLINE( 976)						if (hx::IsNotNull( buffer1 )) {
HXLINE( 976)							 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 976)							int in_byteOffset = 0;
HXDLIN( 976)							if ((in_byteOffset < 0)) {
HXLINE( 976)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 976)							if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 976)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 976)							int bufferByteLength = buffer1->length;
HXDLIN( 976)							int elementSize1 = _this3->bytesPerElement;
HXDLIN( 976)							int newByteLength = bufferByteLength;
HXDLIN( 976)							if (hx::IsNull( len )) {
HXLINE( 976)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 976)								if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 976)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 976)								if ((newByteLength < 0)) {
HXLINE( 976)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
            							else {
HXLINE( 976)								newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN( 976)								int newRange = (in_byteOffset + newByteLength);
HXDLIN( 976)								if ((newRange > bufferByteLength)) {
HXLINE( 976)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
HXDLIN( 976)							_this3->buffer = buffer1;
HXDLIN( 976)							_this3->byteOffset = in_byteOffset;
HXDLIN( 976)							_this3->byteLength = newByteLength;
HXDLIN( 976)							_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 976)							this1 = _this3;
            						}
            						else {
HXLINE( 976)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 976)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE( 979)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 979)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE( 983)			int imageWidth = image->width;
HXLINE( 984)			int imageHeight = image->height;
HXLINE( 986)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE( 987)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE( 988)			int sourceIndex;
HXDLIN( 988)			int sourceIndexX;
HXDLIN( 988)			int sourceIndexY;
HXDLIN( 988)			int sourceIndexXY;
HXDLIN( 988)			int index;
HXLINE( 993)			int sourceX;
HXDLIN( 993)			int sourceY;
HXLINE( 994)			Float u;
HXDLIN( 994)			Float v;
HXDLIN( 994)			Float uRatio;
HXDLIN( 994)			Float vRatio;
HXDLIN( 994)			Float uOpposite;
HXDLIN( 994)			Float vOpposite;
HXLINE(1001)			{
HXLINE(1001)				int _g = 0;
HXDLIN(1001)				int _g1 = newHeight;
HXDLIN(1001)				while((_g < _g1)){
HXLINE(1001)					_g = (_g + 1);
HXDLIN(1001)					int y = (_g - 1);
HXLINE(1003)					{
HXLINE(1003)						int _g2 = 0;
HXDLIN(1003)						int _g11 = newWidth;
HXDLIN(1003)						while((_g2 < _g11)){
HXLINE(1003)							_g2 = (_g2 + 1);
HXDLIN(1003)							int x = (_g2 - 1);
HXLINE(1007)							u = ((((x + ((Float)0.5)) / ( (Float)(newWidth) )) * ( (Float)(imageWidth) )) - ((Float)0.5));
HXLINE(1008)							v = ((((y + ((Float)0.5)) / ( (Float)(newHeight) )) * ( (Float)(imageHeight) )) - ((Float)0.5));
HXLINE(1010)							sourceX = ::Std_obj::_hx_int(u);
HXLINE(1011)							sourceY = ::Std_obj::_hx_int(v);
HXLINE(1013)							sourceIndex = (((sourceY * imageWidth) + sourceX) * 4);
HXLINE(1014)							if ((sourceX < (imageWidth - 1))) {
HXLINE(1014)								sourceIndexX = (sourceIndex + 4);
            							}
            							else {
HXLINE(1014)								sourceIndexX = sourceIndex;
            							}
HXLINE(1015)							if ((sourceY < (imageHeight - 1))) {
HXLINE(1015)								sourceIndexY = (sourceIndex + (imageWidth * 4));
            							}
            							else {
HXLINE(1015)								sourceIndexY = sourceIndex;
            							}
HXLINE(1016)							if ((sourceIndexX != sourceIndex)) {
HXLINE(1016)								sourceIndexXY = (sourceIndexY + 4);
            							}
            							else {
HXLINE(1016)								sourceIndexXY = sourceIndexY;
            							}
HXLINE(1018)							index = (((y * newWidth) + x) * 4);
HXLINE(1020)							uRatio = (u - ( (Float)(sourceX) ));
HXLINE(1021)							vRatio = (v - ( (Float)(sourceY) ));
HXLINE(1022)							uOpposite = (( (Float)(1) ) - uRatio);
HXLINE(1023)							vOpposite = (( (Float)(1) ) - vRatio);
HXLINE(1025)							{
HXLINE(1025)								int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & 255)) );
HXDLIN(1025)								Float val;
HXDLIN(1025)								if ((_hx_int < 0)) {
HXLINE(1025)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1025)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1025)								int int1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & 255)) );
HXDLIN(1025)								Float val1;
HXDLIN(1025)								if ((int1 < 0)) {
HXLINE(1025)									val1 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1025)									val1 = (int1 + ((Float)0.0));
            								}
HXLINE(1026)								int int2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & 255)) );
HXDLIN(1026)								Float val2;
HXDLIN(1026)								if ((int2 < 0)) {
HXLINE(1026)									val2 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1026)									val2 = (int2 + ((Float)0.0));
            								}
HXDLIN(1026)								int int3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & 255)) );
HXDLIN(1026)								Float val3;
HXDLIN(1026)								if ((int3 < 0)) {
HXLINE(1026)									val3 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1026)									val3 = (int3 + ((Float)0.0));
            								}
HXLINE(1025)								int val4 = ::Std_obj::_hx_int(((((val * uOpposite) + (val1 * uRatio)) * vOpposite) + (((val2 * uOpposite) + (val3 * uRatio)) * vRatio)));
HXDLIN(1025)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val4);
            							}
HXLINE(1027)							{
HXLINE(1027)								int int4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 1))) & 255)) );
HXDLIN(1027)								Float val5;
HXDLIN(1027)								if ((int4 < 0)) {
HXLINE(1027)									val5 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1027)									val5 = (int4 + ((Float)0.0));
            								}
HXDLIN(1027)								int int5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 1))) & 255)) );
HXDLIN(1027)								Float val6;
HXDLIN(1027)								if ((int5 < 0)) {
HXLINE(1027)									val6 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1027)									val6 = (int5 + ((Float)0.0));
            								}
HXLINE(1028)								int int6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 1))) & 255)) );
HXDLIN(1028)								Float val7;
HXDLIN(1028)								if ((int6 < 0)) {
HXLINE(1028)									val7 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1028)									val7 = (int6 + ((Float)0.0));
            								}
HXDLIN(1028)								int int7 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 1))) & 255)) );
HXDLIN(1028)								Float val8;
HXDLIN(1028)								if ((int7 < 0)) {
HXLINE(1028)									val8 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1028)									val8 = (int7 + ((Float)0.0));
            								}
HXLINE(1027)								int val9 = ::Std_obj::_hx_int(((((val5 * uOpposite) + (val6 * uRatio)) * vOpposite) + (((val7 * uOpposite) + (val8 * uRatio)) * vRatio)));
HXDLIN(1027)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 1)),val9);
            							}
HXLINE(1029)							{
HXLINE(1029)								int int8 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 2))) & 255)) );
HXDLIN(1029)								Float val10;
HXDLIN(1029)								if ((int8 < 0)) {
HXLINE(1029)									val10 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1029)									val10 = (int8 + ((Float)0.0));
            								}
HXDLIN(1029)								int int9 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 2))) & 255)) );
HXDLIN(1029)								Float val11;
HXDLIN(1029)								if ((int9 < 0)) {
HXLINE(1029)									val11 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1029)									val11 = (int9 + ((Float)0.0));
            								}
HXLINE(1030)								int int10 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 2))) & 255)) );
HXDLIN(1030)								Float val12;
HXDLIN(1030)								if ((int10 < 0)) {
HXLINE(1030)									val12 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1030)									val12 = (int10 + ((Float)0.0));
            								}
HXDLIN(1030)								int int11 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 2))) & 255)) );
HXDLIN(1030)								Float val13;
HXDLIN(1030)								if ((int11 < 0)) {
HXLINE(1030)									val13 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1030)									val13 = (int11 + ((Float)0.0));
            								}
HXLINE(1029)								int val14 = ::Std_obj::_hx_int(((((val10 * uOpposite) + (val11 * uRatio)) * vOpposite) + (((val12 * uOpposite) + (val13 * uRatio)) * vRatio)));
HXDLIN(1029)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 2)),val14);
            							}
HXLINE(1034)							bool _hx_tmp1;
HXDLIN(1034)							bool _hx_tmp2;
HXDLIN(1034)							if ((( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 3))) & 255)) ) != 0)) {
HXLINE(1034)								_hx_tmp2 = (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 3))) & 255)) ) == 0);
            							}
            							else {
HXLINE(1034)								_hx_tmp2 = true;
            							}
HXDLIN(1034)							if (!(_hx_tmp2)) {
HXLINE(1034)								_hx_tmp1 = (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 3))) & 255)) ) == 0);
            							}
            							else {
HXLINE(1034)								_hx_tmp1 = true;
            							}
HXDLIN(1034)							if (_hx_tmp1) {
HXLINE(1036)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),0);
            							}
            							else {
HXLINE(1040)								int val15 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 3))) & 255)) );
HXDLIN(1040)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),val15);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1046)		buffer->data = newBuffer->data;
HXLINE(1047)		buffer->width = newWidth;
HXLINE(1048)		buffer->height = newHeight;
HXLINE(1057)		image->dirty = true;
HXLINE(1058)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1062_resizeBuffer)
HXLINE(1063)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1064)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1065)		 ::Dynamic elements = ((newWidth * newHeight) * 4);
HXDLIN(1065)		 ::haxe::io::Bytes buffer1 = null();
HXDLIN(1065)		::cpp::VirtualArray array = null();
HXDLIN(1065)		 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1065)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1065)		 ::Dynamic len = null();
HXDLIN(1065)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1065)		if (hx::IsNotNull( elements )) {
HXLINE(1065)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            		}
            		else {
HXLINE(1065)			if (hx::IsNotNull( array )) {
HXLINE(1065)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1065)				_this->byteOffset = 0;
HXDLIN(1065)				_this->length = array->get_length();
HXDLIN(1065)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(1065)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(1065)				_this->buffer = this2;
HXDLIN(1065)				_this->copyFromArray(array,null());
HXDLIN(1065)				this1 = _this;
            			}
            			else {
HXLINE(1065)				if (hx::IsNotNull( vector )) {
HXLINE(1065)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1065)					::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN(1065)					_this1->byteOffset = 0;
HXDLIN(1065)					_this1->length = array1->get_length();
HXDLIN(1065)					_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN(1065)					 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN(1065)					_this1->buffer = this3;
HXDLIN(1065)					_this1->copyFromArray(array1,null());
HXDLIN(1065)					this1 = _this1;
            				}
            				else {
HXLINE(1065)					if (hx::IsNotNull( view )) {
HXLINE(1065)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1065)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(1065)						int srcLength = view->length;
HXDLIN(1065)						int srcByteOffset = view->byteOffset;
HXDLIN(1065)						int srcElementSize = view->bytesPerElement;
HXDLIN(1065)						int elementSize = _this2->bytesPerElement;
HXDLIN(1065)						if ((view->type == _this2->type)) {
HXLINE(1065)							int srcLength1 = srcData->length;
HXDLIN(1065)							int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN(1065)							 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(1065)							_this2->buffer = this4;
HXDLIN(1065)							_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE(1065)							HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            						}
HXDLIN(1065)						_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN(1065)						_this2->byteOffset = 0;
HXDLIN(1065)						_this2->length = srcLength;
HXDLIN(1065)						this1 = _this2;
            					}
            					else {
HXLINE(1065)						if (hx::IsNotNull( buffer1 )) {
HXLINE(1065)							 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1065)							int in_byteOffset = 0;
HXDLIN(1065)							if ((in_byteOffset < 0)) {
HXLINE(1065)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN(1065)							if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE(1065)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN(1065)							int bufferByteLength = buffer1->length;
HXDLIN(1065)							int elementSize1 = _this3->bytesPerElement;
HXDLIN(1065)							int newByteLength = bufferByteLength;
HXDLIN(1065)							if (hx::IsNull( len )) {
HXLINE(1065)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1065)								if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE(1065)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1065)								if ((newByteLength < 0)) {
HXLINE(1065)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
            							else {
HXLINE(1065)								newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN(1065)								int newRange = (in_byteOffset + newByteLength);
HXDLIN(1065)								if ((newRange > bufferByteLength)) {
HXLINE(1065)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
HXDLIN(1065)							_this3->buffer = buffer1;
HXDLIN(1065)							_this3->byteOffset = in_byteOffset;
HXDLIN(1065)							_this3->byteLength = newByteLength;
HXDLIN(1065)							_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN(1065)							this1 = _this3;
            						}
            						else {
HXLINE(1065)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
            					}
            				}
            			}
            		}
HXDLIN(1065)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE(1066)		int sourceIndex;
HXDLIN(1066)		int index;
HXLINE(1068)		{
HXLINE(1068)			int _g = 0;
HXDLIN(1068)			int _g1 = buffer->height;
HXDLIN(1068)			while((_g < _g1)){
HXLINE(1068)				_g = (_g + 1);
HXDLIN(1068)				int y = (_g - 1);
HXLINE(1070)				{
HXLINE(1070)					int _g2 = 0;
HXDLIN(1070)					int _g11 = buffer->width;
HXDLIN(1070)					while((_g2 < _g11)){
HXLINE(1070)						_g2 = (_g2 + 1);
HXDLIN(1070)						int x = (_g2 - 1);
HXLINE(1072)						sourceIndex = (((y * buffer->width) + x) * 4);
HXLINE(1073)						index = (((y * newWidth) + x) * 4);
HXLINE(1075)						{
HXLINE(1075)							int val = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & 255)) );
HXDLIN(1075)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE(1076)						{
HXLINE(1076)							int val1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 1))) & 255)) );
HXDLIN(1076)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 1)),val1);
            						}
HXLINE(1077)						{
HXLINE(1077)							int val2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 2))) & 255)) );
HXDLIN(1077)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 2)),val2);
            						}
HXLINE(1078)						{
HXLINE(1078)							int val3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 3))) & 255)) );
HXDLIN(1078)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE(1082)		buffer->data = newData;
HXLINE(1083)		buffer->width = newWidth;
HXLINE(1084)		buffer->height = newHeight;
HXLINE(1093)		image->dirty = true;
HXLINE(1094)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1098_setFormat)
HXLINE(1099)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1100)		if (hx::IsNull( data )) {
HXLINE(1100)			return;
            		}
HXLINE(1103)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1103)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1107)			int index;
HXDLIN(1107)			 ::Dynamic a16;
HXLINE(1108)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1109)			int r1;
HXDLIN(1109)			int g1;
HXDLIN(1109)			int b1;
HXDLIN(1109)			int a1;
HXDLIN(1109)			int r2;
HXDLIN(1109)			int g2;
HXDLIN(1109)			int b2;
HXDLIN(1109)			int a2;
HXLINE(1110)			 ::Dynamic r;
HXDLIN(1110)			 ::Dynamic g;
HXDLIN(1110)			 ::Dynamic b;
HXDLIN(1110)			 ::Dynamic a;
HXLINE(1112)			switch((int)(image->get_format())){
            				case (int)0: {
HXLINE(1115)					r1 = 0;
HXLINE(1116)					g1 = 1;
HXLINE(1117)					b1 = 2;
HXLINE(1118)					a1 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1121)					r1 = 1;
HXLINE(1122)					g1 = 2;
HXLINE(1123)					b1 = 3;
HXLINE(1124)					a1 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1127)					r1 = 2;
HXLINE(1128)					g1 = 1;
HXLINE(1129)					b1 = 0;
HXLINE(1130)					a1 = 3;
            				}
            				break;
            			}
HXLINE(1133)			switch((int)(format)){
            				case (int)0: {
HXLINE(1136)					r2 = 0;
HXLINE(1137)					g2 = 1;
HXLINE(1138)					b2 = 2;
HXLINE(1139)					a2 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1142)					r2 = 1;
HXLINE(1143)					g2 = 2;
HXLINE(1144)					b2 = 3;
HXLINE(1145)					a2 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1148)					r2 = 2;
HXLINE(1149)					g2 = 1;
HXLINE(1150)					b2 = 0;
HXLINE(1151)					a2 = 3;
            				}
            				break;
            			}
HXLINE(1154)			{
HXLINE(1154)				int _g1 = 0;
HXDLIN(1154)				int _g2 = length;
HXDLIN(1154)				while((_g1 < _g2)){
HXLINE(1154)					_g1 = (_g1 + 1);
HXDLIN(1154)					int i = (_g1 - 1);
HXLINE(1156)					index = (i * 4);
HXLINE(1158)					r = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + r1))) & 255);
HXLINE(1159)					g = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + g1))) & 255);
HXLINE(1160)					b = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + b1))) & 255);
HXLINE(1161)					a = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + a1))) & 255);
HXLINE(1163)					{
HXLINE(1163)						int val = ( (int)(r) );
HXDLIN(1163)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + r2)),val);
            					}
HXLINE(1164)					{
HXLINE(1164)						int val1 = ( (int)(g) );
HXDLIN(1164)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + g2)),val1);
            					}
HXLINE(1165)					{
HXLINE(1165)						int val2 = ( (int)(b) );
HXDLIN(1165)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + b2)),val2);
            					}
HXLINE(1166)					{
HXLINE(1166)						int val3 = ( (int)(a) );
HXDLIN(1166)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + a2)),val3);
            					}
            				}
            			}
            		}
HXLINE(1170)		image->buffer->format = format;
HXLINE(1171)		image->dirty = true;
HXLINE(1172)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1176_setPixel)
HXLINE(1177)		int pixel;
HXLINE(1179)		switch((int)(format)){
            			case (int)1: {
HXLINE(1182)				int argb = color;
HXDLIN(1182)				int this1 = 0;
HXDLIN(1182)				int rgba = this1;
HXDLIN(1182)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1182)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1184)				int bgra = color;
HXDLIN(1184)				int this2 = 0;
HXDLIN(1184)				int rgba1 = this2;
HXDLIN(1184)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1184)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1186)				pixel = color;
            			}
            		}
HXLINE(1191)		int this3 = 0;
HXDLIN(1191)		int source = this3;
HXLINE(1192)		{
HXLINE(1192)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1192)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1192)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1192)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1192)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1192)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1192)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1192)					source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE(1192)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1192)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1192)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1192)					source = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE(1192)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1192)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1192)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1192)					source = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN(1192)			if (premultiplied) {
HXLINE(1192)				bool _hx_tmp;
HXDLIN(1192)				if (((source & 255) != 0)) {
HXLINE(1192)					_hx_tmp = ((source & 255) != 255);
            				}
            				else {
HXLINE(1192)					_hx_tmp = false;
            				}
HXDLIN(1192)				if (_hx_tmp) {
HXLINE(1192)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((source & 255)) ));
HXDLIN(1192)					{
HXLINE(1192)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1192)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1192)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1192)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1192)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1192)						source = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((source & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE(1195)		{
HXLINE(1195)			int value = (source & 255);
HXDLIN(1195)			pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | (value & 255));
            		}
HXLINE(1196)		{
HXLINE(1196)			 ::lime::utils::ArrayBufferView data1 = image->buffer->data;
HXDLIN(1196)			int offset1 = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1196)			int format1 = image->buffer->format;
HXDLIN(1196)			if (image->buffer->premultiplied) {
HXLINE(1196)				if (((pixel & 255) == 0)) {
HXLINE(1196)					if ((pixel != 0)) {
HXLINE(1196)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1196)					if (((pixel & 255) != 255)) {
HXLINE(1196)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1196)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1196)						pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1196)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1196)					{
HXLINE(1196)						int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val1);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val2);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val3 = (pixel & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1196)					{
HXLINE(1196)						int val4 = (pixel & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val4);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val5);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val6);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val7);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1196)					{
HXLINE(1196)						int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val8);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val9);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val10);
            					}
HXDLIN(1196)					{
HXLINE(1196)						int val11 = (pixel & 255);
HXDLIN(1196)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val11);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1199)		image->dirty = true;
HXLINE(1200)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1204_setPixel32)
HXLINE(1205)		int pixel;
HXLINE(1207)		switch((int)(format)){
            			case (int)1: {
HXLINE(1210)				int argb = color;
HXDLIN(1210)				int this1 = 0;
HXDLIN(1210)				int rgba = this1;
HXDLIN(1210)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1210)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1212)				int bgra = color;
HXDLIN(1212)				int this2 = 0;
HXDLIN(1212)				int rgba1 = this2;
HXDLIN(1212)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1212)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1214)				pixel = color;
            			}
            		}
HXLINE(1217)		if (!(image->get_transparent())) {
HXLINE(1217)			pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE(1218)		{
HXLINE(1218)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1218)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1218)			int format1 = image->buffer->format;
HXDLIN(1218)			if (image->buffer->premultiplied) {
HXLINE(1218)				if (((pixel & 255) == 0)) {
HXLINE(1218)					if ((pixel != 0)) {
HXLINE(1218)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1218)					if (((pixel & 255) != 255)) {
HXLINE(1218)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1218)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1218)						pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1218)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1218)					{
HXLINE(1218)						int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val3 = (pixel & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1218)					{
HXLINE(1218)						int val4 = (pixel & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1218)					{
HXLINE(1218)						int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            					}
HXDLIN(1218)					{
HXLINE(1218)						int val11 = (pixel & 255);
HXDLIN(1218)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1221)		image->dirty = true;
HXLINE(1222)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1226_setPixels)
HXLINE(1227)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1227)			return;
            		}
HXLINE(1230)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1230)			int _hx_tmp;
HXDLIN(1230)			if (hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1230)				_hx_tmp = 1;
            			}
            			else {
HXLINE(1230)				_hx_tmp = 0;
            			}
HXDLIN(1230)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1234)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1235)			int sourceFormat = image->buffer->format;
HXLINE(1236)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1237)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1238)			int row;
HXDLIN(1238)			int color;
HXDLIN(1238)			int pixel;
HXLINE(1239)			bool transparent = image->get_transparent();
HXLINE(1240)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1241)			int dataPosition = bytePointer->offset;
HXLINE(1242)			bool littleEndian = hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1244)			{
HXLINE(1244)				int _g = 0;
HXDLIN(1244)				int _g1 = dataView->height;
HXDLIN(1244)				while((_g < _g1)){
HXLINE(1244)					_g = (_g + 1);
HXDLIN(1244)					int y = (_g - 1);
HXLINE(1246)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE(1248)					{
HXLINE(1248)						int _g2 = 0;
HXDLIN(1248)						int _g11 = dataView->width;
HXDLIN(1248)						while((_g2 < _g11)){
HXLINE(1248)							_g2 = (_g2 + 1);
HXDLIN(1248)							int x = (_g2 - 1);
HXLINE(1250)							if (littleEndian) {
HXLINE(1252)								color = (((( (int)(bytes->b->__get(dataPosition)) ) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 16)) | (( (int)(bytes->b->__get((dataPosition + 3))) ) << 24));
            							}
            							else {
HXLINE(1256)								color = (((( (int)(bytes->b->__get((dataPosition + 3))) ) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 16)) | (( (int)(bytes->b->__get(dataPosition)) ) << 24));
            							}
HXLINE(1260)							dataPosition = (dataPosition + 4);
HXLINE(1262)							switch((int)(format)){
            								case (int)1: {
HXLINE(1265)									int argb = color;
HXDLIN(1265)									int this1 = 0;
HXDLIN(1265)									int rgba = this1;
HXDLIN(1265)									rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1265)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1267)									int bgra = color;
HXDLIN(1267)									int this2 = 0;
HXDLIN(1267)									int rgba1 = this2;
HXDLIN(1267)									rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1267)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1269)									pixel = color;
            								}
            							}
HXLINE(1272)							if (!(transparent)) {
HXLINE(1272)								pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            							}
HXLINE(1273)							{
HXLINE(1273)								int offset = (row + (x * 4));
HXDLIN(1273)								if (premultiplied) {
HXLINE(1273)									if (((pixel & 255) == 0)) {
HXLINE(1273)										if ((pixel != 0)) {
HXLINE(1273)											pixel = 0;
            										}
            									}
            									else {
HXLINE(1273)										if (((pixel & 255) != 255)) {
HXLINE(1273)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1273)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1273)											pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN(1273)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1273)										{
HXLINE(1273)											int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val3 = (pixel & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1273)										{
HXLINE(1273)											int val4 = (pixel & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1273)										{
HXLINE(1273)											int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN(1273)										{
HXLINE(1273)											int val11 = (pixel & 255);
HXDLIN(1273)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1278)		image->dirty = true;
HXLINE(1279)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1284_threshold)
HXLINE(1285)		int _color;
HXDLIN(1285)		int _mask;
HXDLIN(1285)		int _threshold;
HXLINE(1287)		switch((int)(format)){
            			case (int)1: {
HXLINE(1290)				int argb = color;
HXDLIN(1290)				int this1 = 0;
HXDLIN(1290)				int rgba = this1;
HXDLIN(1290)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1290)				_color = rgba;
HXLINE(1291)				int argb1 = mask;
HXDLIN(1291)				int this2 = 0;
HXDLIN(1291)				int rgba1 = this2;
HXDLIN(1291)				rgba1 = ((((((hx::UShr(argb1,16) & 255) & 255) << 24) | (((hx::UShr(argb1,8) & 255) & 255) << 16)) | (((argb1 & 255) & 255) << 8)) | ((hx::UShr(argb1,24) & 255) & 255));
HXDLIN(1291)				_mask = rgba1;
HXLINE(1292)				int argb2 = threshold;
HXDLIN(1292)				int this3 = 0;
HXDLIN(1292)				int rgba2 = this3;
HXDLIN(1292)				rgba2 = ((((((hx::UShr(argb2,16) & 255) & 255) << 24) | (((hx::UShr(argb2,8) & 255) & 255) << 16)) | (((argb2 & 255) & 255) << 8)) | ((hx::UShr(argb2,24) & 255) & 255));
HXDLIN(1292)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1295)				int bgra = color;
HXDLIN(1295)				int this4 = 0;
HXDLIN(1295)				int rgba3 = this4;
HXDLIN(1295)				rgba3 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1295)				_color = rgba3;
HXLINE(1296)				int bgra1 = mask;
HXDLIN(1296)				int this5 = 0;
HXDLIN(1296)				int rgba4 = this5;
HXDLIN(1296)				rgba4 = ((((((hx::UShr(bgra1,8) & 255) & 255) << 24) | (((hx::UShr(bgra1,16) & 255) & 255) << 16)) | (((hx::UShr(bgra1,24) & 255) & 255) << 8)) | ((bgra1 & 255) & 255));
HXDLIN(1296)				_mask = rgba4;
HXLINE(1297)				int bgra2 = threshold;
HXDLIN(1297)				int this6 = 0;
HXDLIN(1297)				int rgba5 = this6;
HXDLIN(1297)				rgba5 = ((((((hx::UShr(bgra2,8) & 255) & 255) << 24) | (((hx::UShr(bgra2,16) & 255) & 255) << 16)) | (((hx::UShr(bgra2,24) & 255) & 255) << 8)) | ((bgra2 & 255) & 255));
HXDLIN(1297)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1300)				_color = color;
HXLINE(1301)				_mask = mask;
HXLINE(1302)				_threshold = threshold;
            			}
            		}
HXLINE(1305)		int _operation;
HXDLIN(1305)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1305)			_operation = 0;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1305)			_operation = 2;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1305)			_operation = 3;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1305)			_operation = 1;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1305)			_operation = 4;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1305)			_operation = 5;
HXDLIN(1305)			goto _hx_goto_64;
            		}
            		/* default */{
HXLINE(1305)			_operation = -1;
            		}
            		_hx_goto_64:;
HXLINE(1316)		if ((_operation == -1)) {
HXLINE(1316)			return 0;
            		}
HXLINE(1318)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1319)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1321)		bool _hx_tmp;
HXDLIN(1321)		if (hx::IsNotNull( srcData )) {
HXLINE(1321)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1321)			_hx_tmp = true;
            		}
HXDLIN(1321)		if (_hx_tmp) {
HXLINE(1321)			return 0;
            		}
HXLINE(1323)		int hits = 0;
HXLINE(1326)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1326)			hits = ::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_threshold(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),_operation,((_threshold >> 16) & 65535),(_threshold & 65535),((_color >> 16) & 65535),(_color & 65535),((_mask >> 16) & 65535),(_mask & 65535),copySource);
            		}
            		else {
HXLINE(1331)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1332)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1334)			int srcFormat = sourceImage->buffer->format;
HXLINE(1335)			int destFormat = image->buffer->format;
HXLINE(1336)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1337)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1339)			int srcPosition;
HXDLIN(1339)			int destPosition;
HXDLIN(1339)			int srcPixel;
HXDLIN(1339)			int destPixel;
HXDLIN(1339)			int pixelMask;
HXDLIN(1339)			bool test;
HXDLIN(1339)			int value;
HXLINE(1347)			{
HXLINE(1347)				int _g = 0;
HXDLIN(1347)				int _g1 = destView->height;
HXDLIN(1347)				while((_g < _g1)){
HXLINE(1347)					_g = (_g + 1);
HXDLIN(1347)					int y = (_g - 1);
HXLINE(1349)					srcPosition = (srcView->byteOffset + (srcView->stride * y));
HXLINE(1350)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE(1352)					{
HXLINE(1352)						int _g2 = 0;
HXDLIN(1352)						int _g11 = destView->width;
HXDLIN(1352)						while((_g2 < _g11)){
HXLINE(1352)							_g2 = (_g2 + 1);
HXDLIN(1352)							int x = (_g2 - 1);
HXLINE(1354)							{
HXLINE(1354)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1354)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN(1354)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1354)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1354)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(1354)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1354)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1354)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) );
HXDLIN(1354)										srcPixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(1354)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1354)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1354)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN(1354)										srcPixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(1354)								if (srcPremultiplied) {
HXLINE(1354)									bool _hx_tmp1;
HXDLIN(1354)									if (((srcPixel & 255) != 0)) {
HXLINE(1354)										_hx_tmp1 = ((srcPixel & 255) != 255);
            									}
            									else {
HXLINE(1354)										_hx_tmp1 = false;
            									}
HXDLIN(1354)									if (_hx_tmp1) {
HXLINE(1354)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((srcPixel & 255)) ));
HXDLIN(1354)										{
HXLINE(1354)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1354)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1354)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1354)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1354)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1354)											srcPixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((srcPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(1356)							pixelMask = (srcPixel & _mask);
HXLINE(1358)							int tmp1 = (hx::UShr(pixelMask,24) & 255);
HXDLIN(1358)							int tmp2 = (hx::UShr(_threshold,24) & 255);
HXDLIN(1358)							if ((tmp1 != tmp2)) {
HXLINE(1358)								bool aNeg = (tmp1 < 0);
HXDLIN(1358)								bool bNeg = (tmp2 < 0);
HXDLIN(1358)								bool value1;
HXDLIN(1358)								if ((aNeg != bNeg)) {
HXLINE(1358)									value1 = aNeg;
            								}
            								else {
HXLINE(1358)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1358)								if (value1) {
HXLINE(1358)									value = 1;
            								}
            								else {
HXLINE(1358)									value = -1;
            								}
            							}
            							else {
HXLINE(1358)								tmp1 = (hx::UShr(pixelMask,16) & 255);
HXDLIN(1358)								tmp2 = (hx::UShr(_threshold,16) & 255);
HXDLIN(1358)								if ((tmp1 != tmp2)) {
HXLINE(1358)									bool aNeg1 = (tmp1 < 0);
HXDLIN(1358)									bool bNeg1 = (tmp2 < 0);
HXDLIN(1358)									bool value2;
HXDLIN(1358)									if ((aNeg1 != bNeg1)) {
HXLINE(1358)										value2 = aNeg1;
            									}
            									else {
HXLINE(1358)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1358)									if (value2) {
HXLINE(1358)										value = 1;
            									}
            									else {
HXLINE(1358)										value = -1;
            									}
            								}
            								else {
HXLINE(1358)									tmp1 = (hx::UShr(pixelMask,8) & 255);
HXDLIN(1358)									tmp2 = (hx::UShr(_threshold,8) & 255);
HXDLIN(1358)									if ((tmp1 != tmp2)) {
HXLINE(1358)										bool aNeg2 = (tmp1 < 0);
HXDLIN(1358)										bool bNeg2 = (tmp2 < 0);
HXDLIN(1358)										bool value3;
HXDLIN(1358)										if ((aNeg2 != bNeg2)) {
HXLINE(1358)											value3 = aNeg2;
            										}
            										else {
HXLINE(1358)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1358)										if (value3) {
HXLINE(1358)											value = 1;
            										}
            										else {
HXLINE(1358)											value = -1;
            										}
            									}
            									else {
HXLINE(1358)										tmp1 = (pixelMask & 255);
HXDLIN(1358)										tmp2 = (_threshold & 255);
HXDLIN(1358)										if ((tmp1 != tmp2)) {
HXLINE(1358)											bool aNeg3 = (tmp1 < 0);
HXDLIN(1358)											bool bNeg3 = (tmp2 < 0);
HXDLIN(1358)											bool value4;
HXDLIN(1358)											if ((aNeg3 != bNeg3)) {
HXLINE(1358)												value4 = aNeg3;
            											}
            											else {
HXLINE(1358)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1358)											if (value4) {
HXLINE(1358)												value = 1;
            											}
            											else {
HXLINE(1358)												value = -1;
            											}
            										}
            										else {
HXLINE(1358)											value = 0;
            										}
            									}
            								}
            							}
HXLINE(1360)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1362)									test = (value != 0);
            								}
            								break;
            								case (int)1: {
HXLINE(1363)									test = (value == 0);
            								}
            								break;
            								case (int)2: {
HXLINE(1364)									test = (value == -1);
            								}
            								break;
            								case (int)3: {
HXLINE(1365)									if ((value != 0)) {
HXLINE(1365)										test = (value == -1);
            									}
            									else {
HXLINE(1365)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1366)									test = (value == 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1367)									if ((value != 0)) {
HXLINE(1367)										test = (value == 1);
            									}
            									else {
HXLINE(1367)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1368)									test = false;
            								}
            							}
HXLINE(1371)							if (test) {
HXLINE(1373)								{
HXLINE(1373)									if (destPremultiplied) {
HXLINE(1373)										if (((_color & 255) == 0)) {
HXLINE(1373)											if ((_color != 0)) {
HXLINE(1373)												_color = 0;
            											}
            										}
            										else {
HXLINE(1373)											if (((_color & 255) != 255)) {
HXLINE(1373)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1373)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this10->buffer->b,(this10->byteOffset + ((_color & 255) * 4)))) );
HXDLIN(1373)												_color = ((((((((hx::UShr(_color,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(_color,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(_color,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((_color & 255) & 255));
            											}
            										}
            									}
HXDLIN(1373)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1373)											{
HXLINE(1373)												int val = (hx::UShr(_color,24) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val1 = (hx::UShr(_color,16) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val2 = (hx::UShr(_color,8) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val3 = (_color & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1373)											{
HXLINE(1373)												int val4 = (_color & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val5 = (hx::UShr(_color,24) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val6 = (hx::UShr(_color,16) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val7 = (hx::UShr(_color,8) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1373)											{
HXLINE(1373)												int val8 = (hx::UShr(_color,8) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val9 = (hx::UShr(_color,16) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val10 = (hx::UShr(_color,24) & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            											}
HXDLIN(1373)											{
HXLINE(1373)												int val11 = (_color & 255);
HXDLIN(1373)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            											}
            										}
            										break;
            									}
            								}
HXLINE(1374)								hits = (hits + 1);
            							}
            							else {
HXLINE(1376)								if (copySource) {
HXLINE(1378)									if (destPremultiplied) {
HXLINE(1378)										if (((srcPixel & 255) == 0)) {
HXLINE(1378)											if ((srcPixel != 0)) {
HXLINE(1378)												srcPixel = 0;
            											}
            										}
            										else {
HXLINE(1378)											if (((srcPixel & 255) != 255)) {
HXLINE(1378)												 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1378)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this11->buffer->b,(this11->byteOffset + ((srcPixel & 255) * 4)))) );
HXDLIN(1378)												srcPixel = ((((((((hx::UShr(srcPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(srcPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(srcPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((srcPixel & 255) & 255));
            											}
            										}
            									}
HXDLIN(1378)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1378)											{
HXLINE(1378)												int val12 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val13 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val13);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val14 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val14);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val15 = (srcPixel & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val15);
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1378)											{
HXLINE(1378)												int val16 = (srcPixel & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val17 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val17);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val18 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val18);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val19 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val19);
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1378)											{
HXLINE(1378)												int val20 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val21 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val21);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val22 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val22);
            											}
HXDLIN(1378)											{
HXLINE(1378)												int val23 = (srcPixel & 255);
HXDLIN(1378)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val23);
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1381)							srcPosition = (srcPosition + 4);
HXLINE(1382)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1387)		if ((hits > 0)) {
HXLINE(1389)			image->dirty = true;
HXLINE(1390)			image->version++;
            		}
HXLINE(1393)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1397_unmultiplyAlpha)
HXLINE(1398)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1399)		if (hx::IsNull( data )) {
HXLINE(1399)			return;
            		}
HXLINE(1402)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1402)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1406)			int format = image->buffer->format;
HXLINE(1407)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1408)			int pixel;
HXLINE(1410)			{
HXLINE(1410)				int _g = 0;
HXDLIN(1410)				int _g1 = length;
HXDLIN(1410)				while((_g < _g1)){
HXLINE(1410)					_g = (_g + 1);
HXDLIN(1410)					int i = (_g - 1);
HXLINE(1412)					{
HXLINE(1412)						int offset = (i * 4);
HXDLIN(1412)						switch((int)(format)){
            							case (int)0: {
HXLINE(1412)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1412)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1412)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1412)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE(1412)								int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1412)								int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1412)								int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1412)								pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE(1412)								int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1412)								int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1412)								int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1412)								pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
HXDLIN(1412)						bool _hx_tmp;
HXDLIN(1412)						if (((pixel & 255) != 0)) {
HXLINE(1412)							_hx_tmp = ((pixel & 255) != 255);
            						}
            						else {
HXLINE(1412)							_hx_tmp = false;
            						}
HXDLIN(1412)						if (_hx_tmp) {
HXLINE(1412)							::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN(1412)							{
HXLINE(1412)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1412)								int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1412)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1412)								int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1412)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1412)								pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
            					}
HXLINE(1413)					{
HXLINE(1413)						int offset1 = (i * 4);
HXDLIN(1413)						switch((int)(format)){
            							case (int)0: {
HXLINE(1413)								{
HXLINE(1413)									int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val3 = (pixel & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1413)								{
HXLINE(1413)									int val4 = (pixel & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val5);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val6);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val7);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1413)								{
HXLINE(1413)									int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val9);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val10);
            								}
HXDLIN(1413)								{
HXLINE(1413)									int val11 = (pixel & 255);
HXDLIN(1413)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val11);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1417)		image->buffer->premultiplied = false;
HXLINE(1418)		image->dirty = true;
HXLINE(1419)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

void ImageDataUtil_obj::_hx___boxBlur( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1423___boxBlur)
HXLINE(1426)		{
HXLINE(1426)			::cpp::VirtualArray array = null();
HXDLIN(1426)			int offset = 0;
HXDLIN(1426)			bool _hx_tmp;
HXDLIN(1426)			if (hx::IsNotNull( imgA )) {
HXLINE(1426)				_hx_tmp = hx::IsNull( array );
            			}
            			else {
HXLINE(1426)				_hx_tmp = false;
            			}
HXDLIN(1426)			if (_hx_tmp) {
HXLINE(1426)				imgB->buffer->blit((offset * imgB->bytesPerElement),imgA->buffer,imgA->byteOffset,imgA->byteLength);
            			}
            			else {
HXLINE(1426)				bool _hx_tmp1;
HXDLIN(1426)				if (hx::IsNotNull( array )) {
HXLINE(1426)					_hx_tmp1 = hx::IsNull( imgA );
            				}
            				else {
HXLINE(1426)					_hx_tmp1 = false;
            				}
HXDLIN(1426)				if (_hx_tmp1) {
HXLINE(1426)					imgB->copyFromArray(array,offset);
            				}
            				else {
HXLINE(1426)					HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            				}
            			}
            		}
HXLINE(1428)		int bx1 = ::Std_obj::_hx_int(bx);
HXLINE(1429)		int by1 = ::Std_obj::_hx_int(by);
HXLINE(1431)		{
HXLINE(1431)			Float iarr = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1431)			int ti;
HXDLIN(1431)			int li;
HXDLIN(1431)			int ri;
HXDLIN(1431)			 ::Dynamic fv;
HXDLIN(1431)			 ::Dynamic lv;
HXDLIN(1431)			int val;
HXDLIN(1431)			{
HXLINE(1431)				int _g = 0;
HXDLIN(1431)				int _g1 = h;
HXDLIN(1431)				while((_g < _g1)){
HXLINE(1431)					_g = (_g + 1);
HXDLIN(1431)					int i = (_g - 1);
HXDLIN(1431)					ti = (i * w);
HXDLIN(1431)					li = ti;
HXDLIN(1431)					ri = (ti + bx1);
HXDLIN(1431)					fv = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ti * 4))) & 255);
HXDLIN(1431)					lv = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti + w) - 1) * 4))) & 255);
HXDLIN(1431)					val = ((bx1 + 1) * ( (int)(fv) ));
HXDLIN(1431)					{
HXLINE(1431)						int _g2 = 0;
HXDLIN(1431)						int _g11 = bx1;
HXDLIN(1431)						while((_g2 < _g11)){
HXLINE(1431)							_g2 = (_g2 + 1);
HXDLIN(1431)							int j = (_g2 - 1);
HXDLIN(1431)							val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti + j) * 4))) & 255)) ));
            						}
            					}
HXDLIN(1431)					{
HXLINE(1431)						int _g21 = 0;
HXDLIN(1431)						int _g3 = (bx1 + 1);
HXDLIN(1431)						while((_g21 < _g3)){
HXLINE(1431)							_g21 = (_g21 + 1);
HXDLIN(1431)							int j1 = (_g21 - 1);
HXDLIN(1431)							val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ri * 4))) & 255)) ) - ( (int)(fv) )));
HXDLIN(1431)							{
HXLINE(1431)								int _hx_int = val;
HXDLIN(1431)								Float val1;
HXDLIN(1431)								if ((_hx_int < 0)) {
HXLINE(1431)									val1 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1431)									val1 = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1431)								int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1431)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val2);
            							}
HXDLIN(1431)							ri = (ri + 1);
HXDLIN(1431)							ti = (ti + 1);
            						}
            					}
HXDLIN(1431)					{
HXLINE(1431)						int _g4 = (bx1 + 1);
HXDLIN(1431)						int _g5 = (w - bx1);
HXDLIN(1431)						while((_g4 < _g5)){
HXLINE(1431)							_g4 = (_g4 + 1);
HXDLIN(1431)							int j2 = (_g4 - 1);
HXDLIN(1431)							int a = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ri * 4))) & 255)) );
HXDLIN(1431)							val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (li * 4))) & 255)) )));
HXDLIN(1431)							{
HXLINE(1431)								int int1 = val;
HXDLIN(1431)								Float val3;
HXDLIN(1431)								if ((int1 < 0)) {
HXLINE(1431)									val3 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1431)									val3 = (int1 + ((Float)0.0));
            								}
HXDLIN(1431)								int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1431)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val4);
            							}
HXDLIN(1431)							ri = (ri + 1);
HXDLIN(1431)							li = (li + 1);
HXDLIN(1431)							ti = (ti + 1);
            						}
            					}
HXDLIN(1431)					{
HXLINE(1431)						int _g6 = (w - bx1);
HXDLIN(1431)						int _g7 = w;
HXDLIN(1431)						while((_g6 < _g7)){
HXLINE(1431)							_g6 = (_g6 + 1);
HXDLIN(1431)							int j3 = (_g6 - 1);
HXDLIN(1431)							val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (li * 4))) & 255)) )));
HXDLIN(1431)							{
HXLINE(1431)								int int2 = val;
HXDLIN(1431)								Float val5;
HXDLIN(1431)								if ((int2 < 0)) {
HXLINE(1431)									val5 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1431)									val5 = (int2 + ((Float)0.0));
            								}
HXDLIN(1431)								int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1431)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val6);
            							}
HXDLIN(1431)							li = (li + 1);
HXDLIN(1431)							ti = (ti + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1432)		{
HXLINE(1432)			Float iarr1 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1432)			int ti1;
HXDLIN(1432)			int li1;
HXDLIN(1432)			int ri1;
HXDLIN(1432)			 ::Dynamic fv1;
HXDLIN(1432)			 ::Dynamic lv1;
HXDLIN(1432)			int val7;
HXDLIN(1432)			{
HXLINE(1432)				int _g8 = 0;
HXDLIN(1432)				int _g12 = h;
HXDLIN(1432)				while((_g8 < _g12)){
HXLINE(1432)					_g8 = (_g8 + 1);
HXDLIN(1432)					int i1 = (_g8 - 1);
HXDLIN(1432)					ti1 = (i1 * w);
HXDLIN(1432)					li1 = ti1;
HXDLIN(1432)					ri1 = (ti1 + bx1);
HXDLIN(1432)					fv1 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti1 * 4) + 1))) & 255);
HXDLIN(1432)					lv1 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti1 + w) - 1) * 4) + 1))) & 255);
HXDLIN(1432)					val7 = ((bx1 + 1) * ( (int)(fv1) ));
HXDLIN(1432)					{
HXLINE(1432)						int _g9 = 0;
HXDLIN(1432)						int _g13 = bx1;
HXDLIN(1432)						while((_g9 < _g13)){
HXLINE(1432)							_g9 = (_g9 + 1);
HXDLIN(1432)							int j4 = (_g9 - 1);
HXDLIN(1432)							val7 = (val7 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti1 + j4) * 4) + 1))) & 255)) ));
            						}
            					}
HXDLIN(1432)					{
HXLINE(1432)						int _g22 = 0;
HXDLIN(1432)						int _g31 = (bx1 + 1);
HXDLIN(1432)						while((_g22 < _g31)){
HXLINE(1432)							_g22 = (_g22 + 1);
HXDLIN(1432)							int j5 = (_g22 - 1);
HXDLIN(1432)							val7 = (val7 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri1 * 4) + 1))) & 255)) ) - ( (int)(fv1) )));
HXDLIN(1432)							{
HXLINE(1432)								int int3 = val7;
HXDLIN(1432)								Float val8;
HXDLIN(1432)								if ((int3 < 0)) {
HXLINE(1432)									val8 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1432)									val8 = (int3 + ((Float)0.0));
            								}
HXDLIN(1432)								int val9 = ::Math_obj::round((val8 * iarr1));
HXDLIN(1432)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val9);
            							}
HXDLIN(1432)							ri1 = (ri1 + 1);
HXDLIN(1432)							ti1 = (ti1 + 1);
            						}
            					}
HXDLIN(1432)					{
HXLINE(1432)						int _g41 = (bx1 + 1);
HXDLIN(1432)						int _g51 = (w - bx1);
HXDLIN(1432)						while((_g41 < _g51)){
HXLINE(1432)							_g41 = (_g41 + 1);
HXDLIN(1432)							int j6 = (_g41 - 1);
HXDLIN(1432)							int a1 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri1 * 4) + 1))) & 255)) );
HXDLIN(1432)							val7 = (val7 + (a1 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li1 * 4) + 1))) & 255)) )));
HXDLIN(1432)							{
HXLINE(1432)								int int4 = val7;
HXDLIN(1432)								Float val10;
HXDLIN(1432)								if ((int4 < 0)) {
HXLINE(1432)									val10 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1432)									val10 = (int4 + ((Float)0.0));
            								}
HXDLIN(1432)								int val11 = ::Math_obj::round((val10 * iarr1));
HXDLIN(1432)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val11);
            							}
HXDLIN(1432)							ri1 = (ri1 + 1);
HXDLIN(1432)							li1 = (li1 + 1);
HXDLIN(1432)							ti1 = (ti1 + 1);
            						}
            					}
HXDLIN(1432)					{
HXLINE(1432)						int _g61 = (w - bx1);
HXDLIN(1432)						int _g71 = w;
HXDLIN(1432)						while((_g61 < _g71)){
HXLINE(1432)							_g61 = (_g61 + 1);
HXDLIN(1432)							int j7 = (_g61 - 1);
HXDLIN(1432)							val7 = (val7 + (( (int)(lv1) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li1 * 4) + 1))) & 255)) )));
HXDLIN(1432)							{
HXLINE(1432)								int int5 = val7;
HXDLIN(1432)								Float val12;
HXDLIN(1432)								if ((int5 < 0)) {
HXLINE(1432)									val12 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1432)									val12 = (int5 + ((Float)0.0));
            								}
HXDLIN(1432)								int val13 = ::Math_obj::round((val12 * iarr1));
HXDLIN(1432)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val13);
            							}
HXDLIN(1432)							li1 = (li1 + 1);
HXDLIN(1432)							ti1 = (ti1 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1433)		{
HXLINE(1433)			Float iarr2 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1433)			int ti2;
HXDLIN(1433)			int li2;
HXDLIN(1433)			int ri2;
HXDLIN(1433)			 ::Dynamic fv2;
HXDLIN(1433)			 ::Dynamic lv2;
HXDLIN(1433)			int val14;
HXDLIN(1433)			{
HXLINE(1433)				int _g10 = 0;
HXDLIN(1433)				int _g14 = h;
HXDLIN(1433)				while((_g10 < _g14)){
HXLINE(1433)					_g10 = (_g10 + 1);
HXDLIN(1433)					int i2 = (_g10 - 1);
HXDLIN(1433)					ti2 = (i2 * w);
HXDLIN(1433)					li2 = ti2;
HXDLIN(1433)					ri2 = (ti2 + bx1);
HXDLIN(1433)					fv2 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti2 * 4) + 2))) & 255);
HXDLIN(1433)					lv2 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti2 + w) - 1) * 4) + 2))) & 255);
HXDLIN(1433)					val14 = ((bx1 + 1) * ( (int)(fv2) ));
HXDLIN(1433)					{
HXLINE(1433)						int _g15 = 0;
HXDLIN(1433)						int _g16 = bx1;
HXDLIN(1433)						while((_g15 < _g16)){
HXLINE(1433)							_g15 = (_g15 + 1);
HXDLIN(1433)							int j8 = (_g15 - 1);
HXDLIN(1433)							val14 = (val14 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti2 + j8) * 4) + 2))) & 255)) ));
            						}
            					}
HXDLIN(1433)					{
HXLINE(1433)						int _g23 = 0;
HXDLIN(1433)						int _g32 = (bx1 + 1);
HXDLIN(1433)						while((_g23 < _g32)){
HXLINE(1433)							_g23 = (_g23 + 1);
HXDLIN(1433)							int j9 = (_g23 - 1);
HXDLIN(1433)							val14 = (val14 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri2 * 4) + 2))) & 255)) ) - ( (int)(fv2) )));
HXDLIN(1433)							{
HXLINE(1433)								int int6 = val14;
HXDLIN(1433)								Float val15;
HXDLIN(1433)								if ((int6 < 0)) {
HXLINE(1433)									val15 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1433)									val15 = (int6 + ((Float)0.0));
            								}
HXDLIN(1433)								int val16 = ::Math_obj::round((val15 * iarr2));
HXDLIN(1433)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val16);
            							}
HXDLIN(1433)							ri2 = (ri2 + 1);
HXDLIN(1433)							ti2 = (ti2 + 1);
            						}
            					}
HXDLIN(1433)					{
HXLINE(1433)						int _g42 = (bx1 + 1);
HXDLIN(1433)						int _g52 = (w - bx1);
HXDLIN(1433)						while((_g42 < _g52)){
HXLINE(1433)							_g42 = (_g42 + 1);
HXDLIN(1433)							int j10 = (_g42 - 1);
HXDLIN(1433)							int a2 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri2 * 4) + 2))) & 255)) );
HXDLIN(1433)							val14 = (val14 + (a2 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li2 * 4) + 2))) & 255)) )));
HXDLIN(1433)							{
HXLINE(1433)								int int7 = val14;
HXDLIN(1433)								Float val17;
HXDLIN(1433)								if ((int7 < 0)) {
HXLINE(1433)									val17 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1433)									val17 = (int7 + ((Float)0.0));
            								}
HXDLIN(1433)								int val18 = ::Math_obj::round((val17 * iarr2));
HXDLIN(1433)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val18);
            							}
HXDLIN(1433)							ri2 = (ri2 + 1);
HXDLIN(1433)							li2 = (li2 + 1);
HXDLIN(1433)							ti2 = (ti2 + 1);
            						}
            					}
HXDLIN(1433)					{
HXLINE(1433)						int _g62 = (w - bx1);
HXDLIN(1433)						int _g72 = w;
HXDLIN(1433)						while((_g62 < _g72)){
HXLINE(1433)							_g62 = (_g62 + 1);
HXDLIN(1433)							int j11 = (_g62 - 1);
HXDLIN(1433)							val14 = (val14 + (( (int)(lv2) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li2 * 4) + 2))) & 255)) )));
HXDLIN(1433)							{
HXLINE(1433)								int int8 = val14;
HXDLIN(1433)								Float val19;
HXDLIN(1433)								if ((int8 < 0)) {
HXLINE(1433)									val19 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1433)									val19 = (int8 + ((Float)0.0));
            								}
HXDLIN(1433)								int val20 = ::Math_obj::round((val19 * iarr2));
HXDLIN(1433)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val20);
            							}
HXDLIN(1433)							li2 = (li2 + 1);
HXDLIN(1433)							ti2 = (ti2 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1434)		{
HXLINE(1434)			Float iarr3 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1434)			int ti3;
HXDLIN(1434)			int li3;
HXDLIN(1434)			int ri3;
HXDLIN(1434)			 ::Dynamic fv3;
HXDLIN(1434)			 ::Dynamic lv3;
HXDLIN(1434)			int val21;
HXDLIN(1434)			{
HXLINE(1434)				int _g17 = 0;
HXDLIN(1434)				int _g18 = h;
HXDLIN(1434)				while((_g17 < _g18)){
HXLINE(1434)					_g17 = (_g17 + 1);
HXDLIN(1434)					int i3 = (_g17 - 1);
HXDLIN(1434)					ti3 = (i3 * w);
HXDLIN(1434)					li3 = ti3;
HXDLIN(1434)					ri3 = (ti3 + bx1);
HXDLIN(1434)					fv3 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti3 * 4) + 3))) & 255);
HXDLIN(1434)					lv3 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti3 + w) - 1) * 4) + 3))) & 255);
HXDLIN(1434)					val21 = ((bx1 + 1) * ( (int)(fv3) ));
HXDLIN(1434)					{
HXLINE(1434)						int _g19 = 0;
HXDLIN(1434)						int _g110 = bx1;
HXDLIN(1434)						while((_g19 < _g110)){
HXLINE(1434)							_g19 = (_g19 + 1);
HXDLIN(1434)							int j12 = (_g19 - 1);
HXDLIN(1434)							val21 = (val21 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti3 + j12) * 4) + 3))) & 255)) ));
            						}
            					}
HXDLIN(1434)					{
HXLINE(1434)						int _g24 = 0;
HXDLIN(1434)						int _g33 = (bx1 + 1);
HXDLIN(1434)						while((_g24 < _g33)){
HXLINE(1434)							_g24 = (_g24 + 1);
HXDLIN(1434)							int j13 = (_g24 - 1);
HXDLIN(1434)							val21 = (val21 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri3 * 4) + 3))) & 255)) ) - ( (int)(fv3) )));
HXDLIN(1434)							{
HXLINE(1434)								int int9 = val21;
HXDLIN(1434)								Float val22;
HXDLIN(1434)								if ((int9 < 0)) {
HXLINE(1434)									val22 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1434)									val22 = (int9 + ((Float)0.0));
            								}
HXDLIN(1434)								int val23 = ::Math_obj::round((val22 * iarr3));
HXDLIN(1434)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val23);
            							}
HXDLIN(1434)							ri3 = (ri3 + 1);
HXDLIN(1434)							ti3 = (ti3 + 1);
            						}
            					}
HXDLIN(1434)					{
HXLINE(1434)						int _g43 = (bx1 + 1);
HXDLIN(1434)						int _g53 = (w - bx1);
HXDLIN(1434)						while((_g43 < _g53)){
HXLINE(1434)							_g43 = (_g43 + 1);
HXDLIN(1434)							int j14 = (_g43 - 1);
HXDLIN(1434)							int a3 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri3 * 4) + 3))) & 255)) );
HXDLIN(1434)							val21 = (val21 + (a3 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li3 * 4) + 3))) & 255)) )));
HXDLIN(1434)							{
HXLINE(1434)								int int10 = val21;
HXDLIN(1434)								Float val24;
HXDLIN(1434)								if ((int10 < 0)) {
HXLINE(1434)									val24 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1434)									val24 = (int10 + ((Float)0.0));
            								}
HXDLIN(1434)								int val25 = ::Math_obj::round((val24 * iarr3));
HXDLIN(1434)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val25);
            							}
HXDLIN(1434)							ri3 = (ri3 + 1);
HXDLIN(1434)							li3 = (li3 + 1);
HXDLIN(1434)							ti3 = (ti3 + 1);
            						}
            					}
HXDLIN(1434)					{
HXLINE(1434)						int _g63 = (w - bx1);
HXDLIN(1434)						int _g73 = w;
HXDLIN(1434)						while((_g63 < _g73)){
HXLINE(1434)							_g63 = (_g63 + 1);
HXDLIN(1434)							int j15 = (_g63 - 1);
HXDLIN(1434)							val21 = (val21 + (( (int)(lv3) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li3 * 4) + 3))) & 255)) )));
HXDLIN(1434)							{
HXLINE(1434)								int int11 = val21;
HXDLIN(1434)								Float val26;
HXDLIN(1434)								if ((int11 < 0)) {
HXLINE(1434)									val26 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1434)									val26 = (int11 + ((Float)0.0));
            								}
HXDLIN(1434)								int val27 = ::Math_obj::round((val26 * iarr3));
HXDLIN(1434)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val27);
            							}
HXDLIN(1434)							li3 = (li3 + 1);
HXDLIN(1434)							ti3 = (ti3 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1436)		{
HXLINE(1436)			Float iarr4 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1436)			int ws = (w * 4);
HXDLIN(1436)			int ti4;
HXDLIN(1436)			int li4;
HXDLIN(1436)			int ri4;
HXDLIN(1436)			 ::Dynamic fv4;
HXDLIN(1436)			 ::Dynamic lv4;
HXDLIN(1436)			int val28;
HXDLIN(1436)			{
HXLINE(1436)				int _g20 = 0;
HXDLIN(1436)				int _g111 = w;
HXDLIN(1436)				while((_g20 < _g111)){
HXLINE(1436)					_g20 = (_g20 + 1);
HXDLIN(1436)					int i4 = (_g20 - 1);
HXDLIN(1436)					ti4 = (i4 * 4);
HXDLIN(1436)					li4 = ti4;
HXDLIN(1436)					ri4 = (ti4 + (by1 * ws));
HXDLIN(1436)					fv4 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti4)) & 255);
HXDLIN(1436)					lv4 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti4 + (ws * (h - 1))))) & 255);
HXDLIN(1436)					val28 = ((by1 + 1) * ( (int)(fv4) ));
HXDLIN(1436)					{
HXLINE(1436)						int _g25 = 0;
HXDLIN(1436)						int _g112 = by1;
HXDLIN(1436)						while((_g25 < _g112)){
HXLINE(1436)							_g25 = (_g25 + 1);
HXDLIN(1436)							int j16 = (_g25 - 1);
HXDLIN(1436)							val28 = (val28 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti4 + (j16 * ws)))) & 255)) ));
            						}
            					}
HXDLIN(1436)					{
HXLINE(1436)						int _g26 = 0;
HXDLIN(1436)						int _g34 = (by1 + 1);
HXDLIN(1436)						while((_g26 < _g34)){
HXLINE(1436)							_g26 = (_g26 + 1);
HXDLIN(1436)							int j17 = (_g26 - 1);
HXDLIN(1436)							val28 = (val28 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & 255)) ) - ( (int)(fv4) )));
HXDLIN(1436)							{
HXLINE(1436)								int int12 = val28;
HXDLIN(1436)								Float val29;
HXDLIN(1436)								if ((int12 < 0)) {
HXLINE(1436)									val29 = (((Float)4294967296.0) + int12);
            								}
            								else {
HXLINE(1436)									val29 = (int12 + ((Float)0.0));
            								}
HXDLIN(1436)								int val30 = ::Math_obj::round((val29 * iarr4));
HXDLIN(1436)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val30);
            							}
HXDLIN(1436)							ri4 = (ri4 + ws);
HXDLIN(1436)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1436)					{
HXLINE(1436)						int _g44 = (by1 + 1);
HXDLIN(1436)						int _g54 = (h - by1);
HXDLIN(1436)						while((_g44 < _g54)){
HXLINE(1436)							_g44 = (_g44 + 1);
HXDLIN(1436)							int j18 = (_g44 - 1);
HXDLIN(1436)							int a4 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & 255)) );
HXDLIN(1436)							val28 = (val28 + (a4 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & 255)) )));
HXDLIN(1436)							{
HXLINE(1436)								int int13 = val28;
HXDLIN(1436)								Float val31;
HXDLIN(1436)								if ((int13 < 0)) {
HXLINE(1436)									val31 = (((Float)4294967296.0) + int13);
            								}
            								else {
HXLINE(1436)									val31 = (int13 + ((Float)0.0));
            								}
HXDLIN(1436)								int val32 = ::Math_obj::round((val31 * iarr4));
HXDLIN(1436)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val32);
            							}
HXDLIN(1436)							li4 = (li4 + ws);
HXDLIN(1436)							ri4 = (ri4 + ws);
HXDLIN(1436)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1436)					{
HXLINE(1436)						int _g64 = (h - by1);
HXDLIN(1436)						int _g74 = h;
HXDLIN(1436)						while((_g64 < _g74)){
HXLINE(1436)							_g64 = (_g64 + 1);
HXDLIN(1436)							int j19 = (_g64 - 1);
HXDLIN(1436)							val28 = (val28 + (( (int)(lv4) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & 255)) )));
HXDLIN(1436)							{
HXLINE(1436)								int int14 = val28;
HXDLIN(1436)								Float val33;
HXDLIN(1436)								if ((int14 < 0)) {
HXLINE(1436)									val33 = (((Float)4294967296.0) + int14);
            								}
            								else {
HXLINE(1436)									val33 = (int14 + ((Float)0.0));
            								}
HXDLIN(1436)								int val34 = ::Math_obj::round((val33 * iarr4));
HXDLIN(1436)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val34);
            							}
HXDLIN(1436)							li4 = (li4 + ws);
HXDLIN(1436)							ti4 = (ti4 + ws);
            						}
            					}
            				}
            			}
            		}
HXLINE(1437)		{
HXLINE(1437)			Float iarr5 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1437)			int ws1 = (w * 4);
HXDLIN(1437)			int ti5;
HXDLIN(1437)			int li5;
HXDLIN(1437)			int ri5;
HXDLIN(1437)			 ::Dynamic fv5;
HXDLIN(1437)			 ::Dynamic lv5;
HXDLIN(1437)			int val35;
HXDLIN(1437)			{
HXLINE(1437)				int _g27 = 0;
HXDLIN(1437)				int _g113 = w;
HXDLIN(1437)				while((_g27 < _g113)){
HXLINE(1437)					_g27 = (_g27 + 1);
HXDLIN(1437)					int i5 = (_g27 - 1);
HXDLIN(1437)					ti5 = ((i5 * 4) + 1);
HXDLIN(1437)					li5 = ti5;
HXDLIN(1437)					ri5 = (ti5 + (by1 * ws1));
HXDLIN(1437)					fv5 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti5)) & 255);
HXDLIN(1437)					lv5 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti5 + (ws1 * (h - 1))))) & 255);
HXDLIN(1437)					val35 = ((by1 + 1) * ( (int)(fv5) ));
HXDLIN(1437)					{
HXLINE(1437)						int _g28 = 0;
HXDLIN(1437)						int _g114 = by1;
HXDLIN(1437)						while((_g28 < _g114)){
HXLINE(1437)							_g28 = (_g28 + 1);
HXDLIN(1437)							int j20 = (_g28 - 1);
HXDLIN(1437)							val35 = (val35 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti5 + (j20 * ws1)))) & 255)) ));
            						}
            					}
HXDLIN(1437)					{
HXLINE(1437)						int _g29 = 0;
HXDLIN(1437)						int _g35 = (by1 + 1);
HXDLIN(1437)						while((_g29 < _g35)){
HXLINE(1437)							_g29 = (_g29 + 1);
HXDLIN(1437)							int j21 = (_g29 - 1);
HXDLIN(1437)							val35 = (val35 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & 255)) ) - ( (int)(fv5) )));
HXDLIN(1437)							{
HXLINE(1437)								int int15 = val35;
HXDLIN(1437)								Float val36;
HXDLIN(1437)								if ((int15 < 0)) {
HXLINE(1437)									val36 = (((Float)4294967296.0) + int15);
            								}
            								else {
HXLINE(1437)									val36 = (int15 + ((Float)0.0));
            								}
HXDLIN(1437)								int val37 = ::Math_obj::round((val36 * iarr5));
HXDLIN(1437)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val37);
            							}
HXDLIN(1437)							ri5 = (ri5 + ws1);
HXDLIN(1437)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1437)					{
HXLINE(1437)						int _g45 = (by1 + 1);
HXDLIN(1437)						int _g55 = (h - by1);
HXDLIN(1437)						while((_g45 < _g55)){
HXLINE(1437)							_g45 = (_g45 + 1);
HXDLIN(1437)							int j22 = (_g45 - 1);
HXDLIN(1437)							int a5 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & 255)) );
HXDLIN(1437)							val35 = (val35 + (a5 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & 255)) )));
HXDLIN(1437)							{
HXLINE(1437)								int int16 = val35;
HXDLIN(1437)								Float val38;
HXDLIN(1437)								if ((int16 < 0)) {
HXLINE(1437)									val38 = (((Float)4294967296.0) + int16);
            								}
            								else {
HXLINE(1437)									val38 = (int16 + ((Float)0.0));
            								}
HXDLIN(1437)								int val39 = ::Math_obj::round((val38 * iarr5));
HXDLIN(1437)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val39);
            							}
HXDLIN(1437)							li5 = (li5 + ws1);
HXDLIN(1437)							ri5 = (ri5 + ws1);
HXDLIN(1437)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1437)					{
HXLINE(1437)						int _g65 = (h - by1);
HXDLIN(1437)						int _g75 = h;
HXDLIN(1437)						while((_g65 < _g75)){
HXLINE(1437)							_g65 = (_g65 + 1);
HXDLIN(1437)							int j23 = (_g65 - 1);
HXDLIN(1437)							val35 = (val35 + (( (int)(lv5) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & 255)) )));
HXDLIN(1437)							{
HXLINE(1437)								int int17 = val35;
HXDLIN(1437)								Float val40;
HXDLIN(1437)								if ((int17 < 0)) {
HXLINE(1437)									val40 = (((Float)4294967296.0) + int17);
            								}
            								else {
HXLINE(1437)									val40 = (int17 + ((Float)0.0));
            								}
HXDLIN(1437)								int val41 = ::Math_obj::round((val40 * iarr5));
HXDLIN(1437)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val41);
            							}
HXDLIN(1437)							li5 = (li5 + ws1);
HXDLIN(1437)							ti5 = (ti5 + ws1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1438)		{
HXLINE(1438)			Float iarr6 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1438)			int ws2 = (w * 4);
HXDLIN(1438)			int ti6;
HXDLIN(1438)			int li6;
HXDLIN(1438)			int ri6;
HXDLIN(1438)			 ::Dynamic fv6;
HXDLIN(1438)			 ::Dynamic lv6;
HXDLIN(1438)			int val42;
HXDLIN(1438)			{
HXLINE(1438)				int _g30 = 0;
HXDLIN(1438)				int _g115 = w;
HXDLIN(1438)				while((_g30 < _g115)){
HXLINE(1438)					_g30 = (_g30 + 1);
HXDLIN(1438)					int i6 = (_g30 - 1);
HXDLIN(1438)					ti6 = ((i6 * 4) + 2);
HXDLIN(1438)					li6 = ti6;
HXDLIN(1438)					ri6 = (ti6 + (by1 * ws2));
HXDLIN(1438)					fv6 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti6)) & 255);
HXDLIN(1438)					lv6 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti6 + (ws2 * (h - 1))))) & 255);
HXDLIN(1438)					val42 = ((by1 + 1) * ( (int)(fv6) ));
HXDLIN(1438)					{
HXLINE(1438)						int _g36 = 0;
HXDLIN(1438)						int _g116 = by1;
HXDLIN(1438)						while((_g36 < _g116)){
HXLINE(1438)							_g36 = (_g36 + 1);
HXDLIN(1438)							int j24 = (_g36 - 1);
HXDLIN(1438)							val42 = (val42 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti6 + (j24 * ws2)))) & 255)) ));
            						}
            					}
HXDLIN(1438)					{
HXLINE(1438)						int _g210 = 0;
HXDLIN(1438)						int _g37 = (by1 + 1);
HXDLIN(1438)						while((_g210 < _g37)){
HXLINE(1438)							_g210 = (_g210 + 1);
HXDLIN(1438)							int j25 = (_g210 - 1);
HXDLIN(1438)							val42 = (val42 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & 255)) ) - ( (int)(fv6) )));
HXDLIN(1438)							{
HXLINE(1438)								int int18 = val42;
HXDLIN(1438)								Float val43;
HXDLIN(1438)								if ((int18 < 0)) {
HXLINE(1438)									val43 = (((Float)4294967296.0) + int18);
            								}
            								else {
HXLINE(1438)									val43 = (int18 + ((Float)0.0));
            								}
HXDLIN(1438)								int val44 = ::Math_obj::round((val43 * iarr6));
HXDLIN(1438)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val44);
            							}
HXDLIN(1438)							ri6 = (ri6 + ws2);
HXDLIN(1438)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1438)					{
HXLINE(1438)						int _g46 = (by1 + 1);
HXDLIN(1438)						int _g56 = (h - by1);
HXDLIN(1438)						while((_g46 < _g56)){
HXLINE(1438)							_g46 = (_g46 + 1);
HXDLIN(1438)							int j26 = (_g46 - 1);
HXDLIN(1438)							int a6 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & 255)) );
HXDLIN(1438)							val42 = (val42 + (a6 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & 255)) )));
HXDLIN(1438)							{
HXLINE(1438)								int int19 = val42;
HXDLIN(1438)								Float val45;
HXDLIN(1438)								if ((int19 < 0)) {
HXLINE(1438)									val45 = (((Float)4294967296.0) + int19);
            								}
            								else {
HXLINE(1438)									val45 = (int19 + ((Float)0.0));
            								}
HXDLIN(1438)								int val46 = ::Math_obj::round((val45 * iarr6));
HXDLIN(1438)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val46);
            							}
HXDLIN(1438)							li6 = (li6 + ws2);
HXDLIN(1438)							ri6 = (ri6 + ws2);
HXDLIN(1438)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1438)					{
HXLINE(1438)						int _g66 = (h - by1);
HXDLIN(1438)						int _g76 = h;
HXDLIN(1438)						while((_g66 < _g76)){
HXLINE(1438)							_g66 = (_g66 + 1);
HXDLIN(1438)							int j27 = (_g66 - 1);
HXDLIN(1438)							val42 = (val42 + (( (int)(lv6) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & 255)) )));
HXDLIN(1438)							{
HXLINE(1438)								int int20 = val42;
HXDLIN(1438)								Float val47;
HXDLIN(1438)								if ((int20 < 0)) {
HXLINE(1438)									val47 = (((Float)4294967296.0) + int20);
            								}
            								else {
HXLINE(1438)									val47 = (int20 + ((Float)0.0));
            								}
HXDLIN(1438)								int val48 = ::Math_obj::round((val47 * iarr6));
HXDLIN(1438)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val48);
            							}
HXDLIN(1438)							li6 = (li6 + ws2);
HXDLIN(1438)							ti6 = (ti6 + ws2);
            						}
            					}
            				}
            			}
            		}
HXLINE(1439)		{
HXLINE(1439)			Float iarr7 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1439)			int ws3 = (w * 4);
HXDLIN(1439)			int ti7;
HXDLIN(1439)			int li7;
HXDLIN(1439)			int ri7;
HXDLIN(1439)			 ::Dynamic fv7;
HXDLIN(1439)			 ::Dynamic lv7;
HXDLIN(1439)			int val49;
HXDLIN(1439)			{
HXLINE(1439)				int _g38 = 0;
HXDLIN(1439)				int _g117 = w;
HXDLIN(1439)				while((_g38 < _g117)){
HXLINE(1439)					_g38 = (_g38 + 1);
HXDLIN(1439)					int i7 = (_g38 - 1);
HXDLIN(1439)					ti7 = ((i7 * 4) + 3);
HXDLIN(1439)					li7 = ti7;
HXDLIN(1439)					ri7 = (ti7 + (by1 * ws3));
HXDLIN(1439)					fv7 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti7)) & 255);
HXDLIN(1439)					lv7 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti7 + (ws3 * (h - 1))))) & 255);
HXDLIN(1439)					val49 = ((by1 + 1) * ( (int)(fv7) ));
HXDLIN(1439)					{
HXLINE(1439)						int _g39 = 0;
HXDLIN(1439)						int _g118 = by1;
HXDLIN(1439)						while((_g39 < _g118)){
HXLINE(1439)							_g39 = (_g39 + 1);
HXDLIN(1439)							int j28 = (_g39 - 1);
HXDLIN(1439)							val49 = (val49 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti7 + (j28 * ws3)))) & 255)) ));
            						}
            					}
HXDLIN(1439)					{
HXLINE(1439)						int _g211 = 0;
HXDLIN(1439)						int _g310 = (by1 + 1);
HXDLIN(1439)						while((_g211 < _g310)){
HXLINE(1439)							_g211 = (_g211 + 1);
HXDLIN(1439)							int j29 = (_g211 - 1);
HXDLIN(1439)							val49 = (val49 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & 255)) ) - ( (int)(fv7) )));
HXDLIN(1439)							{
HXLINE(1439)								int int21 = val49;
HXDLIN(1439)								Float val50;
HXDLIN(1439)								if ((int21 < 0)) {
HXLINE(1439)									val50 = (((Float)4294967296.0) + int21);
            								}
            								else {
HXLINE(1439)									val50 = (int21 + ((Float)0.0));
            								}
HXDLIN(1439)								int val51 = ::Math_obj::round((val50 * iarr7));
HXDLIN(1439)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val51);
            							}
HXDLIN(1439)							ri7 = (ri7 + ws3);
HXDLIN(1439)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1439)					{
HXLINE(1439)						int _g47 = (by1 + 1);
HXDLIN(1439)						int _g57 = (h - by1);
HXDLIN(1439)						while((_g47 < _g57)){
HXLINE(1439)							_g47 = (_g47 + 1);
HXDLIN(1439)							int j30 = (_g47 - 1);
HXDLIN(1439)							int a7 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & 255)) );
HXDLIN(1439)							val49 = (val49 + (a7 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & 255)) )));
HXDLIN(1439)							{
HXLINE(1439)								int int22 = val49;
HXDLIN(1439)								Float val52;
HXDLIN(1439)								if ((int22 < 0)) {
HXLINE(1439)									val52 = (((Float)4294967296.0) + int22);
            								}
            								else {
HXLINE(1439)									val52 = (int22 + ((Float)0.0));
            								}
HXDLIN(1439)								int val53 = ::Math_obj::round((val52 * iarr7));
HXDLIN(1439)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val53);
            							}
HXDLIN(1439)							li7 = (li7 + ws3);
HXDLIN(1439)							ri7 = (ri7 + ws3);
HXDLIN(1439)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1439)					{
HXLINE(1439)						int _g67 = (h - by1);
HXDLIN(1439)						int _g77 = h;
HXDLIN(1439)						while((_g67 < _g77)){
HXLINE(1439)							_g67 = (_g67 + 1);
HXDLIN(1439)							int j31 = (_g67 - 1);
HXDLIN(1439)							val49 = (val49 + (( (int)(lv7) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & 255)) )));
HXDLIN(1439)							{
HXLINE(1439)								int int23 = val49;
HXDLIN(1439)								Float val54;
HXDLIN(1439)								if ((int23 < 0)) {
HXLINE(1439)									val54 = (((Float)4294967296.0) + int23);
            								}
            								else {
HXLINE(1439)									val54 = (int23 + ((Float)0.0));
            								}
HXDLIN(1439)								int val55 = ::Math_obj::round((val54 * iarr7));
HXDLIN(1439)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val55);
            							}
HXDLIN(1439)							li7 = (li7 + ws3);
HXDLIN(1439)							ti7 = (ti7 + ws3);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlur,(void))

void ImageDataUtil_obj::_hx___boxBlurH( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1443___boxBlurH)
HXLINE(1444)		Float iarr = (( (Float)(1) ) / ( (Float)(((r + r) + 1)) ));
HXLINE(1445)		int ti;
HXDLIN(1445)		int li;
HXDLIN(1445)		int ri;
HXDLIN(1445)		 ::Dynamic fv;
HXDLIN(1445)		 ::Dynamic lv;
HXDLIN(1445)		int val;
HXLINE(1447)		{
HXLINE(1447)			int _g = 0;
HXDLIN(1447)			int _g1 = h;
HXDLIN(1447)			while((_g < _g1)){
HXLINE(1447)				_g = (_g + 1);
HXDLIN(1447)				int i = (_g - 1);
HXLINE(1449)				ti = (i * w);
HXLINE(1450)				li = ti;
HXLINE(1451)				ri = (ti + r);
HXLINE(1453)				fv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ti * 4) + off))) & 255);
HXLINE(1454)				lv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((((ti + w) - 1) * 4) + off))) & 255);
HXLINE(1455)				val = ((r + 1) * ( (int)(fv) ));
HXLINE(1457)				{
HXLINE(1457)					int _g2 = 0;
HXDLIN(1457)					int _g11 = r;
HXDLIN(1457)					while((_g2 < _g11)){
HXLINE(1457)						_g2 = (_g2 + 1);
HXDLIN(1457)						int j = (_g2 - 1);
HXLINE(1459)						val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (((ti + j) * 4) + off))) & 255)) ));
            					}
            				}
HXLINE(1462)				{
HXLINE(1462)					int _g21 = 0;
HXDLIN(1462)					int _g3 = (r + 1);
HXDLIN(1462)					while((_g21 < _g3)){
HXLINE(1462)						_g21 = (_g21 + 1);
HXDLIN(1462)						int j1 = (_g21 - 1);
HXLINE(1464)						val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ri * 4) + off))) & 255)) ) - ( (int)(fv) )));
HXLINE(1465)						{
HXLINE(1465)							int _hx_int = val;
HXDLIN(1465)							Float val1;
HXDLIN(1465)							if ((_hx_int < 0)) {
HXLINE(1465)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1465)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1465)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1465)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val2);
            						}
HXLINE(1466)						ri = (ri + 1);
HXLINE(1467)						ti = (ti + 1);
            					}
            				}
HXLINE(1470)				{
HXLINE(1470)					int _g4 = (r + 1);
HXDLIN(1470)					int _g5 = (w - r);
HXDLIN(1470)					while((_g4 < _g5)){
HXLINE(1470)						_g4 = (_g4 + 1);
HXDLIN(1470)						int j2 = (_g4 - 1);
HXLINE(1472)						int a = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ri * 4) + off))) & 255)) );
HXDLIN(1472)						val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((li * 4) + off))) & 255)) )));
HXLINE(1473)						{
HXLINE(1473)							int int1 = val;
HXDLIN(1473)							Float val3;
HXDLIN(1473)							if ((int1 < 0)) {
HXLINE(1473)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1473)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1473)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1473)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val4);
            						}
HXLINE(1474)						ri = (ri + 1);
HXLINE(1475)						li = (li + 1);
HXLINE(1476)						ti = (ti + 1);
            					}
            				}
HXLINE(1479)				{
HXLINE(1479)					int _g6 = (w - r);
HXDLIN(1479)					int _g7 = w;
HXDLIN(1479)					while((_g6 < _g7)){
HXLINE(1479)						_g6 = (_g6 + 1);
HXDLIN(1479)						int j3 = (_g6 - 1);
HXLINE(1481)						val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((li * 4) + off))) & 255)) )));
HXLINE(1482)						{
HXLINE(1482)							int int2 = val;
HXDLIN(1482)							Float val5;
HXDLIN(1482)							if ((int2 < 0)) {
HXLINE(1482)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1482)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1482)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1482)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val6);
            						}
HXLINE(1483)						li = (li + 1);
HXLINE(1484)						ti = (ti + 1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurH,(void))

void ImageDataUtil_obj::_hx___boxBlurT( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1490___boxBlurT)
HXLINE(1491)		Float iarr = (( (Float)(1) ) / ( (Float)(((r + r) + 1)) ));
HXLINE(1492)		int ws = (w * 4);
HXLINE(1493)		int ti;
HXDLIN(1493)		int li;
HXDLIN(1493)		int ri;
HXDLIN(1493)		 ::Dynamic fv;
HXDLIN(1493)		 ::Dynamic lv;
HXDLIN(1493)		int val;
HXLINE(1495)		{
HXLINE(1495)			int _g = 0;
HXDLIN(1495)			int _g1 = w;
HXDLIN(1495)			while((_g < _g1)){
HXLINE(1495)				_g = (_g + 1);
HXDLIN(1495)				int i = (_g - 1);
HXLINE(1497)				ti = ((i * 4) + off);
HXLINE(1498)				li = ti;
HXLINE(1499)				ri = (ti + (r * ws));
HXLINE(1501)				fv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti)) & 255);
HXLINE(1502)				lv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti + (ws * (h - 1))))) & 255);
HXLINE(1503)				val = ((r + 1) * ( (int)(fv) ));
HXLINE(1505)				{
HXLINE(1505)					int _g2 = 0;
HXDLIN(1505)					int _g11 = r;
HXDLIN(1505)					while((_g2 < _g11)){
HXLINE(1505)						_g2 = (_g2 + 1);
HXDLIN(1505)						int j = (_g2 - 1);
HXLINE(1507)						val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti + (j * ws)))) & 255)) ));
            					}
            				}
HXLINE(1510)				{
HXLINE(1510)					int _g21 = 0;
HXDLIN(1510)					int _g3 = (r + 1);
HXDLIN(1510)					while((_g21 < _g3)){
HXLINE(1510)						_g21 = (_g21 + 1);
HXDLIN(1510)						int j1 = (_g21 - 1);
HXLINE(1512)						val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & 255)) ) - ( (int)(fv) )));
HXLINE(1513)						{
HXLINE(1513)							int _hx_int = val;
HXDLIN(1513)							Float val1;
HXDLIN(1513)							if ((_hx_int < 0)) {
HXLINE(1513)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1513)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1513)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1513)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val2);
            						}
HXLINE(1514)						ri = (ri + ws);
HXLINE(1515)						ti = (ti + ws);
            					}
            				}
HXLINE(1518)				{
HXLINE(1518)					int _g4 = (r + 1);
HXDLIN(1518)					int _g5 = (h - r);
HXDLIN(1518)					while((_g4 < _g5)){
HXLINE(1518)						_g4 = (_g4 + 1);
HXDLIN(1518)						int j2 = (_g4 - 1);
HXLINE(1520)						int a = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & 255)) );
HXDLIN(1520)						val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & 255)) )));
HXLINE(1521)						{
HXLINE(1521)							int int1 = val;
HXDLIN(1521)							Float val3;
HXDLIN(1521)							if ((int1 < 0)) {
HXLINE(1521)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1521)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1521)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1521)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val4);
            						}
HXLINE(1522)						li = (li + ws);
HXLINE(1523)						ri = (ri + ws);
HXLINE(1524)						ti = (ti + ws);
            					}
            				}
HXLINE(1527)				{
HXLINE(1527)					int _g6 = (h - r);
HXDLIN(1527)					int _g7 = h;
HXDLIN(1527)					while((_g6 < _g7)){
HXLINE(1527)						_g6 = (_g6 + 1);
HXDLIN(1527)						int j3 = (_g6 - 1);
HXLINE(1529)						val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & 255)) )));
HXLINE(1530)						{
HXLINE(1530)							int int2 = val;
HXDLIN(1530)							Float val5;
HXDLIN(1530)							if ((int2 < 0)) {
HXLINE(1530)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1530)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1530)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1530)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val6);
            						}
HXLINE(1531)						li = (li + ws);
HXLINE(1532)						ti = (ti + ws);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurT,(void))

int ImageDataUtil_obj::_hx___calculateSourceOffset( ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int destX,int destY){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1542___calculateSourceOffset)
HXLINE(1543)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXLINE(1544)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXLINE(1546)		int offset = 0;
HXLINE(1548)		bool _hx_tmp;
HXDLIN(1548)		bool _hx_tmp1;
HXDLIN(1548)		bool _hx_tmp2;
HXDLIN(1548)		if ((sourceX >= 0)) {
HXLINE(1548)			_hx_tmp2 = (sourceY < 0);
            		}
            		else {
HXLINE(1548)			_hx_tmp2 = true;
            		}
HXDLIN(1548)		if (!(_hx_tmp2)) {
HXLINE(1548)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1548)			_hx_tmp1 = true;
            		}
HXDLIN(1548)		if (!(_hx_tmp1)) {
HXLINE(1548)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1548)			_hx_tmp = true;
            		}
HXDLIN(1548)		if (_hx_tmp) {
HXLINE(1550)			offset = -1;
            		}
            		else {
HXLINE(1554)			offset = (4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXLINE(1557)		return offset;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,_hx___calculateSourceOffset,return )

::Array< Float > ImageDataUtil_obj::_hx___getBoxesForGaussianBlur(Float sigma,int n){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1561___getBoxesForGaussianBlur)
HXLINE(1562)		Float wIdeal = ::Math_obj::sqrt(((((( (Float)(12) ) * sigma) * sigma) / ( (Float)(n) )) + 1));
HXLINE(1563)		int wl = ::Math_obj::floor(wIdeal);
HXLINE(1564)		if ((hx::Mod(wl,2) == 0)) {
HXLINE(1564)			wl = (wl - 1);
            		}
HXLINE(1565)		int wu = (wl + 2);
HXLINE(1567)		Float mIdeal = ((((((( (Float)(12) ) * sigma) * sigma) - ( (Float)(((n * wl) * wl)) )) - ( (Float)(((4 * n) * wl)) )) - ( (Float)((3 * n)) )) / ( (Float)(((-4 * wl) - 4)) ));
HXLINE(1568)		int m = ::Math_obj::round(mIdeal);
HXLINE(1569)		::Array< Float > sizes = ::Array_obj< Float >::__new(0);
HXLINE(1571)		{
HXLINE(1571)			int _g = 0;
HXDLIN(1571)			int _g1 = n;
HXDLIN(1571)			while((_g < _g1)){
HXLINE(1571)				_g = (_g + 1);
HXDLIN(1571)				int i = (_g - 1);
HXLINE(1573)				Float _hx_tmp;
HXDLIN(1573)				if ((i < m)) {
HXLINE(1573)					_hx_tmp = ( (Float)(wl) );
            				}
            				else {
HXLINE(1573)					_hx_tmp = ( (Float)(wu) );
            				}
HXDLIN(1573)				sizes->push(_hx_tmp);
            			}
            		}
HXLINE(1576)		return sizes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___getBoxesForGaussianBlur,return )

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1580___pixelCompare)
HXLINE(1581)		int tmp1 = (hx::UShr(n1,24) & 255);
HXLINE(1582)		int tmp2 = (hx::UShr(n2,24) & 255);
HXLINE(1587)		if ((tmp1 != tmp2)) {
HXLINE(1589)			bool aNeg = (tmp1 < 0);
HXDLIN(1589)			bool bNeg = (tmp2 < 0);
HXDLIN(1589)			bool _hx_tmp;
HXDLIN(1589)			if ((aNeg != bNeg)) {
HXLINE(1589)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1589)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1589)			if (_hx_tmp) {
HXLINE(1589)				return 1;
            			}
            			else {
HXLINE(1589)				return -1;
            			}
            		}
            		else {
HXLINE(1593)			tmp1 = (hx::UShr(n1,16) & 255);
HXLINE(1594)			tmp2 = (hx::UShr(n2,16) & 255);
HXLINE(1596)			if ((tmp1 != tmp2)) {
HXLINE(1598)				bool aNeg1 = (tmp1 < 0);
HXDLIN(1598)				bool bNeg1 = (tmp2 < 0);
HXDLIN(1598)				bool _hx_tmp1;
HXDLIN(1598)				if ((aNeg1 != bNeg1)) {
HXLINE(1598)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1598)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1598)				if (_hx_tmp1) {
HXLINE(1598)					return 1;
            				}
            				else {
HXLINE(1598)					return -1;
            				}
            			}
            			else {
HXLINE(1602)				tmp1 = (hx::UShr(n1,8) & 255);
HXLINE(1603)				tmp2 = (hx::UShr(n2,8) & 255);
HXLINE(1605)				if ((tmp1 != tmp2)) {
HXLINE(1607)					bool aNeg2 = (tmp1 < 0);
HXDLIN(1607)					bool bNeg2 = (tmp2 < 0);
HXDLIN(1607)					bool _hx_tmp2;
HXDLIN(1607)					if ((aNeg2 != bNeg2)) {
HXLINE(1607)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1607)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1607)					if (_hx_tmp2) {
HXLINE(1607)						return 1;
            					}
            					else {
HXLINE(1607)						return -1;
            					}
            				}
            				else {
HXLINE(1611)					tmp1 = (n1 & 255);
HXLINE(1612)					tmp2 = (n2 & 255);
HXLINE(1614)					if ((tmp1 != tmp2)) {
HXLINE(1616)						bool aNeg3 = (tmp1 < 0);
HXDLIN(1616)						bool bNeg3 = (tmp2 < 0);
HXDLIN(1616)						bool _hx_tmp3;
HXDLIN(1616)						if ((aNeg3 != bNeg3)) {
HXLINE(1616)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1616)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1616)						if (_hx_tmp3) {
HXLINE(1616)							return 1;
            						}
            						else {
HXLINE(1616)							return -1;
            						}
            					}
            					else {
HXLINE(1620)						return 0;
            					}
            				}
            			}
            		}
HXLINE(1587)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::_hx___translatePixel( ::lime::utils::ArrayBufferView imgB, ::lime::math::Rectangle sourceRect, ::lime::math::Rectangle destRect, ::lime::math::Vector2 destPoint,int destX,int destY,Float strength){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1629___translatePixel)
HXLINE(1630)		int d = (4 * ((destY * ::Std_obj::_hx_int(destRect->width)) + destX));
HXLINE(1631)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXDLIN(1631)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXDLIN(1631)		int offset = 0;
HXDLIN(1631)		bool _hx_tmp;
HXDLIN(1631)		bool _hx_tmp1;
HXDLIN(1631)		bool _hx_tmp2;
HXDLIN(1631)		if ((sourceX >= 0)) {
HXLINE(1631)			_hx_tmp2 = (sourceY < 0);
            		}
            		else {
HXLINE(1631)			_hx_tmp2 = true;
            		}
HXDLIN(1631)		if (!(_hx_tmp2)) {
HXLINE(1631)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1631)			_hx_tmp1 = true;
            		}
HXDLIN(1631)		if (!(_hx_tmp1)) {
HXLINE(1631)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1631)			_hx_tmp = true;
            		}
HXDLIN(1631)		if (_hx_tmp) {
HXLINE(1631)			offset = -1;
            		}
            		else {
HXLINE(1631)			offset = (4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXDLIN(1631)		int s = offset;
HXLINE(1633)		if ((s < 0)) {
HXLINE(1635)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),0);
HXDLIN(1635)			int val = 0;
HXDLIN(1635)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val);
HXDLIN(1635)			int val1 = val;
HXDLIN(1635)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val1);
HXDLIN(1635)			int val2 = val1;
HXDLIN(1635)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            		}
            		else {
HXLINE(1639)			{
HXLINE(1639)				int val3 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & 255)) );
HXDLIN(1639)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            			}
HXLINE(1640)			{
HXLINE(1640)				int val4 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 1))) & 255)) );
HXDLIN(1640)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val4);
            			}
HXLINE(1641)			{
HXLINE(1641)				int val5 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 2))) & 255)) );
HXDLIN(1641)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val5);
            			}
HXLINE(1643)			int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 3))) & 255)) );
HXDLIN(1643)			Float a;
HXDLIN(1643)			if ((_hx_int < 0)) {
HXLINE(1643)				a = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(1643)				a = (_hx_int + ((Float)0.0));
            			}
HXDLIN(1643)			int a1 = ::Std_obj::_hx_int((a * strength));
HXLINE(1644)			{
HXLINE(1644)				int val6;
HXDLIN(1644)				if ((a1 < 0)) {
HXLINE(1644)					val6 = 0;
            				}
            				else {
HXLINE(1644)					if ((a1 > 255)) {
HXLINE(1644)						val6 = 255;
            					}
            					else {
HXLINE(1644)						val6 = a1;
            					}
            				}
HXDLIN(1644)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),val6);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,_hx___translatePixel,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lerp4f") ) { outValue = lerp4f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { outValue = bilinear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerpRGBA") ) { outValue = lerpRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlur") ) { outValue = _hx___boxBlur_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurH") ) { outValue = _hx___boxBlurH_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurT") ) { outValue = _hx___boxBlurT_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displaceMap") ) { outValue = displaceMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gaussianBlur") ) { outValue = gaussianBlur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__translatePixel") ) { outValue = _hx___translatePixel_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__calculateSourceOffset") ) { outValue = _hx___calculateSourceOffset_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__getBoxesForGaussianBlur") ) { outValue = _hx___getBoxesForGaussianBlur_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_("displaceMap",63,ff,45,95),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("lerpRGBA",ab,b2,39,d1),
	HX_("lerp4f",e9,0b,b3,a1),
	HX_("lerp",77,12,b0,47),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("fillRect",47,45,b9,6c),
	HX_("floodFill",61,83,8a,59),
	HX_("gaussianBlur",42,ea,61,f7),
	HX_("getColorBoundsRect",86,ad,e8,80),
	HX_("getPixel",10,d6,7a,22),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getPixels",63,78,00,09),
	HX_("merge",b8,a2,c6,05),
	HX_("multiplyAlpha",9a,f2,1c,6b),
	HX_("resize",f4,59,7b,08),
	HX_("resizeBuffer",14,7a,a2,b4),
	HX_("setFormat",79,04,36,5d),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("threshold",ab,c3,a3,34),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	HX_("__boxBlur",32,df,2a,12),
	HX_("__boxBlurH",d6,6c,58,d3),
	HX_("__boxBlurT",e2,6c,58,d3),
	HX_("__calculateSourceOffset",34,ce,66,5a),
	HX_("__getBoxesForGaussianBlur",48,14,ae,9c),
	HX_("__pixelCompare",df,79,e3,8d),
	HX_("__translatePixel",78,af,9b,5e),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	ImageDataUtil_obj _hx_dummy;
	ImageDataUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime._internal.graphics.ImageDataUtil",cf,fd,b0,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
