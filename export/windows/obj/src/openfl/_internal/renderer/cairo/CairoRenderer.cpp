// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#include <openfl/_internal/renderer/cairo/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTilemap
#include <openfl/_internal/renderer/cairo/CairoTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_RenderEvent
#include <openfl/events/RenderEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_media_Video
#include <openfl/media/Video.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c141c49e61a6a76a_56_new,"openfl._internal.renderer.cairo.CairoRenderer","new",0x7d599cdc,"openfl._internal.renderer.cairo.CairoRenderer.new","openfl/_internal/renderer/cairo/CairoRenderer.hx",56,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_67_applyMatrix,"openfl._internal.renderer.cairo.CairoRenderer","applyMatrix",0x0e639ecb,"openfl._internal.renderer.cairo.CairoRenderer.applyMatrix","openfl/_internal/renderer/cairo/CairoRenderer.hx",67,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_97___clear,"openfl._internal.renderer.cairo.CairoRenderer","__clear",0xba4584e9,"openfl._internal.renderer.cairo.CairoRenderer.__clear","openfl/_internal/renderer/cairo/CairoRenderer.hx",97,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_115___drawBitmapData,"openfl._internal.renderer.cairo.CairoRenderer","__drawBitmapData",0xb9493401,"openfl._internal.renderer.cairo.CairoRenderer.__drawBitmapData","openfl/_internal/renderer/cairo/CairoRenderer.hx",115,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_145___getAlpha,"openfl._internal.renderer.cairo.CairoRenderer","__getAlpha",0x69a1250c,"openfl._internal.renderer.cairo.CairoRenderer.__getAlpha","openfl/_internal/renderer/cairo/CairoRenderer.hx",145,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_150___getColorTransform,"openfl._internal.renderer.cairo.CairoRenderer","__getColorTransform",0x231b341b,"openfl._internal.renderer.cairo.CairoRenderer.__getColorTransform","openfl/_internal/renderer/cairo/CairoRenderer.hx",150,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_164___popMask,"openfl._internal.renderer.cairo.CairoRenderer","__popMask",0x922c0979,"openfl._internal.renderer.cairo.CairoRenderer.__popMask","openfl/_internal/renderer/cairo/CairoRenderer.hx",164,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_168___popMaskObject,"openfl._internal.renderer.cairo.CairoRenderer","__popMaskObject",0xadd1dd18,"openfl._internal.renderer.cairo.CairoRenderer.__popMaskObject","openfl/_internal/renderer/cairo/CairoRenderer.hx",168,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_182___popMaskRect,"openfl._internal.renderer.cairo.CairoRenderer","__popMaskRect",0x9561333d,"openfl._internal.renderer.cairo.CairoRenderer.__popMaskRect","openfl/_internal/renderer/cairo/CairoRenderer.hx",182,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_186___pushMask,"openfl._internal.renderer.cairo.CairoRenderer","__pushMask",0xff7ae20a,"openfl._internal.renderer.cairo.CairoRenderer.__pushMask","openfl/_internal/renderer/cairo/CairoRenderer.hx",186,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_197___pushMaskObject,"openfl._internal.renderer.cairo.CairoRenderer","__pushMaskObject",0xb37af869,"openfl._internal.renderer.cairo.CairoRenderer.__pushMaskObject","openfl/_internal/renderer/cairo/CairoRenderer.hx",197,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_210___pushMaskRect,"openfl._internal.renderer.cairo.CairoRenderer","__pushMaskRect",0xcc16284e,"openfl._internal.renderer.cairo.CairoRenderer.__pushMaskRect","openfl/_internal/renderer/cairo/CairoRenderer.hx",210,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_221___render,"openfl._internal.renderer.cairo.CairoRenderer","__render",0x4010487a,"openfl._internal.renderer.cairo.CairoRenderer.__render","openfl/_internal/renderer/cairo/CairoRenderer.hx",221,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_238___renderBitmap,"openfl._internal.renderer.cairo.CairoRenderer","__renderBitmap",0xac516409,"openfl._internal.renderer.cairo.CairoRenderer.__renderBitmap","openfl/_internal/renderer/cairo/CairoRenderer.hx",238,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_258___renderBitmapData,"openfl._internal.renderer.cairo.CairoRenderer","__renderBitmapData",0x16ab1ed3,"openfl._internal.renderer.cairo.CairoRenderer.__renderBitmapData","openfl/_internal/renderer/cairo/CairoRenderer.hx",258,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_285___renderDisplayObject,"openfl._internal.renderer.cairo.CairoRenderer","__renderDisplayObject",0x9a8efdc7,"openfl._internal.renderer.cairo.CairoRenderer.__renderDisplayObject","openfl/_internal/renderer/cairo/CairoRenderer.hx",285,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_326___renderDisplayObjectContainer,"openfl._internal.renderer.cairo.CairoRenderer","__renderDisplayObjectContainer",0x1752e67a,"openfl._internal.renderer.cairo.CairoRenderer.__renderDisplayObjectContainer","openfl/_internal/renderer/cairo/CairoRenderer.hx",326,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_369___renderMask,"openfl._internal.renderer.cairo.CairoRenderer","__renderMask",0xd3e67a86,"openfl._internal.renderer.cairo.CairoRenderer.__renderMask","openfl/_internal/renderer/cairo/CairoRenderer.hx",369,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_406___renderShape,"openfl._internal.renderer.cairo.CairoRenderer","__renderShape",0x0ebf1047,"openfl._internal.renderer.cairo.CairoRenderer.__renderShape","openfl/_internal/renderer/cairo/CairoRenderer.hx",406,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_420___renderSimpleButton,"openfl._internal.renderer.cairo.CairoRenderer","__renderSimpleButton",0x666a6f5e,"openfl._internal.renderer.cairo.CairoRenderer.__renderSimpleButton","openfl/_internal/renderer/cairo/CairoRenderer.hx",420,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_429___renderTextField,"openfl._internal.renderer.cairo.CairoRenderer","__renderTextField",0x0e77dcf3,"openfl._internal.renderer.cairo.CairoRenderer.__renderTextField","openfl/_internal/renderer/cairo/CairoRenderer.hx",429,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_444___renderTilemap,"openfl._internal.renderer.cairo.CairoRenderer","__renderTilemap",0x66f332d4,"openfl._internal.renderer.cairo.CairoRenderer.__renderTilemap","openfl/_internal/renderer/cairo/CairoRenderer.hx",444,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_459___renderVideo,"openfl._internal.renderer.cairo.CairoRenderer","__renderVideo",0xc99e41a1,"openfl._internal.renderer.cairo.CairoRenderer.__renderVideo","openfl/_internal/renderer/cairo/CairoRenderer.hx",459,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_464___setBlendMode,"openfl._internal.renderer.cairo.CairoRenderer","__setBlendMode",0x7c76f476,"openfl._internal.renderer.cairo.CairoRenderer.__setBlendMode","openfl/_internal/renderer/cairo/CairoRenderer.hx",464,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_474___setBlendModeCairo,"openfl._internal.renderer.cairo.CairoRenderer","__setBlendModeCairo",0xae37c032,"openfl._internal.renderer.cairo.CairoRenderer.__setBlendModeCairo","openfl/_internal/renderer/cairo/CairoRenderer.hx",474,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_529___updateCacheBitmap,"openfl._internal.renderer.cairo.CairoRenderer","__updateCacheBitmap",0x777e95a4,"openfl._internal.renderer.cairo.CairoRenderer.__updateCacheBitmap","openfl/_internal/renderer/cairo/CairoRenderer.hx",529,0x849037d4)
HX_LOCAL_STACK_FRAME(_hx_pos_c141c49e61a6a76a_49_boot,"openfl._internal.renderer.cairo.CairoRenderer","boot",0x2928a436,"openfl._internal.renderer.cairo.CairoRenderer.boot","openfl/_internal/renderer/cairo/CairoRenderer.hx",49,0x849037d4)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoRenderer_obj::__construct( ::lime::graphics::cairo::Cairo cairo){
            	HX_GC_STACKFRAME(&_hx_pos_c141c49e61a6a76a_56_new)
HXLINE(  57)		super::__construct(cairo);
HXLINE(  59)		this->_hx___colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  60)		this->_hx___matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  61)		this->_hx___matrix3 =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  63)		this->_hx___type = HX_("cairo",88,30,19,41);
            	}

Dynamic CairoRenderer_obj::__CreateEmpty() { return new CairoRenderer_obj; }

void *CairoRenderer_obj::_hx_vtable = 0;

Dynamic CairoRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoRenderer_obj > _hx_result = new CairoRenderer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CairoRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3a6c56d2) {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3a6c56d2;
		}
	} else {
		return inClassId==(int)0x7cdf41d6 || inClassId==(int)0x7eb06559;
	}
}

void CairoRenderer_obj::applyMatrix( ::openfl::geom::Matrix transform, ::lime::graphics::cairo::Cairo cairo){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_67_applyMatrix)
HXLINE(  68)		if (hx::IsNull( cairo )) {
HXLINE(  68)			cairo = this->cairo;
            		}
HXLINE(  70)		this->_hx___matrix->copyFrom(transform);
HXLINE(  72)		bool _hx_tmp;
HXDLIN(  72)		if (hx::IsEq( this->cairo,cairo )) {
HXLINE(  72)			_hx_tmp = hx::IsNotNull( this->_hx___worldTransform );
            		}
            		else {
HXLINE(  72)			_hx_tmp = false;
            		}
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  74)			this->_hx___matrix->concat(this->_hx___worldTransform);
            		}
HXLINE(  77)		this->_hx___matrix3->a = this->_hx___matrix->a;
HXLINE(  78)		this->_hx___matrix3->b = this->_hx___matrix->b;
HXLINE(  79)		this->_hx___matrix3->c = this->_hx___matrix->c;
HXLINE(  80)		this->_hx___matrix3->d = this->_hx___matrix->d;
HXLINE(  82)		if (this->_hx___roundPixels) {
HXLINE(  84)			this->_hx___matrix3->tx = ( (Float)(::Math_obj::round(this->_hx___matrix->tx)) );
HXLINE(  85)			this->_hx___matrix3->ty = ( (Float)(::Math_obj::round(this->_hx___matrix->ty)) );
            		}
            		else {
HXLINE(  89)			this->_hx___matrix3->tx = this->_hx___matrix->tx;
HXLINE(  90)			this->_hx___matrix3->ty = this->_hx___matrix->ty;
            		}
HXLINE(  93)		cairo->set_matrix(this->_hx___matrix3);
            	}


void CairoRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_97___clear)
HXLINE(  98)		if (hx::IsNull( this->cairo )) {
HXLINE(  98)			return;
            		}
HXLINE( 100)		this->cairo->identityMatrix();
HXLINE( 102)		bool _hx_tmp;
HXDLIN( 102)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 102)			_hx_tmp = this->_hx___stage->_hx___clearBeforeRender;
            		}
            		else {
HXLINE( 102)			_hx_tmp = false;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			 ::Dynamic cacheBlendMode = this->_hx___blendMode;
HXLINE( 105)			this->_hx___setBlendMode(10);
HXLINE( 107)			this->cairo->setSourceRGB(this->_hx___stage->_hx___colorSplit->__get(0),this->_hx___stage->_hx___colorSplit->__get(1),this->_hx___stage->_hx___colorSplit->__get(2));
HXLINE( 108)			this->cairo->paint();
HXLINE( 110)			this->_hx___setBlendMode(cacheBlendMode);
            		}
            	}


void CairoRenderer_obj::_hx___drawBitmapData( ::openfl::display::BitmapData bitmapData,::Dynamic source, ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_115___drawBitmapData)
HXLINE( 116)		if (hx::IsNotNull( clipRect )) {
HXLINE( 118)			this->_hx___pushMaskRect(clipRect,( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
            		}
HXLINE( 121)		if (hx::IsEq( source,bitmapData )) {
HXLINE( 123)			source = bitmapData->clone();
            		}
HXLINE( 126)		if (!(this->_hx___allowSmoothing)) {
HXLINE( 126)			this->cairo->set_antialias(1);
            		}
HXLINE( 128)		this->_hx___render(source);
HXLINE( 130)		if (!(this->_hx___allowSmoothing)) {
HXLINE( 130)			this->cairo->set_antialias(5);
            		}
HXLINE( 132)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->cairo->get_target());
HXLINE( 134)		bitmapData->image->dirty = true;
HXLINE( 135)		bitmapData->image->version++;
HXLINE( 137)		if (hx::IsNotNull( clipRect )) {
HXLINE( 139)			this->_hx___popMaskRect();
            		}
            	}


Float CairoRenderer_obj::_hx___getAlpha(Float value){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_145___getAlpha)
HXDLIN( 145)		return (value * this->_hx___worldAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___getAlpha,return )

 ::openfl::geom::ColorTransform CairoRenderer_obj::_hx___getColorTransform( ::openfl::geom::ColorTransform value){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_150___getColorTransform)
HXDLIN( 150)		if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 152)			this->_hx___colorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE( 153)			this->_hx___colorTransform->_hx___combine(value);
HXLINE( 154)			return this->_hx___colorTransform;
            		}
            		else {
HXLINE( 158)			return value;
            		}
HXLINE( 150)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___getColorTransform,return )

void CairoRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_164___popMask)
HXDLIN( 164)		this->cairo->restore();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CairoRenderer_obj,_hx___popMask,(void))

void CairoRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_168___popMaskObject)
HXLINE( 169)		bool _hx_tmp;
HXDLIN( 169)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 169)			_hx_tmp = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 169)			_hx_tmp = false;
            		}
HXDLIN( 169)		if (_hx_tmp) {
HXLINE( 171)			this->_hx___popMask();
            		}
HXLINE( 174)		bool _hx_tmp1;
HXDLIN( 174)		if (handleScrollRect) {
HXLINE( 174)			_hx_tmp1 = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 174)			_hx_tmp1 = false;
            		}
HXDLIN( 174)		if (_hx_tmp1) {
HXLINE( 176)			this->_hx___popMaskRect();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___popMaskObject,(void))

void CairoRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_182___popMaskRect)
HXDLIN( 182)		this->cairo->restore();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CairoRenderer_obj,_hx___popMaskRect,(void))

void CairoRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_186___pushMask)
HXLINE( 187)		this->cairo->save();
HXLINE( 189)		this->applyMatrix(mask->_hx___renderTransform,this->cairo);
HXLINE( 191)		this->cairo->newPath();
HXLINE( 192)		this->_hx___renderMask(mask);
HXLINE( 193)		this->cairo->clip();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___pushMask,(void))

void CairoRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_197___pushMaskObject)
HXLINE( 198)		bool _hx_tmp;
HXDLIN( 198)		if (handleScrollRect) {
HXLINE( 198)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 198)			_hx_tmp = false;
            		}
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 200)			this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            		}
HXLINE( 203)		bool _hx_tmp1;
HXDLIN( 203)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 203)			_hx_tmp1 = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 203)			_hx_tmp1 = false;
            		}
HXDLIN( 203)		if (_hx_tmp1) {
HXLINE( 205)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___pushMaskObject,(void))

void CairoRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_210___pushMaskRect)
HXLINE( 211)		this->cairo->save();
HXLINE( 213)		this->applyMatrix(transform,this->cairo);
HXLINE( 215)		this->cairo->newPath();
HXLINE( 216)		this->cairo->rectangle(rect->x,rect->y,rect->width,rect->height);
HXLINE( 217)		this->cairo->clip();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___pushMaskRect,(void))

void CairoRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_221___render)
HXLINE( 222)		if (hx::IsNull( this->cairo )) {
HXLINE( 222)			return;
            		}
HXLINE( 224)		if (hx::IsNotNull( object )) {
HXLINE( 226)			if (hx::IsNotNull( object->__Field(HX_("__type",da,55,01,fc),hx::paccDynamic) )) {
HXLINE( 228)				this->_hx___renderDisplayObject(( ( ::openfl::display::DisplayObject)(object) ));
            			}
            			else {
HXLINE( 232)				this->_hx___renderBitmapData(( ( ::openfl::display::BitmapData)(object) ));
            			}
            		}
            	}


void CairoRenderer_obj::_hx___renderBitmap( ::openfl::display::Bitmap bitmap){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_238___renderBitmap)
HXLINE( 239)		this->_hx___updateCacheBitmap(bitmap,false);
HXLINE( 241)		bool _hx_tmp;
HXDLIN( 241)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE( 241)			_hx_tmp = hx::IsNotNull( bitmap->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 241)			_hx_tmp = false;
            		}
HXDLIN( 241)		if (_hx_tmp) {
HXLINE( 243)			bitmap->_hx___imageVersion = bitmap->_hx___bitmapData->image->version;
            		}
HXLINE( 246)		bool _hx_tmp1;
HXDLIN( 246)		if (hx::IsNotNull( bitmap->_hx___cacheBitmap )) {
HXLINE( 246)			_hx_tmp1 = !(bitmap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 246)			_hx_tmp1 = false;
            		}
HXDLIN( 246)		if (_hx_tmp1) {
HXLINE( 248)			 ::openfl::display::Bitmap bitmap1 = bitmap->_hx___cacheBitmap;
HXDLIN( 248)			if (!(!(bitmap1->_hx___renderable))) {
HXLINE( 248)				Float alpha = this->_hx___getAlpha(bitmap1->_hx___worldAlpha);
HXDLIN( 248)				bool _hx_tmp2;
HXDLIN( 248)				bool _hx_tmp3;
HXDLIN( 248)				if ((alpha > 0)) {
HXLINE( 248)					_hx_tmp3 = hx::IsNotNull( bitmap1->_hx___bitmapData );
            				}
            				else {
HXLINE( 248)					_hx_tmp3 = false;
            				}
HXDLIN( 248)				if (_hx_tmp3) {
HXLINE( 248)					_hx_tmp2 = bitmap1->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 248)					_hx_tmp2 = false;
            				}
HXDLIN( 248)				if (_hx_tmp2) {
HXLINE( 248)					 ::lime::graphics::cairo::Cairo cairo = this->cairo;
HXDLIN( 248)					this->_hx___setBlendMode(bitmap1->_hx___worldBlendMode);
HXDLIN( 248)					this->_hx___pushMaskObject(bitmap1,null());
HXDLIN( 248)					this->applyMatrix(bitmap1->_hx___renderTransform,cairo);
HXDLIN( 248)					 ::Dynamic surface = bitmap1->_hx___bitmapData->getSurface();
HXDLIN( 248)					if (hx::IsNotNull( surface )) {
HXLINE( 248)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 248)						int _hx_tmp4;
HXDLIN( 248)						bool _hx_tmp5;
HXDLIN( 248)						if (this->_hx___allowSmoothing) {
HXLINE( 248)							_hx_tmp5 = bitmap1->smoothing;
            						}
            						else {
HXLINE( 248)							_hx_tmp5 = false;
            						}
HXDLIN( 248)						if (_hx_tmp5) {
HXLINE( 248)							_hx_tmp4 = 1;
            						}
            						else {
HXLINE( 248)							_hx_tmp4 = 3;
            						}
HXDLIN( 248)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp4);
HXDLIN( 248)						cairo->set_source(pattern);
HXDLIN( 248)						if ((alpha == 1)) {
HXLINE( 248)							cairo->paint();
            						}
            						else {
HXLINE( 248)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 248)					this->_hx___popMaskObject(bitmap1,null());
HXDLIN( 248)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 252)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(bitmap,hx::ObjectPtr<OBJ_>(this));
HXLINE( 253)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 253)				Float alpha1 = this->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 253)				bool _hx_tmp6;
HXDLIN( 253)				bool _hx_tmp7;
HXDLIN( 253)				if ((alpha1 > 0)) {
HXLINE( 253)					_hx_tmp7 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 253)					_hx_tmp7 = false;
            				}
HXDLIN( 253)				if (_hx_tmp7) {
HXLINE( 253)					_hx_tmp6 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 253)					_hx_tmp6 = false;
            				}
HXDLIN( 253)				if (_hx_tmp6) {
HXLINE( 253)					 ::lime::graphics::cairo::Cairo cairo1 = this->cairo;
HXDLIN( 253)					this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 253)					this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 253)					this->applyMatrix(bitmap->_hx___renderTransform,cairo1);
HXDLIN( 253)					 ::Dynamic surface1 = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 253)					if (hx::IsNotNull( surface1 )) {
HXLINE( 253)						 ::Dynamic pattern1 = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface1);
HXDLIN( 253)						int _hx_tmp8;
HXDLIN( 253)						bool _hx_tmp9;
HXDLIN( 253)						if (this->_hx___allowSmoothing) {
HXLINE( 253)							_hx_tmp9 = bitmap->smoothing;
            						}
            						else {
HXLINE( 253)							_hx_tmp9 = false;
            						}
HXDLIN( 253)						if (_hx_tmp9) {
HXLINE( 253)							_hx_tmp8 = 1;
            						}
            						else {
HXLINE( 253)							_hx_tmp8 = 3;
            						}
HXDLIN( 253)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern1,_hx_tmp8);
HXDLIN( 253)						cairo1->set_source(pattern1);
HXDLIN( 253)						if ((alpha1 == 1)) {
HXLINE( 253)							cairo1->paint();
            						}
            						else {
HXLINE( 253)							cairo1->paintWithAlpha(alpha1);
            						}
            					}
HXDLIN( 253)					this->_hx___popMaskObject(bitmap,null());
HXDLIN( 253)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderBitmap,(void))

void CairoRenderer_obj::_hx___renderBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_258___renderBitmapData)
HXLINE( 259)		if (!(bitmapData->readable)) {
HXLINE( 259)			return;
            		}
HXLINE( 261)		this->applyMatrix(bitmapData->_hx___renderTransform,this->cairo);
HXLINE( 263)		 ::Dynamic surface = bitmapData->getSurface();
HXLINE( 265)		if (hx::IsNotNull( surface )) {
HXLINE( 267)			 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE( 269)			bool _hx_tmp;
HXDLIN( 269)			if (!(!(this->_hx___allowSmoothing))) {
HXLINE( 269)				_hx_tmp = (this->cairo->get_antialias() == 1);
            			}
            			else {
HXLINE( 269)				_hx_tmp = true;
            			}
HXDLIN( 269)			if (_hx_tmp) {
HXLINE( 271)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,3);
            			}
            			else {
HXLINE( 275)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,1);
            			}
HXLINE( 278)			this->cairo->set_source(pattern);
HXLINE( 279)			this->cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderBitmapData,(void))

void CairoRenderer_obj::_hx___renderDisplayObject( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_285___renderDisplayObject)
HXDLIN( 285)		bool _hx_tmp;
HXDLIN( 285)		if (hx::IsNotNull( object )) {
HXDLIN( 285)			_hx_tmp = hx::IsNotNull( object->_hx___type );
            		}
            		else {
HXDLIN( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 287)			switch((int)(object->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 290)					this->_hx___renderBitmap(( ( ::openfl::display::Bitmap)(object) ));
            				}
            				break;
            				case (int)2: {
HXLINE( 292)					this->_hx___renderDisplayObjectContainer(( ( ::openfl::display::DisplayObjectContainer)(object) ));
            				}
            				break;
            				case (int)1: case (int)4: {
HXLINE( 294)					this->_hx___renderShape(object);
            				}
            				break;
            				case (int)5: {
HXLINE( 296)					this->_hx___renderSimpleButton(( ( ::openfl::display::SimpleButton)(object) ));
            				}
            				break;
            				case (int)6: {
HXLINE( 298)					this->_hx___renderTextField(( ( ::openfl::text::TextField)(object) ));
            				}
            				break;
            				case (int)7: {
HXLINE( 300)					this->_hx___renderTilemap(( ( ::openfl::display::Tilemap)(object) ));
            				}
            				break;
            				case (int)8: {
HXLINE( 302)					this->_hx___renderVideo(( ( ::openfl::media::Video)(object) ));
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 306)			if (hx::IsNotNull( object->_hx___customRenderEvent )) {
HXLINE( 308)				 ::openfl::events::RenderEvent event = object->_hx___customRenderEvent;
HXLINE( 309)				event->allowSmoothing = this->_hx___allowSmoothing;
HXLINE( 310)				event->objectMatrix->copyFrom(object->_hx___renderTransform);
HXLINE( 311)				event->objectColorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE( 312)				event->renderer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 313)				event->type = HX_("renderCairo",52,5d,ca,0c);
HXLINE( 315)				this->_hx___setBlendMode(object->_hx___worldBlendMode);
HXLINE( 316)				this->_hx___pushMaskObject(object,null());
HXLINE( 318)				object->dispatchEvent(event);
HXLINE( 320)				this->_hx___popMaskObject(object,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderDisplayObject,(void))

void CairoRenderer_obj::_hx___renderDisplayObjectContainer( ::openfl::display::DisplayObjectContainer container){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_326___renderDisplayObjectContainer)
HXLINE( 327)		{
HXLINE( 327)			{
HXLINE( 327)				 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN( 327)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 327)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 327)					if (hx::IsNull( orphan1->stage )) {
HXLINE( 327)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 327)			container->_hx___removedChildren->set_length(0);
            		}
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		if (!(!(container->_hx___renderable))) {
HXLINE( 329)			_hx_tmp = (container->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 329)			return;
            		}
HXLINE( 331)		this->_hx___updateCacheBitmap(container,false);
HXLINE( 333)		bool _hx_tmp1;
HXDLIN( 333)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE( 333)			_hx_tmp1 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 333)			_hx_tmp1 = false;
            		}
HXDLIN( 333)		if (_hx_tmp1) {
HXLINE( 335)			 ::openfl::display::Bitmap bitmap = container->_hx___cacheBitmap;
HXDLIN( 335)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 335)				Float alpha = this->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 335)				bool _hx_tmp2;
HXDLIN( 335)				bool _hx_tmp3;
HXDLIN( 335)				if ((alpha > 0)) {
HXLINE( 335)					_hx_tmp3 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 335)					_hx_tmp3 = false;
            				}
HXDLIN( 335)				if (_hx_tmp3) {
HXLINE( 335)					_hx_tmp2 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 335)					_hx_tmp2 = false;
            				}
HXDLIN( 335)				if (_hx_tmp2) {
HXLINE( 335)					 ::lime::graphics::cairo::Cairo cairo = this->cairo;
HXDLIN( 335)					this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 335)					this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 335)					this->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 335)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 335)					if (hx::IsNotNull( surface )) {
HXLINE( 335)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 335)						int _hx_tmp4;
HXDLIN( 335)						bool _hx_tmp5;
HXDLIN( 335)						if (this->_hx___allowSmoothing) {
HXLINE( 335)							_hx_tmp5 = bitmap->smoothing;
            						}
            						else {
HXLINE( 335)							_hx_tmp5 = false;
            						}
HXDLIN( 335)						if (_hx_tmp5) {
HXLINE( 335)							_hx_tmp4 = 1;
            						}
            						else {
HXLINE( 335)							_hx_tmp4 = 3;
            						}
HXDLIN( 335)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp4);
HXDLIN( 335)						cairo->set_source(pattern);
HXDLIN( 335)						if ((alpha == 1)) {
HXLINE( 335)							cairo->paint();
            						}
            						else {
HXLINE( 335)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 335)					this->_hx___popMaskObject(bitmap,null());
HXDLIN( 335)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 339)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(container,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 342)		bool _hx_tmp6;
HXDLIN( 342)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE( 342)			_hx_tmp6 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 342)			_hx_tmp6 = false;
            		}
HXDLIN( 342)		if (_hx_tmp6) {
HXLINE( 342)			return;
            		}
HXLINE( 344)		this->_hx___pushMaskObject(container,null());
HXLINE( 346)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 348)			{
HXLINE( 348)				int _g = 0;
HXDLIN( 348)				::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN( 348)				while((_g < _g1->length)){
HXLINE( 348)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 348)					_g = (_g + 1);
HXLINE( 350)					this->_hx___renderDisplayObject(child);
HXLINE( 351)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 354)			container->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 358)			int _g2 = 0;
HXDLIN( 358)			::Array< ::Dynamic> _g11 = container->_hx___children;
HXDLIN( 358)			while((_g2 < _g11->length)){
HXLINE( 358)				 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 358)				_g2 = (_g2 + 1);
HXLINE( 360)				this->_hx___renderDisplayObject(child1);
            			}
            		}
HXLINE( 364)		this->_hx___popMaskObject(container,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderDisplayObjectContainer,(void))

void CairoRenderer_obj::_hx___renderMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_369___renderMask)
HXDLIN( 369)		if (hx::IsNotNull( mask )) {
HXLINE( 371)			switch((int)(mask->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 374)					 ::lime::graphics::cairo::Cairo _hx_tmp = this->cairo;
HXDLIN( 374)					Float _hx_tmp1 = mask->get_width();
HXDLIN( 374)					_hx_tmp->rectangle(( (Float)(0) ),( (Float)(0) ),_hx_tmp1,mask->get_height());
            				}
            				break;
            				case (int)2: {
HXLINE( 377)					 ::openfl::display::DisplayObjectContainer container = ( ( ::openfl::display::DisplayObjectContainer)(mask) );
HXLINE( 378)					{
HXLINE( 378)						{
HXLINE( 378)							 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN( 378)							while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 378)								 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 378)								if (hx::IsNull( orphan1->stage )) {
HXLINE( 378)									orphan1->_hx___cleanup();
            								}
            							}
            						}
HXDLIN( 378)						container->_hx___removedChildren->set_length(0);
            					}
HXLINE( 380)					if (hx::IsNotNull( container->_hx___graphics )) {
HXLINE( 382)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(container->_hx___graphics,hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE( 385)					{
HXLINE( 385)						int _g = 0;
HXDLIN( 385)						::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN( 385)						while((_g < _g1->length)){
HXLINE( 385)							 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 385)							_g = (_g + 1);
HXLINE( 387)							this->_hx___renderMask(child);
            						}
            					}
            				}
            				break;
            				case (int)3: {
            				}
            				break;
            				case (int)5: {
HXLINE( 393)					 ::openfl::display::SimpleButton button = ( ( ::openfl::display::SimpleButton)(mask) );
HXLINE( 394)					this->_hx___renderMask(button->_hx___currentState);
            				}
            				break;
            				default:{
HXLINE( 397)					if (hx::IsNotNull( mask->_hx___graphics )) {
HXLINE( 399)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(mask->_hx___graphics,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderMask,(void))

void CairoRenderer_obj::_hx___renderShape( ::openfl::display::DisplayObject shape){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_406___renderShape)
HXLINE( 407)		this->_hx___updateCacheBitmap(shape,false);
HXLINE( 409)		bool _hx_tmp;
HXDLIN( 409)		if (hx::IsNotNull( shape->_hx___cacheBitmap )) {
HXLINE( 409)			_hx_tmp = !(shape->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 409)			_hx_tmp = false;
            		}
HXDLIN( 409)		if (_hx_tmp) {
HXLINE( 411)			 ::openfl::display::Bitmap bitmap = shape->_hx___cacheBitmap;
HXDLIN( 411)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 411)				Float alpha = this->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 411)				bool _hx_tmp1;
HXDLIN( 411)				bool _hx_tmp2;
HXDLIN( 411)				if ((alpha > 0)) {
HXLINE( 411)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 411)					_hx_tmp2 = false;
            				}
HXDLIN( 411)				if (_hx_tmp2) {
HXLINE( 411)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 411)					_hx_tmp1 = false;
            				}
HXDLIN( 411)				if (_hx_tmp1) {
HXLINE( 411)					 ::lime::graphics::cairo::Cairo cairo = this->cairo;
HXDLIN( 411)					this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 411)					this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 411)					this->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 411)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 411)					if (hx::IsNotNull( surface )) {
HXLINE( 411)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 411)						int _hx_tmp3;
HXDLIN( 411)						bool _hx_tmp4;
HXDLIN( 411)						if (this->_hx___allowSmoothing) {
HXLINE( 411)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 411)							_hx_tmp4 = false;
            						}
HXDLIN( 411)						if (_hx_tmp4) {
HXLINE( 411)							_hx_tmp3 = 1;
            						}
            						else {
HXLINE( 411)							_hx_tmp3 = 3;
            						}
HXDLIN( 411)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 411)						cairo->set_source(pattern);
HXDLIN( 411)						if ((alpha == 1)) {
HXLINE( 411)							cairo->paint();
            						}
            						else {
HXLINE( 411)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 411)					this->_hx___popMaskObject(bitmap,null());
HXDLIN( 411)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 415)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(shape,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderShape,(void))

void CairoRenderer_obj::_hx___renderSimpleButton( ::openfl::display::SimpleButton button){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_420___renderSimpleButton)
HXLINE( 421)		bool _hx_tmp;
HXDLIN( 421)		bool _hx_tmp1;
HXDLIN( 421)		if (!(!(button->_hx___renderable))) {
HXLINE( 421)			_hx_tmp1 = (button->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 421)			_hx_tmp1 = true;
            		}
HXDLIN( 421)		if (!(_hx_tmp1)) {
HXLINE( 421)			_hx_tmp = hx::IsNull( button->_hx___currentState );
            		}
            		else {
HXLINE( 421)			_hx_tmp = true;
            		}
HXDLIN( 421)		if (_hx_tmp) {
HXLINE( 421)			return;
            		}
HXLINE( 423)		this->_hx___pushMaskObject(button,null());
HXLINE( 424)		this->_hx___renderDisplayObject(button->_hx___currentState);
HXLINE( 425)		this->_hx___popMaskObject(button,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderSimpleButton,(void))

void CairoRenderer_obj::_hx___renderTextField( ::openfl::text::TextField textField){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_429___renderTextField)
HXLINE( 430)		this->_hx___updateCacheBitmap(textField,false);
HXLINE( 432)		bool _hx_tmp;
HXDLIN( 432)		if (hx::IsNotNull( textField->_hx___cacheBitmap )) {
HXLINE( 432)			_hx_tmp = !(textField->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 432)			_hx_tmp = false;
            		}
HXDLIN( 432)		if (_hx_tmp) {
HXLINE( 434)			 ::openfl::display::Bitmap bitmap = textField->_hx___cacheBitmap;
HXDLIN( 434)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 434)				Float alpha = this->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 434)				bool _hx_tmp1;
HXDLIN( 434)				bool _hx_tmp2;
HXDLIN( 434)				if ((alpha > 0)) {
HXLINE( 434)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 434)					_hx_tmp2 = false;
            				}
HXDLIN( 434)				if (_hx_tmp2) {
HXLINE( 434)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 434)					_hx_tmp1 = false;
            				}
HXDLIN( 434)				if (_hx_tmp1) {
HXLINE( 434)					 ::lime::graphics::cairo::Cairo cairo = this->cairo;
HXDLIN( 434)					this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 434)					this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 434)					this->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 434)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 434)					if (hx::IsNotNull( surface )) {
HXLINE( 434)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 434)						int _hx_tmp3;
HXDLIN( 434)						bool _hx_tmp4;
HXDLIN( 434)						if (this->_hx___allowSmoothing) {
HXLINE( 434)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 434)							_hx_tmp4 = false;
            						}
HXDLIN( 434)						if (_hx_tmp4) {
HXLINE( 434)							_hx_tmp3 = 1;
            						}
            						else {
HXLINE( 434)							_hx_tmp3 = 3;
            						}
HXDLIN( 434)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 434)						cairo->set_source(pattern);
HXDLIN( 434)						if ((alpha == 1)) {
HXLINE( 434)							cairo->paint();
            						}
            						else {
HXLINE( 434)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 434)					this->_hx___popMaskObject(bitmap,null());
HXDLIN( 434)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 438)			::openfl::_internal::renderer::cairo::CairoTextField_obj::render(textField,hx::ObjectPtr<OBJ_>(this),textField->_hx___worldTransform);
HXLINE( 439)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(textField,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderTextField,(void))

void CairoRenderer_obj::_hx___renderTilemap( ::openfl::display::Tilemap tilemap){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_444___renderTilemap)
HXLINE( 445)		this->_hx___updateCacheBitmap(tilemap,false);
HXLINE( 447)		bool _hx_tmp;
HXDLIN( 447)		if (hx::IsNotNull( tilemap->_hx___cacheBitmap )) {
HXLINE( 447)			_hx_tmp = !(tilemap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 447)			_hx_tmp = false;
            		}
HXDLIN( 447)		if (_hx_tmp) {
HXLINE( 449)			 ::openfl::display::Bitmap bitmap = tilemap->_hx___cacheBitmap;
HXDLIN( 449)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 449)				Float alpha = this->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 449)				bool _hx_tmp1;
HXDLIN( 449)				bool _hx_tmp2;
HXDLIN( 449)				if ((alpha > 0)) {
HXLINE( 449)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 449)					_hx_tmp2 = false;
            				}
HXDLIN( 449)				if (_hx_tmp2) {
HXLINE( 449)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 449)					_hx_tmp1 = false;
            				}
HXDLIN( 449)				if (_hx_tmp1) {
HXLINE( 449)					 ::lime::graphics::cairo::Cairo cairo = this->cairo;
HXDLIN( 449)					this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 449)					this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 449)					this->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 449)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 449)					if (hx::IsNotNull( surface )) {
HXLINE( 449)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 449)						int _hx_tmp3;
HXDLIN( 449)						bool _hx_tmp4;
HXDLIN( 449)						if (this->_hx___allowSmoothing) {
HXLINE( 449)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 449)							_hx_tmp4 = false;
            						}
HXDLIN( 449)						if (_hx_tmp4) {
HXLINE( 449)							_hx_tmp3 = 1;
            						}
            						else {
HXLINE( 449)							_hx_tmp3 = 3;
            						}
HXDLIN( 449)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 449)						cairo->set_source(pattern);
HXDLIN( 449)						if ((alpha == 1)) {
HXLINE( 449)							cairo->paint();
            						}
            						else {
HXLINE( 449)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 449)					this->_hx___popMaskObject(bitmap,null());
HXDLIN( 449)					this->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 453)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(tilemap,hx::ObjectPtr<OBJ_>(this));
HXLINE( 454)			::openfl::_internal::renderer::cairo::CairoTilemap_obj::render(tilemap,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderTilemap,(void))

void CairoRenderer_obj::_hx___renderVideo( ::openfl::media::Video video){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_459___renderVideo)
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___renderVideo,(void))

void CairoRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_464___setBlendMode)
HXLINE( 465)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE( 465)			value = this->_hx___overrideBlendMode;
            		}
HXLINE( 466)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE( 466)			return;
            		}
HXLINE( 468)		this->_hx___blendMode = value;
HXLINE( 469)		this->_hx___setBlendModeCairo(this->cairo,value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CairoRenderer_obj,_hx___setBlendMode,(void))

void CairoRenderer_obj::_hx___setBlendModeCairo( ::lime::graphics::cairo::Cairo cairo, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_474___setBlendModeCairo)
HXDLIN( 474)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==0) ){
HXLINE( 477)			cairo->setOperator(12);
HXDLIN( 477)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 484)			cairo->setOperator(17);
HXDLIN( 484)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE( 487)			cairo->setOperator(23);
HXDLIN( 487)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE( 494)			cairo->setOperator(21);
HXDLIN( 494)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE( 501)			cairo->setOperator(2);
HXDLIN( 501)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE( 504)			cairo->setOperator(18);
HXDLIN( 504)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE( 507)			cairo->setOperator(14);
HXDLIN( 507)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==11) ){
HXLINE( 510)			cairo->setOperator(16);
HXDLIN( 510)			goto _hx_goto_29;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE( 513)			cairo->setOperator(15);
HXDLIN( 513)			goto _hx_goto_29;
            		}
            		/* default */{
HXLINE( 524)			cairo->setOperator(2);
            		}
            		_hx_goto_29:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___setBlendModeCairo,(void))

bool CairoRenderer_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObject object,bool force){
            	HX_GC_STACKFRAME(&_hx_pos_c141c49e61a6a76a_529___updateCacheBitmap)
HXLINE( 534)		if (object->_hx___isCacheBitmapRender) {
HXLINE( 534)			return false;
            		}
HXLINE( 535)		bool updated = false;
HXLINE( 537)		bool _hx_tmp;
HXDLIN( 537)		bool _hx_tmp1;
HXDLIN( 537)		if (!(object->get_cacheAsBitmap())) {
HXLINE( 537)			_hx_tmp1 = !(object->_hx___worldColorTransform->_hx___isDefault(true));
            		}
            		else {
HXLINE( 537)			_hx_tmp1 = true;
            		}
HXDLIN( 537)		if (!(_hx_tmp1)) {
HXLINE( 539)			if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 537)				_hx_tmp = !(this->_hx___worldColorTransform->_hx___isDefault(true));
            			}
            			else {
HXLINE( 537)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 537)			_hx_tmp = true;
            		}
HXDLIN( 537)		if (_hx_tmp) {
HXLINE( 541)			if (hx::IsNull( object->_hx___cacheBitmapMatrix )) {
HXLINE( 543)				object->_hx___cacheBitmapMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 546)			bool hasFilters = hx::IsNotNull( object->_hx___filters );
HXLINE( 547)			 ::openfl::geom::Matrix bitmapMatrix;
HXDLIN( 547)			if (hx::IsNotNull( object->_hx___cacheAsBitmapMatrix )) {
HXLINE( 547)				bitmapMatrix = object->_hx___cacheAsBitmapMatrix;
            			}
            			else {
HXLINE( 547)				bitmapMatrix = object->_hx___renderTransform;
            			}
HXLINE( 549)			 ::openfl::geom::Rectangle rect = null();
HXLINE( 551)			 ::openfl::geom::ColorTransform colorTransform = ::openfl::geom::ColorTransform_obj::_hx___pool->get().StaticCast<  ::openfl::geom::ColorTransform >();
HXLINE( 552)			colorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE( 553)			if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 553)				colorTransform->_hx___combine(this->_hx___worldColorTransform);
            			}
HXLINE( 555)			bool needRender;
HXDLIN( 555)			bool needRender1;
HXDLIN( 555)			bool needRender2;
HXDLIN( 555)			bool needRender3;
HXDLIN( 555)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE( 556)				if (object->_hx___renderDirty) {
HXLINE( 556)					if (!(force)) {
HXLINE( 556)						if (hx::IsNotNull( object->_hx___children )) {
HXLINE( 555)							needRender3 = (object->_hx___children->length > 0);
            						}
            						else {
HXLINE( 555)							needRender3 = false;
            						}
            					}
            					else {
HXLINE( 555)						needRender3 = true;
            					}
            				}
            				else {
HXLINE( 555)					needRender3 = false;
            				}
            			}
            			else {
HXLINE( 555)				needRender3 = true;
            			}
HXDLIN( 555)			if (!(needRender3)) {
HXLINE( 555)				needRender2 = hx::IsNotEq( object->opaqueBackground,object->_hx___cacheBitmapBackground );
            			}
            			else {
HXLINE( 555)				needRender2 = true;
            			}
HXDLIN( 555)			if (!(needRender2)) {
HXLINE( 558)				if (hx::IsNotNull( object->_hx___graphics )) {
HXLINE( 555)					needRender1 = object->_hx___graphics->_hx___softwareDirty;
            				}
            				else {
HXLINE( 555)					needRender1 = false;
            				}
            			}
            			else {
HXLINE( 555)				needRender1 = true;
            			}
HXDLIN( 555)			if (!(needRender1)) {
HXLINE( 555)				needRender = !(object->_hx___cacheBitmapColorTransform->_hx___equals(colorTransform,true));
            			}
            			else {
HXLINE( 555)				needRender = true;
            			}
HXLINE( 561)			bool _hx_tmp2;
HXDLIN( 561)			if (!(needRender)) {
HXLINE( 562)				bool _hx_tmp3;
HXDLIN( 562)				bool _hx_tmp4;
HXDLIN( 562)				if ((bitmapMatrix->a == object->_hx___cacheBitmapMatrix->a)) {
HXLINE( 562)					_hx_tmp4 = (bitmapMatrix->b != object->_hx___cacheBitmapMatrix->b);
            				}
            				else {
HXLINE( 562)					_hx_tmp4 = true;
            				}
HXDLIN( 562)				if (!(_hx_tmp4)) {
HXLINE( 562)					_hx_tmp3 = (bitmapMatrix->c != object->_hx___cacheBitmapMatrix->c);
            				}
            				else {
HXLINE( 562)					_hx_tmp3 = true;
            				}
HXDLIN( 562)				if (!(_hx_tmp3)) {
HXLINE( 561)					_hx_tmp2 = (bitmapMatrix->d != object->_hx___cacheBitmapMatrix->d);
            				}
            				else {
HXLINE( 561)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 561)				_hx_tmp2 = false;
            			}
HXDLIN( 561)			if (_hx_tmp2) {
HXLINE( 567)				needRender = true;
            			}
HXLINE( 570)			bool _hx_tmp5;
HXDLIN( 570)			if (hasFilters) {
HXLINE( 570)				_hx_tmp5 = !(needRender);
            			}
            			else {
HXLINE( 570)				_hx_tmp5 = false;
            			}
HXDLIN( 570)			if (_hx_tmp5) {
HXLINE( 572)				int _g = 0;
HXDLIN( 572)				::Array< ::Dynamic> _g1 = object->_hx___filters;
HXDLIN( 572)				while((_g < _g1->length)){
HXLINE( 572)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 572)					_g = (_g + 1);
HXLINE( 574)					if (filter->_hx___renderDirty) {
HXLINE( 576)						needRender = true;
HXLINE( 577)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXLINE( 582)			bool _hx_tmp6;
HXDLIN( 582)			bool _hx_tmp7;
HXDLIN( 582)			bool _hx_tmp8;
HXDLIN( 582)			if (!(needRender)) {
HXLINE( 582)				_hx_tmp8 = hx::IsNotNull( object->_hx___cacheBitmapData );
            			}
            			else {
HXLINE( 582)				_hx_tmp8 = false;
            			}
HXDLIN( 582)			if (_hx_tmp8) {
HXLINE( 582)				_hx_tmp7 = hx::IsNotNull( object->_hx___cacheBitmapData->image );
            			}
            			else {
HXLINE( 582)				_hx_tmp7 = false;
            			}
HXDLIN( 582)			if (_hx_tmp7) {
HXLINE( 582)				_hx_tmp6 = (object->_hx___cacheBitmapData->image->version < object->_hx___cacheBitmapData->_hx___textureVersion);
            			}
            			else {
HXLINE( 582)				_hx_tmp6 = false;
            			}
HXDLIN( 582)			if (_hx_tmp6) {
HXLINE( 587)				needRender = true;
            			}
HXLINE( 591)			bool updateTransform;
HXDLIN( 591)			if (!(needRender)) {
HXLINE( 591)				updateTransform = !(object->_hx___cacheBitmap->_hx___worldTransform->equals(object->_hx___worldTransform));
            			}
            			else {
HXLINE( 591)				updateTransform = true;
            			}
HXLINE( 593)			object->_hx___cacheBitmapMatrix->copyFrom(bitmapMatrix);
HXLINE( 594)			object->_hx___cacheBitmapMatrix->tx = ( (Float)(0) );
HXLINE( 595)			object->_hx___cacheBitmapMatrix->ty = ( (Float)(0) );
HXLINE( 599)			int bitmapWidth = 0;
HXDLIN( 599)			int bitmapHeight = 0;
HXLINE( 600)			int filterWidth = 0;
HXDLIN( 600)			int filterHeight = 0;
HXLINE( 601)			Float offsetX = ((Float)0.);
HXDLIN( 601)			Float offsetY = ((Float)0.);
HXLINE( 603)			if (updateTransform) {
HXLINE( 605)				rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 607)				object->_hx___getFilterBounds(rect,object->_hx___cacheBitmapMatrix);
HXLINE( 609)				filterWidth = ::Math_obj::ceil(rect->width);
HXLINE( 610)				filterHeight = ::Math_obj::ceil(rect->height);
HXLINE( 612)				if ((rect->x > 0)) {
HXLINE( 612)					offsetX = ( (Float)(::Math_obj::ceil(rect->x)) );
            				}
            				else {
HXLINE( 612)					offsetX = ( (Float)(::Math_obj::floor(rect->x)) );
            				}
HXLINE( 613)				if ((rect->y > 0)) {
HXLINE( 613)					offsetY = ( (Float)(::Math_obj::ceil(rect->y)) );
            				}
            				else {
HXLINE( 613)					offsetY = ( (Float)(::Math_obj::floor(rect->y)) );
            				}
HXLINE( 615)				if (hx::IsNotNull( object->_hx___cacheBitmapData )) {
HXLINE( 617)					bool _hx_tmp9;
HXDLIN( 617)					if ((filterWidth <= object->_hx___cacheBitmapData->width)) {
HXLINE( 617)						_hx_tmp9 = (filterHeight > object->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE( 617)						_hx_tmp9 = true;
            					}
HXDLIN( 617)					if (_hx_tmp9) {
HXLINE( 619)						bitmapWidth = ::Math_obj::ceil(::Math_obj::max((( (Float)(filterWidth) ) * ((Float)1.25)),( (Float)(object->_hx___cacheBitmapData->width) )));
HXLINE( 620)						bitmapHeight = ::Math_obj::ceil(::Math_obj::max((( (Float)(filterHeight) ) * ((Float)1.25)),( (Float)(object->_hx___cacheBitmapData->height) )));
HXLINE( 621)						needRender = true;
            					}
            					else {
HXLINE( 625)						bitmapWidth = object->_hx___cacheBitmapData->width;
HXLINE( 626)						bitmapHeight = object->_hx___cacheBitmapData->height;
            					}
            				}
            				else {
HXLINE( 631)					bitmapWidth = filterWidth;
HXLINE( 632)					bitmapHeight = filterHeight;
            				}
            			}
HXLINE( 636)			if (needRender) {
HXLINE( 638)				object->_hx___cacheBitmapBackground = object->opaqueBackground;
HXLINE( 640)				bool _hx_tmp10;
HXDLIN( 640)				if ((filterWidth >= ((Float)0.5))) {
HXLINE( 640)					_hx_tmp10 = (filterHeight >= ((Float)0.5));
            				}
            				else {
HXLINE( 640)					_hx_tmp10 = false;
            				}
HXDLIN( 640)				if (_hx_tmp10) {
HXLINE( 642)					bool needsFill;
HXDLIN( 642)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 642)						if ((bitmapWidth == filterWidth)) {
HXLINE( 642)							needsFill = (bitmapHeight != filterHeight);
            						}
            						else {
HXLINE( 642)							needsFill = true;
            						}
            					}
            					else {
HXLINE( 642)						needsFill = false;
            					}
HXLINE( 643)					int fillColor;
HXDLIN( 643)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 643)						fillColor = (-16777216 | ( (int)(object->opaqueBackground) ));
            					}
            					else {
HXLINE( 643)						fillColor = 0;
            					}
HXLINE( 644)					int bitmapColor;
HXDLIN( 644)					if (needsFill) {
HXLINE( 644)						bitmapColor = 0;
            					}
            					else {
HXLINE( 644)						bitmapColor = fillColor;
            					}
HXLINE( 646)					bool _hx_tmp11;
HXDLIN( 646)					bool _hx_tmp12;
HXDLIN( 646)					if (hx::IsNotNull( object->_hx___cacheBitmapData )) {
HXLINE( 646)						_hx_tmp12 = (bitmapWidth > object->_hx___cacheBitmapData->width);
            					}
            					else {
HXLINE( 646)						_hx_tmp12 = true;
            					}
HXDLIN( 646)					if (!(_hx_tmp12)) {
HXLINE( 646)						_hx_tmp11 = (bitmapHeight > object->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE( 646)						_hx_tmp11 = true;
            					}
HXDLIN( 646)					if (_hx_tmp11) {
HXLINE( 650)						object->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,bitmapColor);
HXLINE( 652)						if (hx::IsNull( object->_hx___cacheBitmap )) {
HXLINE( 652)							object->_hx___cacheBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
HXLINE( 653)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
HXLINE( 654)						object->_hx___cacheBitmapRendererSW = null();
            					}
            					else {
HXLINE( 658)						object->_hx___cacheBitmapData->fillRect(object->_hx___cacheBitmapData->rect,bitmapColor);
            					}
HXLINE( 661)					if (needsFill) {
HXLINE( 663)						rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE( 664)						object->_hx___cacheBitmapData->fillRect(rect,fillColor);
            					}
            				}
            				else {
HXLINE( 669)					::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
HXLINE( 671)					object->_hx___cacheBitmap = null();
HXLINE( 672)					object->_hx___cacheBitmapData = null();
HXLINE( 673)					object->_hx___cacheBitmapData2 = null();
HXLINE( 674)					object->_hx___cacheBitmapData3 = null();
HXLINE( 675)					object->_hx___cacheBitmapRendererSW = null();
HXLINE( 677)					return true;
            				}
            			}
            			else {
HXLINE( 684)				object->_hx___cacheBitmapData = object->_hx___cacheBitmap->get_bitmapData();
HXLINE( 685)				object->_hx___cacheBitmapData2 = null();
HXLINE( 686)				object->_hx___cacheBitmapData3 = null();
            			}
HXLINE( 689)			if (updateTransform) {
HXLINE( 691)				object->_hx___cacheBitmap->_hx___worldTransform->copyFrom(object->_hx___worldTransform);
HXLINE( 693)				if (hx::IsEq( bitmapMatrix,object->_hx___renderTransform )) {
HXLINE( 695)					object->_hx___cacheBitmap->_hx___renderTransform->identity();
HXLINE( 696)					object->_hx___cacheBitmap->_hx___renderTransform->tx = (object->_hx___renderTransform->tx + offsetX);
HXLINE( 697)					object->_hx___cacheBitmap->_hx___renderTransform->ty = (object->_hx___renderTransform->ty + offsetY);
            				}
            				else {
HXLINE( 701)					object->_hx___cacheBitmap->_hx___renderTransform->copyFrom(object->_hx___cacheBitmapMatrix);
HXLINE( 702)					object->_hx___cacheBitmap->_hx___renderTransform->invert();
HXLINE( 703)					object->_hx___cacheBitmap->_hx___renderTransform->concat(object->_hx___renderTransform);
HXLINE( 704)					 ::openfl::geom::Matrix object1 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN( 704)					object1->tx = (object1->tx + offsetX);
HXLINE( 705)					 ::openfl::geom::Matrix object2 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN( 705)					object2->ty = (object2->ty + offsetY);
            				}
            			}
HXLINE( 709)			object->_hx___cacheBitmap->smoothing = this->_hx___allowSmoothing;
HXLINE( 710)			object->_hx___cacheBitmap->_hx___renderable = object->_hx___renderable;
HXLINE( 711)			object->_hx___cacheBitmap->_hx___worldAlpha = object->_hx___worldAlpha;
HXLINE( 712)			object->_hx___cacheBitmap->_hx___worldBlendMode = object->_hx___worldBlendMode;
HXLINE( 713)			object->_hx___cacheBitmap->_hx___worldShader = object->_hx___worldShader;
HXLINE( 714)			object->_hx___cacheBitmap->set_mask(object->_hx___mask);
HXLINE( 716)			if (needRender) {
HXLINE( 718)				bool _hx_tmp13;
HXDLIN( 718)				if (hx::IsNotNull( object->_hx___cacheBitmapRendererSW )) {
HXLINE( 718)					_hx_tmp13 = (object->_hx___cacheBitmapRendererSW->_hx___type != HX_("cairo",88,30,19,41));
            				}
            				else {
HXLINE( 718)					_hx_tmp13 = true;
            				}
HXDLIN( 718)				if (_hx_tmp13) {
HXLINE( 720)					if (hx::IsNull( object->_hx___cacheBitmapData->image )) {
HXLINE( 722)						int color;
HXDLIN( 722)						if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 722)							color = (-16777216 | ( (int)(object->opaqueBackground) ));
            						}
            						else {
HXLINE( 722)							color = 0;
            						}
HXLINE( 723)						object->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,color);
HXLINE( 724)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
            					}
HXLINE( 727)					object->_hx___cacheBitmapRendererSW =  ::openfl::_internal::renderer::cairo::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,object->_hx___cacheBitmapData->getSurface()));
HXLINE( 728)					object->_hx___cacheBitmapRendererSW->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 729)					object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE( 732)				if (hx::IsNull( object->_hx___cacheBitmapColorTransform )) {
HXLINE( 732)					object->_hx___cacheBitmapColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE( 734)				object->_hx___cacheBitmapRendererSW->_hx___stage = object->stage;
HXLINE( 736)				object->_hx___cacheBitmapRendererSW->_hx___allowSmoothing = this->_hx___allowSmoothing;
HXLINE( 737)				hx::TCast<  ::openfl::_internal::renderer::cairo::CairoRenderer >::cast(object->_hx___cacheBitmapRendererSW)->_hx___setBlendMode(10);
HXLINE( 738)				object->_hx___cacheBitmapRendererSW->_hx___worldAlpha = (( (Float)(1) ) / object->_hx___worldAlpha);
HXLINE( 740)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->copyFrom(object->_hx___renderTransform);
HXLINE( 741)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->invert();
HXLINE( 742)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->concat(object->_hx___cacheBitmapMatrix);
HXLINE( 743)				 ::openfl::geom::Matrix object3 = object->_hx___cacheBitmapRendererSW->_hx___worldTransform;
HXDLIN( 743)				object3->tx = (object3->tx - offsetX);
HXLINE( 744)				 ::openfl::geom::Matrix object4 = object->_hx___cacheBitmapRendererSW->_hx___worldTransform;
HXDLIN( 744)				object4->ty = (object4->ty - offsetY);
HXLINE( 746)				object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform->_hx___copyFrom(colorTransform);
HXLINE( 747)				object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform->_hx___invert();
HXLINE( 749)				object->_hx___isCacheBitmapRender = true;
HXLINE( 751)				object->_hx___cacheBitmapRendererSW->_hx___drawBitmapData(object->_hx___cacheBitmapData,object,null());
HXLINE( 753)				if (hasFilters) {
HXLINE( 755)					bool needSecondBitmapData = false;
HXLINE( 756)					bool needCopyOfOriginal = false;
HXLINE( 758)					{
HXLINE( 758)						int _g2 = 0;
HXDLIN( 758)						::Array< ::Dynamic> _g11 = object->_hx___filters;
HXDLIN( 758)						while((_g2 < _g11->length)){
HXLINE( 758)							 ::openfl::filters::BitmapFilter filter1 = _g11->__get(_g2).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 758)							_g2 = (_g2 + 1);
HXLINE( 760)							if (filter1->_hx___needSecondBitmapData) {
HXLINE( 762)								needSecondBitmapData = true;
            							}
HXLINE( 764)							if (filter1->_hx___preserveObject) {
HXLINE( 766)								needCopyOfOriginal = true;
            							}
            						}
            					}
HXLINE( 770)					 ::openfl::display::BitmapData bitmap = object->_hx___cacheBitmapData;
HXLINE( 771)					 ::openfl::display::BitmapData bitmap2 = null();
HXLINE( 772)					 ::openfl::display::BitmapData bitmap3 = null();
HXLINE( 774)					if (needSecondBitmapData) {
HXLINE( 776)						bool _hx_tmp14;
HXDLIN( 776)						bool _hx_tmp15;
HXDLIN( 776)						bool _hx_tmp16;
HXDLIN( 776)						if (hx::IsNotNull( object->_hx___cacheBitmapData2 )) {
HXLINE( 776)							_hx_tmp16 = hx::IsNull( object->_hx___cacheBitmapData2->image );
            						}
            						else {
HXLINE( 776)							_hx_tmp16 = true;
            						}
HXDLIN( 776)						if (!(_hx_tmp16)) {
HXLINE( 776)							_hx_tmp15 = (bitmapWidth > object->_hx___cacheBitmapData2->width);
            						}
            						else {
HXLINE( 776)							_hx_tmp15 = true;
            						}
HXDLIN( 776)						if (!(_hx_tmp15)) {
HXLINE( 776)							_hx_tmp14 = (bitmapHeight > object->_hx___cacheBitmapData2->height);
            						}
            						else {
HXLINE( 776)							_hx_tmp14 = true;
            						}
HXDLIN( 776)						if (_hx_tmp14) {
HXLINE( 781)							object->_hx___cacheBitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,0);
            						}
            						else {
HXLINE( 785)							object->_hx___cacheBitmapData2->fillRect(object->_hx___cacheBitmapData2->rect,0);
            						}
HXLINE( 787)						bitmap2 = object->_hx___cacheBitmapData2;
            					}
            					else {
HXLINE( 791)						bitmap2 = bitmap;
            					}
HXLINE( 794)					if (needCopyOfOriginal) {
HXLINE( 796)						bool _hx_tmp17;
HXDLIN( 796)						bool _hx_tmp18;
HXDLIN( 796)						bool _hx_tmp19;
HXDLIN( 796)						if (hx::IsNotNull( object->_hx___cacheBitmapData3 )) {
HXLINE( 796)							_hx_tmp19 = hx::IsNull( object->_hx___cacheBitmapData3->image );
            						}
            						else {
HXLINE( 796)							_hx_tmp19 = true;
            						}
HXDLIN( 796)						if (!(_hx_tmp19)) {
HXLINE( 796)							_hx_tmp18 = (bitmapWidth > object->_hx___cacheBitmapData3->width);
            						}
            						else {
HXLINE( 796)							_hx_tmp18 = true;
            						}
HXDLIN( 796)						if (!(_hx_tmp18)) {
HXLINE( 796)							_hx_tmp17 = (bitmapHeight > object->_hx___cacheBitmapData3->height);
            						}
            						else {
HXLINE( 796)							_hx_tmp17 = true;
            						}
HXDLIN( 796)						if (_hx_tmp17) {
HXLINE( 801)							object->_hx___cacheBitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,0);
            						}
            						else {
HXLINE( 805)							object->_hx___cacheBitmapData3->fillRect(object->_hx___cacheBitmapData3->rect,0);
            						}
HXLINE( 807)						bitmap3 = object->_hx___cacheBitmapData3;
            					}
HXLINE( 810)					if (hx::IsNull( object->_hx___tempPoint )) {
HXLINE( 810)						object->_hx___tempPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 811)					 ::openfl::geom::Point destPoint = object->_hx___tempPoint;
HXLINE( 812)					 ::openfl::display::BitmapData cacheBitmap;
HXDLIN( 812)					 ::openfl::display::BitmapData lastBitmap;
HXLINE( 814)					{
HXLINE( 814)						int _g21 = 0;
HXDLIN( 814)						::Array< ::Dynamic> _g3 = object->_hx___filters;
HXDLIN( 814)						while((_g21 < _g3->length)){
HXLINE( 814)							 ::openfl::filters::BitmapFilter filter2 = _g3->__get(_g21).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 814)							_g21 = (_g21 + 1);
HXLINE( 816)							if (filter2->_hx___preserveObject) {
HXLINE( 818)								bitmap3->copyPixels(bitmap,bitmap->rect,destPoint,null(),null(),null());
            							}
HXLINE( 821)							lastBitmap = filter2->_hx___applyFilter(bitmap2,bitmap,bitmap->rect,destPoint);
HXLINE( 823)							if (filter2->_hx___preserveObject) {
HXLINE( 825)								 ::openfl::geom::ColorTransform _hx_tmp20;
HXDLIN( 825)								if (hx::IsNotNull( object->_hx___objectTransform )) {
HXLINE( 825)									_hx_tmp20 = object->_hx___objectTransform->get_colorTransform();
            								}
            								else {
HXLINE( 825)									_hx_tmp20 = null();
            								}
HXDLIN( 825)								lastBitmap->draw(bitmap3,null(),_hx_tmp20,null(),null(),null());
            							}
HXLINE( 827)							filter2->_hx___renderDirty = false;
HXLINE( 829)							bool _hx_tmp21;
HXDLIN( 829)							if (needSecondBitmapData) {
HXLINE( 829)								_hx_tmp21 = hx::IsEq( lastBitmap,bitmap2 );
            							}
            							else {
HXLINE( 829)								_hx_tmp21 = false;
            							}
HXDLIN( 829)							if (_hx_tmp21) {
HXLINE( 831)								cacheBitmap = bitmap;
HXLINE( 832)								bitmap = bitmap2;
HXLINE( 833)								bitmap2 = cacheBitmap;
            							}
            						}
            					}
HXLINE( 837)					if (hx::IsNotEq( object->_hx___cacheBitmapData,bitmap )) {
HXLINE( 843)						cacheBitmap = object->_hx___cacheBitmapData;
HXLINE( 844)						object->_hx___cacheBitmapData = bitmap;
HXLINE( 845)						object->_hx___cacheBitmapData2 = cacheBitmap;
HXLINE( 846)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
HXLINE( 847)						object->_hx___cacheBitmapRendererSW = null();
            					}
HXLINE( 850)					object->_hx___cacheBitmap->_hx___imageVersion = object->_hx___cacheBitmapData->_hx___textureVersion;
            				}
HXLINE( 853)				object->_hx___cacheBitmapColorTransform->_hx___copyFrom(colorTransform);
HXLINE( 855)				if (!(object->_hx___cacheBitmapColorTransform->_hx___isDefault(true))) {
HXLINE( 857)					object->_hx___cacheBitmapColorTransform->alphaMultiplier = ( (Float)(1) );
HXLINE( 858)					object->_hx___cacheBitmapData->colorTransform(object->_hx___cacheBitmapData->rect,object->_hx___cacheBitmapColorTransform);
            				}
HXLINE( 861)				object->_hx___isCacheBitmapRender = false;
            			}
HXLINE( 864)			if (updateTransform) {
HXLINE( 866)				::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            			}
HXLINE( 869)			updated = updateTransform;
HXLINE( 871)			::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
            		}
            		else {
HXLINE( 873)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE( 875)				object->_hx___cacheBitmap = null();
HXLINE( 876)				object->_hx___cacheBitmapData = null();
HXLINE( 877)				object->_hx___cacheBitmapData2 = null();
HXLINE( 878)				object->_hx___cacheBitmapData3 = null();
HXLINE( 879)				object->_hx___cacheBitmapColorTransform = null();
HXLINE( 880)				object->_hx___cacheBitmapRendererSW = null();
HXLINE( 882)				updated = true;
            			}
            		}
HXLINE( 885)		return updated;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___updateCacheBitmap,return )


hx::ObjectPtr< CairoRenderer_obj > CairoRenderer_obj::__new( ::lime::graphics::cairo::Cairo cairo) {
	hx::ObjectPtr< CairoRenderer_obj > __this = new CairoRenderer_obj();
	__this->__construct(cairo);
	return __this;
}

hx::ObjectPtr< CairoRenderer_obj > CairoRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::cairo::Cairo cairo) {
	CairoRenderer_obj *__this = (CairoRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CairoRenderer_obj), true, "openfl._internal.renderer.cairo.CairoRenderer"));
	*(void **)__this = CairoRenderer_obj::_hx_vtable;
	__this->__construct(cairo);
	return __this;
}

CairoRenderer_obj::CairoRenderer_obj()
{
}

void CairoRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CairoRenderer);
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___matrix3,"__matrix3");
	HX_MARK_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	 ::openfl::display::CairoRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CairoRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___matrix3,"__matrix3");
	HX_VISIT_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	 ::openfl::display::CairoRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CairoRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { return hx::Val( _hx___matrix3 ); }
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getAlpha") ) { return hx::Val( _hx___getAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return hx::Val( applyMatrix_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderMask") ) { return hx::Val( _hx___renderMask_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderShape") ) { return hx::Val( _hx___renderShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderVideo") ) { return hx::Val( _hx___renderVideo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderBitmap") ) { return hx::Val( _hx___renderBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderTilemap") ) { return hx::Val( _hx___renderTilemap_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { return hx::Val( _hx___colorTransform ); }
		if (HX_FIELD_EQ(inName,"__drawBitmapData") ) { return hx::Val( _hx___drawBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTextField") ) { return hx::Val( _hx___renderTextField_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderBitmapData") ) { return hx::Val( _hx___renderBitmapData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__getColorTransform") ) { return hx::Val( _hx___getColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendModeCairo") ) { return hx::Val( _hx___setBlendModeCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__renderSimpleButton") ) { return hx::Val( _hx___renderSimpleButton_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__renderDisplayObject") ) { return hx::Val( _hx___renderDisplayObject_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__renderDisplayObjectContainer") ) { return hx::Val( _hx___renderDisplayObjectContainer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CairoRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { _hx___matrix3=inValue.Cast<  ::lime::math::Matrix3 >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { _hx___colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CairoRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__matrix",61,a1,f7,63));
	outFields->push(HX_("__matrix3",b2,93,b5,14));
	outFields->push(HX_("__colorTransform",a9,62,7f,e1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CairoRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(CairoRenderer_obj,_hx___matrix),HX_("__matrix",61,a1,f7,63)},
	{hx::fsObject /*  ::lime::math::Matrix3 */ ,(int)offsetof(CairoRenderer_obj,_hx___matrix3),HX_("__matrix3",b2,93,b5,14)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(CairoRenderer_obj,_hx___colorTransform),HX_("__colorTransform",a9,62,7f,e1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CairoRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String CairoRenderer_obj_sMemberFields[] = {
	HX_("__matrix",61,a1,f7,63),
	HX_("__matrix3",b2,93,b5,14),
	HX_("__colorTransform",a9,62,7f,e1),
	HX_("applyMatrix",4f,f6,c2,f7),
	HX_("__clear",6d,ca,b9,b2),
	HX_("__drawBitmapData",fd,1d,0a,4b),
	HX_("__getAlpha",08,2a,a6,24),
	HX_("__getColorTransform",9f,af,a3,d2),
	HX_("__popMask",fd,b7,5f,c4),
	HX_("__popMaskObject",9c,46,0d,10),
	HX_("__popMaskRect",c1,73,e8,16),
	HX_("__pushMask",06,e7,7f,ba),
	HX_("__pushMaskObject",65,e2,3b,45),
	HX_("__pushMaskRect",4a,5b,e7,a0),
	HX_("__render",76,d6,58,ad),
	HX_("__renderBitmap",05,97,22,81),
	HX_("__renderBitmapData",cf,7f,f7,49),
	HX_("__renderDisplayObject",4b,62,d0,99),
	HX_("__renderDisplayObjectContainer",76,d1,2a,e5),
	HX_("__renderMask",82,b6,f3,1d),
	HX_("__renderShape",cb,50,46,90),
	HX_("__renderSimpleButton",5a,07,4e,4e),
	HX_("__renderTextField",77,af,83,05),
	HX_("__renderTilemap",58,9c,2e,c9),
	HX_("__renderVideo",25,82,25,4b),
	HX_("__setBlendMode",72,27,48,51),
	HX_("__setBlendModeCairo",b6,3b,c0,5d),
	HX_("__updateCacheBitmap",28,11,07,27),
	::String(null()) };

hx::Class CairoRenderer_obj::__mClass;

void CairoRenderer_obj::__register()
{
	CairoRenderer_obj _hx_dummy;
	CairoRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.cairo.CairoRenderer",ea,3e,63,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CairoRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CairoRenderer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c141c49e61a6a76a_49_boot)
HXDLIN(  49)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
