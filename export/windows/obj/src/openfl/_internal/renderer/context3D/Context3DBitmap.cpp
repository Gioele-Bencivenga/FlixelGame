// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DAlphaMaskShader
#include <openfl/_internal/renderer/context3D/Context3DAlphaMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DRenderer
#include <openfl/_internal/renderer/context3D/Context3DRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6746d5f480a0c115_27_render,"openfl._internal.renderer.context3D.Context3DBitmap","render",0xf96cd13e,"openfl._internal.renderer.context3D.Context3DBitmap.render","openfl/_internal/renderer/context3D/Context3DBitmap.hx",27,0x96bf4e38)
HX_LOCAL_STACK_FRAME(_hx_pos_6746d5f480a0c115_102_renderMask,"openfl._internal.renderer.context3D.Context3DBitmap","renderMask",0xc4b0b54a,"openfl._internal.renderer.context3D.Context3DBitmap.renderMask","openfl/_internal/renderer/context3D/Context3DBitmap.hx",102,0x96bf4e38)
HX_LOCAL_STACK_FRAME(_hx_pos_6746d5f480a0c115_24_boot,"openfl._internal.renderer.context3D.Context3DBitmap","boot",0x3592201a,"openfl._internal.renderer.context3D.Context3DBitmap.boot","openfl/_internal/renderer/context3D/Context3DBitmap.hx",24,0x96bf4e38)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DBitmap_obj::__construct() { }

Dynamic Context3DBitmap_obj::__CreateEmpty() { return new Context3DBitmap_obj; }

void *Context3DBitmap_obj::_hx_vtable = 0;

Dynamic Context3DBitmap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DBitmap_obj > _hx_result = new Context3DBitmap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DBitmap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f3e2682;
}

void Context3DBitmap_obj::render( ::openfl::display::Bitmap bitmap, ::openfl::_internal::renderer::context3D::Context3DRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_6746d5f480a0c115_27_render)
HXLINE(  28)		bool _hx_tmp;
HXDLIN(  28)		if (!(!(bitmap->_hx___renderable))) {
HXLINE(  28)			_hx_tmp = (bitmap->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE(  28)			_hx_tmp = true;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  28)			return;
            		}
HXLINE(  30)		bool _hx_tmp1;
HXDLIN(  30)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE(  30)			_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            		}
            		else {
HXLINE(  30)			_hx_tmp1 = false;
            		}
HXDLIN(  30)		if (_hx_tmp1) {
HXLINE(  32)			 ::openfl::display3D::Context3D context = renderer->context3D;
HXLINE(  35)			bool alphaMask;
HXDLIN(  35)			if (hx::IsNotNull( bitmap->get_mask() )) {
HXLINE(  35)				alphaMask = bitmap->get_mask()->get_cacheAsBitmap();
            			}
            			else {
HXLINE(  35)				alphaMask = false;
            			}
HXLINE(  38)			bool _hx_tmp2;
HXDLIN(  38)			if (alphaMask) {
HXLINE(  38)				_hx_tmp2 = hx::IsNotEq( bitmap->get_mask()->_hx___type,::openfl::_internal::renderer::DisplayObjectType_obj::BITMAP_dyn() );
            			}
            			else {
HXLINE(  38)				_hx_tmp2 = false;
            			}
HXDLIN(  38)			if (_hx_tmp2) {
HXLINE(  40)				alphaMask = false;
            			}
HXLINE(  43)			renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXLINE(  44)			if (!(alphaMask)) {
HXLINE(  44)				renderer->_hx___pushMaskObject(bitmap,null());
            			}
HXLINE(  47)			 ::openfl::display::Shader shader;
HXDLIN(  47)			if (!(alphaMask)) {
HXLINE(  47)				shader = bitmap->_hx___worldShader;
            			}
            			else {
HXLINE(  47)				shader = renderer->_hx___alphaMaskShader;
            			}
HXDLIN(  47)			 ::openfl::display::Shader shader1 = renderer->_hx___initDisplayShader(shader);
HXLINE(  48)			renderer->setShader(shader1);
HXLINE(  49)			bool _hx_tmp3;
HXDLIN(  49)			if (renderer->_hx___allowSmoothing) {
HXLINE(  49)				if (!(bitmap->smoothing)) {
HXLINE(  49)					_hx_tmp3 = renderer->_hx___upscaled;
            				}
            				else {
HXLINE(  49)					_hx_tmp3 = true;
            				}
            			}
            			else {
HXLINE(  49)				_hx_tmp3 = false;
            			}
HXDLIN(  49)			renderer->applyBitmapData(bitmap->_hx___bitmapData,_hx_tmp3,null());
HXLINE(  50)			renderer->applyMatrix(renderer->_hx___getMatrix(bitmap->_hx___renderTransform,bitmap->pixelSnapping));
HXLINE(  51)			renderer->applyAlpha(bitmap->_hx___worldAlpha);
HXLINE(  52)			renderer->applyColorTransform(bitmap->_hx___worldColorTransform);
HXLINE(  54)			if (alphaMask) {
HXLINE(  60)				 ::openfl::display::Bitmap maskBitmap = ( ( ::openfl::display::Bitmap)(bitmap->get_mask()) );
HXLINE(  61)				renderer->_hx___currentShader->_hx___alphaTexture->input = maskBitmap->_hx___bitmapData;
HXLINE(  62)				if (hx::IsNull( renderer->_hx___currentShader->_hx___alphaTextureMatrix->value )) {
HXLINE(  62)					renderer->_hx___currentShader->_hx___alphaTextureMatrix->value = ::Array_obj< Float >::__new(0);
            				}
HXLINE(  63)				::Array< Float > matrix = renderer->_hx___currentShader->_hx___alphaTextureMatrix->value;
HXLINE(  65)				 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  66)				transform->copyFrom(bitmap->_hx___renderTransform);
HXLINE(  67)				transform->invert();
HXLINE(  68)				transform->concat(maskBitmap->_hx___renderTransform);
HXLINE(  70)				matrix[0] = (transform->a * (( (Float)(bitmap->_hx___bitmapData->width) ) / ( (Float)(maskBitmap->_hx___bitmapData->width) )));
HXLINE(  71)				matrix[1] = transform->b;
HXLINE(  72)				matrix[4] = transform->c;
HXLINE(  73)				matrix[5] = (transform->d * (( (Float)(bitmap->_hx___bitmapData->height) ) / ( (Float)(maskBitmap->_hx___bitmapData->height) )));
HXLINE(  74)				matrix[12] = transform->tx;
HXLINE(  75)				matrix[13] = transform->ty;
HXLINE(  76)				matrix[15] = ((Float)0.0);
HXLINE(  78)				::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            			}
HXLINE(  81)			renderer->updateShader();
HXLINE(  83)			 ::openfl::display3D::VertexBuffer3D vertexBuffer = bitmap->_hx___bitmapData->getVertexBuffer(context,null(),null());
HXLINE(  84)			if (hx::IsNotNull( shader1->_hx___position )) {
HXLINE(  84)				context->setVertexBufferAt(( (int)(shader1->_hx___position->index) ),vertexBuffer,0,3);
            			}
HXLINE(  85)			if (hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE(  85)				context->setVertexBufferAt(( (int)(shader1->_hx___textureCoord->index) ),vertexBuffer,3,2);
            			}
HXLINE(  86)			 ::openfl::display3D::IndexBuffer3D indexBuffer = bitmap->_hx___bitmapData->getIndexBuffer(context,null());
HXLINE(  87)			context->drawTriangles(indexBuffer,null(),null());
HXLINE(  93)			renderer->_hx___clearShader();
HXLINE(  96)			if (!(alphaMask)) {
HXLINE(  96)				renderer->_hx___popMaskObject(bitmap,null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DBitmap_obj,render,(void))

void Context3DBitmap_obj::renderMask( ::openfl::display::Bitmap bitmap, ::openfl::_internal::renderer::context3D::Context3DRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_6746d5f480a0c115_102_renderMask)
HXDLIN( 102)		bool _hx_tmp;
HXDLIN( 102)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXDLIN( 102)			_hx_tmp = bitmap->_hx___bitmapData->_hx___isValid;
            		}
            		else {
HXDLIN( 102)			_hx_tmp = false;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			 ::openfl::display3D::Context3D context = renderer->context3D;
HXLINE( 106)			 ::openfl::_internal::renderer::context3D::Context3DMaskShader shader = renderer->_hx___maskShader;
HXLINE( 107)			renderer->setShader(shader);
HXLINE( 108)			renderer->applyBitmapData(::openfl::_internal::renderer::context3D::Context3DMaskShader_obj::opaqueBitmapData,true,null());
HXLINE( 109)			renderer->applyMatrix(renderer->_hx___getMatrix(bitmap->_hx___renderTransform,bitmap->pixelSnapping));
HXLINE( 110)			renderer->updateShader();
HXLINE( 112)			 ::openfl::display3D::VertexBuffer3D vertexBuffer = bitmap->_hx___bitmapData->getVertexBuffer(context,null(),null());
HXLINE( 113)			if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 113)				context->setVertexBufferAt(( (int)(shader->_hx___position->index) ),vertexBuffer,0,3);
            			}
HXLINE( 114)			if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 114)				context->setVertexBufferAt(( (int)(shader->_hx___textureCoord->index) ),vertexBuffer,3,2);
            			}
HXLINE( 115)			 ::openfl::display3D::IndexBuffer3D indexBuffer = bitmap->_hx___bitmapData->getIndexBuffer(context,null());
HXLINE( 116)			context->drawTriangles(indexBuffer,null(),null());
HXLINE( 122)			renderer->_hx___clearShader();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DBitmap_obj,renderMask,(void))


Context3DBitmap_obj::Context3DBitmap_obj()
{
}

bool Context3DBitmap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Context3DBitmap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Context3DBitmap_obj_sStaticStorageInfo = 0;
#endif

hx::Class Context3DBitmap_obj::__mClass;

static ::String Context3DBitmap_obj_sStaticFields[] = {
	HX_("render",56,6b,29,05),
	HX_("renderMask",62,3b,60,e5),
	::String(null())
};

void Context3DBitmap_obj::__register()
{
	Context3DBitmap_obj _hx_dummy;
	Context3DBitmap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DBitmap",86,4d,b3,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DBitmap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DBitmap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Context3DBitmap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DBitmap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DBitmap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DBitmap_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6746d5f480a0c115_24_boot)
HXDLIN(  24)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
