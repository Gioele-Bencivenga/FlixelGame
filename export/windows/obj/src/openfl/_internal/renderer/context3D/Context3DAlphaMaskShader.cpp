// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DAlphaMaskShader
#include <openfl/_internal/renderer/context3D/Context3DAlphaMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a6738e394363cf51_47_new,"openfl._internal.renderer.context3D.Context3DAlphaMaskShader","new",0xb8f76eaa,"openfl._internal.renderer.context3D.Context3DAlphaMaskShader.new","openfl/_internal/renderer/context3D/Context3DAlphaMaskShader.hx",47,0x71a1cac6)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DAlphaMaskShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a6738e394363cf51_47_new)
HXLINE( 182)		if (hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("varying vec2 openfl_AlphaTextureCoordv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_AlphaTexture;\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tvoid main(void)\n\t\t{\n\t\t\tvec4 mask = texture2D (openfl_AlphaTexture, openfl_AlphaTextureCoordv);\n\n\t\t\tif (mask.a == 0.0)\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\tgl_FragColor = color * mask.a;\n\t\t\t}\n\t\t}",0b,e9,ad,21);
            		}
HXLINE( 174)		if (hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_AlphaTextureCoordv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_AlphaTextureMatrix;\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\topenfl_AlphaTextureCoordv = vec2(vec4(openfl_TextureCoord, 0.0, 0.0) * openfl_AlphaTextureMatrix);\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t}",ff,fc,2e,57);
            		}
HXLINE(  48)		super::__construct(null());
HXLINE(   9)		this->_hx___isGenerated = true;
HXDLIN(   9)		this->_hx___initGL();
            	}

Dynamic Context3DAlphaMaskShader_obj::__CreateEmpty() { return new Context3DAlphaMaskShader_obj; }

void *Context3DAlphaMaskShader_obj::_hx_vtable = 0;

Dynamic Context3DAlphaMaskShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DAlphaMaskShader_obj > _hx_result = new Context3DAlphaMaskShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DAlphaMaskShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x676ab1f7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x676ab1f7;
	} else {
		return inClassId==(int)0x7eef410c;
	}
}


hx::ObjectPtr< Context3DAlphaMaskShader_obj > Context3DAlphaMaskShader_obj::__new() {
	hx::ObjectPtr< Context3DAlphaMaskShader_obj > __this = new Context3DAlphaMaskShader_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Context3DAlphaMaskShader_obj > Context3DAlphaMaskShader_obj::__alloc(hx::Ctx *_hx_ctx) {
	Context3DAlphaMaskShader_obj *__this = (Context3DAlphaMaskShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3DAlphaMaskShader_obj), true, "openfl._internal.renderer.context3D.Context3DAlphaMaskShader"));
	*(void **)__this = Context3DAlphaMaskShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Context3DAlphaMaskShader_obj::Context3DAlphaMaskShader_obj()
{
}

void Context3DAlphaMaskShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3DAlphaMaskShader);
	HX_MARK_MEMBER_NAME(openfl_Position,"openfl_Position");
	HX_MARK_MEMBER_NAME(openfl_TextureCoord,"openfl_TextureCoord");
	HX_MARK_MEMBER_NAME(openfl_AlphaTextureMatrix,"openfl_AlphaTextureMatrix");
	HX_MARK_MEMBER_NAME(openfl_Matrix,"openfl_Matrix");
	HX_MARK_MEMBER_NAME(openfl_AlphaTexture,"openfl_AlphaTexture");
	HX_MARK_MEMBER_NAME(openfl_Texture,"openfl_Texture");
	 ::openfl::display::Shader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3DAlphaMaskShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(openfl_Position,"openfl_Position");
	HX_VISIT_MEMBER_NAME(openfl_TextureCoord,"openfl_TextureCoord");
	HX_VISIT_MEMBER_NAME(openfl_AlphaTextureMatrix,"openfl_AlphaTextureMatrix");
	HX_VISIT_MEMBER_NAME(openfl_Matrix,"openfl_Matrix");
	HX_VISIT_MEMBER_NAME(openfl_AlphaTexture,"openfl_AlphaTexture");
	HX_VISIT_MEMBER_NAME(openfl_Texture,"openfl_Texture");
	 ::openfl::display::Shader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3DAlphaMaskShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"openfl_Matrix") ) { return hx::Val( openfl_Matrix ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"openfl_Texture") ) { return hx::Val( openfl_Texture ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openfl_Position") ) { return hx::Val( openfl_Position ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"openfl_TextureCoord") ) { return hx::Val( openfl_TextureCoord ); }
		if (HX_FIELD_EQ(inName,"openfl_AlphaTexture") ) { return hx::Val( openfl_AlphaTexture ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"openfl_AlphaTextureMatrix") ) { return hx::Val( openfl_AlphaTextureMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Context3DAlphaMaskShader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"openfl_Matrix") ) { openfl_Matrix=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"openfl_Texture") ) { openfl_Texture=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"openfl_Position") ) { openfl_Position=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"openfl_TextureCoord") ) { openfl_TextureCoord=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"openfl_AlphaTexture") ) { openfl_AlphaTexture=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"openfl_AlphaTextureMatrix") ) { openfl_AlphaTextureMatrix=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Context3DAlphaMaskShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("openfl_Position",98,fe,6c,ee));
	outFields->push(HX_("openfl_TextureCoord",49,e9,27,e8));
	outFields->push(HX_("openfl_AlphaTextureMatrix",ed,ad,10,ff));
	outFields->push(HX_("openfl_Matrix",70,ea,41,06));
	outFields->push(HX_("openfl_AlphaTexture",8c,92,7d,d7));
	outFields->push(HX_("openfl_Texture",cc,bd,e4,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Context3DAlphaMaskShader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_Position),HX_("openfl_Position",98,fe,6c,ee)},
	{hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_TextureCoord),HX_("openfl_TextureCoord",49,e9,27,e8)},
	{hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_AlphaTextureMatrix),HX_("openfl_AlphaTextureMatrix",ed,ad,10,ff)},
	{hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_Matrix),HX_("openfl_Matrix",70,ea,41,06)},
	{hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_AlphaTexture),HX_("openfl_AlphaTexture",8c,92,7d,d7)},
	{hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(Context3DAlphaMaskShader_obj,openfl_Texture),HX_("openfl_Texture",cc,bd,e4,7e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Context3DAlphaMaskShader_obj_sStaticStorageInfo = 0;
#endif

static ::String Context3DAlphaMaskShader_obj_sMemberFields[] = {
	HX_("openfl_Position",98,fe,6c,ee),
	HX_("openfl_TextureCoord",49,e9,27,e8),
	HX_("openfl_AlphaTextureMatrix",ed,ad,10,ff),
	HX_("openfl_Matrix",70,ea,41,06),
	HX_("openfl_AlphaTexture",8c,92,7d,d7),
	HX_("openfl_Texture",cc,bd,e4,7e),
	::String(null()) };

hx::Class Context3DAlphaMaskShader_obj::__mClass;

void Context3DAlphaMaskShader_obj::__register()
{
	Context3DAlphaMaskShader_obj _hx_dummy;
	Context3DAlphaMaskShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DAlphaMaskShader",b8,91,64,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3DAlphaMaskShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3DAlphaMaskShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DAlphaMaskShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DAlphaMaskShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
