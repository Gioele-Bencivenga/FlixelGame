// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DDisplayObject
#include <openfl/_internal/renderer/context3D/Context3DDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DRenderer
#include <openfl/_internal/renderer/context3D/Context3DRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d8e5cd1b1e135cbb_22_render,"openfl._internal.renderer.context3D.Context3DDisplayObject","render",0x2e9ac55a,"openfl._internal.renderer.context3D.Context3DDisplayObject.render","openfl/_internal/renderer/context3D/Context3DDisplayObject.hx",22,0xcd6769d4)
HX_LOCAL_STACK_FRAME(_hx_pos_d8e5cd1b1e135cbb_58_renderMask,"openfl._internal.renderer.context3D.Context3DDisplayObject","renderMask",0x7920e766,"openfl._internal.renderer.context3D.Context3DDisplayObject.renderMask","openfl/_internal/renderer/context3D/Context3DDisplayObject.hx",58,0xcd6769d4)
HX_LOCAL_STACK_FRAME(_hx_pos_d8e5cd1b1e135cbb_19_boot,"openfl._internal.renderer.context3D.Context3DDisplayObject","boot",0xaba39536,"openfl._internal.renderer.context3D.Context3DDisplayObject.boot","openfl/_internal/renderer/context3D/Context3DDisplayObject.hx",19,0xcd6769d4)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DDisplayObject_obj::__construct() { }

Dynamic Context3DDisplayObject_obj::__CreateEmpty() { return new Context3DDisplayObject_obj; }

void *Context3DDisplayObject_obj::_hx_vtable = 0;

Dynamic Context3DDisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DDisplayObject_obj > _hx_result = new Context3DDisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DDisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x575f7016;
}

void Context3DDisplayObject_obj::render( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::renderer::context3D::Context3DRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d8e5cd1b1e135cbb_22_render)
HXLINE(  23)		bool _hx_tmp;
HXDLIN(  23)		if (hx::IsNull( displayObject->opaqueBackground )) {
HXLINE(  23)			_hx_tmp = hx::IsNull( displayObject->_hx___graphics );
            		}
            		else {
HXLINE(  23)			_hx_tmp = false;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  23)			return;
            		}
HXLINE(  24)		bool _hx_tmp1;
HXDLIN(  24)		if (!(!(displayObject->_hx___renderable))) {
HXLINE(  24)			_hx_tmp1 = (displayObject->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE(  24)			_hx_tmp1 = true;
            		}
HXDLIN(  24)		if (_hx_tmp1) {
HXLINE(  24)			return;
            		}
HXLINE(  26)		bool _hx_tmp2;
HXDLIN(  26)		bool _hx_tmp3;
HXDLIN(  26)		bool _hx_tmp4;
HXDLIN(  26)		if (hx::IsNotNull( displayObject->opaqueBackground )) {
HXLINE(  26)			_hx_tmp4 = !(displayObject->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(  26)			_hx_tmp4 = false;
            		}
HXDLIN(  26)		if (_hx_tmp4) {
HXLINE(  26)			_hx_tmp3 = (displayObject->get_width() > 0);
            		}
            		else {
HXLINE(  26)			_hx_tmp3 = false;
            		}
HXDLIN(  26)		if (_hx_tmp3) {
HXLINE(  26)			_hx_tmp2 = (displayObject->get_height() > 0);
            		}
            		else {
HXLINE(  26)			_hx_tmp2 = false;
            		}
HXDLIN(  26)		if (_hx_tmp2) {
HXLINE(  31)			renderer->_hx___setBlendMode(displayObject->_hx___worldBlendMode);
HXLINE(  32)			renderer->_hx___pushMaskObject(displayObject,null());
HXLINE(  34)			 ::openfl::display3D::Context3D context = renderer->context3D;
HXLINE(  36)			 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  37)			Float _hx_tmp5 = displayObject->get_width();
HXDLIN(  37)			rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp5,displayObject->get_height());
HXLINE(  38)			renderer->_hx___pushMaskRect(rect,displayObject->_hx___renderTransform);
HXLINE(  41)			int color = ( (int)(displayObject->opaqueBackground) );
HXLINE(  42)			context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXLINE(  45)			renderer->_hx___popMaskRect();
HXLINE(  46)			renderer->_hx___popMaskObject(displayObject,null());
HXLINE(  48)			::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            		}
HXLINE(  51)		if (hx::IsNotNull( displayObject->_hx___graphics )) {
HXLINE(  53)			::openfl::_internal::renderer::context3D::Context3DShape_obj::render(displayObject,renderer);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DDisplayObject_obj,render,(void))

void Context3DDisplayObject_obj::renderMask( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::renderer::context3D::Context3DRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d8e5cd1b1e135cbb_58_renderMask)
HXLINE(  59)		bool _hx_tmp;
HXDLIN(  59)		if (hx::IsNull( displayObject->opaqueBackground )) {
HXLINE(  59)			_hx_tmp = hx::IsNull( displayObject->_hx___graphics );
            		}
            		else {
HXLINE(  59)			_hx_tmp = false;
            		}
HXDLIN(  59)		if (_hx_tmp) {
HXLINE(  59)			return;
            		}
HXLINE(  61)		bool _hx_tmp1;
HXDLIN(  61)		bool _hx_tmp2;
HXDLIN(  61)		bool _hx_tmp3;
HXDLIN(  61)		if (hx::IsNotNull( displayObject->opaqueBackground )) {
HXLINE(  61)			_hx_tmp3 = !(displayObject->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(  61)			_hx_tmp3 = false;
            		}
HXDLIN(  61)		if (_hx_tmp3) {
HXLINE(  61)			_hx_tmp2 = (displayObject->get_width() > 0);
            		}
            		else {
HXLINE(  61)			_hx_tmp2 = false;
            		}
HXDLIN(  61)		if (_hx_tmp2) {
HXLINE(  61)			_hx_tmp1 = (displayObject->get_height() > 0);
            		}
            		else {
HXLINE(  61)			_hx_tmp1 = false;
            		}
HXLINE(  84)		if (hx::IsNotNull( displayObject->_hx___graphics )) {
HXLINE(  86)			::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(displayObject,renderer);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DDisplayObject_obj,renderMask,(void))


Context3DDisplayObject_obj::Context3DDisplayObject_obj()
{
}

bool Context3DDisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Context3DDisplayObject_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Context3DDisplayObject_obj_sStaticStorageInfo = 0;
#endif

hx::Class Context3DDisplayObject_obj::__mClass;

static ::String Context3DDisplayObject_obj_sStaticFields[] = {
	HX_("render",56,6b,29,05),
	HX_("renderMask",62,3b,60,e5),
	::String(null())
};

void Context3DDisplayObject_obj::__register()
{
	Context3DDisplayObject_obj _hx_dummy;
	Context3DDisplayObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DDisplayObject",ea,ed,cd,6e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DDisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DDisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Context3DDisplayObject_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DDisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DDisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DDisplayObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d8e5cd1b1e135cbb_19_boot)
HXDLIN(  19)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
