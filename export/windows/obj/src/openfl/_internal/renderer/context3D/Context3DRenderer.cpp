// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_BitmapDataPool
#include <openfl/_internal/renderer/BitmapDataPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#include <openfl/_internal/renderer/cairo/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DAlphaMaskShader
#include <openfl/_internal/renderer/context3D/Context3DAlphaMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBitmap
#include <openfl/_internal/renderer/context3D/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DGraphics
#include <openfl/_internal/renderer/context3D/Context3DGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DRenderer
#include <openfl/_internal/renderer/context3D/Context3DRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DShape
#include <openfl/_internal/renderer/context3D/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DTextField
#include <openfl/_internal/renderer/context3D/Context3DTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DTilemap
#include <openfl/_internal/renderer/context3D/Context3DTilemap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DVideo
#include <openfl/_internal/renderer/context3D/Context3DVideo.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_RenderEvent
#include <openfl/events/RenderEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Video
#include <openfl/media/Video.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0fbc7a63598bae05_178_new,"openfl._internal.renderer.context3D.Context3DRenderer","new",0x1792cc8c,"openfl._internal.renderer.context3D.Context3DRenderer.new","openfl/_internal/renderer/context3D/Context3DRenderer.hx",178,0x7ca279a4)
HX_DEFINE_STACK_FRAME(_hx_pos_0fbc7a63598bae05_130_new,"openfl._internal.renderer.context3D.Context3DRenderer","new",0x1792cc8c,"openfl._internal.renderer.context3D.Context3DRenderer.new","openfl/_internal/renderer/context3D/Context3DRenderer.hx",130,0x7ca279a4)
HX_DEFINE_STACK_FRAME(_hx_pos_0fbc7a63598bae05_185_new,"openfl._internal.renderer.context3D.Context3DRenderer","new",0x1792cc8c,"openfl._internal.renderer.context3D.Context3DRenderer.new","openfl/_internal/renderer/context3D/Context3DRenderer.hx",185,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_195_applyAlpha,"openfl._internal.renderer.context3D.Context3DRenderer","applyAlpha",0xb66c4464,"openfl._internal.renderer.context3D.Context3DRenderer.applyAlpha","openfl/_internal/renderer/context3D/Context3DRenderer.hx",195,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_210_applyBitmapData,"openfl._internal.renderer.context3D.Context3DRenderer","applyBitmapData",0x689622f3,"openfl._internal.renderer.context3D.Context3DRenderer.applyBitmapData","openfl/_internal/renderer/context3D/Context3DRenderer.hx",210,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_256_applyColorTransform,"openfl._internal.renderer.context3D.Context3DRenderer","applyColorTransform",0x830d69c3,"openfl._internal.renderer.context3D.Context3DRenderer.applyColorTransform","openfl/_internal/renderer/context3D/Context3DRenderer.hx",256,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_291_applyHasColorTransform,"openfl._internal.renderer.context3D.Context3DRenderer","applyHasColorTransform",0xa0bb2289,"openfl._internal.renderer.context3D.Context3DRenderer.applyHasColorTransform","openfl/_internal/renderer/context3D/Context3DRenderer.hx",291,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_306_applyMatrix,"openfl._internal.renderer.context3D.Context3DRenderer","applyMatrix",0x61dbfe7b,"openfl._internal.renderer.context3D.Context3DRenderer.applyMatrix","openfl/_internal/renderer/context3D/Context3DRenderer.hx",306,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_318_getMatrix,"openfl._internal.renderer.context3D.Context3DRenderer","getMatrix",0x987324a3,"openfl._internal.renderer.context3D.Context3DRenderer.getMatrix","openfl/_internal/renderer/context3D/Context3DRenderer.hx",318,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_344_setShader,"openfl._internal.renderer.context3D.Context3DRenderer","setShader",0xdd1c9993,"openfl._internal.renderer.context3D.Context3DRenderer.setShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",344,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_376_setViewport,"openfl._internal.renderer.context3D.Context3DRenderer","setViewport",0x371f1e54,"openfl._internal.renderer.context3D.Context3DRenderer.setViewport","openfl/_internal/renderer/context3D/Context3DRenderer.hx",376,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_381_updateShader,"openfl._internal.renderer.context3D.Context3DRenderer","updateShader",0x88b28462,"openfl._internal.renderer.context3D.Context3DRenderer.updateShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",381,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_394_useAlphaArray,"openfl._internal.renderer.context3D.Context3DRenderer","useAlphaArray",0x672a1bae,"openfl._internal.renderer.context3D.Context3DRenderer.useAlphaArray","openfl/_internal/renderer/context3D/Context3DRenderer.hx",394,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_402_useColorTransformArray,"openfl._internal.renderer.context3D.Context3DRenderer","useColorTransformArray",0x474a589d,"openfl._internal.renderer.context3D.Context3DRenderer.useColorTransformArray","openfl/_internal/renderer/context3D/Context3DRenderer.hx",402,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_410___cleanup,"openfl._internal.renderer.context3D.Context3DRenderer","__cleanup",0x8ce4c230,"openfl._internal.renderer.context3D.Context3DRenderer.__cleanup","openfl/_internal/renderer/context3D/Context3DRenderer.hx",410,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_426___clear,"openfl._internal.renderer.context3D.Context3DRenderer","__clear",0x90c84c99,"openfl._internal.renderer.context3D.Context3DRenderer.__clear","openfl/_internal/renderer/context3D/Context3DRenderer.hx",426,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_441___clearShader,"openfl._internal.renderer.context3D.Context3DRenderer","__clearShader",0xe212789e,"openfl._internal.renderer.context3D.Context3DRenderer.__clearShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",441,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_462___copyShader,"openfl._internal.renderer.context3D.Context3DRenderer","__copyShader",0x7746be2e,"openfl._internal.renderer.context3D.Context3DRenderer.__copyShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",462,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_472___drawBitmapData,"openfl._internal.renderer.context3D.Context3DRenderer","__drawBitmapData",0x18e7f651,"openfl._internal.renderer.context3D.Context3DRenderer.__drawBitmapData","openfl/_internal/renderer/context3D/Context3DRenderer.hx",472,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_506___fillRect,"openfl._internal.renderer.context3D.Context3DRenderer","__fillRect",0xf975d9bb,"openfl._internal.renderer.context3D.Context3DRenderer.__fillRect","openfl/_internal/renderer/context3D/Context3DRenderer.hx",506,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_545___getAlpha,"openfl._internal.renderer.context3D.Context3DRenderer","__getAlpha",0x0e2a4b5c,"openfl._internal.renderer.context3D.Context3DRenderer.__getAlpha","openfl/_internal/renderer/context3D/Context3DRenderer.hx",545,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_550___getColorTransform,"openfl._internal.renderer.context3D.Context3DRenderer","__getColorTransform",0x4a82c3cb,"openfl._internal.renderer.context3D.Context3DRenderer.__getColorTransform","openfl/_internal/renderer/context3D/Context3DRenderer.hx",550,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_563___getMatrix,"openfl._internal.renderer.context3D.Context3DRenderer","__getMatrix",0xd0641083,"openfl._internal.renderer.context3D.Context3DRenderer.__getMatrix","openfl/_internal/renderer/context3D/Context3DRenderer.hx",563,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_599___init,"openfl._internal.renderer.context3D.Context3DRenderer","__init",0x270f8584,"openfl._internal.renderer.context3D.Context3DRenderer.__init","openfl/_internal/renderer/context3D/Context3DRenderer.hx",599,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_610___initShader,"openfl._internal.renderer.context3D.Context3DRenderer","__initShader",0xc5c7b3c9,"openfl._internal.renderer.context3D.Context3DRenderer.__initShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",610,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_629___initDisplayShader,"openfl._internal.renderer.context3D.Context3DRenderer","__initDisplayShader",0xefb422e3,"openfl._internal.renderer.context3D.Context3DRenderer.__initDisplayShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",629,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_648___initGraphicsShader,"openfl._internal.renderer.context3D.Context3DRenderer","__initGraphicsShader",0x694e8ef4,"openfl._internal.renderer.context3D.Context3DRenderer.__initGraphicsShader","openfl/_internal/renderer/context3D/Context3DRenderer.hx",648,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_667___initShaderBuffer,"openfl._internal.renderer.context3D.Context3DRenderer","__initShaderBuffer",0x029361a9,"openfl._internal.renderer.context3D.Context3DRenderer.__initShaderBuffer","openfl/_internal/renderer/context3D/Context3DRenderer.hx",667,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_677___popMask,"openfl._internal.renderer.context3D.Context3DRenderer","__popMask",0x24b41d29,"openfl._internal.renderer.context3D.Context3DRenderer.__popMask","openfl/_internal/renderer/context3D/Context3DRenderer.hx",677,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_704___popMaskObject,"openfl._internal.renderer.context3D.Context3DRenderer","__popMaskObject",0x84ebd4c8,"openfl._internal.renderer.context3D.Context3DRenderer.__popMaskObject","openfl/_internal/renderer/context3D/Context3DRenderer.hx",704,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_726___popMaskRect,"openfl._internal.renderer.context3D.Context3DRenderer","__popMaskRect",0xff74deed,"openfl._internal.renderer.context3D.Context3DRenderer.__popMaskRect","openfl/_internal/renderer/context3D/Context3DRenderer.hx",726,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_742___powerOfTwo,"openfl._internal.renderer.context3D.Context3DRenderer","__powerOfTwo",0x8f1057e4,"openfl._internal.renderer.context3D.Context3DRenderer.__powerOfTwo","openfl/_internal/renderer/context3D/Context3DRenderer.hx",742,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_752___pushMask,"openfl._internal.renderer.context3D.Context3DRenderer","__pushMask",0xa404085a,"openfl._internal.renderer.context3D.Context3DRenderer.__pushMask","openfl/_internal/renderer/context3D/Context3DRenderer.hx",752,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_773___pushMaskObject,"openfl._internal.renderer.context3D.Context3DRenderer","__pushMaskObject",0x1319bab9,"openfl._internal.renderer.context3D.Context3DRenderer.__pushMaskObject","openfl/_internal/renderer/context3D/Context3DRenderer.hx",773,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_798___pushMaskRect,"openfl._internal.renderer.context3D.Context3DRenderer","__pushMaskRect",0x3338b69e,"openfl._internal.renderer.context3D.Context3DRenderer.__pushMaskRect","openfl/_internal/renderer/context3D/Context3DRenderer.hx",798,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_836___render,"openfl._internal.renderer.context3D.Context3DRenderer","__render",0x1bfc3aca,"openfl._internal.renderer.context3D.Context3DRenderer.__render","openfl/_internal/renderer/context3D/Context3DRenderer.hx",836,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_946___renderBitmap,"openfl._internal.renderer.context3D.Context3DRenderer","__renderBitmap",0x1373f259,"openfl._internal.renderer.context3D.Context3DRenderer.__renderBitmap","openfl/_internal/renderer/context3D/Context3DRenderer.hx",946,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_966___renderBitmapData,"openfl._internal.renderer.context3D.Context3DRenderer","__renderBitmapData",0xad3b1523,"openfl._internal.renderer.context3D.Context3DRenderer.__renderBitmapData","openfl/_internal/renderer/context3D/Context3DRenderer.hx",966,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_994___renderDisplayObject,"openfl._internal.renderer.context3D.Context3DRenderer","__renderDisplayObject",0x16bdd977,"openfl._internal.renderer.context3D.Context3DRenderer.__renderDisplayObject","openfl/_internal/renderer/context3D/Context3DRenderer.hx",994,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1043___renderDisplayObjectContainer,"openfl._internal.renderer.context3D.Context3DRenderer","__renderDisplayObjectContainer",0x8d2314ca,"openfl._internal.renderer.context3D.Context3DRenderer.__renderDisplayObjectContainer","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1043,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1092___renderFilterPass,"openfl._internal.renderer.context3D.Context3DRenderer","__renderFilterPass",0xd010cc13,"openfl._internal.renderer.context3D.Context3DRenderer.__renderFilterPass","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1092,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1136___renderMask,"openfl._internal.renderer.context3D.Context3DRenderer","__renderMask",0x89c1d4d6,"openfl._internal.renderer.context3D.Context3DRenderer.__renderMask","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1136,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1184___renderShape,"openfl._internal.renderer.context3D.Context3DRenderer","__renderShape",0x78d2bbf7,"openfl._internal.renderer.context3D.Context3DRenderer.__renderShape","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1184,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1198___renderSimpleButton,"openfl._internal.renderer.context3D.Context3DRenderer","__renderSimpleButton",0xb9a099ae,"openfl._internal.renderer.context3D.Context3DRenderer.__renderSimpleButton","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1198,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1207___renderTextField,"openfl._internal.renderer.context3D.Context3DRenderer","__renderTextField",0x59c320a3,"openfl._internal.renderer.context3D.Context3DRenderer.__renderTextField","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1207,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1222___renderTilemap,"openfl._internal.renderer.context3D.Context3DRenderer","__renderTilemap",0x3e0d2a84,"openfl._internal.renderer.context3D.Context3DRenderer.__renderTilemap","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1222,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1238___renderVideo,"openfl._internal.renderer.context3D.Context3DRenderer","__renderVideo",0x33b1ed51,"openfl._internal.renderer.context3D.Context3DRenderer.__renderVideo","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1238,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1242___resize,"openfl._internal.renderer.context3D.Context3DRenderer","__resize",0x1f4e2968,"openfl._internal.renderer.context3D.Context3DRenderer.__resize","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1242,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1259___resumeClipAndMask,"openfl._internal.renderer.context3D.Context3DRenderer","__resumeClipAndMask",0x514b72d2,"openfl._internal.renderer.context3D.Context3DRenderer.__resumeClipAndMask","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1259,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1283___scissorRect,"openfl._internal.renderer.context3D.Context3DRenderer","__scissorRect",0x92588b6c,"openfl._internal.renderer.context3D.Context3DRenderer.__scissorRect","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1283,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1304___setBlendMode,"openfl._internal.renderer.context3D.Context3DRenderer","__setBlendMode",0xe39982c6,"openfl._internal.renderer.context3D.Context3DRenderer.__setBlendMode","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1304,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1341___setRenderTarget,"openfl._internal.renderer.context3D.Context3DRenderer","__setRenderTarget",0xec926c15,"openfl._internal.renderer.context3D.Context3DRenderer.__setRenderTarget","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1341,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1352___setShaderBuffer,"openfl._internal.renderer.context3D.Context3DRenderer","__setShaderBuffer",0x36ccced3,"openfl._internal.renderer.context3D.Context3DRenderer.__setShaderBuffer","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1352,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1358___shouldCacheHardware,"openfl._internal.renderer.context3D.Context3DRenderer","__shouldCacheHardware",0x06e326e3,"openfl._internal.renderer.context3D.Context3DRenderer.__shouldCacheHardware","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1358,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1401___suspendClipAndMask,"openfl._internal.renderer.context3D.Context3DRenderer","__suspendClipAndMask",0x3b9d61cb,"openfl._internal.renderer.context3D.Context3DRenderer.__suspendClipAndMask","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1401,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1415___updateCacheBitmap,"openfl._internal.renderer.context3D.Context3DRenderer","__updateCacheBitmap",0x9ee62554,"openfl._internal.renderer.context3D.Context3DRenderer.__updateCacheBitmap","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1415,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_1729___updateShaderBuffer,"openfl._internal.renderer.context3D.Context3DRenderer","__updateShaderBuffer",0x0310c322,"openfl._internal.renderer.context3D.Context3DRenderer.__updateShaderBuffer","openfl/_internal/renderer/context3D/Context3DRenderer.hx",1729,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_79_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",79,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_81_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",81,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_75[] = {
	(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_83_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",83,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_77[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_84_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",84,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_79[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_85_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",85,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_81[] = {
	(Float)1,(Float)1,(Float)1,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_86_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",86,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_83[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_87_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",87,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_85[] = {
	(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_88_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",88,0x7ca279a4)
static const bool _hx_array_data_b5fed69a_87[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_89_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",89,0x7ca279a4)
HX_LOCAL_STACK_FRAME(_hx_pos_0fbc7a63598bae05_90_boot,"openfl._internal.renderer.context3D.Context3DRenderer","boot",0x80f92e86,"openfl._internal.renderer.context3D.Context3DRenderer.boot","openfl/_internal/renderer/context3D/Context3DRenderer.hx",90,0x7ca279a4)
static const Float _hx_array_data_b5fed69a_90[] = {
	(Float)0,(Float)0,
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DRenderer_obj::__construct( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::display::Shape _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_178_new)
HXLINE( 178)			return  ::openfl::display::Shape_obj::__alloc( HX_CTX );
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_130_new)
HXLINE( 129)		 ::openfl::_internal::renderer::context3D::Context3DRenderer _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 131)		super::__construct(context,null());
HXLINE( 133)		this->_hx___init(context,defaultRenderTarget);
HXLINE( 135)		if (hx::IsNull( ::openfl::display::Graphics_obj::maxTextureWidth )) {
HXLINE( 137)			::openfl::display::Graphics_obj::maxTextureWidth = (::openfl::display::Graphics_obj::maxTextureHeight = this->_hx___gl->getParameter(this->_hx___gl->MAX_TEXTURE_SIZE));
            		}
HXLINE( 140)		this->_hx___matrix = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 142)		this->_hx___values = ::Array_obj< Float >::__new();
HXLINE( 156)		this->_hx___softwareRenderer =  ::openfl::_internal::renderer::cairo::CairoRenderer_obj::__alloc( HX_CTX ,null());
HXLINE( 159)		this->_hx___type = HX_("opengl",6f,64,94,21);
HXLINE( 161)		this->_hx___setBlendMode(10);
HXLINE( 162)		this->context3D->_hx___setGLBlend(true);
HXLINE( 164)		this->_hx___clipRects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 165)		this->_hx___maskObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 166)		this->_hx___numClipRects = 0;
HXLINE( 167)		this->_hx___projection = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 168)		this->_hx___projectionFlipped = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 169)		this->_hx___stencilReference = 0;
HXLINE( 170)		this->_hx___tempRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 172)		this->_hx___defaultDisplayShader =  ::openfl::display::DisplayObjectShader_obj::__alloc( HX_CTX ,null());
HXLINE( 173)		this->_hx___defaultGraphicsShader =  ::openfl::display::GraphicsShader_obj::__alloc( HX_CTX ,null());
HXLINE( 174)		this->_hx___defaultShader = this->_hx___defaultDisplayShader;
HXLINE( 176)		this->_hx___initShader(this->_hx___defaultShader);
HXLINE( 178)		this->_hx___scrollRectMasks =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE( 179)		this->_hx___alphaMaskShader =  ::openfl::_internal::renderer::context3D::Context3DAlphaMaskShader_obj::__alloc( HX_CTX );
HXLINE( 180)		this->_hx___maskShader =  ::openfl::_internal::renderer::context3D::Context3DMaskShader_obj::__alloc( HX_CTX );
HXLINE( 182)		if (hx::IsNull( ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___childRendererPool )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::openfl::_internal::renderer::context3D::Context3DRenderer,_gthis) HXARGC(0)
            			 ::openfl::_internal::renderer::context3D::Context3DRenderer _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_185_new)
HXLINE( 186)				 ::openfl::_internal::renderer::context3D::Context3DRenderer renderer =  ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::__alloc( HX_CTX ,_gthis->context3D,null());
HXLINE( 187)				renderer->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 188)				renderer->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 189)				return renderer;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 184)			::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___childRendererPool =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
            		}
            	}

Dynamic Context3DRenderer_obj::__CreateEmpty() { return new Context3DRenderer_obj; }

void *Context3DRenderer_obj::_hx_vtable = 0;

Dynamic Context3DRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DRenderer_obj > _hx_result = new Context3DRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Context3DRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x1b0ac8d2) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b0ac8d2;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x38ea65a4 || inClassId==(int)0x7cdf41d6;
	}
}

void Context3DRenderer_obj::applyAlpha(Float alpha){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_195_applyAlpha)
HXLINE( 196)		::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___alphaValue[0] = alpha;
HXLINE( 198)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 200)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Alpha",0f,ce,3e,6a),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___alphaValue);
            		}
            		else {
HXLINE( 202)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 204)				if (hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 204)					this->_hx___currentShader->_hx___alpha->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___alphaValue;
            				}
            			}
            		}
            	}


void Context3DRenderer_obj::applyBitmapData( ::openfl::display::BitmapData bitmapData,bool smooth,hx::Null< bool >  __o_repeat){
            		bool repeat = __o_repeat.Default(false);
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_210_applyBitmapData)
HXDLIN( 210)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 212)			if (hx::IsNotNull( bitmapData )) {
HXLINE( 214)				::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue[0] = ( (Float)(bitmapData->_hx___textureWidth) );
HXLINE( 215)				::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue[1] = ( (Float)(bitmapData->_hx___textureHeight) );
HXLINE( 217)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_TextureSize",ad,60,72,29),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue);
            			}
            		}
            		else {
HXLINE( 220)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 222)				if (hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 224)					this->_hx___currentShader->_hx___bitmap->input = bitmapData;
HXLINE( 225)					 ::Dynamic _hx_tmp;
HXDLIN( 225)					bool _hx_tmp1;
HXDLIN( 225)					if (smooth) {
HXLINE( 225)						_hx_tmp1 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 225)						_hx_tmp1 = false;
            					}
HXDLIN( 225)					if (_hx_tmp1) {
HXLINE( 225)						_hx_tmp = 4;
            					}
            					else {
HXLINE( 225)						_hx_tmp = 5;
            					}
HXDLIN( 225)					this->_hx___currentShader->_hx___bitmap->filter = _hx_tmp;
HXLINE( 226)					this->_hx___currentShader->_hx___bitmap->mipFilter = 2;
HXLINE( 227)					 ::Dynamic _hx_tmp2;
HXDLIN( 227)					if (repeat) {
HXLINE( 227)						_hx_tmp2 = 2;
            					}
            					else {
HXLINE( 227)						_hx_tmp2 = 0;
            					}
HXDLIN( 227)					this->_hx___currentShader->_hx___bitmap->wrap = _hx_tmp2;
            				}
HXLINE( 230)				if (hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 232)					this->_hx___currentShader->_hx___texture->input = bitmapData;
HXLINE( 233)					 ::Dynamic _hx_tmp3;
HXDLIN( 233)					bool _hx_tmp4;
HXDLIN( 233)					if (smooth) {
HXLINE( 233)						_hx_tmp4 = this->_hx___allowSmoothing;
            					}
            					else {
HXLINE( 233)						_hx_tmp4 = false;
            					}
HXDLIN( 233)					if (_hx_tmp4) {
HXLINE( 233)						_hx_tmp3 = 4;
            					}
            					else {
HXLINE( 233)						_hx_tmp3 = 5;
            					}
HXDLIN( 233)					this->_hx___currentShader->_hx___texture->filter = _hx_tmp3;
HXLINE( 234)					this->_hx___currentShader->_hx___texture->mipFilter = 2;
HXLINE( 235)					 ::Dynamic _hx_tmp5;
HXDLIN( 235)					if (repeat) {
HXLINE( 235)						_hx_tmp5 = 2;
            					}
            					else {
HXLINE( 235)						_hx_tmp5 = 0;
            					}
HXDLIN( 235)					this->_hx___currentShader->_hx___texture->wrap = _hx_tmp5;
            				}
HXLINE( 238)				if (hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 240)					if (hx::IsNotNull( bitmapData )) {
HXLINE( 242)						::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue[0] = ( (Float)(bitmapData->_hx___textureWidth) );
HXLINE( 243)						::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue[1] = ( (Float)(bitmapData->_hx___textureHeight) );
HXLINE( 245)						this->_hx___currentShader->_hx___textureSize->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___textureSizeValue;
            					}
            					else {
HXLINE( 249)						this->_hx___currentShader->_hx___textureSize->value = null();
            					}
            				}
            			}
            		}
            	}


void Context3DRenderer_obj::applyColorTransform( ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_256_applyColorTransform)
HXLINE( 257)		bool enabled;
HXDLIN( 257)		if (hx::IsNotNull( colorTransform )) {
HXLINE( 257)			enabled = !(colorTransform->_hx___isDefault(true));
            		}
            		else {
HXLINE( 257)			enabled = false;
            		}
HXLINE( 258)		this->applyHasColorTransform(enabled);
HXLINE( 260)		if (enabled) {
HXLINE( 262)			colorTransform->_hx___setArrays(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorMultipliersValue,::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorOffsetsValue);
HXLINE( 264)			if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 266)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorMultipliersValue);
HXLINE( 267)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorOffsetsValue);
            			}
            			else {
HXLINE( 269)				if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 271)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 271)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorMultipliersValue;
            					}
HXLINE( 272)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 272)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___colorOffsetsValue;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 277)			if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 279)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorMultiplier",b5,e4,dc,18),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___emptyColorValue);
HXLINE( 280)				this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_ColorOffset",c7,ea,07,41),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___emptyColorValue);
            			}
            			else {
HXLINE( 282)				if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 284)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 284)						this->_hx___currentShader->_hx___colorMultiplier->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___emptyColorValue;
            					}
HXLINE( 285)					if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 285)						this->_hx___currentShader->_hx___colorOffset->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___emptyColorValue;
            					}
            				}
            			}
            		}
            	}


void Context3DRenderer_obj::applyHasColorTransform(bool enabled){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_291_applyHasColorTransform)
HXLINE( 292)		::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___hasColorTransformValue[0] = enabled;
HXLINE( 294)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 296)			this->_hx___currentShaderBuffer->addBoolOverride(HX_("openfl_HasColorTransform",b4,00,4b,62),::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___hasColorTransformValue);
            		}
            		else {
HXLINE( 298)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 300)				if (hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 300)					this->_hx___currentShader->_hx___hasColorTransform->value = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___hasColorTransformValue;
            				}
            			}
            		}
            	}


void Context3DRenderer_obj::applyMatrix(::Array< Float > matrix){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_306_applyMatrix)
HXDLIN( 306)		if (hx::IsNotNull( this->_hx___currentShaderBuffer )) {
HXLINE( 308)			this->_hx___currentShaderBuffer->addFloatOverride(HX_("openfl_Matrix",70,ea,41,06),matrix);
            		}
            		else {
HXLINE( 310)			if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 312)				if (hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 312)					this->_hx___currentShader->_hx___matrix->value = matrix;
            				}
            			}
            		}
            	}


 ::lime::utils::ArrayBufferView Context3DRenderer_obj::getMatrix( ::openfl::geom::Matrix transform){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_318_getMatrix)
HXDLIN( 318)		if (hx::IsNotNull( this->_hx___gl )) {
HXLINE( 320)			::Array< Float > values = this->_hx___getMatrix(transform,1);
HXLINE( 322)			{
HXLINE( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,0,values->__get(0));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,1,values->__get(1));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,2,values->__get(2));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,3,values->__get(3));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,4,values->__get(4));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,5,values->__get(5));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,6,values->__get(6));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,7,values->__get(7));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,8,values->__get(8));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,9,values->__get(9));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,10,values->__get(10));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,11,values->__get(11));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,12,values->__get(12));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,13,values->__get(13));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,14,values->__get(14));
HXDLIN( 324)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,15,values->__get(15));
            			}
HXLINE( 327)			return this->_hx___matrix;
            		}
            		else {
HXLINE( 331)			::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->_hx___matrix);
HXLINE( 332)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,0,transform->a);
HXLINE( 333)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,1,transform->b);
HXLINE( 334)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,4,transform->c);
HXLINE( 335)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,5,transform->d);
HXLINE( 336)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,12,transform->tx);
HXLINE( 337)			::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,13,transform->ty);
HXLINE( 339)			return this->_hx___matrix;
            		}
HXLINE( 318)		return null();
            	}


void Context3DRenderer_obj::setShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_344_setShader)
HXLINE( 345)		this->_hx___currentShaderBuffer = null();
HXLINE( 347)		if (hx::IsEq( this->_hx___currentShader,shader )) {
HXLINE( 347)			return;
            		}
HXLINE( 349)		bool _hx_tmp = hx::IsNotNull( this->_hx___currentShader );
HXLINE( 355)		if (hx::IsNull( shader )) {
HXLINE( 357)			this->_hx___currentShader = null();
HXLINE( 358)			this->context3D->setProgram(null());
HXLINE( 360)			return;
            		}
            		else {
HXLINE( 364)			this->_hx___currentShader = shader;
HXLINE( 365)			this->_hx___initShader(shader);
HXLINE( 366)			this->context3D->setProgram(shader->program);
HXLINE( 367)			this->context3D->_hx___flushGLProgram();
HXLINE( 369)			this->_hx___currentShader->_hx___enable();
HXLINE( 370)			this->context3D->_hx___state->shader = shader;
            		}
            	}


void Context3DRenderer_obj::setViewport(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_376_setViewport)
HXDLIN( 376)		this->_hx___gl->viewport(this->_hx___offsetX,this->_hx___offsetY,this->_hx___displayWidth,this->_hx___displayHeight);
            	}


void Context3DRenderer_obj::updateShader(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_381_updateShader)
HXDLIN( 381)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 383)			if (hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 383)				this->_hx___currentShader->_hx___position->_hx___useArray = true;
            			}
HXLINE( 384)			if (hx::IsNotNull( this->_hx___currentShader->_hx___textureCoord )) {
HXLINE( 384)				this->_hx___currentShader->_hx___textureCoord->_hx___useArray = true;
            			}
HXLINE( 385)			this->context3D->setProgram(this->_hx___currentShader->program);
HXLINE( 386)			this->context3D->_hx___flushGLProgram();
HXLINE( 387)			this->context3D->_hx___flushGLTextures();
HXLINE( 388)			this->_hx___currentShader->_hx___update();
            		}
            	}


void Context3DRenderer_obj::useAlphaArray(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_394_useAlphaArray)
HXDLIN( 394)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 396)			if (hx::IsNotNull( this->_hx___currentShader->_hx___alpha )) {
HXLINE( 396)				this->_hx___currentShader->_hx___alpha->_hx___useArray = true;
            			}
            		}
            	}


void Context3DRenderer_obj::useColorTransformArray(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_402_useColorTransformArray)
HXDLIN( 402)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 404)			if (hx::IsNotNull( this->_hx___currentShader->_hx___colorMultiplier )) {
HXLINE( 404)				this->_hx___currentShader->_hx___colorMultiplier->_hx___useArray = true;
            			}
HXLINE( 405)			if (hx::IsNotNull( this->_hx___currentShader->_hx___colorOffset )) {
HXLINE( 405)				this->_hx___currentShader->_hx___colorOffset->_hx___useArray = true;
            			}
            		}
            	}


void Context3DRenderer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_410___cleanup)
HXLINE( 411)		if ((this->_hx___stencilReference > 0)) {
HXLINE( 413)			this->_hx___stencilReference = 0;
HXLINE( 414)			this->context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 415)			this->context3D->setStencilReferenceValue(0,0,0);
            		}
HXLINE( 418)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 420)			this->_hx___numClipRects = 0;
HXLINE( 421)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DRenderer_obj,_hx___cleanup,(void))

void Context3DRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_426___clear)
HXLINE( 427)		bool _hx_tmp;
HXDLIN( 427)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 427)			_hx_tmp = this->_hx___stage->_hx___transparent;
            		}
            		else {
HXLINE( 427)			_hx_tmp = true;
            		}
HXDLIN( 427)		if (_hx_tmp) {
HXLINE( 429)			this->context3D->clear(0,0,0,0,0,0,1);
            		}
            		else {
HXLINE( 433)			this->context3D->clear(this->_hx___stage->_hx___colorSplit->__get(0),this->_hx___stage->_hx___colorSplit->__get(1),this->_hx___stage->_hx___colorSplit->__get(2),1,0,0,1);
            		}
HXLINE( 436)		this->_hx___cleared = true;
            	}


void Context3DRenderer_obj::_hx___clearShader(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_441___clearShader)
HXDLIN( 441)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXLINE( 443)			if (hx::IsNull( this->_hx___currentShaderBuffer )) {
HXLINE( 445)				if (hx::IsNotNull( this->_hx___currentShader->_hx___bitmap )) {
HXLINE( 445)					this->_hx___currentShader->_hx___bitmap->input = null();
            				}
            			}
            			else {
HXLINE( 449)				this->_hx___currentShaderBuffer->clearOverride();
            			}
HXLINE( 452)			if (hx::IsNotNull( this->_hx___currentShader->_hx___texture )) {
HXLINE( 452)				this->_hx___currentShader->_hx___texture->input = null();
            			}
HXLINE( 453)			if (hx::IsNotNull( this->_hx___currentShader->_hx___textureSize )) {
HXLINE( 453)				this->_hx___currentShader->_hx___textureSize->value = null();
            			}
HXLINE( 454)			if (hx::IsNotNull( this->_hx___currentShader->_hx___hasColorTransform )) {
HXLINE( 454)				this->_hx___currentShader->_hx___hasColorTransform->value = null();
            			}
HXLINE( 455)			if (hx::IsNotNull( this->_hx___currentShader->_hx___position )) {
HXLINE( 455)				this->_hx___currentShader->_hx___position->value = null();
            			}
HXLINE( 456)			if (hx::IsNotNull( this->_hx___currentShader->_hx___matrix )) {
HXLINE( 456)				this->_hx___currentShader->_hx___matrix->value = null();
            			}
HXLINE( 457)			this->_hx___currentShader->_hx___clearUseArray();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DRenderer_obj,_hx___clearShader,(void))

void Context3DRenderer_obj::_hx___copyShader( ::openfl::_internal::renderer::context3D::Context3DRenderer other){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_462___copyShader)
HXLINE( 463)		this->_hx___currentShader = other->_hx___currentShader;
HXLINE( 464)		this->_hx___currentShaderBuffer = other->_hx___currentShaderBuffer;
HXLINE( 465)		this->_hx___currentDisplayShader = other->_hx___currentDisplayShader;
HXLINE( 466)		this->_hx___currentGraphicsShader = other->_hx___currentGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___copyShader,(void))

void Context3DRenderer_obj::_hx___drawBitmapData( ::openfl::display::BitmapData bitmapData,::Dynamic source, ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_472___drawBitmapData)
HXLINE( 473)		if (hx::IsNotNull( clipRect )) {
HXLINE( 475)			this->_hx___pushMaskRect(clipRect,( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
            		}
HXLINE( 478)		 ::openfl::display3D::Context3D context = this->context3D;
HXLINE( 480)		 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE( 481)		bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE( 482)		int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE( 483)		int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE( 485)		context->setRenderToTexture(bitmapData->getTexture(context),true,null(),null());
HXLINE( 487)		this->_hx___render(source);
HXLINE( 489)		if (hx::IsNotNull( cacheRTT )) {
HXLINE( 491)			context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE( 495)			context->setRenderToBackBuffer();
            		}
HXLINE( 498)		if (hx::IsNotNull( clipRect )) {
HXLINE( 500)			this->_hx___popMaskRect();
            		}
            	}


void Context3DRenderer_obj::_hx___fillRect( ::openfl::display::BitmapData bitmapData, ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_506___fillRect)
HXDLIN( 506)		if (hx::IsNotNull( bitmapData->_hx___texture )) {
HXLINE( 508)			 ::openfl::display3D::Context3D context = bitmapData->_hx___texture->_hx___context;
HXLINE( 510)			int color1 = color;
HXLINE( 511)			bool useScissor = !(bitmapData->rect->equals(rect));
HXLINE( 513)			 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE( 514)			bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE( 515)			int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE( 516)			int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE( 518)			context->setRenderToTexture(bitmapData->_hx___texture,null(),null(),null());
HXLINE( 520)			if (useScissor) {
HXLINE( 522)				context->setScissorRectangle(rect);
            			}
HXLINE( 525)			Float _hx_tmp;
HXDLIN( 525)			if (bitmapData->transparent) {
HXLINE( 525)				_hx_tmp = (( (Float)((hx::UShr(color1,24) & 255)) ) / ( (Float)(255) ));
            			}
            			else {
HXLINE( 525)				_hx_tmp = ( (Float)(1) );
            			}
HXDLIN( 525)			context->clear((( (Float)((hx::UShr(color1,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color1,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color1 & 255)) ) / ( (Float)(255) )),_hx_tmp,0,0,1);
HXLINE( 527)			if (useScissor) {
HXLINE( 529)				context->setScissorRectangle(null());
            			}
HXLINE( 532)			if (hx::IsNotNull( cacheRTT )) {
HXLINE( 534)				context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            			}
            			else {
HXLINE( 538)				context->setRenderToBackBuffer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3DRenderer_obj,_hx___fillRect,(void))

Float Context3DRenderer_obj::_hx___getAlpha(Float value){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_545___getAlpha)
HXDLIN( 545)		return (value * this->_hx___worldAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___getAlpha,return )

 ::openfl::geom::ColorTransform Context3DRenderer_obj::_hx___getColorTransform( ::openfl::geom::ColorTransform value){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_550___getColorTransform)
HXDLIN( 550)		if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 552)			this->_hx___tempColorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE( 553)			this->_hx___tempColorTransform->_hx___combine(value);
HXLINE( 554)			return this->_hx___tempColorTransform;
            		}
            		else {
HXLINE( 558)			return value;
            		}
HXLINE( 550)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___getColorTransform,return )

::Array< Float > Context3DRenderer_obj::_hx___getMatrix( ::openfl::geom::Matrix transform, ::Dynamic pixelSnapping){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_563___getMatrix)
HXLINE( 564)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 565)		_matrix->copyFrom(transform);
HXLINE( 566)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 568)		bool _hx_tmp;
HXDLIN( 568)		if (hx::IsNotEq( pixelSnapping,0 )) {
HXLINE( 569)			bool _hx_tmp1;
HXDLIN( 569)			bool _hx_tmp2;
HXDLIN( 569)			bool _hx_tmp3;
HXDLIN( 569)			if (hx::IsEq( pixelSnapping,1 )) {
HXLINE( 569)				_hx_tmp3 = (_matrix->b == 0);
            			}
            			else {
HXLINE( 569)				_hx_tmp3 = false;
            			}
HXDLIN( 569)			if (_hx_tmp3) {
HXLINE( 569)				_hx_tmp2 = (_matrix->c == 0);
            			}
            			else {
HXLINE( 569)				_hx_tmp2 = false;
            			}
HXDLIN( 569)			if (_hx_tmp2) {
HXLINE( 572)				if ((_matrix->a < ((Float)1.001))) {
HXLINE( 569)					_hx_tmp1 = (_matrix->a > ((Float)0.999));
            				}
            				else {
HXLINE( 569)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 569)				_hx_tmp1 = false;
            			}
HXDLIN( 569)			if (_hx_tmp1) {
HXLINE( 573)				if ((_matrix->d < ((Float)1.001))) {
HXLINE( 568)					_hx_tmp = (_matrix->d > ((Float)0.999));
            				}
            				else {
HXLINE( 568)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 568)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 568)			_hx_tmp = true;
            		}
HXDLIN( 568)		if (_hx_tmp) {
HXLINE( 575)			_matrix->tx = ( (Float)(::Math_obj::round(_matrix->tx)) );
HXLINE( 576)			_matrix->ty = ( (Float)(::Math_obj::round(_matrix->ty)) );
            		}
HXLINE( 579)		::lime::math::_Matrix4::Matrix4_Impl__obj::identity(this->_hx___matrix);
HXLINE( 580)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,0,_matrix->a);
HXLINE( 581)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,1,_matrix->b);
HXLINE( 582)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,4,_matrix->c);
HXLINE( 583)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,5,_matrix->d);
HXLINE( 584)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,12,_matrix->tx);
HXLINE( 585)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(this->_hx___matrix,13,_matrix->ty);
HXLINE( 586)		 ::lime::utils::ArrayBufferView _hx_tmp4;
HXDLIN( 586)		if (this->_hx___flipped) {
HXLINE( 586)			_hx_tmp4 = this->_hx___projectionFlipped;
            		}
            		else {
HXLINE( 586)			_hx_tmp4 = this->_hx___projection;
            		}
HXDLIN( 586)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this->_hx___matrix,_hx_tmp4);
HXLINE( 588)		{
HXLINE( 590)			this->_hx___values[0] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,0);
HXDLIN( 590)			this->_hx___values[1] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,1);
HXDLIN( 590)			this->_hx___values[2] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,2);
HXDLIN( 590)			this->_hx___values[3] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,3);
HXDLIN( 590)			this->_hx___values[4] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,4);
HXDLIN( 590)			this->_hx___values[5] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,5);
HXDLIN( 590)			this->_hx___values[6] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,6);
HXDLIN( 590)			this->_hx___values[7] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,7);
HXDLIN( 590)			this->_hx___values[8] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,8);
HXDLIN( 590)			this->_hx___values[9] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,9);
HXDLIN( 590)			this->_hx___values[10] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,10);
HXDLIN( 590)			this->_hx___values[11] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,11);
HXDLIN( 590)			this->_hx___values[12] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,12);
HXDLIN( 590)			this->_hx___values[13] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,13);
HXDLIN( 590)			this->_hx___values[14] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,14);
HXDLIN( 590)			this->_hx___values[15] = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(this->_hx___matrix,15);
            		}
HXLINE( 593)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 595)		return this->_hx___values;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___getMatrix,return )

void Context3DRenderer_obj::_hx___init( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_599___init)
HXLINE( 600)		this->context3D = context;
HXLINE( 601)		this->_hx___context = context->_hx___context;
HXLINE( 602)		this->_hx___gl = context->_hx___context->webgl;
HXLINE( 603)		this->gl = this->_hx___gl;
HXLINE( 605)		this->_hx___defaultRenderTarget = defaultRenderTarget;
HXLINE( 606)		this->_hx___flipped = hx::IsNull( this->_hx___defaultRenderTarget );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___init,(void))

 ::openfl::display::Shader Context3DRenderer_obj::_hx___initShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_610___initShader)
HXLINE( 611)		if (hx::IsNotNull( shader )) {
HXLINE( 615)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 617)				shader->_hx___context = this->context3D;
HXLINE( 618)				shader->_hx___init();
            			}
HXLINE( 622)			return shader;
            		}
HXLINE( 625)		return this->_hx___defaultShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___initShader,return )

 ::openfl::display::Shader Context3DRenderer_obj::_hx___initDisplayShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_629___initDisplayShader)
HXLINE( 630)		if (hx::IsNotNull( shader )) {
HXLINE( 634)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 636)				shader->_hx___context = this->context3D;
HXLINE( 637)				shader->_hx___init();
            			}
HXLINE( 641)			return shader;
            		}
HXLINE( 644)		return this->_hx___defaultDisplayShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___initDisplayShader,return )

 ::openfl::display::Shader Context3DRenderer_obj::_hx___initGraphicsShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_648___initGraphicsShader)
HXLINE( 649)		if (hx::IsNotNull( shader )) {
HXLINE( 653)			if (hx::IsNull( shader->_hx___context )) {
HXLINE( 655)				shader->_hx___context = this->context3D;
HXLINE( 656)				shader->_hx___init();
            			}
HXLINE( 660)			return shader;
            		}
HXLINE( 663)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___initGraphicsShader,return )

 ::openfl::display::Shader Context3DRenderer_obj::_hx___initShaderBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_667___initShaderBuffer)
HXLINE( 668)		if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 670)			return this->_hx___initGraphicsShader(shaderBuffer->shader);
            		}
HXLINE( 673)		return this->_hx___defaultGraphicsShader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___initShaderBuffer,return )

void Context3DRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_677___popMask)
HXLINE( 678)		if ((this->_hx___stencilReference == 0)) {
HXLINE( 678)			return;
            		}
HXLINE( 680)		 ::openfl::display::DisplayObject mask = this->_hx___maskObjects->pop().StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 682)		if ((this->_hx___stencilReference > 1)) {
HXLINE( 684)			this->context3D->setStencilActions(2,1,0,0,5);
HXLINE( 685)			this->context3D->setStencilReferenceValue(this->_hx___stencilReference,255,255);
HXLINE( 686)			this->context3D->setColorMask(false,false,false,false);
HXLINE( 688)			this->_hx___renderMask(mask);
HXLINE( 689)			this->_hx___stencilReference--;
HXLINE( 691)			this->context3D->setStencilActions(2,1,5,5,5);
HXLINE( 692)			this->context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
HXLINE( 693)			this->context3D->setColorMask(true,true,true,true);
            		}
            		else {
HXLINE( 697)			this->_hx___stencilReference = 0;
HXLINE( 698)			this->context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 699)			this->context3D->setStencilReferenceValue(0,0,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DRenderer_obj,_hx___popMask,(void))

void Context3DRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_704___popMaskObject)
HXLINE( 705)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 707)			this->_hx___popMask();
            		}
HXLINE( 710)		bool _hx_tmp;
HXDLIN( 710)		if (handleScrollRect) {
HXLINE( 710)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 710)			_hx_tmp = false;
            		}
HXDLIN( 710)		if (_hx_tmp) {
HXLINE( 712)			bool _hx_tmp1;
HXDLIN( 712)			if ((object->_hx___renderTransform->b == 0)) {
HXLINE( 712)				_hx_tmp1 = (object->_hx___renderTransform->c != 0);
            			}
            			else {
HXLINE( 712)				_hx_tmp1 = true;
            			}
HXDLIN( 712)			if (_hx_tmp1) {
HXLINE( 714)				this->_hx___scrollRectMasks->release(( ( ::openfl::display::Shape)(this->_hx___maskObjects->__get((this->_hx___maskObjects->length - 1)).StaticCast<  ::openfl::display::DisplayObject >()) ));
HXLINE( 715)				this->_hx___popMask();
            			}
            			else {
HXLINE( 719)				this->_hx___popMaskRect();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___popMaskObject,(void))

void Context3DRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_726___popMaskRect)
HXDLIN( 726)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 728)			this->_hx___numClipRects--;
HXLINE( 730)			if ((this->_hx___numClipRects > 0)) {
HXLINE( 732)				this->_hx___scissorRect(this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >());
            			}
            			else {
HXLINE( 736)				this->_hx___scissorRect(null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DRenderer_obj,_hx___popMaskRect,(void))

int Context3DRenderer_obj::_hx___powerOfTwo(int value){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_742___powerOfTwo)
HXLINE( 743)		int newValue = 1;
HXLINE( 744)		while((newValue < value)){
HXLINE( 746)			newValue = (newValue << 1);
            		}
HXLINE( 748)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___powerOfTwo,return )

void Context3DRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_752___pushMask)
HXLINE( 753)		if ((this->_hx___stencilReference == 0)) {
HXLINE( 755)			this->context3D->clear(0,0,0,0,0,0,4);
HXLINE( 756)			this->_hx___updatedStencil = true;
            		}
HXLINE( 759)		this->context3D->setStencilActions(2,1,2,5,5);
HXLINE( 760)		this->context3D->setStencilReferenceValue(this->_hx___stencilReference,255,255);
HXLINE( 761)		this->context3D->setColorMask(false,false,false,false);
HXLINE( 763)		this->_hx___renderMask(mask);
HXLINE( 764)		this->_hx___maskObjects->push(mask);
HXLINE( 765)		this->_hx___stencilReference++;
HXLINE( 767)		this->context3D->setStencilActions(2,1,5,5,5);
HXLINE( 768)		this->context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
HXLINE( 769)		this->context3D->setColorMask(true,true,true,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___pushMask,(void))

void Context3DRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_773___pushMaskObject)
HXLINE( 774)		bool _hx_tmp;
HXDLIN( 774)		if (handleScrollRect) {
HXLINE( 774)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 774)			_hx_tmp = false;
            		}
HXDLIN( 774)		if (_hx_tmp) {
HXLINE( 776)			bool _hx_tmp1;
HXDLIN( 776)			if ((object->_hx___renderTransform->b == 0)) {
HXLINE( 776)				_hx_tmp1 = (object->_hx___renderTransform->c != 0);
            			}
            			else {
HXLINE( 776)				_hx_tmp1 = true;
            			}
HXDLIN( 776)			if (_hx_tmp1) {
HXLINE( 778)				 ::openfl::display::Shape shape = this->_hx___scrollRectMasks->get().StaticCast<  ::openfl::display::Shape >();
HXLINE( 779)				shape->get_graphics()->clear();
HXLINE( 780)				shape->get_graphics()->beginFill(65280,null());
HXLINE( 781)				shape->get_graphics()->drawRect(object->_hx___scrollRect->x,object->_hx___scrollRect->y,object->_hx___scrollRect->width,object->_hx___scrollRect->height);
HXLINE( 782)				shape->_hx___renderTransform->copyFrom(object->_hx___renderTransform);
HXLINE( 783)				this->_hx___pushMask(shape);
            			}
            			else {
HXLINE( 787)				this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            			}
            		}
HXLINE( 791)		if (hx::IsNotNull( object->_hx___mask )) {
HXLINE( 793)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___pushMaskObject,(void))

void Context3DRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_798___pushMaskRect)
HXLINE( 801)		if ((this->_hx___numClipRects == this->_hx___clipRects->length)) {
HXLINE( 803)			this->_hx___clipRects[this->_hx___numClipRects] =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 806)		 ::openfl::geom::Matrix _matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 807)		_matrix->copyFrom(transform);
HXLINE( 808)		_matrix->concat(this->_hx___worldTransform);
HXLINE( 810)		 ::openfl::geom::Rectangle clipRect = this->_hx___clipRects->__get(this->_hx___numClipRects).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 811)		rect->_hx___transform(clipRect,_matrix);
HXLINE( 813)		if ((this->_hx___numClipRects > 0)) {
HXLINE( 815)			 ::openfl::geom::Rectangle parentClipRect = this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 816)			clipRect->_hx___contract(parentClipRect->x,parentClipRect->y,parentClipRect->width,parentClipRect->height);
            		}
HXLINE( 819)		if ((clipRect->height < 0)) {
HXLINE( 821)			clipRect->height = ( (Float)(0) );
            		}
HXLINE( 824)		if ((clipRect->width < 0)) {
HXLINE( 826)			clipRect->width = ( (Float)(0) );
            		}
HXLINE( 829)		::openfl::geom::Matrix_obj::_hx___pool->release(_matrix);
HXLINE( 831)		this->_hx___scissorRect(clipRect);
HXLINE( 832)		this->_hx___numClipRects++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___pushMaskRect,(void))

void Context3DRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_836___render)
HXLINE( 837)		this->context3D->setColorMask(true,true,true,true);
HXLINE( 838)		this->context3D->setCulling(3);
HXLINE( 839)		this->context3D->setDepthTest(false,0);
HXLINE( 840)		this->context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE( 841)		this->context3D->setStencilReferenceValue(0,0,0);
HXLINE( 842)		this->context3D->setScissorRectangle(null());
HXLINE( 844)		this->_hx___blendMode = null();
HXLINE( 845)		this->_hx___setBlendMode(10);
HXLINE( 847)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE( 849)			::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___offsetY) ),( (Float)(this->_hx___displayWidth) ),( (Float)(this->_hx___displayHeight) ));
HXLINE( 850)			this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 852)			bool _hx_tmp;
HXDLIN( 852)			if ((this->_hx___worldTransform->a == 1)) {
HXLINE( 852)				_hx_tmp = (this->_hx___worldTransform->d != 1);
            			}
            			else {
HXLINE( 852)				_hx_tmp = true;
            			}
HXDLIN( 852)			this->_hx___upscaled = _hx_tmp;
HXLINE( 855)			bool _hx_tmp1;
HXDLIN( 855)			if (hx::IsNotNull( object )) {
HXLINE( 855)				_hx_tmp1 = hx::IsNotNull( object->__Field(HX_("__type",da,55,01,fc),hx::paccDynamic) );
            			}
            			else {
HXLINE( 855)				_hx_tmp1 = false;
            			}
HXDLIN( 855)			if (_hx_tmp1) {
HXLINE( 857)				this->_hx___renderDisplayObject(( ( ::openfl::display::DisplayObject)(object) ));
            			}
HXLINE( 862)			bool _hx_tmp2;
HXDLIN( 862)			if ((this->_hx___offsetX <= 0)) {
HXLINE( 862)				_hx_tmp2 = (this->_hx___offsetY > 0);
            			}
            			else {
HXLINE( 862)				_hx_tmp2 = true;
            			}
HXDLIN( 862)			if (_hx_tmp2) {
HXLINE( 866)				if ((this->_hx___offsetX > 0)) {
HXLINE( 869)					::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___height) ));
HXLINE( 870)					this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 872)					this->context3D->_hx___flushGL();
HXLINE( 873)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 874)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 878)					::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)((this->_hx___offsetX + this->_hx___displayWidth)) ),( (Float)(0) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___height) ));
HXLINE( 879)					this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 881)					this->context3D->_hx___flushGL();
HXLINE( 882)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 883)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 887)				if ((this->_hx___offsetY > 0)) {
HXLINE( 890)					::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___offsetY) ));
HXLINE( 891)					this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 893)					this->context3D->_hx___flushGL();
HXLINE( 894)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 895)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
HXLINE( 899)					::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(0) ),( (Float)((this->_hx___offsetY + this->_hx___displayHeight)) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___height) ));
HXLINE( 900)					this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 902)					this->context3D->_hx___flushGL();
HXLINE( 903)					this->_hx___gl->clearColor(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
HXLINE( 904)					this->_hx___gl->clear(this->_hx___gl->COLOR_BUFFER_BIT);
            				}
HXLINE( 908)				this->context3D->setScissorRectangle(null());
            			}
            		}
            		else {
HXLINE( 913)			::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(this->_hx___offsetX) ),( (Float)(this->_hx___offsetY) ),( (Float)(this->_hx___displayWidth) ),( (Float)(this->_hx___displayHeight) ));
HXLINE( 914)			this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
HXLINE( 921)			 ::openfl::display::DisplayObject cacheMask = ( ( ::openfl::display::DisplayObject)(object->__Field(HX_("__mask",0c,a4,4e,f7),hx::paccDynamic)) );
HXLINE( 922)			 ::openfl::geom::Rectangle cacheScrollRect = ( ( ::openfl::geom::Rectangle)(object->__Field(HX_("__scrollRect",f1,56,fa,41),hx::paccDynamic)) );
HXLINE( 923)			object->__SetField(HX_("__mask",0c,a4,4e,f7),null(),hx::paccDynamic);
HXLINE( 924)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),null(),hx::paccDynamic);
HXLINE( 926)			if (hx::IsNotNull( object )) {
HXLINE( 928)				if (hx::IsNotNull( object->__Field(HX_("__type",da,55,01,fc),hx::paccDynamic) )) {
HXLINE( 930)					this->_hx___renderDisplayObject(( ( ::openfl::display::DisplayObject)(object) ));
            				}
            				else {
HXLINE( 934)					this->_hx___renderBitmapData(( ( ::openfl::display::BitmapData)(object) ));
            				}
            			}
HXLINE( 938)			object->__SetField(HX_("__mask",0c,a4,4e,f7),cacheMask,hx::paccDynamic);
HXLINE( 939)			object->__SetField(HX_("__scrollRect",f1,56,fa,41),cacheScrollRect,hx::paccDynamic);
            		}
HXLINE( 942)		this->context3D->present();
            	}


void Context3DRenderer_obj::_hx___renderBitmap( ::openfl::display::Bitmap bitmap){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_946___renderBitmap)
HXLINE( 947)		this->_hx___updateCacheBitmap(bitmap,false);
HXLINE( 949)		bool _hx_tmp;
HXDLIN( 949)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE( 949)			_hx_tmp = hx::IsNotNull( bitmap->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 949)			_hx_tmp = false;
            		}
HXDLIN( 949)		if (_hx_tmp) {
HXLINE( 951)			bitmap->_hx___imageVersion = bitmap->_hx___bitmapData->image->version;
            		}
HXLINE( 954)		bool _hx_tmp1;
HXDLIN( 954)		if (hx::IsNotNull( bitmap->_hx___cacheBitmap )) {
HXLINE( 954)			_hx_tmp1 = !(bitmap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 954)			_hx_tmp1 = false;
            		}
HXDLIN( 954)		if (_hx_tmp1) {
HXLINE( 956)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(bitmap->_hx___cacheBitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 960)			bool _hx_tmp2;
HXDLIN( 960)			if (hx::IsNull( bitmap->opaqueBackground )) {
HXLINE( 960)				_hx_tmp2 = hx::IsNull( bitmap->_hx___graphics );
            			}
            			else {
HXLINE( 960)				_hx_tmp2 = false;
            			}
HXDLIN( 960)			if (!(_hx_tmp2)) {
HXLINE( 960)				bool _hx_tmp3;
HXDLIN( 960)				if (!(!(bitmap->_hx___renderable))) {
HXLINE( 960)					_hx_tmp3 = (bitmap->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE( 960)					_hx_tmp3 = true;
            				}
HXDLIN( 960)				if (!(_hx_tmp3)) {
HXLINE( 960)					bool _hx_tmp4;
HXDLIN( 960)					bool _hx_tmp5;
HXDLIN( 960)					bool _hx_tmp6;
HXDLIN( 960)					if (hx::IsNotNull( bitmap->opaqueBackground )) {
HXLINE( 960)						_hx_tmp6 = !(bitmap->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE( 960)						_hx_tmp6 = false;
            					}
HXDLIN( 960)					if (_hx_tmp6) {
HXLINE( 960)						_hx_tmp5 = (bitmap->get_width() > 0);
            					}
            					else {
HXLINE( 960)						_hx_tmp5 = false;
            					}
HXDLIN( 960)					if (_hx_tmp5) {
HXLINE( 960)						_hx_tmp4 = (bitmap->get_height() > 0);
            					}
            					else {
HXLINE( 960)						_hx_tmp4 = false;
            					}
HXDLIN( 960)					if (_hx_tmp4) {
HXLINE( 960)						this->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 960)						this->_hx___pushMaskObject(bitmap,null());
HXDLIN( 960)						 ::openfl::display3D::Context3D context = this->context3D;
HXDLIN( 960)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN( 960)						Float _hx_tmp7 = bitmap->get_width();
HXDLIN( 960)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp7,bitmap->get_height());
HXDLIN( 960)						this->_hx___pushMaskRect(rect,bitmap->_hx___renderTransform);
HXDLIN( 960)						int color = ( (int)(bitmap->opaqueBackground) );
HXDLIN( 960)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN( 960)						this->_hx___popMaskRect();
HXDLIN( 960)						this->_hx___popMaskObject(bitmap,null());
HXDLIN( 960)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 960)					if (hx::IsNotNull( bitmap->_hx___graphics )) {
HXLINE( 960)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(bitmap,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
HXLINE( 961)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(bitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderBitmap,(void))

void Context3DRenderer_obj::_hx___renderBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_966___renderBitmapData)
HXLINE( 967)		this->_hx___setBlendMode(10);
HXLINE( 969)		 ::openfl::display::DisplayObjectShader shader = this->_hx___defaultDisplayShader;
HXLINE( 970)		this->setShader(shader);
HXLINE( 971)		this->applyBitmapData(bitmapData,this->_hx___upscaled,null());
HXLINE( 972)		this->applyMatrix(this->_hx___getMatrix(bitmapData->_hx___worldTransform,1));
HXLINE( 973)		this->applyAlpha(bitmapData->_hx___worldAlpha);
HXLINE( 974)		this->applyColorTransform(bitmapData->_hx___worldColorTransform);
HXLINE( 975)		this->updateShader();
HXLINE( 979)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = bitmapData->getVertexBuffer(this->context3D,null(),null());
HXLINE( 980)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 980)			this->context3D->setVertexBufferAt(( (int)(shader->_hx___position->index) ),vertexBuffer,0,3);
            		}
HXLINE( 981)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 981)			this->context3D->setVertexBufferAt(( (int)(shader->_hx___textureCoord->index) ),vertexBuffer,3,2);
            		}
HXLINE( 982)		 ::openfl::display3D::IndexBuffer3D indexBuffer = bitmapData->getIndexBuffer(this->context3D,null());
HXLINE( 983)		this->context3D->drawTriangles(indexBuffer,null(),null());
HXLINE( 989)		this->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderBitmapData,(void))

void Context3DRenderer_obj::_hx___renderDisplayObject( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_994___renderDisplayObject)
HXDLIN( 994)		bool _hx_tmp;
HXDLIN( 994)		if (hx::IsNotNull( object )) {
HXDLIN( 994)			_hx_tmp = hx::IsNotNull( object->_hx___type );
            		}
            		else {
HXDLIN( 994)			_hx_tmp = false;
            		}
HXDLIN( 994)		if (_hx_tmp) {
HXLINE( 996)			switch((int)(object->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 999)					this->_hx___renderBitmap(( ( ::openfl::display::Bitmap)(object) ));
            				}
            				break;
            				case (int)2: {
HXLINE(1001)					this->_hx___renderDisplayObjectContainer(( ( ::openfl::display::DisplayObjectContainer)(object) ));
            				}
            				break;
            				case (int)1: case (int)4: {
HXLINE(1003)					this->_hx___renderShape(object);
            				}
            				break;
            				case (int)5: {
HXLINE(1005)					this->_hx___renderSimpleButton(( ( ::openfl::display::SimpleButton)(object) ));
            				}
            				break;
            				case (int)6: {
HXLINE(1007)					this->_hx___renderTextField(( ( ::openfl::text::TextField)(object) ));
            				}
            				break;
            				case (int)7: {
HXLINE(1009)					this->_hx___renderTilemap(( ( ::openfl::display::Tilemap)(object) ));
            				}
            				break;
            				case (int)8: {
HXLINE(1011)					this->_hx___renderVideo(( ( ::openfl::media::Video)(object) ));
            				}
            				break;
            				default:{
            				}
            			}
HXLINE(1015)			if (hx::IsNotNull( object->_hx___customRenderEvent )) {
HXLINE(1017)				 ::openfl::events::RenderEvent event = object->_hx___customRenderEvent;
HXLINE(1018)				event->allowSmoothing = this->_hx___allowSmoothing;
HXLINE(1019)				event->objectMatrix->copyFrom(object->_hx___renderTransform);
HXLINE(1020)				event->objectColorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE(1021)				event->renderer = hx::ObjectPtr<OBJ_>(this);
HXLINE(1023)				if (!(this->_hx___cleared)) {
HXLINE(1023)					this->_hx___clear();
            				}
HXLINE(1025)				this->setShader(object->_hx___worldShader);
HXLINE(1026)				this->context3D->_hx___flushGL();
HXLINE(1028)				event->type = HX_("renderOpenGL",65,4c,ea,90);
HXLINE(1030)				this->_hx___setBlendMode(object->_hx___worldBlendMode);
HXLINE(1031)				this->_hx___pushMaskObject(object,null());
HXLINE(1033)				object->dispatchEvent(event);
HXLINE(1035)				this->_hx___popMaskObject(object,null());
HXLINE(1037)				this->setViewport();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderDisplayObject,(void))

void Context3DRenderer_obj::_hx___renderDisplayObjectContainer( ::openfl::display::DisplayObjectContainer container){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1043___renderDisplayObjectContainer)
HXLINE(1044)		{
HXLINE(1044)			{
HXLINE(1044)				 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN(1044)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1044)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(1044)					if (hx::IsNull( orphan1->stage )) {
HXLINE(1044)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN(1044)			container->_hx___removedChildren->set_length(0);
            		}
HXLINE(1046)		bool _hx_tmp;
HXDLIN(1046)		if (!(!(container->_hx___renderable))) {
HXLINE(1046)			_hx_tmp = (container->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE(1046)			_hx_tmp = true;
            		}
HXDLIN(1046)		if (_hx_tmp) {
HXLINE(1046)			return;
            		}
HXLINE(1048)		this->_hx___updateCacheBitmap(container,false);
HXLINE(1050)		bool _hx_tmp1;
HXDLIN(1050)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE(1050)			_hx_tmp1 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1050)			_hx_tmp1 = false;
            		}
HXDLIN(1050)		if (_hx_tmp1) {
HXLINE(1052)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(container->_hx___cacheBitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1056)			bool _hx_tmp2;
HXDLIN(1056)			if (hx::IsNull( container->opaqueBackground )) {
HXLINE(1056)				_hx_tmp2 = hx::IsNull( container->_hx___graphics );
            			}
            			else {
HXLINE(1056)				_hx_tmp2 = false;
            			}
HXDLIN(1056)			if (!(_hx_tmp2)) {
HXLINE(1056)				bool _hx_tmp3;
HXDLIN(1056)				if (!(!(container->_hx___renderable))) {
HXLINE(1056)					_hx_tmp3 = (container->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE(1056)					_hx_tmp3 = true;
            				}
HXDLIN(1056)				if (!(_hx_tmp3)) {
HXLINE(1056)					bool _hx_tmp4;
HXDLIN(1056)					bool _hx_tmp5;
HXDLIN(1056)					bool _hx_tmp6;
HXDLIN(1056)					if (hx::IsNotNull( container->opaqueBackground )) {
HXLINE(1056)						_hx_tmp6 = !(container->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1056)						_hx_tmp6 = false;
            					}
HXDLIN(1056)					if (_hx_tmp6) {
HXLINE(1056)						_hx_tmp5 = (container->get_width() > 0);
            					}
            					else {
HXLINE(1056)						_hx_tmp5 = false;
            					}
HXDLIN(1056)					if (_hx_tmp5) {
HXLINE(1056)						_hx_tmp4 = (container->get_height() > 0);
            					}
            					else {
HXLINE(1056)						_hx_tmp4 = false;
            					}
HXDLIN(1056)					if (_hx_tmp4) {
HXLINE(1056)						this->_hx___setBlendMode(container->_hx___worldBlendMode);
HXDLIN(1056)						this->_hx___pushMaskObject(container,null());
HXDLIN(1056)						 ::openfl::display3D::Context3D context = this->context3D;
HXDLIN(1056)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(1056)						Float _hx_tmp7 = container->get_width();
HXDLIN(1056)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp7,container->get_height());
HXDLIN(1056)						this->_hx___pushMaskRect(rect,container->_hx___renderTransform);
HXDLIN(1056)						int color = ( (int)(container->opaqueBackground) );
HXDLIN(1056)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN(1056)						this->_hx___popMaskRect();
HXDLIN(1056)						this->_hx___popMaskObject(container,null());
HXDLIN(1056)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1056)					if (hx::IsNotNull( container->_hx___graphics )) {
HXLINE(1056)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(container,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE(1059)		bool _hx_tmp8;
HXDLIN(1059)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE(1059)			_hx_tmp8 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1059)			_hx_tmp8 = false;
            		}
HXDLIN(1059)		if (_hx_tmp8) {
HXLINE(1059)			return;
            		}
HXLINE(1061)		if ((container->_hx___children->length > 0)) {
HXLINE(1063)			this->_hx___pushMaskObject(container,null());
HXLINE(1066)			if (hx::IsNotNull( this->_hx___stage )) {
HXLINE(1068)				{
HXLINE(1068)					int _g = 0;
HXDLIN(1068)					::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN(1068)					while((_g < _g1->length)){
HXLINE(1068)						 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1068)						_g = (_g + 1);
HXLINE(1070)						this->_hx___renderDisplayObject(child);
HXLINE(1071)						child->_hx___renderDirty = false;
            					}
            				}
HXLINE(1074)				container->_hx___renderDirty = false;
            			}
            			else {
HXLINE(1078)				int _g2 = 0;
HXDLIN(1078)				::Array< ::Dynamic> _g11 = container->_hx___children;
HXDLIN(1078)				while((_g2 < _g11->length)){
HXLINE(1078)					 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1078)					_g2 = (_g2 + 1);
HXLINE(1080)					this->_hx___renderDisplayObject(child1);
            				}
            			}
            		}
HXLINE(1085)		if ((container->_hx___children->length > 0)) {
HXLINE(1087)			this->_hx___popMaskObject(container,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderDisplayObjectContainer,(void))

void Context3DRenderer_obj::_hx___renderFilterPass( ::openfl::display::BitmapData source, ::openfl::display::Shader shader,bool smooth,hx::Null< bool >  __o_clear){
            		bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1092___renderFilterPass)
HXLINE(1093)		bool _hx_tmp;
HXDLIN(1093)		if (hx::IsNotNull( source )) {
HXLINE(1093)			_hx_tmp = hx::IsNull( shader );
            		}
            		else {
HXLINE(1093)			_hx_tmp = true;
            		}
HXDLIN(1093)		if (_hx_tmp) {
HXLINE(1093)			return;
            		}
HXLINE(1094)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1094)			return;
            		}
HXLINE(1096)		 ::openfl::display3D::textures::TextureBase cacheRTT = this->context3D->_hx___state->renderToTexture;
HXLINE(1097)		bool cacheRTTDepthStencil = this->context3D->_hx___state->renderToTextureDepthStencil;
HXLINE(1098)		int cacheRTTAntiAlias = this->context3D->_hx___state->renderToTextureAntiAlias;
HXLINE(1099)		int cacheRTTSurfaceSelector = this->context3D->_hx___state->renderToTextureSurfaceSelector;
HXLINE(1101)		 ::openfl::display3D::Context3D _hx_tmp1 = this->context3D;
HXDLIN(1101)		_hx_tmp1->setRenderToTexture(this->_hx___defaultRenderTarget->getTexture(this->context3D),false,null(),null());
HXLINE(1103)		if (clear) {
HXLINE(1105)			this->context3D->clear(0,0,0,0,0,0,1);
            		}
HXLINE(1108)		 ::openfl::display::Shader shader1 = this->_hx___initShader(shader);
HXLINE(1109)		this->setShader(shader1);
HXLINE(1110)		this->applyAlpha(( (Float)(1) ));
HXLINE(1111)		this->applyBitmapData(source,smooth,null());
HXLINE(1112)		this->applyColorTransform(null());
HXLINE(1113)		this->applyMatrix(this->_hx___getMatrix(source->_hx___renderTransform,1));
HXLINE(1114)		this->updateShader();
HXLINE(1116)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = source->getVertexBuffer(this->context3D,null(),null());
HXLINE(1117)		if (hx::IsNotNull( shader1->_hx___position )) {
HXLINE(1117)			this->context3D->setVertexBufferAt(( (int)(shader1->_hx___position->index) ),vertexBuffer,0,3);
            		}
HXLINE(1118)		if (hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE(1118)			this->context3D->setVertexBufferAt(( (int)(shader1->_hx___textureCoord->index) ),vertexBuffer,3,2);
            		}
HXLINE(1119)		 ::openfl::display3D::IndexBuffer3D indexBuffer = source->getIndexBuffer(this->context3D,null());
HXLINE(1120)		this->context3D->drawTriangles(indexBuffer,null(),null());
HXLINE(1122)		if (hx::IsNotNull( cacheRTT )) {
HXLINE(1124)			this->context3D->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE(1128)			this->context3D->setRenderToBackBuffer();
            		}
HXLINE(1131)		this->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3DRenderer_obj,_hx___renderFilterPass,(void))

void Context3DRenderer_obj::_hx___renderMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1136___renderMask)
HXDLIN(1136)		if (hx::IsNotNull( mask )) {
HXLINE(1138)			switch((int)(mask->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE(1141)					::openfl::_internal::renderer::context3D::Context3DBitmap_obj::renderMask(( ( ::openfl::display::Bitmap)(mask) ),hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				case (int)2: {
HXLINE(1144)					 ::openfl::display::DisplayObjectContainer container = ( ( ::openfl::display::DisplayObjectContainer)(mask) );
HXLINE(1145)					{
HXLINE(1145)						{
HXLINE(1145)							 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN(1145)							while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1145)								 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(1145)								if (hx::IsNull( orphan1->stage )) {
HXLINE(1145)									orphan1->_hx___cleanup();
            								}
            							}
            						}
HXDLIN(1145)						container->_hx___removedChildren->set_length(0);
            					}
HXLINE(1147)					if (hx::IsNotNull( container->_hx___graphics )) {
HXLINE(1149)						::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(container,hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE(1152)					{
HXLINE(1152)						int _g = 0;
HXDLIN(1152)						::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN(1152)						while((_g < _g1->length)){
HXLINE(1152)							 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1152)							_g = (_g + 1);
HXLINE(1154)							this->_hx___renderMask(child);
            						}
            					}
            				}
            				break;
            				case (int)3: {
            				}
            				break;
            				case (int)5: {
HXLINE(1160)					 ::openfl::display::SimpleButton button = ( ( ::openfl::display::SimpleButton)(mask) );
HXLINE(1161)					this->_hx___renderMask(button->_hx___currentState);
            				}
            				break;
            				case (int)6: {
HXLINE(1164)					::openfl::_internal::renderer::context3D::Context3DTextField_obj::renderMask(( ( ::openfl::text::TextField)(mask) ),hx::ObjectPtr<OBJ_>(this));
HXLINE(1165)					::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(mask,hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				case (int)7: {
HXLINE(1168)					{
HXLINE(1168)						 ::openfl::display::DisplayObject displayObject = mask;
HXDLIN(1168)						bool _hx_tmp;
HXDLIN(1168)						if (hx::IsNull( displayObject->opaqueBackground )) {
HXLINE(1168)							_hx_tmp = hx::IsNull( displayObject->_hx___graphics );
            						}
            						else {
HXLINE(1168)							_hx_tmp = false;
            						}
HXDLIN(1168)						if (!(_hx_tmp)) {
HXLINE(1168)							bool _hx_tmp1;
HXDLIN(1168)							bool _hx_tmp2;
HXDLIN(1168)							bool _hx_tmp3;
HXDLIN(1168)							if (hx::IsNotNull( displayObject->opaqueBackground )) {
HXLINE(1168)								_hx_tmp3 = !(displayObject->_hx___isCacheBitmapRender);
            							}
            							else {
HXLINE(1168)								_hx_tmp3 = false;
            							}
HXDLIN(1168)							if (_hx_tmp3) {
HXLINE(1168)								_hx_tmp2 = (displayObject->get_width() > 0);
            							}
            							else {
HXLINE(1168)								_hx_tmp2 = false;
            							}
HXDLIN(1168)							if (_hx_tmp2) {
HXLINE(1168)								_hx_tmp1 = (displayObject->get_height() > 0);
            							}
            							else {
HXLINE(1168)								_hx_tmp1 = false;
            							}
HXDLIN(1168)							if (hx::IsNotNull( displayObject->_hx___graphics )) {
HXLINE(1168)								::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(displayObject,hx::ObjectPtr<OBJ_>(this));
            							}
            						}
            					}
HXLINE(1169)					::openfl::_internal::renderer::context3D::Context3DTilemap_obj::renderMask(( ( ::openfl::display::Tilemap)(mask) ),hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				case (int)8: {
HXLINE(1172)					::openfl::_internal::renderer::context3D::Context3DVideo_obj::renderMask(( ( ::openfl::media::Video)(mask) ),hx::ObjectPtr<OBJ_>(this));
            				}
            				break;
            				default:{
HXLINE(1175)					if (hx::IsNotNull( mask->_hx___graphics )) {
HXLINE(1177)						::openfl::_internal::renderer::context3D::Context3DShape_obj::renderMask(mask,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderMask,(void))

void Context3DRenderer_obj::_hx___renderShape( ::openfl::display::DisplayObject shape){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1184___renderShape)
HXLINE(1185)		this->_hx___updateCacheBitmap(shape,false);
HXLINE(1187)		bool _hx_tmp;
HXDLIN(1187)		if (hx::IsNotNull( shape->_hx___cacheBitmap )) {
HXLINE(1187)			_hx_tmp = !(shape->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1187)			_hx_tmp = false;
            		}
HXDLIN(1187)		if (_hx_tmp) {
HXLINE(1189)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(shape->_hx___cacheBitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1193)			bool _hx_tmp1;
HXDLIN(1193)			if (hx::IsNull( shape->opaqueBackground )) {
HXLINE(1193)				_hx_tmp1 = hx::IsNull( shape->_hx___graphics );
            			}
            			else {
HXLINE(1193)				_hx_tmp1 = false;
            			}
HXDLIN(1193)			if (!(_hx_tmp1)) {
HXLINE(1193)				bool _hx_tmp2;
HXDLIN(1193)				if (!(!(shape->_hx___renderable))) {
HXLINE(1193)					_hx_tmp2 = (shape->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE(1193)					_hx_tmp2 = true;
            				}
HXDLIN(1193)				if (!(_hx_tmp2)) {
HXLINE(1193)					bool _hx_tmp3;
HXDLIN(1193)					bool _hx_tmp4;
HXDLIN(1193)					bool _hx_tmp5;
HXDLIN(1193)					if (hx::IsNotNull( shape->opaqueBackground )) {
HXLINE(1193)						_hx_tmp5 = !(shape->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1193)						_hx_tmp5 = false;
            					}
HXDLIN(1193)					if (_hx_tmp5) {
HXLINE(1193)						_hx_tmp4 = (shape->get_width() > 0);
            					}
            					else {
HXLINE(1193)						_hx_tmp4 = false;
            					}
HXDLIN(1193)					if (_hx_tmp4) {
HXLINE(1193)						_hx_tmp3 = (shape->get_height() > 0);
            					}
            					else {
HXLINE(1193)						_hx_tmp3 = false;
            					}
HXDLIN(1193)					if (_hx_tmp3) {
HXLINE(1193)						this->_hx___setBlendMode(shape->_hx___worldBlendMode);
HXDLIN(1193)						this->_hx___pushMaskObject(shape,null());
HXDLIN(1193)						 ::openfl::display3D::Context3D context = this->context3D;
HXDLIN(1193)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(1193)						Float _hx_tmp6 = shape->get_width();
HXDLIN(1193)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp6,shape->get_height());
HXDLIN(1193)						this->_hx___pushMaskRect(rect,shape->_hx___renderTransform);
HXDLIN(1193)						int color = ( (int)(shape->opaqueBackground) );
HXDLIN(1193)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN(1193)						this->_hx___popMaskRect();
HXDLIN(1193)						this->_hx___popMaskObject(shape,null());
HXDLIN(1193)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1193)					if (hx::IsNotNull( shape->_hx___graphics )) {
HXLINE(1193)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(shape,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderShape,(void))

void Context3DRenderer_obj::_hx___renderSimpleButton( ::openfl::display::SimpleButton button){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1198___renderSimpleButton)
HXLINE(1199)		bool _hx_tmp;
HXDLIN(1199)		bool _hx_tmp1;
HXDLIN(1199)		if (!(!(button->_hx___renderable))) {
HXLINE(1199)			_hx_tmp1 = (button->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE(1199)			_hx_tmp1 = true;
            		}
HXDLIN(1199)		if (!(_hx_tmp1)) {
HXLINE(1199)			_hx_tmp = hx::IsNull( button->_hx___currentState );
            		}
            		else {
HXLINE(1199)			_hx_tmp = true;
            		}
HXDLIN(1199)		if (_hx_tmp) {
HXLINE(1199)			return;
            		}
HXLINE(1201)		this->_hx___pushMaskObject(button,null());
HXLINE(1202)		this->_hx___renderDisplayObject(button->_hx___currentState);
HXLINE(1203)		this->_hx___popMaskObject(button,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderSimpleButton,(void))

void Context3DRenderer_obj::_hx___renderTextField( ::openfl::text::TextField textField){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1207___renderTextField)
HXLINE(1208)		this->_hx___updateCacheBitmap(textField,textField->_hx___dirty);
HXLINE(1210)		bool _hx_tmp;
HXDLIN(1210)		if (hx::IsNotNull( textField->_hx___cacheBitmap )) {
HXLINE(1210)			_hx_tmp = !(textField->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1210)			_hx_tmp = false;
            		}
HXDLIN(1210)		if (_hx_tmp) {
HXLINE(1212)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(textField->_hx___cacheBitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1216)			::openfl::_internal::renderer::context3D::Context3DTextField_obj::render(textField,hx::ObjectPtr<OBJ_>(this));
HXLINE(1217)			bool _hx_tmp1;
HXDLIN(1217)			if (hx::IsNull( textField->opaqueBackground )) {
HXLINE(1217)				_hx_tmp1 = hx::IsNull( textField->_hx___graphics );
            			}
            			else {
HXLINE(1217)				_hx_tmp1 = false;
            			}
HXDLIN(1217)			if (!(_hx_tmp1)) {
HXLINE(1217)				bool _hx_tmp2;
HXDLIN(1217)				if (!(!(textField->_hx___renderable))) {
HXLINE(1217)					_hx_tmp2 = (textField->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE(1217)					_hx_tmp2 = true;
            				}
HXDLIN(1217)				if (!(_hx_tmp2)) {
HXLINE(1217)					bool _hx_tmp3;
HXDLIN(1217)					bool _hx_tmp4;
HXDLIN(1217)					bool _hx_tmp5;
HXDLIN(1217)					if (hx::IsNotNull( textField->opaqueBackground )) {
HXLINE(1217)						_hx_tmp5 = !(textField->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1217)						_hx_tmp5 = false;
            					}
HXDLIN(1217)					if (_hx_tmp5) {
HXLINE(1217)						_hx_tmp4 = (textField->get_width() > 0);
            					}
            					else {
HXLINE(1217)						_hx_tmp4 = false;
            					}
HXDLIN(1217)					if (_hx_tmp4) {
HXLINE(1217)						_hx_tmp3 = (textField->get_height() > 0);
            					}
            					else {
HXLINE(1217)						_hx_tmp3 = false;
            					}
HXDLIN(1217)					if (_hx_tmp3) {
HXLINE(1217)						this->_hx___setBlendMode(textField->_hx___worldBlendMode);
HXDLIN(1217)						this->_hx___pushMaskObject(textField,null());
HXDLIN(1217)						 ::openfl::display3D::Context3D context = this->context3D;
HXDLIN(1217)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(1217)						Float _hx_tmp6 = textField->get_width();
HXDLIN(1217)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp6,textField->get_height());
HXDLIN(1217)						this->_hx___pushMaskRect(rect,textField->_hx___renderTransform);
HXDLIN(1217)						int color = ( (int)(textField->opaqueBackground) );
HXDLIN(1217)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN(1217)						this->_hx___popMaskRect();
HXDLIN(1217)						this->_hx___popMaskObject(textField,null());
HXDLIN(1217)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1217)					if (hx::IsNotNull( textField->_hx___graphics )) {
HXLINE(1217)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(textField,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderTextField,(void))

void Context3DRenderer_obj::_hx___renderTilemap( ::openfl::display::Tilemap tilemap){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1222___renderTilemap)
HXLINE(1223)		this->_hx___updateCacheBitmap(tilemap,false);
HXLINE(1225)		bool _hx_tmp;
HXDLIN(1225)		if (hx::IsNotNull( tilemap->_hx___cacheBitmap )) {
HXLINE(1225)			_hx_tmp = !(tilemap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE(1225)			_hx_tmp = false;
            		}
HXDLIN(1225)		if (_hx_tmp) {
HXLINE(1227)			::openfl::_internal::renderer::context3D::Context3DBitmap_obj::render(tilemap->_hx___cacheBitmap,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE(1231)			bool _hx_tmp1;
HXDLIN(1231)			if (hx::IsNull( tilemap->opaqueBackground )) {
HXLINE(1231)				_hx_tmp1 = hx::IsNull( tilemap->_hx___graphics );
            			}
            			else {
HXLINE(1231)				_hx_tmp1 = false;
            			}
HXDLIN(1231)			if (!(_hx_tmp1)) {
HXLINE(1231)				bool _hx_tmp2;
HXDLIN(1231)				if (!(!(tilemap->_hx___renderable))) {
HXLINE(1231)					_hx_tmp2 = (tilemap->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE(1231)					_hx_tmp2 = true;
            				}
HXDLIN(1231)				if (!(_hx_tmp2)) {
HXLINE(1231)					bool _hx_tmp3;
HXDLIN(1231)					bool _hx_tmp4;
HXDLIN(1231)					bool _hx_tmp5;
HXDLIN(1231)					if (hx::IsNotNull( tilemap->opaqueBackground )) {
HXLINE(1231)						_hx_tmp5 = !(tilemap->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE(1231)						_hx_tmp5 = false;
            					}
HXDLIN(1231)					if (_hx_tmp5) {
HXLINE(1231)						_hx_tmp4 = (tilemap->get_width() > 0);
            					}
            					else {
HXLINE(1231)						_hx_tmp4 = false;
            					}
HXDLIN(1231)					if (_hx_tmp4) {
HXLINE(1231)						_hx_tmp3 = (tilemap->get_height() > 0);
            					}
            					else {
HXLINE(1231)						_hx_tmp3 = false;
            					}
HXDLIN(1231)					if (_hx_tmp3) {
HXLINE(1231)						this->_hx___setBlendMode(tilemap->_hx___worldBlendMode);
HXDLIN(1231)						this->_hx___pushMaskObject(tilemap,null());
HXDLIN(1231)						 ::openfl::display3D::Context3D context = this->context3D;
HXDLIN(1231)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN(1231)						Float _hx_tmp6 = tilemap->get_width();
HXDLIN(1231)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp6,tilemap->get_height());
HXDLIN(1231)						this->_hx___pushMaskRect(rect,tilemap->_hx___renderTransform);
HXDLIN(1231)						int color = ( (int)(tilemap->opaqueBackground) );
HXDLIN(1231)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN(1231)						this->_hx___popMaskRect();
HXDLIN(1231)						this->_hx___popMaskObject(tilemap,null());
HXDLIN(1231)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN(1231)					if (hx::IsNotNull( tilemap->_hx___graphics )) {
HXLINE(1231)						::openfl::_internal::renderer::context3D::Context3DShape_obj::render(tilemap,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
HXLINE(1232)			::openfl::_internal::renderer::context3D::Context3DTilemap_obj::render(tilemap,hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderTilemap,(void))

void Context3DRenderer_obj::_hx___renderVideo( ::openfl::media::Video video){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1238___renderVideo)
HXDLIN(1238)		::openfl::_internal::renderer::context3D::Context3DVideo_obj::render(video,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___renderVideo,(void))

void Context3DRenderer_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1242___resize)
HXLINE(1243)		this->_hx___width = width;
HXLINE(1244)		this->_hx___height = height;
HXLINE(1246)		int w;
HXDLIN(1246)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1246)			w = this->_hx___stage->stageWidth;
            		}
            		else {
HXLINE(1246)			w = this->_hx___defaultRenderTarget->width;
            		}
HXLINE(1247)		int h;
HXDLIN(1247)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1247)			h = this->_hx___stage->stageHeight;
            		}
            		else {
HXLINE(1247)			h = this->_hx___defaultRenderTarget->height;
            		}
HXLINE(1249)		int _hx_tmp;
HXDLIN(1249)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1249)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(1249)			_hx_tmp = ::Math_obj::round((((( (Float)(0) ) * _this->a) + (( (Float)(0) ) * _this->c)) + _this->tx));
            		}
            		else {
HXLINE(1249)			_hx_tmp = 0;
            		}
HXDLIN(1249)		this->_hx___offsetX = _hx_tmp;
HXLINE(1250)		int _hx_tmp1;
HXDLIN(1250)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1250)			 ::openfl::geom::Matrix _this1 = this->_hx___worldTransform;
HXDLIN(1250)			_hx_tmp1 = ::Math_obj::round((((( (Float)(0) ) * _this1->b) + (( (Float)(0) ) * _this1->d)) + _this1->ty));
            		}
            		else {
HXLINE(1250)			_hx_tmp1 = 0;
            		}
HXDLIN(1250)		this->_hx___offsetY = _hx_tmp1;
HXLINE(1251)		int _hx_tmp2;
HXDLIN(1251)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1251)			 ::openfl::geom::Matrix _this2 = this->_hx___worldTransform;
HXDLIN(1251)			_hx_tmp2 = ::Math_obj::round(((((( (Float)(w) ) * _this2->a) + (( (Float)(0) ) * _this2->c)) + _this2->tx) - ( (Float)(this->_hx___offsetX) )));
            		}
            		else {
HXLINE(1251)			_hx_tmp2 = w;
            		}
HXDLIN(1251)		this->_hx___displayWidth = _hx_tmp2;
HXLINE(1252)		int _hx_tmp3;
HXDLIN(1252)		if (hx::IsNull( this->_hx___defaultRenderTarget )) {
HXLINE(1252)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(1252)			_hx_tmp3 = ::Math_obj::round(((((( (Float)(0) ) * _this3->b) + (( (Float)(h) ) * _this3->d)) + _this3->ty) - ( (Float)(this->_hx___offsetY) )));
            		}
            		else {
HXLINE(1252)			_hx_tmp3 = h;
            		}
HXDLIN(1252)		this->_hx___displayHeight = _hx_tmp3;
HXLINE(1254)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(this->_hx___projection,( (Float)(0) ),( (Float)((this->_hx___displayWidth + (this->_hx___offsetX * 2))) ),( (Float)(0) ),( (Float)((this->_hx___displayHeight + (this->_hx___offsetY * 2))) ),( (Float)(-1000) ),( (Float)(1000) ));
HXLINE(1255)		::lime::math::_Matrix4::Matrix4_Impl__obj::createOrtho(this->_hx___projectionFlipped,( (Float)(0) ),( (Float)((this->_hx___displayWidth + (this->_hx___offsetX * 2))) ),( (Float)((this->_hx___displayHeight + (this->_hx___offsetY * 2))) ),( (Float)(0) ),( (Float)(-1000) ),( (Float)(1000) ));
            	}


void Context3DRenderer_obj::_hx___resumeClipAndMask( ::openfl::_internal::renderer::context3D::Context3DRenderer childRenderer){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1259___resumeClipAndMask)
HXLINE(1260)		if ((this->_hx___stencilReference > 0)) {
HXLINE(1262)			this->context3D->setStencilActions(2,1,5,5,5);
HXLINE(1263)			this->context3D->setStencilReferenceValue(this->_hx___stencilReference,255,0);
            		}
            		else {
HXLINE(1267)			this->context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE(1268)			this->context3D->setStencilReferenceValue(0,0,0);
            		}
HXLINE(1271)		if ((this->_hx___numClipRects > 0)) {
HXLINE(1273)			this->_hx___scissorRect(this->_hx___clipRects->__get((this->_hx___numClipRects - 1)).StaticCast<  ::openfl::geom::Rectangle >());
            		}
            		else {
HXLINE(1277)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___resumeClipAndMask,(void))

void Context3DRenderer_obj::_hx___scissorRect( ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1283___scissorRect)
HXDLIN(1283)		if (hx::IsNotNull( clipRect )) {
HXLINE(1285)			int x = ::Math_obj::floor(clipRect->x);
HXLINE(1286)			int y = ::Math_obj::floor(clipRect->y);
HXLINE(1287)			int width;
HXDLIN(1287)			if ((clipRect->width > 0)) {
HXLINE(1287)				width = (::Math_obj::ceil(clipRect->get_right()) - x);
            			}
            			else {
HXLINE(1287)				width = 0;
            			}
HXLINE(1288)			int height;
HXDLIN(1288)			if ((clipRect->height > 0)) {
HXLINE(1288)				height = (::Math_obj::ceil(clipRect->get_bottom()) - y);
            			}
            			else {
HXLINE(1288)				height = 0;
            			}
HXLINE(1290)			if ((width < 0)) {
HXLINE(1290)				width = 0;
            			}
HXLINE(1291)			if ((height < 0)) {
HXLINE(1291)				height = 0;
            			}
HXLINE(1294)			::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle->setTo(( (Float)(x) ),( (Float)(y) ),( (Float)(width) ),( (Float)(height) ));
HXLINE(1295)			this->context3D->setScissorRectangle(::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___scissorRectangle);
            		}
            		else {
HXLINE(1299)			this->context3D->setScissorRectangle(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___scissorRect,(void))

void Context3DRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1304___setBlendMode)
HXLINE(1305)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE(1305)			value = this->_hx___overrideBlendMode;
            		}
HXLINE(1306)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE(1306)			return;
            		}
HXLINE(1308)		this->_hx___blendMode = value;
HXLINE(1310)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==0) ){
HXLINE(1313)			this->context3D->setBlendFactors(2,2);
HXDLIN(1313)			goto _hx_goto_56;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(1327)			this->context3D->setBlendFactors(2,2);
HXLINE(1328)			this->context3D->_hx___setGLBlendEquation(32775);
HXLINE(1326)			goto _hx_goto_56;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE(1331)			this->context3D->setBlendFactors(2,2);
HXLINE(1332)			this->context3D->_hx___setGLBlendEquation(32776);
HXLINE(1330)			goto _hx_goto_56;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE(1316)			this->context3D->setBlendFactors(1,5);
HXDLIN(1316)			goto _hx_goto_56;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE(1319)			this->context3D->setBlendFactors(2,6);
HXDLIN(1319)			goto _hx_goto_56;
            		}
            		if (  (_hx_switch_0==14) ){
HXLINE(1322)			this->context3D->setBlendFactors(2,2);
HXLINE(1323)			this->context3D->_hx___setGLBlendEquation(this->_hx___gl->FUNC_REVERSE_SUBTRACT);
HXLINE(1321)			goto _hx_goto_56;
            		}
            		/* default */{
HXLINE(1336)			this->context3D->setBlendFactors(2,5);
            		}
            		_hx_goto_56:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___setBlendMode,(void))

void Context3DRenderer_obj::_hx___setRenderTarget( ::openfl::display::BitmapData renderTarget){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1341___setRenderTarget)
HXLINE(1342)		this->_hx___defaultRenderTarget = renderTarget;
HXLINE(1343)		this->_hx___flipped = hx::IsNull( renderTarget );
HXLINE(1345)		if (hx::IsNotNull( renderTarget )) {
HXLINE(1347)			this->_hx___resize(renderTarget->width,renderTarget->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___setRenderTarget,(void))

void Context3DRenderer_obj::_hx___setShaderBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1352___setShaderBuffer)
HXLINE(1353)		this->setShader(shaderBuffer->shader);
HXLINE(1354)		this->_hx___currentShaderBuffer = shaderBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___setShaderBuffer,(void))

 ::Dynamic Context3DRenderer_obj::_hx___shouldCacheHardware( ::openfl::display::DisplayObject object, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1358___shouldCacheHardware)
HXLINE(1359)		if (hx::IsEq( value,true )) {
HXLINE(1359)			return true;
            		}
HXLINE(1361)		switch((int)(object->_hx___type->_hx_getIndex())){
            			case (int)2: {
HXLINE(1364)				if (hx::IsNotNull( object->_hx___filters )) {
HXLINE(1364)					return true;
            				}
HXLINE(1366)				bool _hx_tmp;
HXDLIN(1366)				if (hx::IsNotEq( value,false )) {
HXLINE(1366)					if (hx::IsNotNull( object->_hx___graphics )) {
HXLINE(1366)						_hx_tmp = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::isCompatible(object->_hx___graphics));
            					}
            					else {
HXLINE(1366)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1366)					_hx_tmp = true;
            				}
HXDLIN(1366)				if (_hx_tmp) {
HXLINE(1368)					value = false;
            				}
HXLINE(1371)				if (hx::IsNotNull( object->_hx___children )) {
HXLINE(1373)					int _g = 0;
HXDLIN(1373)					::Array< ::Dynamic> _g1 = object->_hx___children;
HXDLIN(1373)					while((_g < _g1->length)){
HXLINE(1373)						 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1373)						_g = (_g + 1);
HXLINE(1375)						value = this->_hx___shouldCacheHardware(child,value);
HXLINE(1376)						if (hx::IsEq( value,true )) {
HXLINE(1376)							return true;
            						}
            					}
            				}
HXLINE(1380)				return value;
            			}
            			break;
            			case (int)6: {
HXLINE(1383)				if (hx::IsEq( value,true )) {
HXLINE(1383)					return true;
            				}
            				else {
HXLINE(1383)					return false;
            				}
            			}
            			break;
            			case (int)7: {
HXLINE(1386)				return true;
            			}
            			break;
            			default:{
HXLINE(1389)				bool _hx_tmp1;
HXDLIN(1389)				if (hx::IsNotEq( value,true )) {
HXLINE(1389)					_hx_tmp1 = hx::IsNotNull( object->_hx___filters );
            				}
            				else {
HXLINE(1389)					_hx_tmp1 = true;
            				}
HXDLIN(1389)				if (_hx_tmp1) {
HXLINE(1389)					return true;
            				}
HXLINE(1391)				bool _hx_tmp2;
HXDLIN(1391)				if (hx::IsNotEq( value,false )) {
HXLINE(1391)					if (hx::IsNotNull( object->_hx___graphics )) {
HXLINE(1391)						_hx_tmp2 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::isCompatible(object->_hx___graphics));
            					}
            					else {
HXLINE(1391)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE(1391)					_hx_tmp2 = true;
            				}
HXDLIN(1391)				if (_hx_tmp2) {
HXLINE(1393)					return false;
            				}
HXLINE(1396)				return null();
            			}
            		}
HXLINE(1361)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___shouldCacheHardware,return )

void Context3DRenderer_obj::_hx___suspendClipAndMask(){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1401___suspendClipAndMask)
HXLINE(1402)		if ((this->_hx___stencilReference > 0)) {
HXLINE(1404)			this->context3D->setStencilActions(null(),null(),null(),null(),null());
HXLINE(1405)			this->context3D->setStencilReferenceValue(0,0,0);
            		}
HXLINE(1408)		if ((this->_hx___numClipRects > 0)) {
HXLINE(1410)			this->_hx___scissorRect(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DRenderer_obj,_hx___suspendClipAndMask,(void))

bool Context3DRenderer_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObject object,bool force){
            	HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1415___updateCacheBitmap)
HXLINE(1420)		if (object->_hx___isCacheBitmapRender) {
HXLINE(1420)			return false;
            		}
HXLINE(1421)		bool updated = false;
HXLINE(1423)		if (object->get_cacheAsBitmap()) {
HXLINE(1425)			if (hx::IsNull( object->_hx___cacheBitmapMatrix )) {
HXLINE(1427)				object->_hx___cacheBitmapMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE(1430)			bool hasFilters = hx::IsNotNull( object->_hx___filters );
HXLINE(1431)			 ::openfl::geom::Matrix bitmapMatrix;
HXDLIN(1431)			if (hx::IsNotNull( object->_hx___cacheAsBitmapMatrix )) {
HXLINE(1431)				bitmapMatrix = object->_hx___cacheAsBitmapMatrix;
            			}
            			else {
HXLINE(1431)				bitmapMatrix = object->_hx___renderTransform;
            			}
HXLINE(1433)			 ::openfl::geom::ColorTransform colorTransform = ::openfl::geom::ColorTransform_obj::_hx___pool->get().StaticCast<  ::openfl::geom::ColorTransform >();
HXLINE(1434)			colorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE(1435)			if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE(1435)				colorTransform->_hx___combine(this->_hx___worldColorTransform);
            			}
HXLINE(1437)			bool needRender;
HXDLIN(1437)			bool needRender1;
HXDLIN(1437)			bool needRender2;
HXDLIN(1437)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE(1438)				if (object->_hx___renderDirty) {
HXLINE(1438)					if (!(force)) {
HXLINE(1438)						if (hx::IsNotNull( object->_hx___children )) {
HXLINE(1437)							needRender2 = (object->_hx___children->length > 0);
            						}
            						else {
HXLINE(1437)							needRender2 = false;
            						}
            					}
            					else {
HXLINE(1437)						needRender2 = true;
            					}
            				}
            				else {
HXLINE(1437)					needRender2 = false;
            				}
            			}
            			else {
HXLINE(1437)				needRender2 = true;
            			}
HXDLIN(1437)			if (!(needRender2)) {
HXLINE(1437)				needRender1 = hx::IsNotEq( object->opaqueBackground,object->_hx___cacheBitmapBackground );
            			}
            			else {
HXLINE(1437)				needRender1 = true;
            			}
HXDLIN(1437)			if (!(needRender1)) {
HXLINE(1440)				if (hx::IsNotNull( object->_hx___graphics )) {
HXLINE(1437)					needRender = object->_hx___graphics->_hx___hardwareDirty;
            				}
            				else {
HXLINE(1437)					needRender = false;
            				}
            			}
            			else {
HXLINE(1437)				needRender = true;
            			}
HXLINE(1442)			 ::openfl::geom::Rectangle rect = null();
HXLINE(1444)			bool _hx_tmp;
HXDLIN(1444)			if (!(needRender)) {
HXLINE(1445)				bool _hx_tmp1;
HXDLIN(1445)				bool _hx_tmp2;
HXDLIN(1445)				if ((bitmapMatrix->a == object->_hx___cacheBitmapMatrix->a)) {
HXLINE(1445)					_hx_tmp2 = (bitmapMatrix->b != object->_hx___cacheBitmapMatrix->b);
            				}
            				else {
HXLINE(1445)					_hx_tmp2 = true;
            				}
HXDLIN(1445)				if (!(_hx_tmp2)) {
HXLINE(1445)					_hx_tmp1 = (bitmapMatrix->c != object->_hx___cacheBitmapMatrix->c);
            				}
            				else {
HXLINE(1445)					_hx_tmp1 = true;
            				}
HXDLIN(1445)				if (!(_hx_tmp1)) {
HXLINE(1444)					_hx_tmp = (bitmapMatrix->d != object->_hx___cacheBitmapMatrix->d);
            				}
            				else {
HXLINE(1444)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1444)				_hx_tmp = false;
            			}
HXDLIN(1444)			if (_hx_tmp) {
HXLINE(1450)				needRender = true;
            			}
HXLINE(1453)			bool _hx_tmp3;
HXDLIN(1453)			if (hasFilters) {
HXLINE(1453)				_hx_tmp3 = !(needRender);
            			}
            			else {
HXLINE(1453)				_hx_tmp3 = false;
            			}
HXDLIN(1453)			if (_hx_tmp3) {
HXLINE(1455)				int _g = 0;
HXDLIN(1455)				::Array< ::Dynamic> _g1 = object->_hx___filters;
HXDLIN(1455)				while((_g < _g1->length)){
HXLINE(1455)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1455)					_g = (_g + 1);
HXLINE(1457)					if (filter->_hx___renderDirty) {
HXLINE(1459)						needRender = true;
HXLINE(1460)						goto _hx_goto_63;
            					}
            				}
            				_hx_goto_63:;
            			}
HXLINE(1466)			bool updateTransform;
HXDLIN(1466)			if (!(needRender)) {
HXLINE(1466)				updateTransform = !(object->_hx___cacheBitmap->_hx___worldTransform->equals(object->_hx___worldTransform));
            			}
            			else {
HXLINE(1466)				updateTransform = true;
            			}
HXLINE(1468)			object->_hx___cacheBitmapMatrix->copyFrom(bitmapMatrix);
HXLINE(1469)			object->_hx___cacheBitmapMatrix->tx = ( (Float)(0) );
HXLINE(1470)			object->_hx___cacheBitmapMatrix->ty = ( (Float)(0) );
HXLINE(1474)			int bitmapWidth = 0;
HXDLIN(1474)			int bitmapHeight = 0;
HXLINE(1475)			int filterWidth = 0;
HXDLIN(1475)			int filterHeight = 0;
HXLINE(1476)			Float offsetX = ((Float)0.);
HXDLIN(1476)			Float offsetY = ((Float)0.);
HXLINE(1478)			if (updateTransform) {
HXLINE(1480)				rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1482)				object->_hx___getFilterBounds(rect,object->_hx___cacheBitmapMatrix);
HXLINE(1484)				filterWidth = ::Math_obj::ceil(rect->width);
HXLINE(1485)				filterHeight = ::Math_obj::ceil(rect->height);
HXLINE(1487)				if ((rect->x > 0)) {
HXLINE(1487)					offsetX = ( (Float)(::Math_obj::ceil(rect->x)) );
            				}
            				else {
HXLINE(1487)					offsetX = ( (Float)(::Math_obj::floor(rect->x)) );
            				}
HXLINE(1488)				if ((rect->y > 0)) {
HXLINE(1488)					offsetY = ( (Float)(::Math_obj::ceil(rect->y)) );
            				}
            				else {
HXLINE(1488)					offsetY = ( (Float)(::Math_obj::floor(rect->y)) );
            				}
HXLINE(1490)				if (hx::IsNotNull( object->_hx___cacheBitmapDataTexture )) {
HXLINE(1492)					bool _hx_tmp4;
HXDLIN(1492)					if ((filterWidth <= object->_hx___cacheBitmapDataTexture->width)) {
HXLINE(1492)						_hx_tmp4 = (filterHeight > object->_hx___cacheBitmapDataTexture->height);
            					}
            					else {
HXLINE(1492)						_hx_tmp4 = true;
            					}
HXDLIN(1492)					if (_hx_tmp4) {
HXLINE(1494)						int newValue = 1;
HXDLIN(1494)						while((newValue < filterWidth)){
HXLINE(1494)							newValue = (newValue << 1);
            						}
HXDLIN(1494)						bitmapWidth = newValue;
HXLINE(1495)						int newValue1 = 1;
HXDLIN(1495)						while((newValue1 < filterHeight)){
HXLINE(1495)							newValue1 = (newValue1 << 1);
            						}
HXDLIN(1495)						bitmapHeight = newValue1;
HXLINE(1496)						needRender = true;
            					}
            					else {
HXLINE(1500)						bitmapWidth = object->_hx___cacheBitmapDataTexture->width;
HXLINE(1501)						bitmapHeight = object->_hx___cacheBitmapDataTexture->height;
            					}
            				}
            				else {
HXLINE(1506)					int newValue2 = 1;
HXDLIN(1506)					while((newValue2 < filterWidth)){
HXLINE(1506)						newValue2 = (newValue2 << 1);
            					}
HXDLIN(1506)					bitmapWidth = newValue2;
HXLINE(1507)					int newValue3 = 1;
HXDLIN(1507)					while((newValue3 < filterHeight)){
HXLINE(1507)						newValue3 = (newValue3 << 1);
            					}
HXDLIN(1507)					bitmapHeight = newValue3;
            				}
            			}
HXLINE(1511)			if (needRender) {
HXLINE(1513)				updateTransform = true;
HXLINE(1514)				object->_hx___cacheBitmapBackground = object->opaqueBackground;
HXLINE(1516)				bool _hx_tmp5;
HXDLIN(1516)				if ((filterWidth >= ((Float)0.5))) {
HXLINE(1516)					_hx_tmp5 = (filterHeight >= ((Float)0.5));
            				}
            				else {
HXLINE(1516)					_hx_tmp5 = false;
            				}
HXDLIN(1516)				if (_hx_tmp5) {
HXLINE(1518)					bool needsFill;
HXDLIN(1518)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE(1518)						if ((bitmapWidth == filterWidth)) {
HXLINE(1518)							needsFill = (bitmapHeight != filterHeight);
            						}
            						else {
HXLINE(1518)							needsFill = true;
            						}
            					}
            					else {
HXLINE(1518)						needsFill = false;
            					}
HXLINE(1519)					int fillColor;
HXDLIN(1519)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE(1519)						fillColor = (-16777216 | ( (int)(object->opaqueBackground) ));
            					}
            					else {
HXLINE(1519)						fillColor = 0;
            					}
HXLINE(1521)					bool _hx_tmp6;
HXDLIN(1521)					bool _hx_tmp7;
HXDLIN(1521)					if (hx::IsNotNull( object->_hx___cacheBitmapDataTexture )) {
HXLINE(1521)						_hx_tmp7 = (bitmapWidth > object->_hx___cacheBitmapDataTexture->width);
            					}
            					else {
HXLINE(1521)						_hx_tmp7 = true;
            					}
HXDLIN(1521)					if (!(_hx_tmp7)) {
HXLINE(1521)						_hx_tmp6 = (bitmapHeight > object->_hx___cacheBitmapDataTexture->height);
            					}
            					else {
HXLINE(1521)						_hx_tmp6 = true;
            					}
HXDLIN(1521)					if (_hx_tmp6) {
HXLINE(1526)						 ::openfl::display3D::textures::RectangleTexture texture = this->context3D->createRectangleTexture(bitmapWidth,bitmapHeight,1,true);
HXLINE(1527)						object->_hx___cacheBitmapDataTexture = ::openfl::display::BitmapData_obj::fromTexture(texture);
            					}
HXLINE(1530)					object->_hx___cacheBitmapDataTexture->fillRect(rect,0);
HXLINE(1532)					if (needsFill) {
HXLINE(1534)						rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE(1535)						object->_hx___cacheBitmapDataTexture->fillRect(rect,fillColor);
            					}
            				}
            				else {
HXLINE(1540)					::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
HXLINE(1542)					object->_hx___cacheBitmap = null();
HXLINE(1543)					object->_hx___cacheBitmapData = null();
HXLINE(1544)					object->_hx___cacheBitmapDataTexture = null();
HXLINE(1546)					return true;
            				}
            			}
HXLINE(1550)			if (hx::IsNull( object->_hx___cacheBitmap )) {
HXLINE(1550)				object->_hx___cacheBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
            			}
HXLINE(1551)			object->_hx___cacheBitmap->set_bitmapData(object->_hx___cacheBitmapDataTexture);
HXLINE(1553)			if (updateTransform) {
HXLINE(1555)				object->_hx___cacheBitmap->_hx___worldTransform->copyFrom(object->_hx___worldTransform);
HXLINE(1557)				if (hx::IsEq( bitmapMatrix,object->_hx___renderTransform )) {
HXLINE(1559)					object->_hx___cacheBitmap->_hx___renderTransform->identity();
HXLINE(1560)					object->_hx___cacheBitmap->_hx___renderTransform->tx = (object->_hx___renderTransform->tx + offsetX);
HXLINE(1561)					object->_hx___cacheBitmap->_hx___renderTransform->ty = (object->_hx___renderTransform->ty + offsetY);
            				}
            				else {
HXLINE(1565)					object->_hx___cacheBitmap->_hx___renderTransform->copyFrom(object->_hx___cacheBitmapMatrix);
HXLINE(1566)					object->_hx___cacheBitmap->_hx___renderTransform->invert();
HXLINE(1567)					object->_hx___cacheBitmap->_hx___renderTransform->concat(object->_hx___renderTransform);
HXLINE(1568)					 ::openfl::geom::Matrix object1 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(1568)					object1->tx = (object1->tx + offsetX);
HXLINE(1569)					 ::openfl::geom::Matrix object2 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN(1569)					object2->ty = (object2->ty + offsetY);
            				}
            			}
HXLINE(1573)			object->_hx___cacheBitmap->smoothing = this->_hx___allowSmoothing;
HXLINE(1574)			object->_hx___cacheBitmap->_hx___renderable = object->_hx___renderable;
HXLINE(1575)			object->_hx___cacheBitmap->_hx___worldAlpha = object->_hx___worldAlpha;
HXLINE(1576)			object->_hx___cacheBitmap->_hx___worldBlendMode = object->_hx___worldBlendMode;
HXLINE(1577)			object->_hx___cacheBitmap->_hx___worldShader = object->_hx___worldShader;
HXLINE(1578)			object->_hx___cacheBitmap->set_mask(object->_hx___mask);
HXLINE(1580)			if (needRender) {
HXLINE(1582)				 ::openfl::_internal::renderer::context3D::Context3DRenderer childRenderer = ::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___childRendererPool->get().StaticCast<  ::openfl::_internal::renderer::context3D::Context3DRenderer >();
HXLINE(1583)				childRenderer->_hx___init(this->context3D,object->_hx___cacheBitmapDataTexture);
HXLINE(1585)				childRenderer->_hx___stage = object->stage;
HXLINE(1587)				childRenderer->_hx___allowSmoothing = this->_hx___allowSmoothing;
HXLINE(1588)				childRenderer->_hx___setBlendMode(10);
HXLINE(1589)				childRenderer->_hx___worldAlpha = (( (Float)(1) ) / object->_hx___worldAlpha);
HXLINE(1591)				childRenderer->_hx___worldTransform->copyFrom(object->_hx___renderTransform);
HXLINE(1592)				childRenderer->_hx___worldTransform->invert();
HXLINE(1593)				childRenderer->_hx___worldTransform->concat(object->_hx___cacheBitmapMatrix);
HXLINE(1594)				 ::openfl::geom::Matrix childRenderer1 = childRenderer->_hx___worldTransform;
HXDLIN(1594)				childRenderer1->tx = (childRenderer1->tx - offsetX);
HXLINE(1595)				 ::openfl::geom::Matrix childRenderer2 = childRenderer->_hx___worldTransform;
HXDLIN(1595)				childRenderer2->ty = (childRenderer2->ty - offsetY);
HXLINE(1597)				childRenderer->_hx___worldColorTransform->_hx___copyFrom(colorTransform);
HXLINE(1598)				childRenderer->_hx___worldColorTransform->_hx___invert();
HXLINE(1600)				object->_hx___isCacheBitmapRender = true;
HXLINE(1602)				 ::openfl::display3D::textures::TextureBase cacheRTT = this->context3D->_hx___state->renderToTexture;
HXLINE(1603)				bool cacheRTTDepthStencil = this->context3D->_hx___state->renderToTextureDepthStencil;
HXLINE(1604)				int cacheRTTAntiAlias = this->context3D->_hx___state->renderToTextureAntiAlias;
HXLINE(1605)				int cacheRTTSurfaceSelector = this->context3D->_hx___state->renderToTextureSurfaceSelector;
HXLINE(1607)				 ::Dynamic cacheBlendMode = this->_hx___blendMode;
HXLINE(1608)				this->_hx___suspendClipAndMask();
HXLINE(1609)				childRenderer->_hx___copyShader(hx::ObjectPtr<OBJ_>(this));
HXLINE(1611)				object->_hx___cacheBitmapDataTexture->_hx___setUVRect(this->context3D,( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE(1612)				childRenderer->_hx___setRenderTarget(object->_hx___cacheBitmapDataTexture);
HXLINE(1615)				childRenderer->_hx___drawBitmapData(object->_hx___cacheBitmapDataTexture,object,null());
HXLINE(1617)				if (hasFilters) {
HXLINE(1619)					bool needCopyOfOriginal = false;
HXLINE(1621)					{
HXLINE(1621)						int _g2 = 0;
HXDLIN(1621)						::Array< ::Dynamic> _g11 = object->_hx___filters;
HXDLIN(1621)						while((_g2 < _g11->length)){
HXLINE(1621)							 ::openfl::filters::BitmapFilter filter1 = _g11->__get(_g2).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1621)							_g2 = (_g2 + 1);
HXLINE(1623)							if (filter1->_hx___preserveObject) {
HXLINE(1625)								needCopyOfOriginal = true;
            							}
            						}
            					}
HXLINE(1629)					 ::openfl::_internal::renderer::context3D::Context3DRenderer cacheRenderer = ::openfl::display::BitmapData_obj::_hx___hardwareRenderer;
HXLINE(1630)					::openfl::display::BitmapData_obj::_hx___hardwareRenderer = childRenderer;
HXLINE(1632)					 ::openfl::display::BitmapData bitmap = this->context3D->_hx___bitmapDataPool->get(filterWidth,filterHeight);
HXLINE(1633)					 ::openfl::display::BitmapData bitmap2 = this->context3D->_hx___bitmapDataPool->get(filterWidth,filterHeight);
HXLINE(1634)					 ::openfl::display::BitmapData bitmap3;
HXDLIN(1634)					if (needCopyOfOriginal) {
HXLINE(1634)						bitmap3 = this->context3D->_hx___bitmapDataPool->get(filterWidth,filterHeight);
            					}
            					else {
HXLINE(1634)						bitmap3 = null();
            					}
HXLINE(1636)					bitmap->_hx___setUVRect(this->context3D,( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE(1637)					bitmap2->_hx___setUVRect(this->context3D,( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE(1638)					if (hx::IsNotNull( bitmap3 )) {
HXLINE(1638)						bitmap3->_hx___setUVRect(this->context3D,( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
            					}
HXLINE(1640)					childRenderer->_hx___setBlendMode(10);
HXLINE(1641)					childRenderer->_hx___worldAlpha = ( (Float)(1) );
HXLINE(1642)					childRenderer->_hx___worldTransform->identity();
HXLINE(1643)					childRenderer->_hx___worldColorTransform->_hx___identity();
HXLINE(1645)					 ::openfl::display::Shader shader;
HXDLIN(1645)					 ::openfl::display::BitmapData cacheBitmap;
HXDLIN(1645)					bool firstPass = true;
HXLINE(1647)					{
HXLINE(1647)						int _g21 = 0;
HXDLIN(1647)						::Array< ::Dynamic> _g3 = object->_hx___filters;
HXDLIN(1647)						while((_g21 < _g3->length)){
HXLINE(1647)							 ::openfl::filters::BitmapFilter filter2 = _g3->__get(_g21).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1647)							_g21 = (_g21 + 1);
HXLINE(1649)							if (filter2->_hx___preserveObject) {
HXLINE(1651)								childRenderer->_hx___setRenderTarget(bitmap3);
HXLINE(1652)								 ::openfl::display::BitmapData _hx_tmp8;
HXDLIN(1652)								if (firstPass) {
HXLINE(1652)									_hx_tmp8 = object->_hx___cacheBitmapDataTexture;
            								}
            								else {
HXLINE(1652)									_hx_tmp8 = bitmap;
            								}
HXDLIN(1652)								childRenderer->_hx___renderFilterPass(_hx_tmp8,childRenderer->_hx___defaultDisplayShader,filter2->_hx___smooth,null());
            							}
HXLINE(1656)							{
HXLINE(1656)								int _g22 = 0;
HXDLIN(1656)								int _g31 = filter2->_hx___numShaderPasses;
HXDLIN(1656)								while((_g22 < _g31)){
HXLINE(1656)									_g22 = (_g22 + 1);
HXDLIN(1656)									int i = (_g22 - 1);
HXLINE(1658)									 ::openfl::display::BitmapData shader1;
HXDLIN(1658)									if (filter2->_hx___preserveObject) {
HXLINE(1658)										shader1 = bitmap3;
            									}
            									else {
HXLINE(1658)										shader1 = null();
            									}
HXDLIN(1658)									shader = filter2->_hx___initShader(childRenderer,i,shader1);
HXLINE(1659)									childRenderer->_hx___setBlendMode(filter2->_hx___shaderBlendMode);
HXLINE(1660)									childRenderer->_hx___setRenderTarget(bitmap2);
HXLINE(1661)									 ::openfl::display::BitmapData _hx_tmp9;
HXDLIN(1661)									if (firstPass) {
HXLINE(1661)										_hx_tmp9 = object->_hx___cacheBitmapDataTexture;
            									}
            									else {
HXLINE(1661)										_hx_tmp9 = bitmap;
            									}
HXDLIN(1661)									childRenderer->_hx___renderFilterPass(_hx_tmp9,shader,filter2->_hx___smooth,null());
HXLINE(1663)									firstPass = false;
HXLINE(1664)									cacheBitmap = bitmap;
HXLINE(1665)									bitmap = bitmap2;
HXLINE(1666)									bitmap2 = cacheBitmap;
            								}
            							}
HXLINE(1669)							filter2->_hx___renderDirty = false;
            						}
            					}
HXLINE(1672)					if (hx::IsNotNull( bitmap )) {
HXLINE(1674)						object->_hx___cacheBitmapDataTexture->fillRect(object->_hx___cacheBitmapDataTexture->rect,0);
HXLINE(1675)						childRenderer->_hx___setRenderTarget(object->_hx___cacheBitmapDataTexture);
HXLINE(1676)						childRenderer->_hx___renderFilterPass(bitmap,childRenderer->_hx___defaultDisplayShader,true,null());
            					}
HXLINE(1680)					this->context3D->_hx___bitmapDataPool->release(bitmap);
HXLINE(1681)					this->context3D->_hx___bitmapDataPool->release(bitmap2);
HXLINE(1682)					if (hx::IsNotNull( bitmap3 )) {
HXLINE(1682)						this->context3D->_hx___bitmapDataPool->release(bitmap3);
            					}
HXLINE(1684)					::openfl::display::BitmapData_obj::_hx___hardwareRenderer = cacheRenderer;
            				}
HXLINE(1687)				this->_hx___blendMode = 10;
HXLINE(1688)				this->_hx___setBlendMode(cacheBlendMode);
HXLINE(1689)				this->_hx___copyShader(childRenderer);
HXLINE(1691)				if (hx::IsNotNull( cacheRTT )) {
HXLINE(1693)					this->context3D->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            				}
            				else {
HXLINE(1697)					this->context3D->setRenderToBackBuffer();
            				}
HXLINE(1700)				this->_hx___resumeClipAndMask(childRenderer);
HXLINE(1701)				this->setViewport();
HXLINE(1703)				object->_hx___isCacheBitmapRender = false;
HXLINE(1704)				::openfl::_internal::renderer::context3D::Context3DRenderer_obj::_hx___childRendererPool->release(childRenderer);
            			}
HXLINE(1707)			if (updateTransform) {
HXLINE(1709)				::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            			}
HXLINE(1712)			updated = updateTransform;
HXLINE(1714)			::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
            		}
            		else {
HXLINE(1716)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE(1718)				object->_hx___cacheBitmap = null();
HXLINE(1719)				object->_hx___cacheBitmapDataTexture = null();
HXLINE(1721)				updated = true;
            			}
            		}
HXLINE(1724)		return updated;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3DRenderer_obj,_hx___updateCacheBitmap,return )

void Context3DRenderer_obj::_hx___updateShaderBuffer(int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_1729___updateShaderBuffer)
HXDLIN(1729)		bool _hx_tmp;
HXDLIN(1729)		if (hx::IsNotNull( this->_hx___currentShader )) {
HXDLIN(1729)			_hx_tmp = hx::IsNotNull( this->_hx___currentShaderBuffer );
            		}
            		else {
HXDLIN(1729)			_hx_tmp = false;
            		}
HXDLIN(1729)		if (_hx_tmp) {
HXLINE(1731)			this->_hx___currentShader->_hx___updateFromBuffer(this->_hx___currentShaderBuffer,bufferOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DRenderer_obj,_hx___updateShaderBuffer,(void))

::Array< Float > Context3DRenderer_obj::_hx___alphaValue;

 ::lime::utils::ObjectPool Context3DRenderer_obj::_hx___childRendererPool;

::Array< Float > Context3DRenderer_obj::_hx___colorMultipliersValue;

::Array< Float > Context3DRenderer_obj::_hx___colorOffsetsValue;

::Array< Float > Context3DRenderer_obj::_hx___defaultColorMultipliersValue;

::Array< Float > Context3DRenderer_obj::_hx___emptyColorValue;

::Array< Float > Context3DRenderer_obj::_hx___emptyAlphaValue;

::Array< bool > Context3DRenderer_obj::_hx___hasColorTransformValue;

 ::openfl::geom::Rectangle Context3DRenderer_obj::_hx___scissorRectangle;

::Array< Float > Context3DRenderer_obj::_hx___textureSizeValue;


hx::ObjectPtr< Context3DRenderer_obj > Context3DRenderer_obj::__new( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	hx::ObjectPtr< Context3DRenderer_obj > __this = new Context3DRenderer_obj();
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

hx::ObjectPtr< Context3DRenderer_obj > Context3DRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget) {
	Context3DRenderer_obj *__this = (Context3DRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3DRenderer_obj), true, "openfl._internal.renderer.context3D.Context3DRenderer"));
	*(void **)__this = Context3DRenderer_obj::_hx_vtable;
	__this->__construct(context,defaultRenderTarget);
	return __this;
}

Context3DRenderer_obj::Context3DRenderer_obj()
{
}

void Context3DRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3DRenderer);
	HX_MARK_MEMBER_NAME(context3D,"context3D");
	HX_MARK_MEMBER_NAME(_hx___alphaMaskShader,"__alphaMaskShader");
	HX_MARK_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___currentRenderTarget,"__currentRenderTarget");
	HX_MARK_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_MARK_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_MARK_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_MARK_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_MARK_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_MARK_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_MARK_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_MARK_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_MARK_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_MARK_MEMBER_NAME(_hx___gl,"__gl");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_MARK_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___projection,"__projection");
	HX_MARK_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_MARK_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_MARK_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_MARK_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_MARK_MEMBER_NAME(_hx___tempColorTransform,"__tempColorTransform");
	HX_MARK_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_MARK_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_MARK_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_MARK_MEMBER_NAME(_hx___values,"__values");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::OpenGLRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3DRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(context3D,"context3D");
	HX_VISIT_MEMBER_NAME(_hx___alphaMaskShader,"__alphaMaskShader");
	HX_VISIT_MEMBER_NAME(_hx___clipRects,"__clipRects");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___currentDisplayShader,"__currentDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___currentGraphicsShader,"__currentGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___currentRenderTarget,"__currentRenderTarget");
	HX_VISIT_MEMBER_NAME(_hx___currentShader,"__currentShader");
	HX_VISIT_MEMBER_NAME(_hx___currentShaderBuffer,"__currentShaderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___defaultDisplayShader,"__defaultDisplayShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultGraphicsShader,"__defaultGraphicsShader");
	HX_VISIT_MEMBER_NAME(_hx___defaultRenderTarget,"__defaultRenderTarget");
	HX_VISIT_MEMBER_NAME(_hx___defaultShader,"__defaultShader");
	HX_VISIT_MEMBER_NAME(_hx___displayHeight,"__displayHeight");
	HX_VISIT_MEMBER_NAME(_hx___displayWidth,"__displayWidth");
	HX_VISIT_MEMBER_NAME(_hx___flipped,"__flipped");
	HX_VISIT_MEMBER_NAME(_hx___gl,"__gl");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___maskShader,"__maskShader");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___maskObjects,"__maskObjects");
	HX_VISIT_MEMBER_NAME(_hx___numClipRects,"__numClipRects");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___projection,"__projection");
	HX_VISIT_MEMBER_NAME(_hx___projectionFlipped,"__projectionFlipped");
	HX_VISIT_MEMBER_NAME(_hx___scrollRectMasks,"__scrollRectMasks");
	HX_VISIT_MEMBER_NAME(_hx___softwareRenderer,"__softwareRenderer");
	HX_VISIT_MEMBER_NAME(_hx___stencilReference,"__stencilReference");
	HX_VISIT_MEMBER_NAME(_hx___tempColorTransform,"__tempColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___tempRect,"__tempRect");
	HX_VISIT_MEMBER_NAME(_hx___updatedStencil,"__updatedStencil");
	HX_VISIT_MEMBER_NAME(_hx___upscaled,"__upscaled");
	HX_VISIT_MEMBER_NAME(_hx___values,"__values");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::OpenGLRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3DRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { return hx::Val( _hx___gl ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__values") ) { return hx::Val( _hx___values ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { return hx::Val( context3D ); }
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__flipped") ) { return hx::Val( _hx___flipped ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"getMatrix") ) { return hx::Val( getMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setShader") ) { return hx::Val( setShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { return hx::Val( _hx___tempRect ); }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { return hx::Val( _hx___upscaled ); }
		if (HX_FIELD_EQ(inName,"applyAlpha") ) { return hx::Val( applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fillRect") ) { return hx::Val( _hx___fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAlpha") ) { return hx::Val( _hx___getAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__clipRects") ) { return hx::Val( _hx___clipRects ); }
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return hx::Val( applyMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setViewport") ) { return hx::Val( setViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getMatrix") ) { return hx::Val( _hx___getMatrix_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { return hx::Val( _hx___maskShader ); }
		if (HX_FIELD_EQ(inName,"__projection") ) { return hx::Val( _hx___projection ); }
		if (HX_FIELD_EQ(inName,"updateShader") ) { return hx::Val( updateShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__copyShader") ) { return hx::Val( _hx___copyShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__powerOfTwo") ) { return hx::Val( _hx___powerOfTwo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderMask") ) { return hx::Val( _hx___renderMask_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { return hx::Val( _hx___maskObjects ); }
		if (HX_FIELD_EQ(inName,"useAlphaArray") ) { return hx::Val( useAlphaArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"__clearShader") ) { return hx::Val( _hx___clearShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderShape") ) { return hx::Val( _hx___renderShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderVideo") ) { return hx::Val( _hx___renderVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__scissorRect") ) { return hx::Val( _hx___scissorRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { return hx::Val( _hx___displayWidth ); }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { return hx::Val( _hx___numClipRects ); }
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderBitmap") ) { return hx::Val( _hx___renderBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { return hx::Val( _hx___currentShader ); }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { return hx::Val( _hx___defaultShader ); }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { return hx::Val( _hx___displayHeight ); }
		if (HX_FIELD_EQ(inName,"applyBitmapData") ) { return hx::Val( applyBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderTilemap") ) { return hx::Val( _hx___renderTilemap_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { return hx::Val( _hx___updatedStencil ); }
		if (HX_FIELD_EQ(inName,"__drawBitmapData") ) { return hx::Val( _hx___drawBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__alphaMaskShader") ) { return hx::Val( _hx___alphaMaskShader ); }
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { return hx::Val( _hx___scrollRectMasks ); }
		if (HX_FIELD_EQ(inName,"__renderTextField") ) { return hx::Val( _hx___renderTextField_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setRenderTarget") ) { return hx::Val( _hx___setRenderTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setShaderBuffer") ) { return hx::Val( _hx___setShaderBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { return hx::Val( _hx___softwareRenderer ); }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { return hx::Val( _hx___stencilReference ); }
		if (HX_FIELD_EQ(inName,"__initShaderBuffer") ) { return hx::Val( _hx___initShaderBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderBitmapData") ) { return hx::Val( _hx___renderBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFilterPass") ) { return hx::Val( _hx___renderFilterPass_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { return hx::Val( _hx___projectionFlipped ); }
		if (HX_FIELD_EQ(inName,"applyColorTransform") ) { return hx::Val( applyColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getColorTransform") ) { return hx::Val( _hx___getColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initDisplayShader") ) { return hx::Val( _hx___initDisplayShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resumeClipAndMask") ) { return hx::Val( _hx___resumeClipAndMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__tempColorTransform") ) { return hx::Val( _hx___tempColorTransform ); }
		if (HX_FIELD_EQ(inName,"__initGraphicsShader") ) { return hx::Val( _hx___initGraphicsShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderSimpleButton") ) { return hx::Val( _hx___renderSimpleButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"__suspendClipAndMask") ) { return hx::Val( _hx___suspendClipAndMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateShaderBuffer") ) { return hx::Val( _hx___updateShaderBuffer_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentRenderTarget") ) { return hx::Val( _hx___currentRenderTarget ); }
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { return hx::Val( _hx___currentShaderBuffer ); }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { return hx::Val( _hx___defaultRenderTarget ); }
		if (HX_FIELD_EQ(inName,"__renderDisplayObject") ) { return hx::Val( _hx___renderDisplayObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { return hx::Val( _hx___currentDisplayShader ); }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { return hx::Val( _hx___defaultDisplayShader ); }
		if (HX_FIELD_EQ(inName,"applyHasColorTransform") ) { return hx::Val( applyHasColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"useColorTransformArray") ) { return hx::Val( useColorTransformArray_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { return hx::Val( _hx___currentGraphicsShader ); }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { return hx::Val( _hx___defaultGraphicsShader ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__renderDisplayObjectContainer") ) { return hx::Val( _hx___renderDisplayObjectContainer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3DRenderer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { outValue = ( _hx___alphaValue ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { outValue = ( _hx___emptyColorValue ); return true; }
		if (HX_FIELD_EQ(inName,"__emptyAlphaValue") ) { outValue = ( _hx___emptyAlphaValue ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { outValue = ( _hx___scissorRectangle ); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { outValue = ( _hx___textureSizeValue ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__childRendererPool") ) { outValue = ( _hx___childRendererPool ); return true; }
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { outValue = ( _hx___colorOffsetsValue ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { outValue = ( _hx___colorMultipliersValue ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { outValue = ( _hx___hasColorTransformValue ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__defaultColorMultipliersValue") ) { outValue = ( _hx___defaultColorMultipliersValue ); return true; }
	}
	return false;
}

hx::Val Context3DRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__gl") ) { _hx___gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__values") ) { _hx___values=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"context3D") ) { context3D=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__flipped") ) { _hx___flipped=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tempRect") ) { _hx___tempRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__upscaled") ) { _hx___upscaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__clipRects") ) { _hx___clipRects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskShader") ) { _hx___maskShader=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DMaskShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__projection") ) { _hx___projection=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__maskObjects") ) { _hx___maskObjects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__displayWidth") ) { _hx___displayWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__numClipRects") ) { _hx___numClipRects=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentShader") ) { _hx___currentShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultShader") ) { _hx___defaultShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayHeight") ) { _hx___displayHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__updatedStencil") ) { _hx___updatedStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__alphaMaskShader") ) { _hx___alphaMaskShader=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DAlphaMaskShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRectMasks") ) { _hx___scrollRectMasks=inValue.Cast<  ::lime::utils::ObjectPool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { _hx___softwareRenderer=inValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReference") ) { _hx___stencilReference=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__projectionFlipped") ) { _hx___projectionFlipped=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__tempColorTransform") ) { _hx___tempColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__currentRenderTarget") ) { _hx___currentRenderTarget=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentShaderBuffer") ) { _hx___currentShaderBuffer=inValue.Cast<  ::openfl::_internal::renderer::ShaderBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultRenderTarget") ) { _hx___defaultRenderTarget=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__currentDisplayShader") ) { _hx___currentDisplayShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultDisplayShader") ) { _hx___defaultDisplayShader=inValue.Cast<  ::openfl::display::DisplayObjectShader >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__currentGraphicsShader") ) { _hx___currentGraphicsShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__defaultGraphicsShader") ) { _hx___defaultGraphicsShader=inValue.Cast<  ::openfl::display::GraphicsShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3DRenderer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__alphaValue") ) { _hx___alphaValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__emptyColorValue") ) { _hx___emptyColorValue=ioValue.Cast< ::Array< Float > >(); return true; }
		if (HX_FIELD_EQ(inName,"__emptyAlphaValue") ) { _hx___emptyAlphaValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"__textureSizeValue") ) { _hx___textureSizeValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__childRendererPool") ) { _hx___childRendererPool=ioValue.Cast<  ::lime::utils::ObjectPool >(); return true; }
		if (HX_FIELD_EQ(inName,"__colorOffsetsValue") ) { _hx___colorOffsetsValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__colorMultipliersValue") ) { _hx___colorMultipliersValue=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__hasColorTransformValue") ) { _hx___hasColorTransformValue=ioValue.Cast< ::Array< bool > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__defaultColorMultipliersValue") ) { _hx___defaultColorMultipliersValue=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

void Context3DRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("context3D",60,5c,fc,16));
	outFields->push(HX_("__alphaMaskShader",0f,eb,c8,4e));
	outFields->push(HX_("__clipRects",bf,ca,ff,32));
	outFields->push(HX_("__context",cf,e6,c5,9a));
	outFields->push(HX_("__currentDisplayShader",2e,e2,be,27));
	outFields->push(HX_("__currentGraphicsShader",49,31,ab,3a));
	outFields->push(HX_("__currentRenderTarget",00,f2,02,95));
	outFields->push(HX_("__currentShader",1e,79,2f,88));
	outFields->push(HX_("__currentShaderBuffer",be,54,3d,df));
	outFields->push(HX_("__defaultDisplayShader",a6,70,7d,f7));
	outFields->push(HX_("__defaultGraphicsShader",d1,4b,a9,31));
	outFields->push(HX_("__defaultRenderTarget",88,da,8f,e0));
	outFields->push(HX_("__defaultShader",a6,cb,4b,9f));
	outFields->push(HX_("__displayHeight",a9,fc,60,4b));
	outFields->push(HX_("__displayWidth",84,0f,7c,f7));
	outFields->push(HX_("__flipped",22,bd,d6,00));
	outFields->push(HX_("__gl",45,b5,13,3f));
	outFields->push(HX_("__height",07,73,7b,aa));
	outFields->push(HX_("__maskShader",51,68,98,6a));
	outFields->push(HX_("__matrix",61,a1,f7,63));
	outFields->push(HX_("__maskObjects",28,c6,8b,fd));
	outFields->push(HX_("__numClipRects",d9,0d,04,cd));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__projection",af,03,1f,fd));
	outFields->push(HX_("__projectionFlipped",53,f4,6c,72));
	outFields->push(HX_("__scrollRectMasks",56,dd,1f,f7));
	outFields->push(HX_("__softwareRenderer",aa,4f,cd,76));
	outFields->push(HX_("__stencilReference",4f,1d,93,93));
	outFields->push(HX_("__tempColorTransform",dd,84,da,33));
	outFields->push(HX_("__tempRect",78,c9,53,3e));
	outFields->push(HX_("__updatedStencil",21,3c,c1,34));
	outFields->push(HX_("__upscaled",55,7a,d0,34));
	outFields->push(HX_("__values",02,6f,e6,f7));
	outFields->push(HX_("__width",e6,0e,c1,34));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Context3DRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(Context3DRenderer_obj,context3D),HX_("context3D",60,5c,fc,16)},
	{hx::fsObject /*  ::openfl::_internal::renderer::context3D::Context3DAlphaMaskShader */ ,(int)offsetof(Context3DRenderer_obj,_hx___alphaMaskShader),HX_("__alphaMaskShader",0f,eb,c8,4e)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Context3DRenderer_obj,_hx___clipRects),HX_("__clipRects",bf,ca,ff,32)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(Context3DRenderer_obj,_hx___context),HX_("__context",cf,e6,c5,9a)},
	{hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(Context3DRenderer_obj,_hx___currentDisplayShader),HX_("__currentDisplayShader",2e,e2,be,27)},
	{hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(Context3DRenderer_obj,_hx___currentGraphicsShader),HX_("__currentGraphicsShader",49,31,ab,3a)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Context3DRenderer_obj,_hx___currentRenderTarget),HX_("__currentRenderTarget",00,f2,02,95)},
	{hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(Context3DRenderer_obj,_hx___currentShader),HX_("__currentShader",1e,79,2f,88)},
	{hx::fsObject /*  ::openfl::_internal::renderer::ShaderBuffer */ ,(int)offsetof(Context3DRenderer_obj,_hx___currentShaderBuffer),HX_("__currentShaderBuffer",be,54,3d,df)},
	{hx::fsObject /*  ::openfl::display::DisplayObjectShader */ ,(int)offsetof(Context3DRenderer_obj,_hx___defaultDisplayShader),HX_("__defaultDisplayShader",a6,70,7d,f7)},
	{hx::fsObject /*  ::openfl::display::GraphicsShader */ ,(int)offsetof(Context3DRenderer_obj,_hx___defaultGraphicsShader),HX_("__defaultGraphicsShader",d1,4b,a9,31)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(Context3DRenderer_obj,_hx___defaultRenderTarget),HX_("__defaultRenderTarget",88,da,8f,e0)},
	{hx::fsObject /*  ::openfl::display::Shader */ ,(int)offsetof(Context3DRenderer_obj,_hx___defaultShader),HX_("__defaultShader",a6,cb,4b,9f)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___displayHeight),HX_("__displayHeight",a9,fc,60,4b)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___displayWidth),HX_("__displayWidth",84,0f,7c,f7)},
	{hx::fsBool,(int)offsetof(Context3DRenderer_obj,_hx___flipped),HX_("__flipped",22,bd,d6,00)},
	{hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Context3DRenderer_obj,_hx___gl),HX_("__gl",45,b5,13,3f)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___height),HX_("__height",07,73,7b,aa)},
	{hx::fsObject /*  ::openfl::_internal::renderer::context3D::Context3DMaskShader */ ,(int)offsetof(Context3DRenderer_obj,_hx___maskShader),HX_("__maskShader",51,68,98,6a)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3DRenderer_obj,_hx___matrix),HX_("__matrix",61,a1,f7,63)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Context3DRenderer_obj,_hx___maskObjects),HX_("__maskObjects",28,c6,8b,fd)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___numClipRects),HX_("__numClipRects",d9,0d,04,cd)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3DRenderer_obj,_hx___projection),HX_("__projection",af,03,1f,fd)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3DRenderer_obj,_hx___projectionFlipped),HX_("__projectionFlipped",53,f4,6c,72)},
	{hx::fsObject /*  ::lime::utils::ObjectPool */ ,(int)offsetof(Context3DRenderer_obj,_hx___scrollRectMasks),HX_("__scrollRectMasks",56,dd,1f,f7)},
	{hx::fsObject /*  ::openfl::display::DisplayObjectRenderer */ ,(int)offsetof(Context3DRenderer_obj,_hx___softwareRenderer),HX_("__softwareRenderer",aa,4f,cd,76)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___stencilReference),HX_("__stencilReference",4f,1d,93,93)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(Context3DRenderer_obj,_hx___tempColorTransform),HX_("__tempColorTransform",dd,84,da,33)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Context3DRenderer_obj,_hx___tempRect),HX_("__tempRect",78,c9,53,3e)},
	{hx::fsBool,(int)offsetof(Context3DRenderer_obj,_hx___updatedStencil),HX_("__updatedStencil",21,3c,c1,34)},
	{hx::fsBool,(int)offsetof(Context3DRenderer_obj,_hx___upscaled),HX_("__upscaled",55,7a,d0,34)},
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Context3DRenderer_obj,_hx___values),HX_("__values",02,6f,e6,f7)},
	{hx::fsInt,(int)offsetof(Context3DRenderer_obj,_hx___width),HX_("__width",e6,0e,c1,34)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3DRenderer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___alphaValue,HX_("__alphaValue",53,4e,f1,8a)},
	{hx::fsObject /*  ::lime::utils::ObjectPool */ ,(void *) &Context3DRenderer_obj::_hx___childRendererPool,HX_("__childRendererPool",5b,e8,12,fc)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___colorMultipliersValue,HX_("__colorMultipliersValue",a2,08,bb,81)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___colorOffsetsValue,HX_("__colorOffsetsValue",b4,64,83,33)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___defaultColorMultipliersValue,HX_("__defaultColorMultipliersValue",61,1c,3c,dd)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___emptyColorValue,HX_("__emptyColorValue",db,98,57,b3)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___emptyAlphaValue,HX_("__emptyAlphaValue",00,d5,90,af)},
	{hx::fsObject /* ::Array< bool > */ ,(void *) &Context3DRenderer_obj::_hx___hasColorTransformValue,HX_("__hasColorTransformValue",0e,4b,82,a1)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(void *) &Context3DRenderer_obj::_hx___scissorRectangle,HX_("__scissorRectangle",93,3b,f9,77)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Context3DRenderer_obj::_hx___textureSizeValue,HX_("__textureSizeValue",b5,29,2d,70)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3DRenderer_obj_sMemberFields[] = {
	HX_("context3D",60,5c,fc,16),
	HX_("__alphaMaskShader",0f,eb,c8,4e),
	HX_("__clipRects",bf,ca,ff,32),
	HX_("__context",cf,e6,c5,9a),
	HX_("__currentDisplayShader",2e,e2,be,27),
	HX_("__currentGraphicsShader",49,31,ab,3a),
	HX_("__currentRenderTarget",00,f2,02,95),
	HX_("__currentShader",1e,79,2f,88),
	HX_("__currentShaderBuffer",be,54,3d,df),
	HX_("__defaultDisplayShader",a6,70,7d,f7),
	HX_("__defaultGraphicsShader",d1,4b,a9,31),
	HX_("__defaultRenderTarget",88,da,8f,e0),
	HX_("__defaultShader",a6,cb,4b,9f),
	HX_("__displayHeight",a9,fc,60,4b),
	HX_("__displayWidth",84,0f,7c,f7),
	HX_("__flipped",22,bd,d6,00),
	HX_("__gl",45,b5,13,3f),
	HX_("__height",07,73,7b,aa),
	HX_("__maskShader",51,68,98,6a),
	HX_("__matrix",61,a1,f7,63),
	HX_("__maskObjects",28,c6,8b,fd),
	HX_("__numClipRects",d9,0d,04,cd),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__projection",af,03,1f,fd),
	HX_("__projectionFlipped",53,f4,6c,72),
	HX_("__scrollRectMasks",56,dd,1f,f7),
	HX_("__softwareRenderer",aa,4f,cd,76),
	HX_("__stencilReference",4f,1d,93,93),
	HX_("__tempColorTransform",dd,84,da,33),
	HX_("__tempRect",78,c9,53,3e),
	HX_("__updatedStencil",21,3c,c1,34),
	HX_("__upscaled",55,7a,d0,34),
	HX_("__values",02,6f,e6,f7),
	HX_("__width",e6,0e,c1,34),
	HX_("applyAlpha",10,23,e8,cc),
	HX_("applyBitmapData",c7,94,b7,f3),
	HX_("applyColorTransform",97,55,2e,0b),
	HX_("applyHasColorTransform",35,53,e0,cd),
	HX_("applyMatrix",4f,f6,c2,f7),
	HX_("getMatrix",77,bf,1e,38),
	HX_("setShader",67,34,c8,7c),
	HX_("setViewport",28,16,06,cd),
	HX_("updateShader",0e,66,e4,1c),
	HX_("useAlphaArray",82,b0,9d,7e),
	HX_("useColorTransformArray",49,89,6f,74),
	HX_("__cleanup",04,5d,90,2c),
	HX_("__clear",6d,ca,b9,b2),
	HX_("__clearShader",72,0d,86,f9),
	HX_("__copyShader",da,9f,78,0b),
	HX_("__drawBitmapData",fd,1d,0a,4b),
	HX_("__fillRect",67,b8,f1,0f),
	HX_("__getAlpha",08,2a,a6,24),
	HX_("__getColorTransform",9f,af,a3,d2),
	HX_("__getMatrix",57,08,4b,66),
	HX_("__init",30,9e,b3,f4),
	HX_("__initShader",75,95,f9,59),
	HX_("__initDisplayShader",b7,0e,d5,77),
	HX_("__initGraphicsShader",a0,fc,fb,fd),
	HX_("__initShaderBuffer",55,cc,4f,9f),
	HX_("__popMask",fd,b7,5f,c4),
	HX_("__popMaskObject",9c,46,0d,10),
	HX_("__popMaskRect",c1,73,e8,16),
	HX_("__powerOfTwo",90,39,42,23),
	HX_("__pushMask",06,e7,7f,ba),
	HX_("__pushMaskObject",65,e2,3b,45),
	HX_("__pushMaskRect",4a,5b,e7,a0),
	HX_("__render",76,d6,58,ad),
	HX_("__renderBitmap",05,97,22,81),
	HX_("__renderBitmapData",cf,7f,f7,49),
	HX_("__renderDisplayObject",4b,62,d0,99),
	HX_("__renderDisplayObjectContainer",76,d1,2a,e5),
	HX_("__renderFilterPass",bf,36,cd,6c),
	HX_("__renderMask",82,b6,f3,1d),
	HX_("__renderShape",cb,50,46,90),
	HX_("__renderSimpleButton",5a,07,4e,4e),
	HX_("__renderTextField",77,af,83,05),
	HX_("__renderTilemap",58,9c,2e,c9),
	HX_("__renderVideo",25,82,25,4b),
	HX_("__resize",14,c5,aa,b0),
	HX_("__resumeClipAndMask",a6,5e,6c,d9),
	HX_("__scissorRect",40,20,cc,a9),
	HX_("__setBlendMode",72,27,48,51),
	HX_("__setRenderTarget",e9,fa,52,98),
	HX_("__setShaderBuffer",a7,5d,8d,e2),
	HX_("__shouldCacheHardware",b7,af,f5,89),
	HX_("__suspendClipAndMask",77,cf,4a,d0),
	HX_("__updateCacheBitmap",28,11,07,27),
	HX_("__updateShaderBuffer",ce,30,be,97),
	::String(null()) };

static void Context3DRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___childRendererPool,"__childRendererPool");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___defaultColorMultipliersValue,"__defaultColorMultipliersValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___emptyAlphaValue,"__emptyAlphaValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(Context3DRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___alphaValue,"__alphaValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___childRendererPool,"__childRendererPool");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___colorMultipliersValue,"__colorMultipliersValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___colorOffsetsValue,"__colorOffsetsValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___defaultColorMultipliersValue,"__defaultColorMultipliersValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___emptyColorValue,"__emptyColorValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___emptyAlphaValue,"__emptyAlphaValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___hasColorTransformValue,"__hasColorTransformValue");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(Context3DRenderer_obj::_hx___textureSizeValue,"__textureSizeValue");
};

#endif

hx::Class Context3DRenderer_obj::__mClass;

static ::String Context3DRenderer_obj_sStaticFields[] = {
	HX_("__alphaValue",53,4e,f1,8a),
	HX_("__childRendererPool",5b,e8,12,fc),
	HX_("__colorMultipliersValue",a2,08,bb,81),
	HX_("__colorOffsetsValue",b4,64,83,33),
	HX_("__defaultColorMultipliersValue",61,1c,3c,dd),
	HX_("__emptyColorValue",db,98,57,b3),
	HX_("__emptyAlphaValue",00,d5,90,af),
	HX_("__hasColorTransformValue",0e,4b,82,a1),
	HX_("__scissorRectangle",93,3b,f9,77),
	HX_("__textureSizeValue",b5,29,2d,70),
	::String(null())
};

void Context3DRenderer_obj::__register()
{
	Context3DRenderer_obj _hx_dummy;
	Context3DRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DRenderer",9a,d6,fe,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DRenderer_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3DRenderer_obj::__SetStatic;
	__mClass->mMarkFunc = Context3DRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DRenderer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3DRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3DRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_79_boot)
HXDLIN(  79)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_81_boot)
HXDLIN(  81)		_hx___alphaValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_75,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_83_boot)
HXDLIN(  83)		_hx___colorMultipliersValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_77,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_84_boot)
HXDLIN(  84)		_hx___colorOffsetsValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_79,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_85_boot)
HXDLIN(  85)		_hx___defaultColorMultipliersValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_81,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_86_boot)
HXDLIN(  86)		_hx___emptyColorValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_83,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_87_boot)
HXDLIN(  87)		_hx___emptyAlphaValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_85,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_88_boot)
HXDLIN(  88)		_hx___hasColorTransformValue = ::Array_obj< bool >::fromData( _hx_array_data_b5fed69a_87,1);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0fbc7a63598bae05_89_boot)
HXDLIN(  89)		_hx___scissorRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_0fbc7a63598bae05_90_boot)
HXDLIN(  90)		_hx___textureSizeValue = ::Array_obj< Float >::fromData( _hx_array_data_b5fed69a_90,2);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
