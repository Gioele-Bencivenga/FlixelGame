// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageCanvasUtil
#include <lime/_internal/graphics/ImageCanvasUtil.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasRenderer
#include <openfl/_internal/renderer/canvas/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasVideo
#include <openfl/_internal/renderer/canvas/CanvasVideo.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_RenderEvent
#include <openfl/events/RenderEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_media_Video
#include <openfl/media/Video.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51aed30dab802763_52_new,"openfl._internal.renderer.canvas.CanvasRenderer","new",0x66327fe8,"openfl._internal.renderer.canvas.CanvasRenderer.new","openfl/_internal/renderer/canvas/CanvasRenderer.hx",52,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_62_applySmoothing,"openfl._internal.renderer.canvas.CanvasRenderer","applySmoothing",0x18e3ff9e,"openfl._internal.renderer.canvas.CanvasRenderer.applySmoothing","openfl/_internal/renderer/canvas/CanvasRenderer.hx",62,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_66_setTransform,"openfl._internal.renderer.canvas.CanvasRenderer","setTransform",0x67c60ce2,"openfl._internal.renderer.canvas.CanvasRenderer.setTransform","openfl/_internal/renderer/canvas/CanvasRenderer.hx",66,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_90___clear,"openfl._internal.renderer.canvas.CanvasRenderer","__clear",0xcd9addf5,"openfl._internal.renderer.canvas.CanvasRenderer.__clear","openfl/_internal/renderer/canvas/CanvasRenderer.hx",90,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_114___drawBitmapData,"openfl._internal.renderer.canvas.CanvasRenderer","__drawBitmapData",0xfa7e5975,"openfl._internal.renderer.canvas.CanvasRenderer.__drawBitmapData","openfl/_internal/renderer/canvas/CanvasRenderer.hx",114,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_143___getAlpha,"openfl._internal.renderer.canvas.CanvasRenderer","__getAlpha",0x3557fb80,"openfl._internal.renderer.canvas.CanvasRenderer.__getAlpha","openfl/_internal/renderer/canvas/CanvasRenderer.hx",143,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_148___getColorTransform,"openfl._internal.renderer.canvas.CanvasRenderer","__getColorTransform",0x9297ef27,"openfl._internal.renderer.canvas.CanvasRenderer.__getColorTransform","openfl/_internal/renderer/canvas/CanvasRenderer.hx",148,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_162___popMask,"openfl._internal.renderer.canvas.CanvasRenderer","__popMask",0x2852bd85,"openfl._internal.renderer.canvas.CanvasRenderer.__popMask","openfl/_internal/renderer/canvas/CanvasRenderer.hx",162,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_166___popMaskObject,"openfl._internal.renderer.canvas.CanvasRenderer","__popMaskObject",0x6ef92224,"openfl._internal.renderer.canvas.CanvasRenderer.__popMaskObject","openfl/_internal/renderer/canvas/CanvasRenderer.hx",166,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_180___popMaskRect,"openfl._internal.renderer.canvas.CanvasRenderer","__popMaskRect",0x3fc0dd49,"openfl._internal.renderer.canvas.CanvasRenderer.__popMaskRect","openfl/_internal/renderer/canvas/CanvasRenderer.hx",180,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_184___pushMask,"openfl._internal.renderer.canvas.CanvasRenderer","__pushMask",0xcb31b87e,"openfl._internal.renderer.canvas.CanvasRenderer.__pushMask","openfl/_internal/renderer/canvas/CanvasRenderer.hx",184,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_197___pushMaskObject,"openfl._internal.renderer.canvas.CanvasRenderer","__pushMaskObject",0xf4b01ddd,"openfl._internal.renderer.canvas.CanvasRenderer.__pushMaskObject","openfl/_internal/renderer/canvas/CanvasRenderer.hx",197,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_210___pushMaskRect,"openfl._internal.renderer.canvas.CanvasRenderer","__pushMaskRect",0x356b48c2,"openfl._internal.renderer.canvas.CanvasRenderer.__pushMaskRect","openfl/_internal/renderer/canvas/CanvasRenderer.hx",210,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_222___render,"openfl._internal.renderer.canvas.CanvasRenderer","__render",0x1768d9ee,"openfl._internal.renderer.canvas.CanvasRenderer.__render","openfl/_internal/renderer/canvas/CanvasRenderer.hx",222,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_236___renderBitmap,"openfl._internal.renderer.canvas.CanvasRenderer","__renderBitmap",0x15a6847d,"openfl._internal.renderer.canvas.CanvasRenderer.__renderBitmap","openfl/_internal/renderer/canvas/CanvasRenderer.hx",236,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_256___renderBitmapData,"openfl._internal.renderer.canvas.CanvasRenderer","__renderBitmapData",0xeb8b8947,"openfl._internal.renderer.canvas.CanvasRenderer.__renderBitmapData","openfl/_internal/renderer/canvas/CanvasRenderer.hx",256,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_273___renderDisplayObject,"openfl._internal.renderer.canvas.CanvasRenderer","__renderDisplayObject",0x6ef993d3,"openfl._internal.renderer.canvas.CanvasRenderer.__renderDisplayObject","openfl/_internal/renderer/canvas/CanvasRenderer.hx",273,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_314___renderDisplayObjectContainer,"openfl._internal.renderer.canvas.CanvasRenderer","__renderDisplayObjectContainer",0x0b632eee,"openfl._internal.renderer.canvas.CanvasRenderer.__renderDisplayObjectContainer","openfl/_internal/renderer/canvas/CanvasRenderer.hx",314,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_359___renderMask,"openfl._internal.renderer.canvas.CanvasRenderer","__renderMask",0x1bd6d5fa,"openfl._internal.renderer.canvas.CanvasRenderer.__renderMask","openfl/_internal/renderer/canvas/CanvasRenderer.hx",359,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_397___renderShape,"openfl._internal.renderer.canvas.CanvasRenderer","__renderShape",0xb91eba53,"openfl._internal.renderer.canvas.CanvasRenderer.__renderShape","openfl/_internal/renderer/canvas/CanvasRenderer.hx",397,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_413___renderSimpleButton,"openfl._internal.renderer.canvas.CanvasRenderer","__renderSimpleButton",0x84115ed2,"openfl._internal.renderer.canvas.CanvasRenderer.__renderSimpleButton","openfl/_internal/renderer/canvas/CanvasRenderer.hx",413,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_422___renderTextField,"openfl._internal.renderer.canvas.CanvasRenderer","__renderTextField",0xdbc37cff,"openfl._internal.renderer.canvas.CanvasRenderer.__renderTextField","openfl/_internal/renderer/canvas/CanvasRenderer.hx",422,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_481___renderTilemap,"openfl._internal.renderer.canvas.CanvasRenderer","__renderTilemap",0x281a77e0,"openfl._internal.renderer.canvas.CanvasRenderer.__renderTilemap","openfl/_internal/renderer/canvas/CanvasRenderer.hx",481,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_497___renderVideo,"openfl._internal.renderer.canvas.CanvasRenderer","__renderVideo",0x73fdebad,"openfl._internal.renderer.canvas.CanvasRenderer.__renderVideo","openfl/_internal/renderer/canvas/CanvasRenderer.hx",497,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_501___setBlendMode,"openfl._internal.renderer.canvas.CanvasRenderer","__setBlendMode",0xe5cc14ea,"openfl._internal.renderer.canvas.CanvasRenderer.__setBlendMode","openfl/_internal/renderer/canvas/CanvasRenderer.hx",501,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_511___setBlendModeContext,"openfl._internal.renderer.canvas.CanvasRenderer","__setBlendModeContext",0xcb837a25,"openfl._internal.renderer.canvas.CanvasRenderer.__setBlendModeContext","openfl/_internal/renderer/canvas/CanvasRenderer.hx",511,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_567___updateCacheBitmap,"openfl._internal.renderer.canvas.CanvasRenderer","__updateCacheBitmap",0xe6fb50b0,"openfl._internal.renderer.canvas.CanvasRenderer.__updateCacheBitmap","openfl/_internal/renderer/canvas/CanvasRenderer.hx",567,0x1be544e6)
HX_LOCAL_STACK_FRAME(_hx_pos_51aed30dab802763_45_boot,"openfl._internal.renderer.canvas.CanvasRenderer","boot",0xfe166baa,"openfl._internal.renderer.canvas.CanvasRenderer.boot","openfl/_internal/renderer/canvas/CanvasRenderer.hx",45,0x1be544e6)
namespace openfl{
namespace _internal{
namespace renderer{
namespace canvas{

void CanvasRenderer_obj::__construct( ::Dynamic context){
            	HX_GC_STACKFRAME(&_hx_pos_51aed30dab802763_52_new)
HXLINE(  53)		super::__construct(context);
HXLINE(  55)		this->_hx___colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  56)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  57)		this->_hx___type = HX_("canvas",d8,54,42,b8);
            	}

Dynamic CanvasRenderer_obj::__CreateEmpty() { return new CanvasRenderer_obj; }

void *CanvasRenderer_obj::_hx_vtable = 0;

Dynamic CanvasRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CanvasRenderer_obj > _hx_result = new CanvasRenderer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CanvasRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x0388830d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0388830d;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x5d8f073a || inClassId==(int)0x7cdf41d6;
	}
}

void CanvasRenderer_obj::applySmoothing( ::Dynamic context,bool value){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_62_applySmoothing)
HXDLIN(  62)		context->__SetField(HX_("imageSmoothingEnabled",e8,4e,0e,94),value,hx::paccDynamic);
            	}


void CanvasRenderer_obj::setTransform( ::openfl::geom::Matrix transform, ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_66_setTransform)
HXLINE(  67)		if (hx::IsNull( context )) {
HXLINE(  69)			context = this->context;
            		}
            		else {
HXLINE(  71)			bool _hx_tmp;
HXDLIN(  71)			if (hx::IsEq( this->context,context )) {
HXLINE(  71)				_hx_tmp = hx::IsNotNull( this->_hx___worldTransform );
            			}
            			else {
HXLINE(  71)				_hx_tmp = false;
            			}
HXDLIN(  71)			if (_hx_tmp) {
HXLINE(  73)				this->_hx___transform->copyFrom(transform);
HXLINE(  74)				this->_hx___transform->concat(this->_hx___worldTransform);
HXLINE(  75)				transform = this->_hx___transform;
            			}
            		}
HXLINE(  78)		if (this->_hx___roundPixels) {
HXLINE(  80)			 ::Dynamic context1 =  ::Dynamic(context->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic));
HXDLIN(  80)			Float transform1 = transform->a;
HXDLIN(  80)			Float transform2 = transform->b;
HXDLIN(  80)			Float transform3 = transform->c;
HXDLIN(  80)			Float transform4 = transform->d;
HXDLIN(  80)			int _hx_tmp1 = ::Std_obj::_hx_int(transform->tx);
HXDLIN(  80)			context1(transform1,transform2,transform3,transform4,_hx_tmp1,::Std_obj::_hx_int(transform->ty));
            		}
            		else {
HXLINE(  84)			context->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)(transform->a,transform->b,transform->c,transform->d,transform->tx,transform->ty);
            		}
            	}


void CanvasRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_90___clear)
HXDLIN(  90)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE(  92)			 ::Dynamic cacheBlendMode = this->_hx___blendMode;
HXLINE(  93)			this->_hx___blendMode = null();
HXLINE(  94)			this->_hx___setBlendMode(10);
HXLINE(  96)			this->context->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)(1,0,0,1,0,0);
HXLINE(  97)			this->context->__SetField(HX_("globalAlpha",fb,fe,d4,f9),1,hx::paccDynamic);
HXLINE(  99)			bool _hx_tmp;
HXDLIN(  99)			if (!(this->_hx___stage->_hx___transparent)) {
HXLINE(  99)				_hx_tmp = this->_hx___stage->_hx___clearBeforeRender;
            			}
            			else {
HXLINE(  99)				_hx_tmp = false;
            			}
HXDLIN(  99)			if (_hx_tmp) {
HXLINE( 101)				this->context->__SetField(HX_("fillStyle",ae,cb,c4,52),this->_hx___stage->_hx___colorString,hx::paccDynamic);
HXLINE( 102)				this->context->__Field(HX_("fillRect",47,45,b9,6c),hx::paccDynamic)(0,0,(( (Float)(this->_hx___stage->stageWidth) ) * this->_hx___stage->window->_hx___scale),(( (Float)(this->_hx___stage->stageHeight) ) * this->_hx___stage->window->_hx___scale));
            			}
            			else {
HXLINE( 104)				bool _hx_tmp1;
HXDLIN( 104)				if (this->_hx___stage->_hx___transparent) {
HXLINE( 104)					_hx_tmp1 = this->_hx___stage->_hx___clearBeforeRender;
            				}
            				else {
HXLINE( 104)					_hx_tmp1 = false;
            				}
HXDLIN( 104)				if (_hx_tmp1) {
HXLINE( 106)					this->context->__Field(HX_("clearRect",51,35,68,bf),hx::paccDynamic)(0,0,(( (Float)(this->_hx___stage->stageWidth) ) * this->_hx___stage->window->_hx___scale),(( (Float)(this->_hx___stage->stageHeight) ) * this->_hx___stage->window->_hx___scale));
            				}
            			}
HXLINE( 109)			this->_hx___setBlendMode(cacheBlendMode);
            		}
            	}


void CanvasRenderer_obj::_hx___drawBitmapData( ::openfl::display::BitmapData bitmapData,::Dynamic source, ::openfl::geom::Rectangle clipRect){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_114___drawBitmapData)
HXLINE( 115)		if (hx::IsNotNull( clipRect )) {
HXLINE( 117)			this->_hx___pushMaskRect(clipRect,( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
            		}
HXLINE( 120)		 ::lime::graphics::ImageBuffer buffer = bitmapData->image->buffer;
HXLINE( 122)		if (!(this->_hx___allowSmoothing)) {
HXLINE( 122)			this->applySmoothing(buffer->_hx___srcContext,false);
            		}
HXLINE( 124)		this->_hx___render(source);
HXLINE( 126)		if (!(this->_hx___allowSmoothing)) {
HXLINE( 126)			this->applySmoothing(buffer->_hx___srcContext,true);
            		}
HXLINE( 128)		buffer->_hx___srcContext->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)(1,0,0,1,0,0);
HXLINE( 129)		buffer->_hx___srcImageData = null();
HXLINE( 130)		buffer->data = null();
HXLINE( 132)		bitmapData->image->dirty = true;
HXLINE( 133)		bitmapData->image->version++;
HXLINE( 135)		if (hx::IsNotNull( clipRect )) {
HXLINE( 137)			this->_hx___popMaskRect();
            		}
            	}


Float CanvasRenderer_obj::_hx___getAlpha(Float value){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_143___getAlpha)
HXDLIN( 143)		return (value * this->_hx___worldAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___getAlpha,return )

 ::openfl::geom::ColorTransform CanvasRenderer_obj::_hx___getColorTransform( ::openfl::geom::ColorTransform value){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_148___getColorTransform)
HXDLIN( 148)		if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 150)			this->_hx___colorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE( 151)			this->_hx___colorTransform->_hx___combine(value);
HXLINE( 152)			return this->_hx___colorTransform;
            		}
            		else {
HXLINE( 156)			return value;
            		}
HXLINE( 148)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___getColorTransform,return )

void CanvasRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_162___popMask)
HXDLIN( 162)		this->context->__Field(HX_("restore",4e,67,b0,6a),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CanvasRenderer_obj,_hx___popMask,(void))

void CanvasRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_166___popMaskObject)
HXLINE( 167)		bool _hx_tmp;
HXDLIN( 167)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 167)			_hx_tmp = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 167)			_hx_tmp = false;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 169)			this->_hx___popMask();
            		}
HXLINE( 172)		bool _hx_tmp1;
HXDLIN( 172)		if (handleScrollRect) {
HXLINE( 172)			_hx_tmp1 = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 172)			_hx_tmp1 = false;
            		}
HXDLIN( 172)		if (_hx_tmp1) {
HXLINE( 174)			this->_hx___popMaskRect();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(CanvasRenderer_obj,_hx___popMaskObject,(void))

void CanvasRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_180___popMaskRect)
HXDLIN( 180)		this->context->__Field(HX_("restore",4e,67,b0,6a),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CanvasRenderer_obj,_hx___popMaskRect,(void))

void CanvasRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_184___pushMask)
HXLINE( 185)		this->context->__Field(HX_("save",3d,8b,4d,4c),hx::paccDynamic)();
HXLINE( 187)		this->setTransform(mask->_hx___renderTransform,this->context);
HXLINE( 189)		this->context->__Field(HX_("beginPath",6e,c4,2b,93),hx::paccDynamic)();
HXLINE( 190)		this->_hx___renderMask(mask);
HXLINE( 191)		this->context->__Field(HX_("closePath",7d,65,20,14),hx::paccDynamic)();
HXLINE( 193)		this->context->__Field(HX_("clip",d0,6e,c2,41),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___pushMask,(void))

void CanvasRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_197___pushMaskObject)
HXLINE( 198)		bool _hx_tmp;
HXDLIN( 198)		if (handleScrollRect) {
HXLINE( 198)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 198)			_hx_tmp = false;
            		}
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 200)			this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            		}
HXLINE( 203)		bool _hx_tmp1;
HXDLIN( 203)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 203)			_hx_tmp1 = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 203)			_hx_tmp1 = false;
            		}
HXDLIN( 203)		if (_hx_tmp1) {
HXLINE( 205)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(CanvasRenderer_obj,_hx___pushMaskObject,(void))

void CanvasRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_210___pushMaskRect)
HXLINE( 211)		this->context->__Field(HX_("save",3d,8b,4d,4c),hx::paccDynamic)();
HXLINE( 213)		this->setTransform(transform,this->context);
HXLINE( 215)		this->context->__Field(HX_("beginPath",6e,c4,2b,93),hx::paccDynamic)();
HXLINE( 216)		this->context->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic)(rect->x,rect->y,rect->width,rect->height);
HXLINE( 217)		this->context->__Field(HX_("clip",d0,6e,c2,41),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CanvasRenderer_obj,_hx___pushMaskRect,(void))

void CanvasRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_222___render)
HXDLIN( 222)		if (hx::IsNotNull( object )) {
HXLINE( 224)			if (hx::IsNotNull( object->__Field(HX_("__type",da,55,01,fc),hx::paccDynamic) )) {
HXLINE( 226)				this->_hx___renderDisplayObject(( ( ::openfl::display::DisplayObject)(object) ));
            			}
            			else {
HXLINE( 230)				this->_hx___renderBitmapData(( ( ::openfl::display::BitmapData)(object) ));
            			}
            		}
            	}


void CanvasRenderer_obj::_hx___renderBitmap( ::openfl::display::Bitmap bitmap){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_236___renderBitmap)
HXLINE( 237)		this->_hx___updateCacheBitmap(bitmap,false);
HXLINE( 239)		bool _hx_tmp;
HXDLIN( 239)		if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE( 239)			_hx_tmp = hx::IsNotNull( bitmap->_hx___bitmapData->image );
            		}
            		else {
HXLINE( 239)			_hx_tmp = false;
            		}
HXDLIN( 239)		if (_hx_tmp) {
HXLINE( 241)			bitmap->_hx___imageVersion = bitmap->_hx___bitmapData->image->version;
            		}
HXLINE( 244)		bool _hx_tmp1;
HXDLIN( 244)		if (hx::IsNotNull( bitmap->_hx___cacheBitmap )) {
HXLINE( 244)			_hx_tmp1 = !(bitmap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 244)			_hx_tmp1 = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderBitmap,(void))

void CanvasRenderer_obj::_hx___renderBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_256___renderBitmapData)
HXLINE( 257)		if (!(bitmapData->readable)) {
HXLINE( 257)			return;
            		}
HXLINE( 259)		if (hx::IsEq( bitmapData->image->type,::lime::graphics::ImageType_obj::DATA_dyn() )) {
HXLINE( 261)			::lime::_internal::graphics::ImageCanvasUtil_obj::convertToCanvas(bitmapData->image,null());
            		}
HXLINE( 264)		this->context->__SetField(HX_("globalAlpha",fb,fe,d4,f9),1,hx::paccDynamic);
HXLINE( 266)		this->setTransform(bitmapData->_hx___renderTransform,this->context);
HXLINE( 268)		 ::Dynamic _hx_tmp =  ::Dynamic(this->context->__Field(HX_("drawImage",b7,54,74,85),hx::paccDynamic));
HXDLIN( 268)		 ::Dynamic _hx_tmp1 = bitmapData->image->get_src();
HXDLIN( 268)		_hx_tmp(_hx_tmp1,0,0,bitmapData->image->width,bitmapData->image->height);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderBitmapData,(void))

void CanvasRenderer_obj::_hx___renderDisplayObject( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_273___renderDisplayObject)
HXDLIN( 273)		bool _hx_tmp;
HXDLIN( 273)		if (hx::IsNotNull( object )) {
HXDLIN( 273)			_hx_tmp = hx::IsNotNull( object->_hx___type );
            		}
            		else {
HXDLIN( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			switch((int)(object->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 278)					this->_hx___renderBitmap(( ( ::openfl::display::Bitmap)(object) ));
            				}
            				break;
            				case (int)2: {
HXLINE( 280)					this->_hx___renderDisplayObjectContainer(( ( ::openfl::display::DisplayObjectContainer)(object) ));
            				}
            				break;
            				case (int)1: case (int)4: {
HXLINE( 282)					this->_hx___renderShape(object);
            				}
            				break;
            				case (int)5: {
HXLINE( 284)					this->_hx___renderSimpleButton(( ( ::openfl::display::SimpleButton)(object) ));
            				}
            				break;
            				case (int)6: {
HXLINE( 286)					this->_hx___renderTextField(( ( ::openfl::text::TextField)(object) ));
            				}
            				break;
            				case (int)7: {
HXLINE( 288)					this->_hx___renderTilemap(( ( ::openfl::display::Tilemap)(object) ));
            				}
            				break;
            				case (int)8: {
HXLINE( 290)					this->_hx___renderVideo(( ( ::openfl::media::Video)(object) ));
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 294)			if (hx::IsNotNull( object->_hx___customRenderEvent )) {
HXLINE( 296)				 ::openfl::events::RenderEvent event = object->_hx___customRenderEvent;
HXLINE( 297)				event->allowSmoothing = this->_hx___allowSmoothing;
HXLINE( 298)				event->objectMatrix->copyFrom(object->_hx___renderTransform);
HXLINE( 299)				event->objectColorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE( 300)				event->renderer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 301)				event->type = HX_("renderCanvas",ce,58,98,27);
HXLINE( 303)				this->_hx___setBlendMode(object->_hx___worldBlendMode);
HXLINE( 304)				this->_hx___pushMaskObject(object,null());
HXLINE( 306)				object->dispatchEvent(event);
HXLINE( 308)				this->_hx___popMaskObject(object,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderDisplayObject,(void))

void CanvasRenderer_obj::_hx___renderDisplayObjectContainer( ::openfl::display::DisplayObjectContainer container){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_314___renderDisplayObjectContainer)
HXLINE( 315)		if (hx::IsNull( this->_hx___domRenderer )) {
HXLINE( 315)			{
HXLINE( 315)				 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN( 315)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 315)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 315)					if (hx::IsNull( orphan1->stage )) {
HXLINE( 315)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 315)			container->_hx___removedChildren->set_length(0);
            		}
HXLINE( 317)		bool _hx_tmp;
HXDLIN( 317)		bool _hx_tmp1;
HXDLIN( 317)		if (!(!(container->_hx___renderable))) {
HXLINE( 317)			_hx_tmp1 = (container->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 317)			_hx_tmp1 = true;
            		}
HXDLIN( 317)		if (!(_hx_tmp1)) {
HXLINE( 319)			if (hx::IsNotNull( container->get_mask() )) {
HXLINE( 319)				if (!((container->get_mask()->get_width() <= 0))) {
HXLINE( 317)					_hx_tmp = (container->get_mask()->get_height() <= 0);
            				}
            				else {
HXLINE( 317)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 317)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 317)			_hx_tmp = true;
            		}
HXDLIN( 317)		if (_hx_tmp) {
HXLINE( 319)			return;
            		}
HXLINE( 321)		this->_hx___updateCacheBitmap(container,false);
HXLINE( 323)		bool _hx_tmp2;
HXDLIN( 323)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE( 323)			_hx_tmp2 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 323)			_hx_tmp2 = false;
            		}
HXLINE( 332)		bool _hx_tmp3;
HXDLIN( 332)		if (hx::IsNotNull( container->_hx___cacheBitmap )) {
HXLINE( 332)			_hx_tmp3 = !(container->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 332)			_hx_tmp3 = false;
            		}
HXDLIN( 332)		if (_hx_tmp3) {
HXLINE( 332)			return;
            		}
HXLINE( 334)		this->_hx___pushMaskObject(container,null());
HXLINE( 336)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 338)			{
HXLINE( 338)				int _g = 0;
HXDLIN( 338)				::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN( 338)				while((_g < _g1->length)){
HXLINE( 338)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 338)					_g = (_g + 1);
HXLINE( 340)					this->_hx___renderDisplayObject(child);
HXLINE( 341)					child->_hx___renderDirty = false;
            				}
            			}
HXLINE( 344)			container->_hx___renderDirty = false;
            		}
            		else {
HXLINE( 348)			int _g2 = 0;
HXDLIN( 348)			::Array< ::Dynamic> _g11 = container->_hx___children;
HXDLIN( 348)			while((_g2 < _g11->length)){
HXLINE( 348)				 ::openfl::display::DisplayObject child1 = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 348)				_g2 = (_g2 + 1);
HXLINE( 350)				this->_hx___renderDisplayObject(child1);
            			}
            		}
HXLINE( 354)		this->_hx___popMaskObject(container,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderDisplayObjectContainer,(void))

void CanvasRenderer_obj::_hx___renderMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_359___renderMask)
HXDLIN( 359)		if (hx::IsNotNull( mask )) {
HXLINE( 361)			switch((int)(mask->_hx___type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 364)					 ::Dynamic _hx_tmp =  ::Dynamic(this->context->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic));
HXDLIN( 364)					Float _hx_tmp1 = mask->get_width();
HXDLIN( 364)					_hx_tmp(0,0,_hx_tmp1,mask->get_height());
            				}
            				break;
            				case (int)2: {
HXLINE( 367)					 ::openfl::display::DisplayObjectContainer container = ( ( ::openfl::display::DisplayObjectContainer)(mask) );
HXLINE( 368)					if (hx::IsNull( this->_hx___domRenderer )) {
HXLINE( 368)						{
HXLINE( 368)							 ::Dynamic orphan = container->_hx___removedChildren->iterator();
HXDLIN( 368)							while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 368)								 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 368)								if (hx::IsNull( orphan1->stage )) {
HXLINE( 368)									orphan1->_hx___cleanup();
            								}
            							}
            						}
HXDLIN( 368)						container->_hx___removedChildren->set_length(0);
            					}
HXLINE( 370)					if (hx::IsNotNull( container->_hx___graphics )) {
HXLINE( 372)						::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(container->_hx___graphics,hx::ObjectPtr<OBJ_>(this));
            					}
HXLINE( 375)					{
HXLINE( 375)						int _g = 0;
HXDLIN( 375)						::Array< ::Dynamic> _g1 = container->_hx___children;
HXDLIN( 375)						while((_g < _g1->length)){
HXLINE( 375)							 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 375)							_g = (_g + 1);
HXLINE( 377)							this->_hx___renderMask(child);
            						}
            					}
            				}
            				break;
            				case (int)3: {
            				}
            				break;
            				case (int)5: {
HXLINE( 383)					 ::openfl::display::SimpleButton button = ( ( ::openfl::display::SimpleButton)(mask) );
HXLINE( 384)					this->_hx___renderMask(button->_hx___currentState);
            				}
            				break;
            				default:{
HXLINE( 387)					if (hx::IsNotNull( mask->_hx___graphics )) {
HXLINE( 389)						::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(mask->_hx___graphics,hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderMask,(void))

void CanvasRenderer_obj::_hx___renderShape( ::openfl::display::DisplayObject shape){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_397___renderShape)
HXDLIN( 397)		bool _hx_tmp;
HXDLIN( 397)		if (hx::IsNotNull( shape->get_mask() )) {
HXDLIN( 397)			if ((shape->get_mask()->get_width() > 0)) {
HXDLIN( 397)				_hx_tmp = (shape->get_mask()->get_height() > 0);
            			}
            			else {
HXDLIN( 397)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 397)			_hx_tmp = true;
            		}
HXDLIN( 397)		if (_hx_tmp) {
HXLINE( 399)			this->_hx___updateCacheBitmap(shape,false);
HXLINE( 401)			bool _hx_tmp1;
HXDLIN( 401)			if (hx::IsNotNull( shape->_hx___cacheBitmap )) {
HXLINE( 401)				_hx_tmp1 = !(shape->_hx___isCacheBitmapRender);
            			}
            			else {
HXLINE( 401)				_hx_tmp1 = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderShape,(void))

void CanvasRenderer_obj::_hx___renderSimpleButton( ::openfl::display::SimpleButton button){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_413___renderSimpleButton)
HXLINE( 414)		bool _hx_tmp;
HXDLIN( 414)		bool _hx_tmp1;
HXDLIN( 414)		if (!(!(button->_hx___renderable))) {
HXLINE( 414)			_hx_tmp1 = (button->_hx___worldAlpha <= 0);
            		}
            		else {
HXLINE( 414)			_hx_tmp1 = true;
            		}
HXDLIN( 414)		if (!(_hx_tmp1)) {
HXLINE( 414)			_hx_tmp = hx::IsNull( button->_hx___currentState );
            		}
            		else {
HXLINE( 414)			_hx_tmp = true;
            		}
HXDLIN( 414)		if (_hx_tmp) {
HXLINE( 414)			return;
            		}
HXLINE( 416)		this->_hx___pushMaskObject(button,null());
HXLINE( 417)		this->_hx___renderDisplayObject(button->_hx___currentState);
HXLINE( 418)		this->_hx___popMaskObject(button,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderSimpleButton,(void))

void CanvasRenderer_obj::_hx___renderTextField( ::openfl::text::TextField textField){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_422___renderTextField)
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderTextField,(void))

void CanvasRenderer_obj::_hx___renderTilemap( ::openfl::display::Tilemap tilemap){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_481___renderTilemap)
HXLINE( 482)		this->_hx___updateCacheBitmap(tilemap,false);
HXLINE( 484)		bool _hx_tmp;
HXDLIN( 484)		if (hx::IsNotNull( tilemap->_hx___cacheBitmap )) {
HXLINE( 484)			_hx_tmp = !(tilemap->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 484)			_hx_tmp = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderTilemap,(void))

void CanvasRenderer_obj::_hx___renderVideo( ::openfl::media::Video video){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_497___renderVideo)
HXDLIN( 497)		::openfl::_internal::renderer::canvas::CanvasVideo_obj::render(video,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___renderVideo,(void))

void CanvasRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_501___setBlendMode)
HXLINE( 502)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE( 502)			value = this->_hx___overrideBlendMode;
            		}
HXLINE( 503)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE( 503)			return;
            		}
HXLINE( 505)		this->_hx___blendMode = value;
HXLINE( 506)		this->_hx___setBlendModeContext(this->context,value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CanvasRenderer_obj,_hx___setBlendMode,(void))

void CanvasRenderer_obj::_hx___setBlendModeContext( ::Dynamic context, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_511___setBlendModeContext)
HXDLIN( 511)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==0) ){
HXLINE( 514)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("lighter",c3,4a,e3,19),hx::paccDynamic);
HXDLIN( 514)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 521)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("darken",5f,36,3a,21),hx::paccDynamic);
HXDLIN( 521)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE( 524)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("difference",fd,9b,91,46),hx::paccDynamic);
HXDLIN( 524)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE( 531)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("hard-light",b4,7e,9e,35),hx::paccDynamic);
HXDLIN( 531)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE( 542)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("lighten",bf,4a,e3,19),hx::paccDynamic);
HXDLIN( 542)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE( 545)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("multiply",24,e2,8c,9a),hx::paccDynamic);
HXDLIN( 545)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==11) ){
HXLINE( 548)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("overlay",90,43,10,a9),hx::paccDynamic);
HXDLIN( 548)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE( 551)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("screen",6c,3b,5d,47),hx::paccDynamic);
HXDLIN( 551)			goto _hx_goto_30;
            		}
            		/* default */{
HXLINE( 562)			context->__SetField(HX_("globalCompositeOperation",63,05,f9,c0),HX_("source-over",46,01,99,ce),hx::paccDynamic);
            		}
            		_hx_goto_30:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CanvasRenderer_obj,_hx___setBlendModeContext,(void))

bool CanvasRenderer_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObject object,bool force){
            	HX_GC_STACKFRAME(&_hx_pos_51aed30dab802763_567___updateCacheBitmap)
HXLINE( 572)		if (object->_hx___isCacheBitmapRender) {
HXLINE( 572)			return false;
            		}
HXLINE( 573)		bool updated = false;
HXLINE( 575)		bool _hx_tmp;
HXDLIN( 575)		bool _hx_tmp1;
HXDLIN( 575)		if (!(object->get_cacheAsBitmap())) {
HXLINE( 575)			_hx_tmp1 = !(object->_hx___worldColorTransform->_hx___isDefault(true));
            		}
            		else {
HXLINE( 575)			_hx_tmp1 = true;
            		}
HXDLIN( 575)		if (!(_hx_tmp1)) {
HXLINE( 577)			if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 575)				_hx_tmp = !(this->_hx___worldColorTransform->_hx___isDefault(true));
            			}
            			else {
HXLINE( 575)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 575)			_hx_tmp = true;
            		}
HXDLIN( 575)		if (_hx_tmp) {
HXLINE( 579)			if (hx::IsNull( object->_hx___cacheBitmapMatrix )) {
HXLINE( 581)				object->_hx___cacheBitmapMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 584)			bool hasFilters = hx::IsNotNull( object->_hx___filters );
HXLINE( 585)			 ::openfl::geom::Matrix bitmapMatrix;
HXDLIN( 585)			if (hx::IsNotNull( object->_hx___cacheAsBitmapMatrix )) {
HXLINE( 585)				bitmapMatrix = object->_hx___cacheAsBitmapMatrix;
            			}
            			else {
HXLINE( 585)				bitmapMatrix = object->_hx___renderTransform;
            			}
HXLINE( 587)			 ::openfl::geom::Rectangle rect = null();
HXLINE( 589)			 ::openfl::geom::ColorTransform colorTransform = ::openfl::geom::ColorTransform_obj::_hx___pool->get().StaticCast<  ::openfl::geom::ColorTransform >();
HXLINE( 590)			colorTransform->_hx___copyFrom(object->_hx___worldColorTransform);
HXLINE( 591)			if (hx::IsNotNull( this->_hx___worldColorTransform )) {
HXLINE( 591)				colorTransform->_hx___combine(this->_hx___worldColorTransform);
            			}
HXLINE( 593)			bool needRender;
HXDLIN( 593)			bool needRender1;
HXDLIN( 593)			bool needRender2;
HXDLIN( 593)			bool needRender3;
HXDLIN( 593)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE( 594)				if (object->_hx___renderDirty) {
HXLINE( 594)					if (!(force)) {
HXLINE( 594)						if (hx::IsNotNull( object->_hx___children )) {
HXLINE( 593)							needRender3 = (object->_hx___children->length > 0);
            						}
            						else {
HXLINE( 593)							needRender3 = false;
            						}
            					}
            					else {
HXLINE( 593)						needRender3 = true;
            					}
            				}
            				else {
HXLINE( 593)					needRender3 = false;
            				}
            			}
            			else {
HXLINE( 593)				needRender3 = true;
            			}
HXDLIN( 593)			if (!(needRender3)) {
HXLINE( 593)				needRender2 = hx::IsNotEq( object->opaqueBackground,object->_hx___cacheBitmapBackground );
            			}
            			else {
HXLINE( 593)				needRender2 = true;
            			}
HXDLIN( 593)			if (!(needRender2)) {
HXLINE( 596)				if (hx::IsNotNull( object->_hx___graphics )) {
HXLINE( 593)					needRender1 = object->_hx___graphics->_hx___softwareDirty;
            				}
            				else {
HXLINE( 593)					needRender1 = false;
            				}
            			}
            			else {
HXLINE( 593)				needRender1 = true;
            			}
HXDLIN( 593)			if (!(needRender1)) {
HXLINE( 593)				needRender = !(object->_hx___cacheBitmapColorTransform->_hx___equals(colorTransform,true));
            			}
            			else {
HXLINE( 593)				needRender = true;
            			}
HXLINE( 599)			bool _hx_tmp2;
HXDLIN( 599)			if (!(needRender)) {
HXLINE( 600)				bool _hx_tmp3;
HXDLIN( 600)				bool _hx_tmp4;
HXDLIN( 600)				if ((bitmapMatrix->a == object->_hx___cacheBitmapMatrix->a)) {
HXLINE( 600)					_hx_tmp4 = (bitmapMatrix->b != object->_hx___cacheBitmapMatrix->b);
            				}
            				else {
HXLINE( 600)					_hx_tmp4 = true;
            				}
HXDLIN( 600)				if (!(_hx_tmp4)) {
HXLINE( 600)					_hx_tmp3 = (bitmapMatrix->c != object->_hx___cacheBitmapMatrix->c);
            				}
            				else {
HXLINE( 600)					_hx_tmp3 = true;
            				}
HXDLIN( 600)				if (!(_hx_tmp3)) {
HXLINE( 599)					_hx_tmp2 = (bitmapMatrix->d != object->_hx___cacheBitmapMatrix->d);
            				}
            				else {
HXLINE( 599)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 599)				_hx_tmp2 = false;
            			}
HXDLIN( 599)			if (_hx_tmp2) {
HXLINE( 605)				needRender = true;
            			}
HXLINE( 608)			bool _hx_tmp5;
HXDLIN( 608)			if (hasFilters) {
HXLINE( 608)				_hx_tmp5 = !(needRender);
            			}
            			else {
HXLINE( 608)				_hx_tmp5 = false;
            			}
HXDLIN( 608)			if (_hx_tmp5) {
HXLINE( 610)				int _g = 0;
HXDLIN( 610)				::Array< ::Dynamic> _g1 = object->_hx___filters;
HXDLIN( 610)				while((_g < _g1->length)){
HXLINE( 610)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 610)					_g = (_g + 1);
HXLINE( 612)					if (filter->_hx___renderDirty) {
HXLINE( 614)						needRender = true;
HXLINE( 615)						goto _hx_goto_32;
            					}
            				}
            				_hx_goto_32:;
            			}
HXLINE( 620)			bool _hx_tmp6;
HXDLIN( 620)			bool _hx_tmp7;
HXDLIN( 620)			bool _hx_tmp8;
HXDLIN( 620)			if (!(needRender)) {
HXLINE( 620)				_hx_tmp8 = hx::IsNotNull( object->_hx___cacheBitmapData );
            			}
            			else {
HXLINE( 620)				_hx_tmp8 = false;
            			}
HXDLIN( 620)			if (_hx_tmp8) {
HXLINE( 620)				_hx_tmp7 = hx::IsNotNull( object->_hx___cacheBitmapData->image );
            			}
            			else {
HXLINE( 620)				_hx_tmp7 = false;
            			}
HXDLIN( 620)			if (_hx_tmp7) {
HXLINE( 620)				_hx_tmp6 = (object->_hx___cacheBitmapData->image->version < object->_hx___cacheBitmapData->_hx___textureVersion);
            			}
            			else {
HXLINE( 620)				_hx_tmp6 = false;
            			}
HXDLIN( 620)			if (_hx_tmp6) {
HXLINE( 625)				needRender = true;
            			}
HXLINE( 629)			bool updateTransform;
HXDLIN( 629)			if (!(needRender)) {
HXLINE( 629)				updateTransform = !(object->_hx___cacheBitmap->_hx___worldTransform->equals(object->_hx___worldTransform));
            			}
            			else {
HXLINE( 629)				updateTransform = true;
            			}
HXLINE( 631)			object->_hx___cacheBitmapMatrix->copyFrom(bitmapMatrix);
HXLINE( 632)			object->_hx___cacheBitmapMatrix->tx = ( (Float)(0) );
HXLINE( 633)			object->_hx___cacheBitmapMatrix->ty = ( (Float)(0) );
HXLINE( 637)			int bitmapWidth = 0;
HXDLIN( 637)			int bitmapHeight = 0;
HXLINE( 638)			int filterWidth = 0;
HXDLIN( 638)			int filterHeight = 0;
HXLINE( 639)			Float offsetX = ((Float)0.);
HXDLIN( 639)			Float offsetY = ((Float)0.);
HXLINE( 641)			if (updateTransform) {
HXLINE( 643)				rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 645)				object->_hx___getFilterBounds(rect,object->_hx___cacheBitmapMatrix);
HXLINE( 647)				filterWidth = ::Math_obj::ceil(rect->width);
HXLINE( 648)				filterHeight = ::Math_obj::ceil(rect->height);
HXLINE( 650)				if ((rect->x > 0)) {
HXLINE( 650)					offsetX = ( (Float)(::Math_obj::ceil(rect->x)) );
            				}
            				else {
HXLINE( 650)					offsetX = ( (Float)(::Math_obj::floor(rect->x)) );
            				}
HXLINE( 651)				if ((rect->y > 0)) {
HXLINE( 651)					offsetY = ( (Float)(::Math_obj::ceil(rect->y)) );
            				}
            				else {
HXLINE( 651)					offsetY = ( (Float)(::Math_obj::floor(rect->y)) );
            				}
HXLINE( 653)				if (hx::IsNotNull( object->_hx___cacheBitmapData )) {
HXLINE( 655)					bool _hx_tmp9;
HXDLIN( 655)					if ((filterWidth <= object->_hx___cacheBitmapData->width)) {
HXLINE( 655)						_hx_tmp9 = (filterHeight > object->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE( 655)						_hx_tmp9 = true;
            					}
HXDLIN( 655)					if (_hx_tmp9) {
HXLINE( 657)						bitmapWidth = ::Math_obj::ceil(::Math_obj::max((( (Float)(filterWidth) ) * ((Float)1.25)),( (Float)(object->_hx___cacheBitmapData->width) )));
HXLINE( 658)						bitmapHeight = ::Math_obj::ceil(::Math_obj::max((( (Float)(filterHeight) ) * ((Float)1.25)),( (Float)(object->_hx___cacheBitmapData->height) )));
HXLINE( 659)						needRender = true;
            					}
            					else {
HXLINE( 663)						bitmapWidth = object->_hx___cacheBitmapData->width;
HXLINE( 664)						bitmapHeight = object->_hx___cacheBitmapData->height;
            					}
            				}
            				else {
HXLINE( 669)					bitmapWidth = filterWidth;
HXLINE( 670)					bitmapHeight = filterHeight;
            				}
            			}
HXLINE( 674)			if (needRender) {
HXLINE( 676)				object->_hx___cacheBitmapBackground = object->opaqueBackground;
HXLINE( 678)				bool _hx_tmp10;
HXDLIN( 678)				if ((filterWidth >= ((Float)0.5))) {
HXLINE( 678)					_hx_tmp10 = (filterHeight >= ((Float)0.5));
            				}
            				else {
HXLINE( 678)					_hx_tmp10 = false;
            				}
HXDLIN( 678)				if (_hx_tmp10) {
HXLINE( 680)					bool needsFill;
HXDLIN( 680)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 680)						if ((bitmapWidth == filterWidth)) {
HXLINE( 680)							needsFill = (bitmapHeight != filterHeight);
            						}
            						else {
HXLINE( 680)							needsFill = true;
            						}
            					}
            					else {
HXLINE( 680)						needsFill = false;
            					}
HXLINE( 681)					int fillColor;
HXDLIN( 681)					if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 681)						fillColor = (-16777216 | ( (int)(object->opaqueBackground) ));
            					}
            					else {
HXLINE( 681)						fillColor = 0;
            					}
HXLINE( 682)					int bitmapColor;
HXDLIN( 682)					if (needsFill) {
HXLINE( 682)						bitmapColor = 0;
            					}
            					else {
HXLINE( 682)						bitmapColor = fillColor;
            					}
HXLINE( 684)					bool _hx_tmp11;
HXDLIN( 684)					bool _hx_tmp12;
HXDLIN( 684)					if (hx::IsNotNull( object->_hx___cacheBitmapData )) {
HXLINE( 684)						_hx_tmp12 = (bitmapWidth > object->_hx___cacheBitmapData->width);
            					}
            					else {
HXLINE( 684)						_hx_tmp12 = true;
            					}
HXDLIN( 684)					if (!(_hx_tmp12)) {
HXLINE( 684)						_hx_tmp11 = (bitmapHeight > object->_hx___cacheBitmapData->height);
            					}
            					else {
HXLINE( 684)						_hx_tmp11 = true;
            					}
HXDLIN( 684)					if (_hx_tmp11) {
HXLINE( 688)						object->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,bitmapColor);
HXLINE( 690)						if (hx::IsNull( object->_hx___cacheBitmap )) {
HXLINE( 690)							object->_hx___cacheBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
HXLINE( 691)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
HXLINE( 692)						object->_hx___cacheBitmapRendererSW = null();
            					}
            					else {
HXLINE( 696)						object->_hx___cacheBitmapData->fillRect(object->_hx___cacheBitmapData->rect,bitmapColor);
            					}
HXLINE( 699)					if (needsFill) {
HXLINE( 701)						rect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(filterWidth) ),( (Float)(filterHeight) ));
HXLINE( 702)						object->_hx___cacheBitmapData->fillRect(rect,fillColor);
            					}
            				}
            				else {
HXLINE( 707)					::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
HXLINE( 709)					bool _hx_tmp13;
HXDLIN( 709)					if (hx::IsNotNull( this->_hx___domRenderer )) {
HXLINE( 709)						_hx_tmp13 = hx::IsNotNull( object->_hx___cacheBitmap );
            					}
            					else {
HXLINE( 709)						_hx_tmp13 = false;
            					}
HXDLIN( 709)					if (_hx_tmp13) {
HXLINE( 711)						this->_hx___domRenderer->_hx___clearBitmap(object->_hx___cacheBitmap);
            					}
HXLINE( 714)					object->_hx___cacheBitmap = null();
HXLINE( 715)					object->_hx___cacheBitmapData = null();
HXLINE( 716)					object->_hx___cacheBitmapData2 = null();
HXLINE( 717)					object->_hx___cacheBitmapData3 = null();
HXLINE( 718)					object->_hx___cacheBitmapRendererSW = null();
HXLINE( 720)					return true;
            				}
            			}
            			else {
HXLINE( 727)				object->_hx___cacheBitmapData = object->_hx___cacheBitmap->get_bitmapData();
HXLINE( 728)				object->_hx___cacheBitmapData2 = null();
HXLINE( 729)				object->_hx___cacheBitmapData3 = null();
            			}
HXLINE( 732)			if (updateTransform) {
HXLINE( 734)				object->_hx___cacheBitmap->_hx___worldTransform->copyFrom(object->_hx___worldTransform);
HXLINE( 736)				if (hx::IsEq( bitmapMatrix,object->_hx___renderTransform )) {
HXLINE( 738)					object->_hx___cacheBitmap->_hx___renderTransform->identity();
HXLINE( 739)					object->_hx___cacheBitmap->_hx___renderTransform->tx = (object->_hx___renderTransform->tx + offsetX);
HXLINE( 740)					object->_hx___cacheBitmap->_hx___renderTransform->ty = (object->_hx___renderTransform->ty + offsetY);
            				}
            				else {
HXLINE( 744)					object->_hx___cacheBitmap->_hx___renderTransform->copyFrom(object->_hx___cacheBitmapMatrix);
HXLINE( 745)					object->_hx___cacheBitmap->_hx___renderTransform->invert();
HXLINE( 746)					object->_hx___cacheBitmap->_hx___renderTransform->concat(object->_hx___renderTransform);
HXLINE( 747)					 ::openfl::geom::Matrix object1 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN( 747)					object1->tx = (object1->tx + offsetX);
HXLINE( 748)					 ::openfl::geom::Matrix object2 = object->_hx___cacheBitmap->_hx___renderTransform;
HXDLIN( 748)					object2->ty = (object2->ty + offsetY);
            				}
            			}
HXLINE( 752)			object->_hx___cacheBitmap->smoothing = this->_hx___allowSmoothing;
HXLINE( 753)			object->_hx___cacheBitmap->_hx___renderable = object->_hx___renderable;
HXLINE( 754)			object->_hx___cacheBitmap->_hx___worldAlpha = object->_hx___worldAlpha;
HXLINE( 755)			object->_hx___cacheBitmap->_hx___worldBlendMode = object->_hx___worldBlendMode;
HXLINE( 756)			object->_hx___cacheBitmap->_hx___worldShader = object->_hx___worldShader;
HXLINE( 757)			object->_hx___cacheBitmap->set_mask(object->_hx___mask);
HXLINE( 759)			if (needRender) {
HXLINE( 761)				bool _hx_tmp14;
HXDLIN( 761)				if (hx::IsNotNull( object->_hx___cacheBitmapRendererSW )) {
HXLINE( 761)					_hx_tmp14 = (object->_hx___cacheBitmapRendererSW->_hx___type != HX_("canvas",d8,54,42,b8));
            				}
            				else {
HXLINE( 761)					_hx_tmp14 = true;
            				}
HXDLIN( 761)				if (_hx_tmp14) {
HXLINE( 763)					if (hx::IsNull( object->_hx___cacheBitmapData->image )) {
HXLINE( 765)						int color;
HXDLIN( 765)						if (hx::IsNotNull( object->opaqueBackground )) {
HXLINE( 765)							color = (-16777216 | ( (int)(object->opaqueBackground) ));
            						}
            						else {
HXLINE( 765)							color = 0;
            						}
HXLINE( 766)						object->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,color);
HXLINE( 767)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
            					}
HXLINE( 770)					::lime::_internal::graphics::ImageCanvasUtil_obj::convertToCanvas(object->_hx___cacheBitmapData->image,null());
HXLINE( 771)					object->_hx___cacheBitmapRendererSW =  ::openfl::_internal::renderer::canvas::CanvasRenderer_obj::__alloc( HX_CTX ,object->_hx___cacheBitmapData->image->buffer->_hx___srcContext);
HXLINE( 772)					object->_hx___cacheBitmapRendererSW->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 773)					object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE( 776)				if (hx::IsNull( object->_hx___cacheBitmapColorTransform )) {
HXLINE( 776)					object->_hx___cacheBitmapColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE( 778)				object->_hx___cacheBitmapRendererSW->_hx___stage = object->stage;
HXLINE( 780)				object->_hx___cacheBitmapRendererSW->_hx___allowSmoothing = this->_hx___allowSmoothing;
HXLINE( 781)				hx::TCast<  ::openfl::_internal::renderer::canvas::CanvasRenderer >::cast(object->_hx___cacheBitmapRendererSW)->_hx___setBlendMode(10);
HXLINE( 782)				object->_hx___cacheBitmapRendererSW->_hx___worldAlpha = (( (Float)(1) ) / object->_hx___worldAlpha);
HXLINE( 784)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->copyFrom(object->_hx___renderTransform);
HXLINE( 785)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->invert();
HXLINE( 786)				object->_hx___cacheBitmapRendererSW->_hx___worldTransform->concat(object->_hx___cacheBitmapMatrix);
HXLINE( 787)				 ::openfl::geom::Matrix object3 = object->_hx___cacheBitmapRendererSW->_hx___worldTransform;
HXDLIN( 787)				object3->tx = (object3->tx - offsetX);
HXLINE( 788)				 ::openfl::geom::Matrix object4 = object->_hx___cacheBitmapRendererSW->_hx___worldTransform;
HXDLIN( 788)				object4->ty = (object4->ty - offsetY);
HXLINE( 790)				object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform->_hx___copyFrom(colorTransform);
HXLINE( 791)				object->_hx___cacheBitmapRendererSW->_hx___worldColorTransform->_hx___invert();
HXLINE( 793)				object->_hx___isCacheBitmapRender = true;
HXLINE( 795)				object->_hx___cacheBitmapRendererSW->_hx___drawBitmapData(object->_hx___cacheBitmapData,object,null());
HXLINE( 797)				if (hasFilters) {
HXLINE( 799)					bool needSecondBitmapData = false;
HXLINE( 800)					bool needCopyOfOriginal = false;
HXLINE( 802)					{
HXLINE( 802)						int _g2 = 0;
HXDLIN( 802)						::Array< ::Dynamic> _g11 = object->_hx___filters;
HXDLIN( 802)						while((_g2 < _g11->length)){
HXLINE( 802)							 ::openfl::filters::BitmapFilter filter1 = _g11->__get(_g2).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 802)							_g2 = (_g2 + 1);
HXLINE( 804)							if (filter1->_hx___needSecondBitmapData) {
HXLINE( 806)								needSecondBitmapData = true;
            							}
HXLINE( 808)							if (filter1->_hx___preserveObject) {
HXLINE( 810)								needCopyOfOriginal = true;
            							}
            						}
            					}
HXLINE( 814)					 ::openfl::display::BitmapData bitmap = object->_hx___cacheBitmapData;
HXLINE( 815)					 ::openfl::display::BitmapData bitmap2 = null();
HXLINE( 816)					 ::openfl::display::BitmapData bitmap3 = null();
HXLINE( 818)					if (needSecondBitmapData) {
HXLINE( 820)						bool _hx_tmp15;
HXDLIN( 820)						bool _hx_tmp16;
HXDLIN( 820)						bool _hx_tmp17;
HXDLIN( 820)						if (hx::IsNotNull( object->_hx___cacheBitmapData2 )) {
HXLINE( 820)							_hx_tmp17 = hx::IsNull( object->_hx___cacheBitmapData2->image );
            						}
            						else {
HXLINE( 820)							_hx_tmp17 = true;
            						}
HXDLIN( 820)						if (!(_hx_tmp17)) {
HXLINE( 820)							_hx_tmp16 = (bitmapWidth > object->_hx___cacheBitmapData2->width);
            						}
            						else {
HXLINE( 820)							_hx_tmp16 = true;
            						}
HXDLIN( 820)						if (!(_hx_tmp16)) {
HXLINE( 820)							_hx_tmp15 = (bitmapHeight > object->_hx___cacheBitmapData2->height);
            						}
            						else {
HXLINE( 820)							_hx_tmp15 = true;
            						}
HXDLIN( 820)						if (_hx_tmp15) {
HXLINE( 825)							object->_hx___cacheBitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,0);
            						}
            						else {
HXLINE( 829)							object->_hx___cacheBitmapData2->fillRect(object->_hx___cacheBitmapData2->rect,0);
            						}
HXLINE( 831)						bitmap2 = object->_hx___cacheBitmapData2;
            					}
            					else {
HXLINE( 835)						bitmap2 = bitmap;
            					}
HXLINE( 838)					if (needCopyOfOriginal) {
HXLINE( 840)						bool _hx_tmp18;
HXDLIN( 840)						bool _hx_tmp19;
HXDLIN( 840)						bool _hx_tmp20;
HXDLIN( 840)						if (hx::IsNotNull( object->_hx___cacheBitmapData3 )) {
HXLINE( 840)							_hx_tmp20 = hx::IsNull( object->_hx___cacheBitmapData3->image );
            						}
            						else {
HXLINE( 840)							_hx_tmp20 = true;
            						}
HXDLIN( 840)						if (!(_hx_tmp20)) {
HXLINE( 840)							_hx_tmp19 = (bitmapWidth > object->_hx___cacheBitmapData3->width);
            						}
            						else {
HXLINE( 840)							_hx_tmp19 = true;
            						}
HXDLIN( 840)						if (!(_hx_tmp19)) {
HXLINE( 840)							_hx_tmp18 = (bitmapHeight > object->_hx___cacheBitmapData3->height);
            						}
            						else {
HXLINE( 840)							_hx_tmp18 = true;
            						}
HXDLIN( 840)						if (_hx_tmp18) {
HXLINE( 845)							object->_hx___cacheBitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,0);
            						}
            						else {
HXLINE( 849)							object->_hx___cacheBitmapData3->fillRect(object->_hx___cacheBitmapData3->rect,0);
            						}
HXLINE( 851)						bitmap3 = object->_hx___cacheBitmapData3;
            					}
HXLINE( 854)					if (hx::IsNull( object->_hx___tempPoint )) {
HXLINE( 854)						object->_hx___tempPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 855)					 ::openfl::geom::Point destPoint = object->_hx___tempPoint;
HXLINE( 856)					 ::openfl::display::BitmapData cacheBitmap;
HXDLIN( 856)					 ::openfl::display::BitmapData lastBitmap;
HXLINE( 858)					{
HXLINE( 858)						int _g21 = 0;
HXDLIN( 858)						::Array< ::Dynamic> _g3 = object->_hx___filters;
HXDLIN( 858)						while((_g21 < _g3->length)){
HXLINE( 858)							 ::openfl::filters::BitmapFilter filter2 = _g3->__get(_g21).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 858)							_g21 = (_g21 + 1);
HXLINE( 860)							if (filter2->_hx___preserveObject) {
HXLINE( 862)								bitmap3->copyPixels(bitmap,bitmap->rect,destPoint,null(),null(),null());
            							}
HXLINE( 865)							lastBitmap = filter2->_hx___applyFilter(bitmap2,bitmap,bitmap->rect,destPoint);
HXLINE( 867)							if (filter2->_hx___preserveObject) {
HXLINE( 869)								 ::openfl::geom::ColorTransform _hx_tmp21;
HXDLIN( 869)								if (hx::IsNotNull( object->_hx___objectTransform )) {
HXLINE( 869)									_hx_tmp21 = object->_hx___objectTransform->get_colorTransform();
            								}
            								else {
HXLINE( 869)									_hx_tmp21 = null();
            								}
HXDLIN( 869)								lastBitmap->draw(bitmap3,null(),_hx_tmp21,null(),null(),null());
            							}
HXLINE( 871)							filter2->_hx___renderDirty = false;
HXLINE( 873)							bool _hx_tmp22;
HXDLIN( 873)							if (needSecondBitmapData) {
HXLINE( 873)								_hx_tmp22 = hx::IsEq( lastBitmap,bitmap2 );
            							}
            							else {
HXLINE( 873)								_hx_tmp22 = false;
            							}
HXDLIN( 873)							if (_hx_tmp22) {
HXLINE( 875)								cacheBitmap = bitmap;
HXLINE( 876)								bitmap = bitmap2;
HXLINE( 877)								bitmap2 = cacheBitmap;
            							}
            						}
            					}
HXLINE( 881)					if (hx::IsNotEq( object->_hx___cacheBitmapData,bitmap )) {
HXLINE( 887)						cacheBitmap = object->_hx___cacheBitmapData;
HXLINE( 888)						object->_hx___cacheBitmapData = bitmap;
HXLINE( 889)						object->_hx___cacheBitmapData2 = cacheBitmap;
HXLINE( 890)						object->_hx___cacheBitmap->_hx___bitmapData = object->_hx___cacheBitmapData;
HXLINE( 891)						object->_hx___cacheBitmapRendererSW = null();
            					}
HXLINE( 894)					object->_hx___cacheBitmap->_hx___imageVersion = object->_hx___cacheBitmapData->_hx___textureVersion;
            				}
HXLINE( 897)				object->_hx___cacheBitmapColorTransform->_hx___copyFrom(colorTransform);
HXLINE( 899)				if (!(object->_hx___cacheBitmapColorTransform->_hx___isDefault(true))) {
HXLINE( 901)					object->_hx___cacheBitmapColorTransform->alphaMultiplier = ( (Float)(1) );
HXLINE( 902)					object->_hx___cacheBitmapData->colorTransform(object->_hx___cacheBitmapData->rect,object->_hx___cacheBitmapColorTransform);
            				}
HXLINE( 905)				object->_hx___isCacheBitmapRender = false;
            			}
HXLINE( 908)			if (updateTransform) {
HXLINE( 910)				::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            			}
HXLINE( 913)			updated = updateTransform;
HXLINE( 915)			::openfl::geom::ColorTransform_obj::_hx___pool->release(colorTransform);
            		}
            		else {
HXLINE( 917)			if (hx::IsNotNull( object->_hx___cacheBitmap )) {
HXLINE( 919)				bool _hx_tmp23;
HXDLIN( 919)				if (hx::IsNotNull( this->_hx___domRenderer )) {
HXLINE( 919)					_hx_tmp23 = hx::IsNotNull( object->_hx___cacheBitmap );
            				}
            				else {
HXLINE( 919)					_hx_tmp23 = false;
            				}
HXDLIN( 919)				if (_hx_tmp23) {
HXLINE( 921)					this->_hx___domRenderer->_hx___clearBitmap(object->_hx___cacheBitmap);
            				}
HXLINE( 924)				object->_hx___cacheBitmap = null();
HXLINE( 925)				object->_hx___cacheBitmapData = null();
HXLINE( 926)				object->_hx___cacheBitmapData2 = null();
HXLINE( 927)				object->_hx___cacheBitmapData3 = null();
HXLINE( 928)				object->_hx___cacheBitmapColorTransform = null();
HXLINE( 929)				object->_hx___cacheBitmapRendererSW = null();
HXLINE( 931)				updated = true;
            			}
            		}
HXLINE( 934)		return updated;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CanvasRenderer_obj,_hx___updateCacheBitmap,return )


hx::ObjectPtr< CanvasRenderer_obj > CanvasRenderer_obj::__new( ::Dynamic context) {
	hx::ObjectPtr< CanvasRenderer_obj > __this = new CanvasRenderer_obj();
	__this->__construct(context);
	return __this;
}

hx::ObjectPtr< CanvasRenderer_obj > CanvasRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic context) {
	CanvasRenderer_obj *__this = (CanvasRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CanvasRenderer_obj), true, "openfl._internal.renderer.canvas.CanvasRenderer"));
	*(void **)__this = CanvasRenderer_obj::_hx_vtable;
	__this->__construct(context);
	return __this;
}

CanvasRenderer_obj::CanvasRenderer_obj()
{
}

void CanvasRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CanvasRenderer);
	HX_MARK_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	HX_MARK_MEMBER_NAME(_hx___domRenderer,"__domRenderer");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	 ::openfl::display::CanvasRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CanvasRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___colorTransform,"__colorTransform");
	HX_VISIT_MEMBER_NAME(_hx___domRenderer,"__domRenderer");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	 ::openfl::display::CanvasRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CanvasRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getAlpha") ) { return hx::Val( _hx___getAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setTransform") ) { return hx::Val( setTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderMask") ) { return hx::Val( _hx___renderMask_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__domRenderer") ) { return hx::Val( _hx___domRenderer ); }
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderShape") ) { return hx::Val( _hx___renderShape_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderVideo") ) { return hx::Val( _hx___renderVideo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"applySmoothing") ) { return hx::Val( applySmoothing_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderBitmap") ) { return hx::Val( _hx___renderBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderTilemap") ) { return hx::Val( _hx___renderTilemap_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { return hx::Val( _hx___colorTransform ); }
		if (HX_FIELD_EQ(inName,"__drawBitmapData") ) { return hx::Val( _hx___drawBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTextField") ) { return hx::Val( _hx___renderTextField_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__renderBitmapData") ) { return hx::Val( _hx___renderBitmapData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__getColorTransform") ) { return hx::Val( _hx___getColorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__renderSimpleButton") ) { return hx::Val( _hx___renderSimpleButton_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__renderDisplayObject") ) { return hx::Val( _hx___renderDisplayObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendModeContext") ) { return hx::Val( _hx___setBlendModeContext_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__renderDisplayObjectContainer") ) { return hx::Val( _hx___renderDisplayObjectContainer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CanvasRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__domRenderer") ) { _hx___domRenderer=inValue.Cast<  ::openfl::display::DOMRenderer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__colorTransform") ) { _hx___colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CanvasRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__colorTransform",a9,62,7f,e1));
	outFields->push(HX_("__domRenderer",c5,56,fb,5c));
	outFields->push(HX_("__transform",4c,76,bf,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CanvasRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(CanvasRenderer_obj,_hx___colorTransform),HX_("__colorTransform",a9,62,7f,e1)},
	{hx::fsObject /*  ::openfl::display::DOMRenderer */ ,(int)offsetof(CanvasRenderer_obj,_hx___domRenderer),HX_("__domRenderer",c5,56,fb,5c)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(CanvasRenderer_obj,_hx___transform),HX_("__transform",4c,76,bf,73)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CanvasRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String CanvasRenderer_obj_sMemberFields[] = {
	HX_("__colorTransform",a9,62,7f,e1),
	HX_("__domRenderer",c5,56,fb,5c),
	HX_("__transform",4c,76,bf,73),
	HX_("applySmoothing",26,12,60,84),
	HX_("setTransform",6a,ed,e2,69),
	HX_("__clear",6d,ca,b9,b2),
	HX_("__drawBitmapData",fd,1d,0a,4b),
	HX_("__getAlpha",08,2a,a6,24),
	HX_("__getColorTransform",9f,af,a3,d2),
	HX_("__popMask",fd,b7,5f,c4),
	HX_("__popMaskObject",9c,46,0d,10),
	HX_("__popMaskRect",c1,73,e8,16),
	HX_("__pushMask",06,e7,7f,ba),
	HX_("__pushMaskObject",65,e2,3b,45),
	HX_("__pushMaskRect",4a,5b,e7,a0),
	HX_("__render",76,d6,58,ad),
	HX_("__renderBitmap",05,97,22,81),
	HX_("__renderBitmapData",cf,7f,f7,49),
	HX_("__renderDisplayObject",4b,62,d0,99),
	HX_("__renderDisplayObjectContainer",76,d1,2a,e5),
	HX_("__renderMask",82,b6,f3,1d),
	HX_("__renderShape",cb,50,46,90),
	HX_("__renderSimpleButton",5a,07,4e,4e),
	HX_("__renderTextField",77,af,83,05),
	HX_("__renderTilemap",58,9c,2e,c9),
	HX_("__renderVideo",25,82,25,4b),
	HX_("__setBlendMode",72,27,48,51),
	HX_("__setBlendModeContext",9d,48,5a,f6),
	HX_("__updateCacheBitmap",28,11,07,27),
	::String(null()) };

hx::Class CanvasRenderer_obj::__mClass;

void CanvasRenderer_obj::__register()
{
	CanvasRenderer_obj _hx_dummy;
	CanvasRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.canvas.CanvasRenderer",f6,ab,b2,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CanvasRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CanvasRenderer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CanvasRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CanvasRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CanvasRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_51aed30dab802763_45_boot)
HXDLIN(  45)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace canvas
