// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_BitmapDataPool
#include <openfl/_internal/renderer/BitmapDataPool.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_20_new,"openfl._internal.renderer.BitmapDataPool","new",0x04ef62e2,"openfl._internal.renderer.BitmapDataPool.new","openfl/_internal/renderer/BitmapDataPool.hx",20,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_31_cleanup,"openfl._internal.renderer.BitmapDataPool","cleanup",0xf42607a6,"openfl._internal.renderer.BitmapDataPool.cleanup","openfl/_internal/renderer/BitmapDataPool.hx",31,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_49_get,"openfl._internal.renderer.BitmapDataPool","get",0x04ea1318,"openfl._internal.renderer.BitmapDataPool.get","openfl/_internal/renderer/BitmapDataPool.hx",49,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_59_get,"openfl._internal.renderer.BitmapDataPool","get",0x04ea1318,"openfl._internal.renderer.BitmapDataPool.get","openfl/_internal/renderer/BitmapDataPool.hx",59,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_77_release,"openfl._internal.renderer.BitmapDataPool","release",0xa1d18149,"openfl._internal.renderer.BitmapDataPool.release","openfl/_internal/renderer/BitmapDataPool.hx",77,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_86___cleanBitmapData,"openfl._internal.renderer.BitmapDataPool","__cleanBitmapData",0x21043384,"openfl._internal.renderer.BitmapDataPool.__cleanBitmapData","openfl/_internal/renderer/BitmapDataPool.hx",86,0x3306f36f)
HX_LOCAL_STACK_FRAME(_hx_pos_e9fd7906cc8055f5_91___createBitmapData,"openfl._internal.renderer.BitmapDataPool","__createBitmapData",0xd42c56b3,"openfl._internal.renderer.BitmapDataPool.__createBitmapData","openfl/_internal/renderer/BitmapDataPool.hx",91,0x3306f36f)
namespace openfl{
namespace _internal{
namespace renderer{

void BitmapDataPool_obj::__construct(hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D){
            		int lifetime = __o_lifetime.Default(2);
            	HX_GC_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_20_new)
HXLINE(  21)		this->_hx___lifetime = lifetime;
HXLINE(  22)		this->_hx___context = context3D;
HXLINE(  24)		this->_hx___bitmapData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  25)		this->_hx___bitmapDataAge =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  26)		this->_hx___bitmapDataList = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic BitmapDataPool_obj::__CreateEmpty() { return new BitmapDataPool_obj; }

void *BitmapDataPool_obj::_hx_vtable = 0;

Dynamic BitmapDataPool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapDataPool_obj > _hx_result = new BitmapDataPool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BitmapDataPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x47cae380;
}

void BitmapDataPool_obj::cleanup(){
            	HX_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_31_cleanup)
HXDLIN(  31)		int _g = 0;
HXDLIN(  31)		::Array< ::Dynamic> _g1 = this->_hx___bitmapDataList;
HXDLIN(  31)		while((_g < _g1->length)){
HXDLIN(  31)			 ::openfl::display::BitmapData bitmapData = _g1->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN(  31)			_g = (_g + 1);
HXLINE(  33)			 ::Dynamic age = this->_hx___bitmapDataAge->get(bitmapData);
HXLINE(  34)			if (hx::IsGreaterEq( age,this->_hx___lifetime )) {
HXLINE(  36)				::Dynamic this1 = this->_hx___bitmapData->get(bitmapData->width);
HXDLIN(  36)				( ( ::lime::utils::ObjectPool)(( ( ::haxe::ds::IntMap)(this1) )->get(bitmapData->height)) )->remove(bitmapData);
HXLINE(  37)				bitmapData->dispose();
HXLINE(  38)				this->_hx___bitmapDataAge->remove(bitmapData);
HXLINE(  39)				this->_hx___bitmapDataList->remove(bitmapData);
            			}
            			else {
HXLINE(  41)				if (hx::IsGreater( age,-1 )) {
HXLINE(  43)					int v = (age + 1);
HXDLIN(  43)					this->_hx___bitmapDataAge->set(bitmapData,v);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapDataPool_obj,cleanup,(void))

 ::openfl::display::BitmapData BitmapDataPool_obj::get(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_49_get)
HXLINE(  50)		 ::haxe::ds::IntMap heightMap = ( ( ::haxe::ds::IntMap)(this->_hx___bitmapData->get(width)) );
HXLINE(  51)		if (hx::IsNull( heightMap )) {
HXLINE(  53)			::Dynamic this1 = this->_hx___bitmapData;
HXDLIN(  53)			 ::haxe::ds::IntMap v =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  53)			( ( ::haxe::ds::IntMap)(this1) )->set(width,v);
HXDLIN(  53)			heightMap = v;
            		}
HXLINE(  56)		 ::lime::utils::ObjectPool pool = ( ( ::lime::utils::ObjectPool)(heightMap->get(height)) );
HXLINE(  57)		if (hx::IsNull( pool )) {
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,int,height1, ::Dynamic,f,int,width1) HXARGC(0)
            			 ::openfl::display::BitmapData _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_59_get)
HXLINE(  59)				return ( ( ::openfl::display::BitmapData)(f(width1,height1)) );
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(  59)			 ::Dynamic f = this->_hx___createBitmapData_dyn();
HXDLIN(  59)			int width1 = width;
HXDLIN(  59)			int height1 = height;
HXDLIN(  59)			 ::lime::utils::ObjectPool v1 =  ::lime::utils::ObjectPool_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(height1,f,width1)),this->_hx___cleanBitmapData_dyn(),null());
HXDLIN(  59)			heightMap->set(height,v1);
HXDLIN(  59)			pool = v1;
            		}
HXLINE(  62)		 ::openfl::display::BitmapData bitmapData = pool->get().StaticCast<  ::openfl::display::BitmapData >();
HXLINE(  64)		if (hx::IsNull( bitmapData )) {
HXLINE(  64)			return null();
            		}
HXLINE(  66)		if (!(this->_hx___bitmapDataAge->exists(bitmapData))) {
HXLINE(  68)			this->_hx___bitmapDataList->push(bitmapData);
            		}
HXLINE(  70)		this->_hx___bitmapDataAge->set(bitmapData,-1);
HXLINE(  72)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapDataPool_obj,get,return )

void BitmapDataPool_obj::release( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_77_release)
HXDLIN(  77)		if (this->_hx___bitmapDataAge->exists(bitmapData)) {
HXLINE(  79)			::Dynamic this1 = this->_hx___bitmapData->get(bitmapData->width);
HXDLIN(  79)			( ( ::lime::utils::ObjectPool)(( ( ::haxe::ds::IntMap)(this1) )->get(bitmapData->height)) )->release(bitmapData);
HXLINE(  80)			this->_hx___bitmapDataAge->set(bitmapData,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapDataPool_obj,release,(void))

void BitmapDataPool_obj::_hx___cleanBitmapData( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_86___cleanBitmapData)
HXDLIN(  86)		bitmapData->fillRect(bitmapData->rect,0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapDataPool_obj,_hx___cleanBitmapData,(void))

 ::openfl::display::BitmapData BitmapDataPool_obj::_hx___createBitmapData(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_e9fd7906cc8055f5_91___createBitmapData)
HXDLIN(  91)		if (hx::IsNotNull( this->_hx___context )) {
HXLINE(  93)			 ::openfl::display3D::textures::RectangleTexture texture = this->_hx___context->createRectangleTexture(width,height,1,true);
HXLINE(  94)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromTexture(texture);
HXLINE(  96)			return bitmapData;
            		}
            		else {
HXLINE( 100)			return  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
            		}
HXLINE(  91)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapDataPool_obj,_hx___createBitmapData,return )


hx::ObjectPtr< BitmapDataPool_obj > BitmapDataPool_obj::__new(hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D) {
	hx::ObjectPtr< BitmapDataPool_obj > __this = new BitmapDataPool_obj();
	__this->__construct(__o_lifetime,context3D);
	return __this;
}

hx::ObjectPtr< BitmapDataPool_obj > BitmapDataPool_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D) {
	BitmapDataPool_obj *__this = (BitmapDataPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapDataPool_obj), true, "openfl._internal.renderer.BitmapDataPool"));
	*(void **)__this = BitmapDataPool_obj::_hx_vtable;
	__this->__construct(__o_lifetime,context3D);
	return __this;
}

BitmapDataPool_obj::BitmapDataPool_obj()
{
}

void BitmapDataPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapDataPool);
	HX_MARK_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_MARK_MEMBER_NAME(_hx___bitmapDataAge,"__bitmapDataAge");
	HX_MARK_MEMBER_NAME(_hx___bitmapDataList,"__bitmapDataList");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___lifetime,"__lifetime");
	HX_MARK_END_CLASS();
}

void BitmapDataPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bitmapData,"__bitmapData");
	HX_VISIT_MEMBER_NAME(_hx___bitmapDataAge,"__bitmapDataAge");
	HX_VISIT_MEMBER_NAME(_hx___bitmapDataList,"__bitmapDataList");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___lifetime,"__lifetime");
}

hx::Val BitmapDataPool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cleanup") ) { return hx::Val( cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"release") ) { return hx::Val( release_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__lifetime") ) { return hx::Val( _hx___lifetime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { return hx::Val( _hx___bitmapData ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bitmapDataAge") ) { return hx::Val( _hx___bitmapDataAge ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__bitmapDataList") ) { return hx::Val( _hx___bitmapDataList ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__cleanBitmapData") ) { return hx::Val( _hx___cleanBitmapData_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__createBitmapData") ) { return hx::Val( _hx___createBitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapDataPool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__lifetime") ) { _hx___lifetime=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bitmapData") ) { _hx___bitmapData=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bitmapDataAge") ) { _hx___bitmapDataAge=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__bitmapDataList") ) { _hx___bitmapDataList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapDataPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__bitmapData",d9,30,54,6c));
	outFields->push(HX_("__bitmapDataAge",66,c9,0a,4a));
	outFields->push(HX_("__bitmapDataList",d7,59,ac,86));
	outFields->push(HX_("__context",cf,e6,c5,9a));
	outFields->push(HX_("__lifetime",29,7e,aa,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapDataPool_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(BitmapDataPool_obj,_hx___bitmapData),HX_("__bitmapData",d9,30,54,6c)},
	{hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(int)offsetof(BitmapDataPool_obj,_hx___bitmapDataAge),HX_("__bitmapDataAge",66,c9,0a,4a)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BitmapDataPool_obj,_hx___bitmapDataList),HX_("__bitmapDataList",d7,59,ac,86)},
	{hx::fsObject /*  ::openfl::display3D::Context3D */ ,(int)offsetof(BitmapDataPool_obj,_hx___context),HX_("__context",cf,e6,c5,9a)},
	{hx::fsInt,(int)offsetof(BitmapDataPool_obj,_hx___lifetime),HX_("__lifetime",29,7e,aa,0f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapDataPool_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapDataPool_obj_sMemberFields[] = {
	HX_("__bitmapData",d9,30,54,6c),
	HX_("__bitmapDataAge",66,c9,0a,4a),
	HX_("__bitmapDataList",d7,59,ac,86),
	HX_("__context",cf,e6,c5,9a),
	HX_("__lifetime",29,7e,aa,0f),
	HX_("cleanup",24,0c,42,ab),
	HX_("get",96,80,4e,00),
	HX_("release",c7,85,ed,58),
	HX_("__cleanBitmapData",82,01,46,3a),
	HX_("__createBitmapData",f5,c6,7e,d4),
	::String(null()) };

hx::Class BitmapDataPool_obj::__mClass;

void BitmapDataPool_obj::__register()
{
	BitmapDataPool_obj _hx_dummy;
	BitmapDataPool_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.BitmapDataPool",f0,09,d0,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapDataPool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapDataPool_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapDataPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapDataPool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
