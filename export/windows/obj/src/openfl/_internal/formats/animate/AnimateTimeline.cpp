// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFrame
#include <openfl/_internal/formats/animate/AnimateFrame.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFrameObject
#include <openfl/_internal/formats/animate/AnimateFrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateLibrary
#include <openfl/_internal/formats/animate/AnimateLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateSpriteSymbol
#include <openfl/_internal/formats/animate/AnimateSpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateSymbol
#include <openfl/_internal/formats/animate/AnimateSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateTimeline
#include <openfl/_internal/formats/animate/AnimateTimeline.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate__AnimateTimeline_FrameSymbolInstance
#include <openfl/_internal/formats/animate/_AnimateTimeline/FrameSymbolInstance.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_FilterType
#include <openfl/_internal/formats/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_ITimeline
#include <openfl/_internal/utils/ITimeline.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f8a75a205e437484_96_new,"openfl._internal.formats.animate.AnimateTimeline","new",0xf5c80785,"openfl._internal.formats.animate.AnimateTimeline.new","openfl/_internal/formats/animate/AnimateTimeline.hx",96,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_111_addFrameScript,"openfl._internal.formats.animate.AnimateTimeline","addFrameScript",0x33c32272,"openfl._internal.formats.animate.AnimateTimeline.addFrameScript","openfl/_internal/formats/animate/AnimateTimeline.hx",111,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_145_gotoAndPlay,"openfl._internal.formats.animate.AnimateTimeline","gotoAndPlay",0xd36bc92d,"openfl._internal.formats.animate.AnimateTimeline.gotoAndPlay","openfl/_internal/formats/animate/AnimateTimeline.hx",145,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_168_gotoAndStop,"openfl._internal.formats.animate.AnimateTimeline","gotoAndStop",0xd56d8b3b,"openfl._internal.formats.animate.AnimateTimeline.gotoAndStop","openfl/_internal/formats/animate/AnimateTimeline.hx",168,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_174_init,"openfl._internal.formats.animate.AnimateTimeline","init",0x15f7444b,"openfl._internal.formats.animate.AnimateTimeline.init","openfl/_internal/formats/animate/AnimateTimeline.hx",174,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_232_init,"openfl._internal.formats.animate.AnimateTimeline","init",0x15f7444b,"openfl._internal.formats.animate.AnimateTimeline.init","openfl/_internal/formats/animate/AnimateTimeline.hx",232,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_411_nextFrame,"openfl._internal.formats.animate.AnimateTimeline","nextFrame",0x515a331f,"openfl._internal.formats.animate.AnimateTimeline.nextFrame","openfl/_internal/formats/animate/AnimateTimeline.hx",411,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_423_play,"openfl._internal.formats.animate.AnimateTimeline","play",0x1a96372f,"openfl._internal.formats.animate.AnimateTimeline.play","openfl/_internal/formats/animate/AnimateTimeline.hx",423,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_441_prevFrame,"openfl._internal.formats.animate.AnimateTimeline","prevFrame",0x956bb91f,"openfl._internal.formats.animate.AnimateTimeline.prevFrame","openfl/_internal/formats/animate/AnimateTimeline.hx",441,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_454_stop,"openfl._internal.formats.animate.AnimateTimeline","stop",0x1c97f93d,"openfl._internal.formats.animate.AnimateTimeline.stop","openfl/_internal/formats/animate/AnimateTimeline.hx",454,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_458_enterFrame,"openfl._internal.formats.animate.AnimateTimeline","enterFrame",0x7e2b2b70,"openfl._internal.formats.animate.AnimateTimeline.enterFrame","openfl/_internal/formats/animate/AnimateTimeline.hx",458,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_467___updateFrameScript,"openfl._internal.formats.animate.AnimateTimeline","__updateFrameScript",0xa9d18094,"openfl._internal.formats.animate.AnimateTimeline.__updateFrameScript","openfl/_internal/formats/animate/AnimateTimeline.hx",467,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_505___updateSymbol,"openfl._internal.formats.animate.AnimateTimeline","__updateSymbol",0x87a5da5c,"openfl._internal.formats.animate.AnimateTimeline.__updateSymbol","openfl/_internal/formats/animate/AnimateTimeline.hx",505,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_652___evaluateFrameScripts,"openfl._internal.formats.animate.AnimateTimeline","__evaluateFrameScripts",0xb46ba06f,"openfl._internal.formats.animate.AnimateTimeline.__evaluateFrameScripts","openfl/_internal/formats/animate/AnimateTimeline.hx",652,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_681___fromSymbol,"openfl._internal.formats.animate.AnimateTimeline","__fromSymbol",0xf1456bbd,"openfl._internal.formats.animate.AnimateTimeline.__fromSymbol","openfl/_internal/formats/animate/AnimateTimeline.hx",681,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_684___getNextFrame,"openfl._internal.formats.animate.AnimateTimeline","__getNextFrame",0x5623b2df,"openfl._internal.formats.animate.AnimateTimeline.__getNextFrame","openfl/_internal/formats/animate/AnimateTimeline.hx",684,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_705___goto,"openfl._internal.formats.animate.AnimateTimeline","__goto",0x519f0abe,"openfl._internal.formats.animate.AnimateTimeline.__goto","openfl/_internal/formats/animate/AnimateTimeline.hx",705,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_717___resolveFrameReference,"openfl._internal.formats.animate.AnimateTimeline","__resolveFrameReference",0x5a0a8e6f,"openfl._internal.formats.animate.AnimateTimeline.__resolveFrameReference","openfl/_internal/formats/animate/AnimateTimeline.hx",717,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_743___sortDepths,"openfl._internal.formats.animate.AnimateTimeline","__sortDepths",0x89921f69,"openfl._internal.formats.animate.AnimateTimeline.__sortDepths","openfl/_internal/formats/animate/AnimateTimeline.hx",743,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_747___updateDisplayObject,"openfl._internal.formats.animate.AnimateTimeline","__updateDisplayObject",0xc4cf381d,"openfl._internal.formats.animate.AnimateTimeline.__updateDisplayObject","openfl/_internal/formats/animate/AnimateTimeline.hx",747,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_821___updateFrameLabel,"openfl._internal.formats.animate.AnimateTimeline","__updateFrameLabel",0x78293f8b,"openfl._internal.formats.animate.AnimateTimeline.__updateFrameLabel","openfl/_internal/formats/animate/AnimateTimeline.hx",821,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_848___updateInstanceFields,"openfl._internal.formats.animate.AnimateTimeline","__updateInstanceFields",0xf4544ef2,"openfl._internal.formats.animate.AnimateTimeline.__updateInstanceFields","openfl/_internal/formats/animate/AnimateTimeline.hx",848,0x81d368cf)
HX_LOCAL_STACK_FRAME(_hx_pos_f8a75a205e437484_51_boot,"openfl._internal.formats.animate.AnimateTimeline","boot",0x11578d6d,"openfl._internal.formats.animate.AnimateTimeline.boot","openfl/_internal/formats/animate/AnimateTimeline.hx",51,0x81d368cf)
namespace openfl{
namespace _internal{
namespace formats{
namespace animate{

void AnimateTimeline_obj::__construct( ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_96_new)
HXLINE(  97)		this->_hx___movieClip = movieClip;
HXLINE(  98)		this->_hx___library = library;
HXLINE(  99)		this->_hx___symbol = symbol;
HXLINE( 101)		this->_hx___currentFrame = 1;
HXLINE( 102)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 103)		this->_hx___instanceFields = ::Array_obj< ::String >::__new(0);
HXLINE( 104)		this->_hx___totalFrames = 0;
HXLINE( 105)		this->_hx___enabled = true;
HXLINE( 107)		this->init();
            	}

Dynamic AnimateTimeline_obj::__CreateEmpty() { return new AnimateTimeline_obj; }

void *AnimateTimeline_obj::_hx_vtable = 0;

Dynamic AnimateTimeline_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AnimateTimeline_obj > _hx_result = new AnimateTimeline_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AnimateTimeline_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20e49531;
}

static ::openfl::_internal::utils::ITimeline_obj _hx_openfl__internal_formats_animate_AnimateTimeline__hx_openfl__internal_utils_ITimeline= {
	( void (hx::Object::*)(int, ::Dynamic))&::openfl::_internal::formats::animate::AnimateTimeline_obj::addFrameScript,
	( void (hx::Object::*)(int))&::openfl::_internal::formats::animate::AnimateTimeline_obj::enterFrame,
	( void (hx::Object::*)( ::Dynamic,::String))&::openfl::_internal::formats::animate::AnimateTimeline_obj::gotoAndPlay,
	( void (hx::Object::*)( ::Dynamic,::String))&::openfl::_internal::formats::animate::AnimateTimeline_obj::gotoAndStop,
	( void (hx::Object::*)())&::openfl::_internal::formats::animate::AnimateTimeline_obj::nextFrame,
	( void (hx::Object::*)())&::openfl::_internal::formats::animate::AnimateTimeline_obj::play,
	( void (hx::Object::*)())&::openfl::_internal::formats::animate::AnimateTimeline_obj::prevFrame,
	( void (hx::Object::*)())&::openfl::_internal::formats::animate::AnimateTimeline_obj::stop,
};

void *AnimateTimeline_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa37152a5: return &_hx_openfl__internal_formats_animate_AnimateTimeline__hx_openfl__internal_utils_ITimeline;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void AnimateTimeline_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_111_addFrameScript)
HXLINE( 112)		if ((index < 0)) {
HXLINE( 112)			return;
            		}
HXLINE( 113)		int frame = (index + 1);
HXLINE( 115)		if (hx::IsNotNull( method )) {
HXLINE( 117)			if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 119)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 122)			this->_hx___frameScripts->set(frame,method);
            		}
            		else {
HXLINE( 124)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 126)				this->_hx___frameScripts->remove(frame);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateTimeline_obj,addFrameScript,(void))

void AnimateTimeline_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_145_gotoAndPlay)
HXLINE( 146)		this->play();
HXLINE( 147)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateTimeline_obj,gotoAndPlay,(void))

void AnimateTimeline_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_168_gotoAndStop)
HXLINE( 169)		this->stop();
HXLINE( 170)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateTimeline_obj,gotoAndStop,(void))

void AnimateTimeline_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_174_init)
HXLINE( 175)		if (hx::IsNotNull( this->_hx___activeInstances )) {
HXLINE( 175)			return;
            		}
HXLINE( 177)		this->_hx___activeInstances = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 178)		this->_hx___activeInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 179)		this->_hx___currentFrame = 1;
HXLINE( 180)		this->_hx___lastFrameScriptEval = -1;
HXLINE( 181)		this->_hx___lastFrameUpdate = -1;
HXLINE( 182)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 184)		int frame;
HXLINE( 185)		 ::openfl::_internal::formats::animate::AnimateFrame frameData;
HXLINE( 188)		 ::hscript::Parser parser = null();
HXLINE( 191)		{
HXLINE( 191)			int _g = 0;
HXDLIN( 191)			int _g1 = this->_hx___symbol->frames->length;
HXDLIN( 191)			while((_g < _g1)){
HXLINE( 191)				_g = (_g + 1);
HXDLIN( 191)				int i = (_g - 1);
HXLINE( 193)				frame = (i + 1);
HXLINE( 194)				frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrame >();
HXLINE( 196)				if (hx::IsNotNull( frameData->label )) {
HXLINE( 198)					::Array< ::Dynamic> _hx_tmp = this->_hx___currentLabels;
HXDLIN( 198)					_hx_tmp->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,frameData->label,(i + 1)));
            				}
HXLINE( 201)				if (hx::IsNotNull( frameData->script )) {
HXLINE( 203)					if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 205)						this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 208)					this->_hx___frameScripts->set(frame,frameData->script);
            				}
            				else {
HXLINE( 210)					if (hx::IsNotNull( frameData->scriptSource )) {
HXLINE( 212)						if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 214)							this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            						}
HXLINE( 217)						try {
            							HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::hscript::Interp,interp, ::hscript::Expr,program) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_232_init)
HXLINE( 232)								interp->execute(program);
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 220)							if (hx::IsNull( parser )) {
HXLINE( 222)								parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 223)								parser->allowTypes = true;
            							}
HXLINE( 226)							 ::hscript::Expr program = parser->parseString(frameData->scriptSource,null());
HXLINE( 227)							 ::hscript::Interp interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 228)							interp->variables->set(HX_("this",5e,06,fc,4c),hx::ObjectPtr<OBJ_>(this));
HXLINE( 230)							 ::Dynamic script =  ::Dynamic(new _hx_Closure_0(interp,program));
HXLINE( 235)							this->_hx___frameScripts->set(frame,script);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e = _hx_e;
HXLINE( 265)								if (hx::IsNotNull( this->_hx___symbol->className )) {
HXLINE( 267)									::lime::utils::Log_obj::warn((((((HX_("Unable to evaluate frame script source for symbol \"",a3,42,39,7c) + this->_hx___symbol->className) + HX_("\" frame ",91,af,e7,77)) + frame) + HX_("\n",0a,00,00,00)) + frameData->scriptSource),hx::SourceInfo(HX_("openfl/_internal/formats/animate/AnimateTimeline.hx",cf,68,d3,81),267,HX_("openfl._internal.formats.animate.AnimateTimeline",13,e1,ea,00),HX_("init",10,3b,bb,45)));
            								}
            								else {
HXLINE( 272)									::lime::utils::Log_obj::warn((HX_("Unable to evaluate frame script source:\n",1e,90,6f,3e) + frameData->scriptSource),hx::SourceInfo(HX_("openfl/_internal/formats/animate/AnimateTimeline.hx",cf,68,d3,81),272,HX_("openfl._internal.formats.animate.AnimateTimeline",13,e1,ea,00),HX_("init",10,3b,bb,45)));
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 278)		int frame1;
HXLINE( 279)		 ::openfl::_internal::formats::animate::AnimateFrame frameData1;
HXLINE( 280)		 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance instance;
HXLINE( 281)		bool duplicate;
HXLINE( 282)		 ::openfl::_internal::formats::animate::AnimateSymbol symbol;
HXLINE( 283)		 ::openfl::display::DisplayObject displayObject;
HXLINE( 287)		{
HXLINE( 287)			int _g2 = 0;
HXDLIN( 287)			int _g3 = this->_hx___totalFrames;
HXDLIN( 287)			while((_g2 < _g3)){
HXLINE( 287)				_g2 = (_g2 + 1);
HXDLIN( 287)				int i1 = (_g2 - 1);
HXLINE( 289)				frame1 = (i1 + 1);
HXLINE( 290)				frameData1 = this->_hx___symbol->frames->__get(i1).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrame >();
HXLINE( 292)				if (hx::IsNull( frameData1->objects )) {
HXLINE( 292)					continue;
            				}
HXLINE( 294)				{
HXLINE( 294)					int _g21 = 0;
HXDLIN( 294)					::Array< ::Dynamic> _g31 = frameData1->objects;
HXDLIN( 294)					while((_g21 < _g31->length)){
HXLINE( 294)						 ::openfl::_internal::formats::animate::AnimateFrameObject frameObject = _g31->__get(_g21).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrameObject >();
HXDLIN( 294)						_g21 = (_g21 + 1);
HXLINE( 296)						if ((frameObject->type == 0)) {
HXLINE( 298)							if (this->_hx___activeInstancesByFrameObjectID->exists(frameObject->id)) {
HXLINE( 300)								continue;
            							}
            							else {
HXLINE( 304)								instance = null();
HXLINE( 305)								duplicate = false;
HXLINE( 307)								{
HXLINE( 307)									int _g22 = 0;
HXDLIN( 307)									::Array< ::Dynamic> _g32 = this->_hx___activeInstances;
HXDLIN( 307)									while((_g22 < _g32->length)){
HXLINE( 307)										 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance activeInstance = _g32->__get(_g22).StaticCast<  ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance >();
HXDLIN( 307)										_g22 = (_g22 + 1);
HXLINE( 309)										bool _hx_tmp1;
HXDLIN( 309)										bool _hx_tmp2;
HXDLIN( 309)										if (hx::IsNotNull( activeInstance->displayObject )) {
HXLINE( 309)											_hx_tmp2 = (activeInstance->characterID == frameObject->symbol);
            										}
            										else {
HXLINE( 309)											_hx_tmp2 = false;
            										}
HXDLIN( 309)										if (_hx_tmp2) {
HXLINE( 309)											_hx_tmp1 = (activeInstance->depth == frameObject->depth);
            										}
            										else {
HXLINE( 309)											_hx_tmp1 = false;
            										}
HXDLIN( 309)										if (_hx_tmp1) {
HXLINE( 314)											instance = activeInstance;
HXLINE( 315)											duplicate = true;
HXLINE( 316)											goto _hx_goto_7;
            										}
            									}
            									_hx_goto_7:;
            								}
            							}
HXLINE( 321)							if (hx::IsNull( instance )) {
HXLINE( 323)								symbol = ( ( ::openfl::_internal::formats::animate::AnimateSymbol)(this->_hx___library->symbols->get(frameObject->symbol)) );
HXLINE( 325)								if (hx::IsNotNull( symbol )) {
HXLINE( 327)									displayObject = symbol->_hx___createObject(this->_hx___library);
HXLINE( 329)									if (hx::IsNotNull( displayObject )) {
HXLINE( 332)										displayObject->parent = this->_hx___movieClip;
HXLINE( 333)										displayObject->stage = this->_hx___movieClip->stage;
HXLINE( 335)										if (hx::IsNotNull( this->_hx___movieClip->stage )) {
HXLINE( 335)											displayObject->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false));
            										}
HXLINE( 338)										instance =  ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance_obj::__alloc( HX_CTX ,frame1,frameObject->id,frameObject->symbol,frameObject->depth,displayObject,frameObject->clipDepth);
            									}
            								}
            							}
HXLINE( 344)							if (hx::IsNotNull( instance )) {
HXLINE( 346)								this->_hx___activeInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 348)								if (!(duplicate)) {
HXLINE( 350)									this->_hx___activeInstances->push(instance);
HXLINE( 351)									this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 392)		if ((this->_hx___totalFrames > 1)) {
HXLINE( 394)			this->play();
            		}
HXLINE( 397)		this->enterFrame(0);
HXLINE( 400)		this->_hx___instanceFields = ::Type_obj::getInstanceFields(::Type_obj::getClass(this->_hx___movieClip));
HXLINE( 401)		this->_hx___updateInstanceFields();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,init,(void))

void AnimateTimeline_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_411_nextFrame)
HXLINE( 412)		this->stop();
HXLINE( 413)		this->_hx___goto((this->_hx___currentFrame + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,nextFrame,(void))

void AnimateTimeline_obj::play(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_423_play)
HXLINE( 424)		bool _hx_tmp;
HXDLIN( 424)		bool _hx_tmp1;
HXDLIN( 424)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 424)			_hx_tmp1 = this->_hx___playing;
            		}
            		else {
HXLINE( 424)			_hx_tmp1 = true;
            		}
HXDLIN( 424)		if (!(_hx_tmp1)) {
HXLINE( 424)			_hx_tmp = (this->_hx___totalFrames < 2);
            		}
            		else {
HXLINE( 424)			_hx_tmp = true;
            		}
HXDLIN( 424)		if (_hx_tmp) {
HXLINE( 424)			return;
            		}
HXLINE( 426)		this->_hx___playing = true;
HXLINE( 429)		{
HXLINE( 430)			this->_hx___frameTime = ::Std_obj::_hx_int((( (Float)(1000) ) / this->_hx___library->frameRate));
HXLINE( 431)			this->_hx___timeElapsed = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,play,(void))

void AnimateTimeline_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_441_prevFrame)
HXLINE( 442)		this->stop();
HXLINE( 443)		this->_hx___goto((this->_hx___currentFrame - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,prevFrame,(void))

void AnimateTimeline_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_454_stop)
HXDLIN( 454)		this->_hx___playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,stop,(void))

void AnimateTimeline_obj::enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_458_enterFrame)
HXLINE( 459)		this->_hx___updateFrameScript(deltaTime);
HXLINE( 460)		this->_hx___updateSymbol(this->_hx___currentFrame);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,enterFrame,(void))

void AnimateTimeline_obj::_hx___updateFrameScript(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_467___updateFrameScript)
HXDLIN( 467)		bool _hx_tmp;
HXDLIN( 467)		if (hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 467)			_hx_tmp = this->_hx___playing;
            		}
            		else {
HXDLIN( 467)			_hx_tmp = false;
            		}
HXDLIN( 467)		if (_hx_tmp) {
HXLINE( 469)			int nextFrame = this->_hx___getNextFrame(deltaTime);
HXLINE( 471)			if ((this->_hx___lastFrameScriptEval == nextFrame)) {
HXLINE( 474)				return;
            			}
HXLINE( 477)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 479)				if ((nextFrame < this->_hx___currentFrame)) {
HXLINE( 481)					if (!(this->_hx___evaluateFrameScripts(this->_hx___totalFrames))) {
HXLINE( 484)						return;
            					}
HXLINE( 487)					this->_hx___currentFrame = 1;
            				}
HXLINE( 490)				if (!(this->_hx___evaluateFrameScripts(nextFrame))) {
HXLINE( 493)					return;
            				}
            			}
            			else {
HXLINE( 498)				this->_hx___currentFrame = nextFrame;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___updateFrameScript,(void))

void AnimateTimeline_obj::_hx___updateSymbol(int targetFrame){
            	HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_505___updateSymbol)
HXDLIN( 505)		bool _hx_tmp;
HXDLIN( 505)		if (hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 505)			_hx_tmp = (this->_hx___currentFrame != this->_hx___lastFrameUpdate);
            		}
            		else {
HXDLIN( 505)			_hx_tmp = false;
            		}
HXDLIN( 505)		if (_hx_tmp) {
HXLINE( 507)			this->_hx___updateFrameLabel();
HXLINE( 509)			 ::haxe::ds::IntMap currentInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 511)			int frame;
HXLINE( 512)			 ::openfl::_internal::formats::animate::AnimateFrame frameData;
HXLINE( 513)			 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance instance;
HXLINE( 517)			{
HXLINE( 517)				int _g = 0;
HXDLIN( 517)				int _g1 = targetFrame;
HXDLIN( 517)				while((_g < _g1)){
HXLINE( 517)					_g = (_g + 1);
HXDLIN( 517)					int i = (_g - 1);
HXLINE( 519)					frame = (i + 1);
HXLINE( 520)					frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrame >();
HXLINE( 522)					if (hx::IsNull( frameData->objects )) {
HXLINE( 522)						continue;
            					}
HXLINE( 524)					{
HXLINE( 524)						int _g2 = 0;
HXDLIN( 524)						::Array< ::Dynamic> _g11 = frameData->objects;
HXDLIN( 524)						while((_g2 < _g11->length)){
HXLINE( 524)							 ::openfl::_internal::formats::animate::AnimateFrameObject frameObject = _g11->__get(_g2).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrameObject >();
HXDLIN( 524)							_g2 = (_g2 + 1);
HXLINE( 526)							switch((int)(frameObject->type)){
            								case (int)0: {
HXLINE( 529)									instance = ( ( ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance)(this->_hx___activeInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 531)									if (hx::IsNotNull( instance )) {
HXLINE( 533)										currentInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 534)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,true);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 538)									instance = ( ( ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance)(currentInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 540)									bool _hx_tmp1;
HXDLIN( 540)									if (hx::IsNotNull( instance )) {
HXLINE( 540)										_hx_tmp1 = hx::IsNotNull( instance->displayObject );
            									}
            									else {
HXLINE( 540)										_hx_tmp1 = false;
            									}
HXDLIN( 540)									if (_hx_tmp1) {
HXLINE( 542)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 546)									currentInstancesByFrameObjectID->remove(frameObject->id);
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
HXLINE( 553)			::Array< ::Dynamic> currentInstances = ::Array_obj< ::Dynamic>::__new();
HXLINE( 554)			::Array< ::Dynamic> currentMasks = ::Array_obj< ::Dynamic>::__new();
HXLINE( 556)			{
HXLINE( 556)				 ::Dynamic instance1 = currentInstancesByFrameObjectID->iterator();
HXDLIN( 556)				while(( (bool)(instance1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 556)					 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance instance2 = ( ( ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance)(instance1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 558)					if ((currentInstances->indexOf(instance2,null()) == -1)) {
HXLINE( 560)						currentInstances->push(instance2);
HXLINE( 562)						if ((instance2->clipDepth > 0)) {
HXLINE( 564)							currentMasks->push(instance2);
            						}
            					}
            				}
            			}
HXLINE( 569)			currentInstances->sort(this->_hx___sortDepths_dyn());
HXLINE( 571)			 ::openfl::display::DisplayObject existingChild;
HXLINE( 572)			int targetDepth;
HXLINE( 573)			 ::openfl::display::DisplayObject targetChild;
HXLINE( 574)			 ::openfl::display::DisplayObject child;
HXLINE( 575)			bool maskApplied;
HXLINE( 577)			{
HXLINE( 577)				int _g21 = 0;
HXDLIN( 577)				int _g3 = currentInstances->length;
HXDLIN( 577)				while((_g21 < _g3)){
HXLINE( 577)					_g21 = (_g21 + 1);
HXDLIN( 577)					int i1 = (_g21 - 1);
HXLINE( 579)					existingChild = this->_hx___movieClip->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 580)					instance = currentInstances->__get(i1).StaticCast<  ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance >();
HXLINE( 582)					targetDepth = instance->depth;
HXLINE( 583)					targetChild = instance->displayObject;
HXLINE( 585)					if (hx::IsNotEq( existingChild,targetChild )) {
HXLINE( 587)						child = targetChild;
HXLINE( 588)						this->_hx___movieClip->addChildAt(targetChild,i1);
            					}
            					else {
HXLINE( 592)						child = this->_hx___movieClip->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
            					}
HXLINE( 595)					maskApplied = false;
HXLINE( 597)					{
HXLINE( 597)						int _g22 = 0;
HXDLIN( 597)						while((_g22 < currentMasks->length)){
HXLINE( 597)							 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance mask = currentMasks->__get(_g22).StaticCast<  ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance >();
HXDLIN( 597)							_g22 = (_g22 + 1);
HXLINE( 599)							bool _hx_tmp2;
HXDLIN( 599)							if ((targetDepth > mask->depth)) {
HXLINE( 599)								_hx_tmp2 = (targetDepth <= mask->clipDepth);
            							}
            							else {
HXLINE( 599)								_hx_tmp2 = false;
            							}
HXDLIN( 599)							if (_hx_tmp2) {
HXLINE( 601)								child->set_mask(mask->displayObject);
HXLINE( 602)								maskApplied = true;
HXLINE( 603)								goto _hx_goto_20;
            							}
            						}
            						_hx_goto_20:;
            					}
HXLINE( 607)					bool _hx_tmp3;
HXDLIN( 607)					bool _hx_tmp4;
HXDLIN( 607)					if ((currentMasks->length > 0)) {
HXLINE( 607)						_hx_tmp4 = !(maskApplied);
            					}
            					else {
HXLINE( 607)						_hx_tmp4 = false;
            					}
HXDLIN( 607)					if (_hx_tmp4) {
HXLINE( 607)						_hx_tmp3 = hx::IsNotNull( child->get_mask() );
            					}
            					else {
HXLINE( 607)						_hx_tmp3 = false;
            					}
HXDLIN( 607)					if (_hx_tmp3) {
HXLINE( 609)						child->set_mask(null());
            					}
            				}
            			}
HXLINE( 613)			 ::openfl::display::DisplayObject child1;
HXLINE( 614)			int i2 = currentInstances->length;
HXLINE( 615)			int length = this->_hx___movieClip->_hx___children->length;
HXLINE( 617)			while((i2 < length)){
HXLINE( 619)				child1 = this->_hx___movieClip->_hx___children->__get(i2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 623)				{
HXLINE( 623)					int _g4 = 0;
HXDLIN( 623)					::Array< ::Dynamic> _g5 = this->_hx___activeInstances;
HXDLIN( 623)					while((_g4 < _g5->length)){
HXLINE( 623)						 ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance instance3 = _g5->__get(_g4).StaticCast<  ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance >();
HXDLIN( 623)						_g4 = (_g4 + 1);
HXLINE( 625)						if (hx::IsEq( instance3->displayObject,child1 )) {
HXLINE( 628)							if (::Std_obj::is(child1,hx::ClassOf< ::openfl::display::MovieClip >())) {
HXLINE( 630)								 ::openfl::display::MovieClip movie = ( ( ::openfl::display::MovieClip)(child1) );
HXLINE( 631)								movie->gotoAndPlay(1,null());
            							}
HXLINE( 634)							this->_hx___movieClip->removeChild(child1);
HXLINE( 635)							i2 = (i2 - 1);
HXLINE( 636)							length = (length - 1);
            						}
            					}
            				}
HXLINE( 640)				i2 = (i2 + 1);
            			}
HXLINE( 643)			this->_hx___lastFrameUpdate = this->_hx___currentFrame;
HXLINE( 646)			this->_hx___updateInstanceFields();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___updateSymbol,(void))

bool AnimateTimeline_obj::_hx___evaluateFrameScripts(int advanceToFrame){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_652___evaluateFrameScripts)
HXLINE( 653)		{
HXLINE( 653)			int _g = this->_hx___currentFrame;
HXDLIN( 653)			int _g1 = (advanceToFrame + 1);
HXDLIN( 653)			while((_g < _g1)){
HXLINE( 653)				_g = (_g + 1);
HXDLIN( 653)				int frame = (_g - 1);
HXLINE( 655)				if ((frame == this->_hx___lastFrameScriptEval)) {
HXLINE( 655)					continue;
            				}
HXLINE( 657)				this->_hx___lastFrameScriptEval = frame;
HXLINE( 658)				this->_hx___currentFrame = frame;
HXLINE( 660)				if (this->_hx___frameScripts->exists(frame)) {
HXLINE( 662)					this->_hx___updateSymbol(frame);
HXLINE( 663)					 ::Dynamic script = this->_hx___frameScripts->get(frame);
HXLINE( 664)					script();
HXLINE( 666)					if ((this->_hx___currentFrame != frame)) {
HXLINE( 668)						return false;
            					}
            				}
HXLINE( 672)				if (!(this->_hx___playing)) {
HXLINE( 674)					return false;
            				}
            			}
            		}
HXLINE( 678)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___evaluateFrameScripts,return )

void AnimateTimeline_obj::_hx___fromSymbol( ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_681___fromSymbol)
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateTimeline_obj,_hx___fromSymbol,(void))

int AnimateTimeline_obj::_hx___getNextFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_684___getNextFrame)
HXLINE( 685)		int nextFrame = 0;
HXLINE( 688)		{
HXLINE( 689)			 ::openfl::_internal::formats::animate::AnimateTimeline _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 689)			_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 690)			nextFrame = (this->_hx___currentFrame + ::Math_obj::floor((( (Float)(this->_hx___timeElapsed) ) / ( (Float)(this->_hx___frameTime) ))));
HXLINE( 691)			if ((nextFrame < 1)) {
HXLINE( 691)				nextFrame = 1;
            			}
HXLINE( 692)			if ((nextFrame > this->_hx___totalFrames)) {
HXLINE( 692)				nextFrame = (::Math_obj::floor(( (Float)(hx::Mod((nextFrame - 1),this->_hx___totalFrames)) )) + 1);
            			}
HXLINE( 693)			this->_hx___timeElapsed = hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
            		}
HXLINE( 701)		return nextFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___getNextFrame,return )

void AnimateTimeline_obj::_hx___goto(int frame){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_705___goto)
HXLINE( 706)		if (hx::IsNull( this->_hx___symbol )) {
HXLINE( 706)			return;
            		}
HXLINE( 708)		if ((frame < 1)) {
HXLINE( 708)			frame = 1;
            		}
            		else {
HXLINE( 709)			if ((frame > this->_hx___totalFrames)) {
HXLINE( 709)				frame = this->_hx___totalFrames;
            			}
            		}
HXLINE( 711)		this->_hx___currentFrame = frame;
HXLINE( 712)		this->enterFrame(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___goto,(void))

int AnimateTimeline_obj::_hx___resolveFrameReference( ::Dynamic frame){
            	HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_717___resolveFrameReference)
HXDLIN( 717)		if (::Std_obj::is(frame,hx::ClassOf< int >())) {
HXLINE( 719)			return ( (int)(frame) );
            		}
            		else {
HXLINE( 721)			if (::Std_obj::is(frame,hx::ClassOf< ::String >())) {
HXLINE( 723)				::String label = ( (::String)(frame) );
HXLINE( 725)				{
HXLINE( 725)					int _g = 0;
HXDLIN( 725)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 725)					while((_g < _g1->length)){
HXLINE( 725)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 725)						_g = (_g + 1);
HXLINE( 727)						if ((frameLabel->get_name() == label)) {
HXLINE( 729)							return frameLabel->get_frame();
            						}
            					}
            				}
HXLINE( 733)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Error #2109: Frame label ",f8,f0,5a,8a) + label) + HX_(" not found in scene.",b2,87,08,ff))));
            			}
            			else {
HXLINE( 737)				HX_STACK_DO_THROW((HX_("Invalid type for frame ",e7,83,86,d5) + ::Type_obj::getClassName(frame)));
            			}
            		}
HXLINE( 717)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateTimeline_obj,_hx___resolveFrameReference,return )

int AnimateTimeline_obj::_hx___sortDepths( ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance a, ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance b){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_743___sortDepths)
HXDLIN( 743)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateTimeline_obj,_hx___sortDepths,return )

void AnimateTimeline_obj::_hx___updateDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::formats::animate::AnimateFrameObject frameObject,hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_f8a75a205e437484_747___updateDisplayObject)
HXLINE( 748)		if (hx::IsNull( displayObject )) {
HXLINE( 748)			return;
            		}
HXLINE( 750)		if (hx::IsNotNull( frameObject->name )) {
HXLINE( 752)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 755)		if (hx::IsNotNull( frameObject->matrix )) {
HXLINE( 757)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 760)		if (hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 762)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
            		else {
HXLINE( 764)			bool _hx_tmp;
HXDLIN( 764)			if (reset) {
HXLINE( 764)				_hx_tmp = !(displayObject->get_transform()->get_colorTransform()->_hx___isDefault(true));
            			}
            			else {
HXLINE( 764)				_hx_tmp = false;
            			}
HXDLIN( 764)			if (_hx_tmp) {
HXLINE( 766)				 ::openfl::geom::Transform _hx_tmp1 = displayObject->get_transform();
HXDLIN( 766)				_hx_tmp1->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
            			}
            		}
HXLINE( 769)		displayObject->set_transform(displayObject->get_transform());
HXLINE( 771)		if (hx::IsNotNull( frameObject->filters )) {
HXLINE( 773)			::Array< ::Dynamic> filters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 775)			{
HXLINE( 775)				int _g = 0;
HXDLIN( 775)				::Array< ::Dynamic> _g1 = frameObject->filters;
HXDLIN( 775)				while((_g < _g1->length)){
HXLINE( 775)					 ::openfl::_internal::formats::swf::FilterType filter = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::swf::FilterType >();
HXDLIN( 775)					_g = (_g + 1);
HXLINE( 777)					switch((int)(filter->_hx_getIndex())){
            						case (int)0: {
HXLINE( 779)							int quality = filter->_hx_getInt(2);
HXDLIN( 779)							Float blurY = filter->_hx_getFloat(1);
HXDLIN( 779)							Float blurX = filter->_hx_getFloat(0);
HXLINE( 780)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,blurX,blurY,quality));
            						}
            						break;
            						case (int)1: {
HXLINE( 782)							::Array< Float > matrix = filter->_hx_getObject(0).StaticCast< ::Array< Float > >();
HXLINE( 783)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,matrix));
            						}
            						break;
            						case (int)2: {
HXLINE( 785)							bool hideObject = filter->_hx_getBool(10);
HXDLIN( 785)							bool knockout = filter->_hx_getBool(9);
HXDLIN( 785)							bool inner = filter->_hx_getBool(8);
HXDLIN( 785)							int quality1 = filter->_hx_getInt(7);
HXDLIN( 785)							Float strength = filter->_hx_getFloat(6);
HXDLIN( 785)							Float blurY1 = filter->_hx_getFloat(5);
HXDLIN( 785)							Float blurX1 = filter->_hx_getFloat(4);
HXDLIN( 785)							Float alpha = filter->_hx_getFloat(3);
HXDLIN( 785)							int color = filter->_hx_getInt(2);
HXDLIN( 785)							Float angle = filter->_hx_getFloat(1);
HXDLIN( 785)							Float distance = filter->_hx_getFloat(0);
HXLINE( 786)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
            						}
            						break;
            						case (int)3: {
HXLINE( 788)							bool knockout1 = filter->_hx_getBool(7);
HXDLIN( 788)							bool inner1 = filter->_hx_getBool(6);
HXDLIN( 788)							int quality2 = filter->_hx_getInt(5);
HXDLIN( 788)							Float strength1 = filter->_hx_getFloat(4);
HXDLIN( 788)							Float blurY2 = filter->_hx_getFloat(3);
HXDLIN( 788)							Float blurX2 = filter->_hx_getFloat(2);
HXDLIN( 788)							Float alpha1 = filter->_hx_getFloat(1);
HXDLIN( 788)							int color1 = filter->_hx_getInt(0);
HXLINE( 789)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 793)			displayObject->set_filters(filters);
            		}
            		else {
HXLINE( 797)			displayObject->set_filters(null());
            		}
HXLINE( 800)		if (hx::IsNotNull( frameObject->visible )) {
HXLINE( 802)			displayObject->set_visible(( (bool)(frameObject->visible) ));
            		}
HXLINE( 805)		if (hx::IsNotNull( frameObject->blendMode )) {
HXLINE( 807)			displayObject->set_blendMode(frameObject->blendMode);
            		}
HXLINE( 810)		if (hx::IsNotNull( frameObject->cacheAsBitmap )) {
HXLINE( 812)			displayObject->set_cacheAsBitmap(( (bool)(frameObject->cacheAsBitmap) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AnimateTimeline_obj,_hx___updateDisplayObject,(void))

void AnimateTimeline_obj::_hx___updateFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_821___updateFrameLabel)
HXLINE( 822)		this->_hx___currentFrameLabel = this->_hx___symbol->frames->__get((this->_hx___currentFrame - 1)).StaticCast<  ::openfl::_internal::formats::animate::AnimateFrame >()->label;
HXLINE( 824)		if (hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 826)			this->_hx___currentLabel = this->_hx___currentFrameLabel;
            		}
            		else {
HXLINE( 830)			this->_hx___currentLabel = null();
HXLINE( 832)			{
HXLINE( 832)				int _g = 0;
HXDLIN( 832)				::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 832)				while((_g < _g1->length)){
HXLINE( 832)					 ::openfl::display::FrameLabel label = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 832)					_g = (_g + 1);
HXLINE( 834)					int _hx_tmp = label->get_frame();
HXDLIN( 834)					if ((_hx_tmp < this->_hx___currentFrame)) {
HXLINE( 836)						this->_hx___currentLabel = label->get_name();
            					}
            					else {
HXLINE( 840)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,_hx___updateFrameLabel,(void))

void AnimateTimeline_obj::_hx___updateInstanceFields(){
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_848___updateInstanceFields)
HXDLIN( 848)		int _g = 0;
HXDLIN( 848)		::Array< ::String > _g1 = this->_hx___instanceFields;
HXDLIN( 848)		while((_g < _g1->length)){
HXDLIN( 848)			::String field = _g1->__get(_g);
HXDLIN( 848)			_g = (_g + 1);
HXLINE( 850)			int length = this->_hx___movieClip->_hx___children->length;
HXLINE( 851)			{
HXLINE( 851)				int _g2 = 0;
HXDLIN( 851)				int _g11 = length;
HXDLIN( 851)				while((_g2 < _g11)){
HXLINE( 851)					_g2 = (_g2 + 1);
HXDLIN( 851)					int i = (_g2 - 1);
HXLINE( 853)					 ::openfl::display::DisplayObject child = this->_hx___movieClip->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 854)					if ((child->get_name() == field)) {
HXLINE( 856)						::Reflect_obj::setField(this->_hx___movieClip,field,child);
HXLINE( 857)						goto _hx_goto_37;
            					}
            				}
            				_hx_goto_37:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateTimeline_obj,_hx___updateInstanceFields,(void))

bool AnimateTimeline_obj::_hx___useParentFPS;


hx::ObjectPtr< AnimateTimeline_obj > AnimateTimeline_obj::__new( ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol) {
	hx::ObjectPtr< AnimateTimeline_obj > __this = new AnimateTimeline_obj();
	__this->__construct(movieClip,library,symbol);
	return __this;
}

hx::ObjectPtr< AnimateTimeline_obj > AnimateTimeline_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol) {
	AnimateTimeline_obj *__this = (AnimateTimeline_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AnimateTimeline_obj), true, "openfl._internal.formats.animate.AnimateTimeline"));
	*(void **)__this = AnimateTimeline_obj::_hx_vtable;
	__this->__construct(movieClip,library,symbol);
	return __this;
}

AnimateTimeline_obj::AnimateTimeline_obj()
{
}

void AnimateTimeline_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimateTimeline);
	HX_MARK_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_MARK_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_MARK_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_MARK_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_MARK_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_MARK_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_MARK_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_MARK_MEMBER_NAME(_hx___library,"__library");
	HX_MARK_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_MARK_MEMBER_NAME(_hx___movieClip,"__movieClip");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	HX_MARK_END_CLASS();
}

void AnimateTimeline_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_VISIT_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_VISIT_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_VISIT_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_VISIT_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_VISIT_MEMBER_NAME(_hx___library,"__library");
	HX_VISIT_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_VISIT_MEMBER_NAME(_hx___movieClip,"__movieClip");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
}

hx::Val AnimateTimeline_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__goto") ) { return hx::Val( _hx___goto_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__hasUp") ) { return hx::Val( _hx___hasUp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { return hx::Val( _hx___enabled ); }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { return hx::Val( _hx___hasDown ); }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { return hx::Val( _hx___hasOver ); }
		if (HX_FIELD_EQ(inName,"__library") ) { return hx::Val( _hx___library ); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return hx::Val( prevFrame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"enterFrame") ) { return hx::Val( enterFrame_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return hx::Val( _hx___frameTime ); }
		if (HX_FIELD_EQ(inName,"__movieClip") ) { return hx::Val( _hx___movieClip ); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return hx::Val( gotoAndPlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return hx::Val( gotoAndStop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sortDepths") ) { return hx::Val( _hx___sortDepths_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { return hx::Val( _hx___mouseIsDown ); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return hx::Val( _hx___timeElapsed ); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return hx::Val( _hx___totalFrames ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return hx::Val( _hx___currentFrame ); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return hx::Val( _hx___currentLabel ); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return hx::Val( _hx___frameScripts ); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return hx::Val( addFrameScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateSymbol") ) { return hx::Val( _hx___updateSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getNextFrame") ) { return hx::Val( _hx___getNextFrame_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return hx::Val( _hx___currentLabels ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { return hx::Val( _hx___instanceFields ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { return hx::Val( _hx___activeInstances ); }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { return hx::Val( _hx___lastFrameUpdate ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__updateFrameLabel") ) { return hx::Val( _hx___updateFrameLabel_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return hx::Val( _hx___currentFrameLabel ); }
		if (HX_FIELD_EQ(inName,"__updateFrameScript") ) { return hx::Val( _hx___updateFrameScript_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { return hx::Val( _hx___lastFrameScriptEval ); }
		if (HX_FIELD_EQ(inName,"__updateDisplayObject") ) { return hx::Val( _hx___updateDisplayObject_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__evaluateFrameScripts") ) { return hx::Val( _hx___evaluateFrameScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateInstanceFields") ) { return hx::Val( _hx___updateInstanceFields_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__resolveFrameReference") ) { return hx::Val( _hx___resolveFrameReference_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { return hx::Val( _hx___activeInstancesByFrameObjectID ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AnimateTimeline_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__hasUp") ) { _hx___hasUp=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::formats::animate::AnimateSpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { _hx___hasDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { _hx___hasOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__library") ) { _hx___library=inValue.Cast<  ::openfl::_internal::formats::animate::AnimateLibrary >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__movieClip") ) { _hx___movieClip=inValue.Cast<  ::openfl::display::MovieClip >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { _hx___mouseIsDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { _hx___instanceFields=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { _hx___activeInstances=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { _hx___lastFrameUpdate=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { _hx___lastFrameScriptEval=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { _hx___activeInstancesByFrameObjectID=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnimateTimeline_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__activeInstances",78,e9,49,03));
	outFields->push(HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b));
	outFields->push(HX_("__currentFrame",54,e0,4f,6e));
	outFields->push(HX_("__currentFrameLabel",00,ed,fa,dc));
	outFields->push(HX_("__currentLabel",1b,76,7b,d7));
	outFields->push(HX_("__currentLabels",f8,e1,8b,b4));
	outFields->push(HX_("__enabled",61,55,7f,ff));
	outFields->push(HX_("__frameScripts",7b,3e,2f,ee));
	outFields->push(HX_("__frameTime",ba,d3,a9,68));
	outFields->push(HX_("__hasDown",bc,69,00,93));
	outFields->push(HX_("__hasOver",ae,02,4b,9a));
	outFields->push(HX_("__hasUp",35,ed,7f,8c));
	outFields->push(HX_("__instanceFields",0e,0b,63,af));
	outFields->push(HX_("__lastFrameScriptEval",fe,cc,8c,81));
	outFields->push(HX_("__lastFrameUpdate",40,24,e4,8a));
	outFields->push(HX_("__library",db,77,be,c0));
	outFields->push(HX_("__mouseIsDown",51,32,d5,9d));
	outFields->push(HX_("__movieClip",80,4b,47,46));
	outFields->push(HX_("__playing",4e,60,66,0b));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__timeElapsed",8f,80,8e,75));
	outFields->push(HX_("__totalFrames",6a,e3,33,bb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AnimateTimeline_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AnimateTimeline_obj,_hx___activeInstances),HX_("__activeInstances",78,e9,49,03)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(AnimateTimeline_obj,_hx___activeInstancesByFrameObjectID),HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___currentFrame),HX_("__currentFrame",54,e0,4f,6e)},
	{hx::fsString,(int)offsetof(AnimateTimeline_obj,_hx___currentFrameLabel),HX_("__currentFrameLabel",00,ed,fa,dc)},
	{hx::fsString,(int)offsetof(AnimateTimeline_obj,_hx___currentLabel),HX_("__currentLabel",1b,76,7b,d7)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AnimateTimeline_obj,_hx___currentLabels),HX_("__currentLabels",f8,e1,8b,b4)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___enabled),HX_("__enabled",61,55,7f,ff)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(AnimateTimeline_obj,_hx___frameScripts),HX_("__frameScripts",7b,3e,2f,ee)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___frameTime),HX_("__frameTime",ba,d3,a9,68)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___hasDown),HX_("__hasDown",bc,69,00,93)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___hasOver),HX_("__hasOver",ae,02,4b,9a)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___hasUp),HX_("__hasUp",35,ed,7f,8c)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(AnimateTimeline_obj,_hx___instanceFields),HX_("__instanceFields",0e,0b,63,af)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___lastFrameScriptEval),HX_("__lastFrameScriptEval",fe,cc,8c,81)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___lastFrameUpdate),HX_("__lastFrameUpdate",40,24,e4,8a)},
	{hx::fsObject /*  ::openfl::_internal::formats::animate::AnimateLibrary */ ,(int)offsetof(AnimateTimeline_obj,_hx___library),HX_("__library",db,77,be,c0)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___mouseIsDown),HX_("__mouseIsDown",51,32,d5,9d)},
	{hx::fsObject /*  ::openfl::display::MovieClip */ ,(int)offsetof(AnimateTimeline_obj,_hx___movieClip),HX_("__movieClip",80,4b,47,46)},
	{hx::fsBool,(int)offsetof(AnimateTimeline_obj,_hx___playing),HX_("__playing",4e,60,66,0b)},
	{hx::fsObject /*  ::openfl::_internal::formats::animate::AnimateSpriteSymbol */ ,(int)offsetof(AnimateTimeline_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___timeElapsed),HX_("__timeElapsed",8f,80,8e,75)},
	{hx::fsInt,(int)offsetof(AnimateTimeline_obj,_hx___totalFrames),HX_("__totalFrames",6a,e3,33,bb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AnimateTimeline_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &AnimateTimeline_obj::_hx___useParentFPS,HX_("__useParentFPS",b8,6a,a7,0f)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AnimateTimeline_obj_sMemberFields[] = {
	HX_("__activeInstances",78,e9,49,03),
	HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b),
	HX_("__currentFrame",54,e0,4f,6e),
	HX_("__currentFrameLabel",00,ed,fa,dc),
	HX_("__currentLabel",1b,76,7b,d7),
	HX_("__currentLabels",f8,e1,8b,b4),
	HX_("__enabled",61,55,7f,ff),
	HX_("__frameScripts",7b,3e,2f,ee),
	HX_("__frameTime",ba,d3,a9,68),
	HX_("__hasDown",bc,69,00,93),
	HX_("__hasOver",ae,02,4b,9a),
	HX_("__hasUp",35,ed,7f,8c),
	HX_("__instanceFields",0e,0b,63,af),
	HX_("__lastFrameScriptEval",fe,cc,8c,81),
	HX_("__lastFrameUpdate",40,24,e4,8a),
	HX_("__library",db,77,be,c0),
	HX_("__mouseIsDown",51,32,d5,9d),
	HX_("__movieClip",80,4b,47,46),
	HX_("__playing",4e,60,66,0b),
	HX_("__symbol",78,1a,0d,97),
	HX_("__timeElapsed",8f,80,8e,75),
	HX_("__totalFrames",6a,e3,33,bb),
	HX_("addFrameScript",77,21,7f,bb),
	HX_("gotoAndPlay",08,65,84,ef),
	HX_("gotoAndStop",16,27,86,f1),
	HX_("init",10,3b,bb,45),
	HX_("nextFrame",3a,92,c8,ad),
	HX_("play",f4,2d,5a,4a),
	HX_("prevFrame",3a,18,da,f1),
	HX_("stop",02,f0,5b,4c),
	HX_("enterFrame",f5,03,50,02),
	HX_("__updateFrameScript",6f,ef,01,3d),
	HX_("__updateSymbol",61,d9,61,0f),
	HX_("__evaluateFrameScripts",74,ac,75,85),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getNextFrame",e4,b1,df,dd),
	HX_("__goto",c3,fc,61,f3),
	HX_("__resolveFrameReference",ca,06,cb,71),
	HX_("__sortDepths",2e,e3,01,03),
	HX_("__updateDisplayObject",b8,53,1d,d8),
	HX_("__updateFrameLabel",10,a5,51,08),
	HX_("__updateInstanceFields",f7,5a,5e,c5),
	::String(null()) };

static void AnimateTimeline_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnimateTimeline_obj::_hx___useParentFPS,"__useParentFPS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnimateTimeline_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnimateTimeline_obj::_hx___useParentFPS,"__useParentFPS");
};

#endif

hx::Class AnimateTimeline_obj::__mClass;

static ::String AnimateTimeline_obj_sStaticFields[] = {
	HX_("__useParentFPS",b8,6a,a7,0f),
	::String(null())
};

void AnimateTimeline_obj::__register()
{
	AnimateTimeline_obj _hx_dummy;
	AnimateTimeline_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.formats.animate.AnimateTimeline",13,e1,ea,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AnimateTimeline_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AnimateTimeline_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AnimateTimeline_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AnimateTimeline_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnimateTimeline_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimateTimeline_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimateTimeline_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AnimateTimeline_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f8a75a205e437484_51_boot)
HXDLIN(  51)		_hx___useParentFPS = false;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace animate
