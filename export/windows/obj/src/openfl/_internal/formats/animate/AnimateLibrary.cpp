// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_graphics_Image
#include <lime/app/Promise_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateBitmapSymbol
#include <openfl/_internal/formats/animate/AnimateBitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateButtonSymbol
#include <openfl/_internal/formats/animate/AnimateButtonSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateDynamicTextSymbol
#include <openfl/_internal/formats/animate/AnimateDynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFontSymbol
#include <openfl/_internal/formats/animate/AnimateFontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFrame
#include <openfl/_internal/formats/animate/AnimateFrame.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFrameObject
#include <openfl/_internal/formats/animate/AnimateFrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateLibrary
#include <openfl/_internal/formats/animate/AnimateLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateShapeSymbol
#include <openfl/_internal/formats/animate/AnimateShapeSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateSpriteSymbol
#include <openfl/_internal/formats/animate/AnimateSpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateStaticTextSymbol
#include <openfl/_internal/formats/animate/AnimateStaticTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateSymbol
#include <openfl/_internal/formats/animate/AnimateSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_FilterType
#include <openfl/_internal/formats/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_ShapeCommand
#include <openfl/_internal/formats/swf/ShapeCommand.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_52_new,"openfl._internal.formats.animate.AnimateLibrary","new",0x844f561b,"openfl._internal.formats.animate.AnimateLibrary.new","openfl/_internal/formats/animate/AnimateLibrary.hx",52,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_80_exists,"openfl._internal.formats.animate.AnimateLibrary","exists",0x0fc09f01,"openfl._internal.formats.animate.AnimateLibrary.exists","openfl/_internal/formats/animate/AnimateLibrary.hx",80,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_106_getImage,"openfl._internal.formats.animate.AnimateLibrary","getImage",0x871f034a,"openfl._internal.formats.animate.AnimateLibrary.getImage","openfl/_internal/formats/animate/AnimateLibrary.hx",106,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_141_getMovieClip,"openfl._internal.formats.animate.AnimateLibrary","getMovieClip",0xf2c30a0f,"openfl._internal.formats.animate.AnimateLibrary.getMovieClip","openfl/_internal/formats/animate/AnimateLibrary.hx",141,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_167_isLocal,"openfl._internal.formats.animate.AnimateLibrary","isLocal",0xaa06ec5c,"openfl._internal.formats.animate.AnimateLibrary.isLocal","openfl/_internal/formats/animate/AnimateLibrary.hx",167,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_238_load,"openfl._internal.formats.animate.AnimateLibrary","load",0x3fd1180b,"openfl._internal.formats.animate.AnimateLibrary.load","openfl/_internal/formats/animate/AnimateLibrary.hx",238,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_183_load,"openfl._internal.formats.animate.AnimateLibrary","load",0x3fd1180b,"openfl._internal.formats.animate.AnimateLibrary.load","openfl/_internal/formats/animate/AnimateLibrary.hx",183,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_173_load,"openfl._internal.formats.animate.AnimateLibrary","load",0x3fd1180b,"openfl._internal.formats.animate.AnimateLibrary.load","openfl/_internal/formats/animate/AnimateLibrary.hx",173,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_282_load,"openfl._internal.formats.animate.AnimateLibrary","load",0x3fd1180b,"openfl._internal.formats.animate.AnimateLibrary.load","openfl/_internal/formats/animate/AnimateLibrary.hx",282,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_283_load,"openfl._internal.formats.animate.AnimateLibrary","load",0x3fd1180b,"openfl._internal.formats.animate.AnimateLibrary.load","openfl/_internal/formats/animate/AnimateLibrary.hx",283,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_293_loadImage,"openfl._internal.formats.animate.AnimateLibrary","loadImage",0x11bb6f50,"openfl._internal.formats.animate.AnimateLibrary.loadImage","openfl/_internal/formats/animate/AnimateLibrary.hx",293,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_310_loadImage,"openfl._internal.formats.animate.AnimateLibrary","loadImage",0x11bb6f50,"openfl._internal.formats.animate.AnimateLibrary.loadImage","openfl/_internal/formats/animate/AnimateLibrary.hx",310,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_309_loadImage,"openfl._internal.formats.animate.AnimateLibrary","loadImage",0x11bb6f50,"openfl._internal.formats.animate.AnimateLibrary.loadImage","openfl/_internal/formats/animate/AnimateLibrary.hx",309,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_336_unload,"openfl._internal.formats.animate.AnimateLibrary","unload",0xb56d2224,"openfl._internal.formats.animate.AnimateLibrary.unload","openfl/_internal/formats/animate/AnimateLibrary.hx",336,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_355___copyChannel,"openfl._internal.formats.animate.AnimateLibrary","__copyChannel",0x874adbe9,"openfl._internal.formats.animate.AnimateLibrary.__copyChannel","openfl/_internal/formats/animate/AnimateLibrary.hx",355,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_371___fromManifest,"openfl._internal.formats.animate.AnimateLibrary","__fromManifest",0xe3af087e,"openfl._internal.formats.animate.AnimateLibrary.__fromManifest","openfl/_internal/formats/animate/AnimateLibrary.hx",371,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_387___load,"openfl._internal.formats.animate.AnimateLibrary","__load",0x46907e6b,"openfl._internal.formats.animate.AnimateLibrary.__load","openfl/_internal/formats/animate/AnimateLibrary.hx",387,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_394___loadImage,"openfl._internal.formats.animate.AnimateLibrary","__loadImage",0xffacecf0,"openfl._internal.formats.animate.AnimateLibrary.__loadImage","openfl/_internal/formats/animate/AnimateLibrary.hx",394,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_399___parseBitmap,"openfl._internal.formats.animate.AnimateLibrary","__parseBitmap",0xd0ad1add,"openfl._internal.formats.animate.AnimateLibrary.__parseBitmap","openfl/_internal/formats/animate/AnimateLibrary.hx",399,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_410___parseButton,"openfl._internal.formats.animate.AnimateLibrary","__parseButton",0xb9816ce0,"openfl._internal.formats.animate.AnimateLibrary.__parseButton","openfl/_internal/formats/animate/AnimateLibrary.hx",410,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_423___parseDynamicText,"openfl._internal.formats.animate.AnimateLibrary","__parseDynamicText",0x05d25a1e,"openfl._internal.formats.animate.AnimateLibrary.__parseDynamicText","openfl/_internal/formats/animate/AnimateLibrary.hx",423,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_451___parseFont,"openfl._internal.formats.animate.AnimateLibrary","__parseFont",0xf273313d,"openfl._internal.formats.animate.AnimateLibrary.__parseFont","openfl/_internal/formats/animate/AnimateLibrary.hx",451,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_520___parseMatrix,"openfl._internal.formats.animate.AnimateLibrary","__parseMatrix",0x9b69412f,"openfl._internal.formats.animate.AnimateLibrary.__parseMatrix","openfl/_internal/formats/animate/AnimateLibrary.hx",520,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_524___parseShape,"openfl._internal.formats.animate.AnimateLibrary","__parseShape",0xa9e30ff3,"openfl._internal.formats.animate.AnimateLibrary.__parseShape","openfl/_internal/formats/animate/AnimateLibrary.hx",524,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_573___parseSprite,"openfl._internal.formats.animate.AnimateLibrary","__parseSprite",0xa336e6f3,"openfl._internal.formats.animate.AnimateLibrary.__parseSprite","openfl/_internal/formats/animate/AnimateLibrary.hx",573,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_621___parseStaticText,"openfl._internal.formats.animate.AnimateLibrary","__parseStaticText",0x7df1de69,"openfl._internal.formats.animate.AnimateLibrary.__parseStaticText","openfl/_internal/formats/animate/AnimateLibrary.hx",621,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_631___pixel,"openfl._internal.formats.animate.AnimateLibrary","__pixel",0xc1929ea1,"openfl._internal.formats.animate.AnimateLibrary.__pixel","openfl/_internal/formats/animate/AnimateLibrary.hx",631,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_99_get,"openfl._internal.formats.animate.AnimateLibrary","get",0x844a0651,"openfl._internal.formats.animate.AnimateLibrary.get","openfl/_internal/formats/animate/AnimateLibrary.hx",99,0x5678a0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_0a1d3644f9a738b9_34_boot,"openfl._internal.formats.animate.AnimateLibrary","boot",0x39350217,"openfl._internal.formats.animate.AnimateLibrary.boot","openfl/_internal/formats/animate/AnimateLibrary.hx",34,0x5678a0f1)
namespace openfl{
namespace _internal{
namespace formats{
namespace animate{

void AnimateLibrary_obj::__construct(::String id,::String uuid){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_52_new)
HXLINE(  53)		super::__construct();
HXLINE(  55)		this->id = id;
HXLINE(  57)		::String _hx_tmp;
HXDLIN(  57)		if (hx::IsNotNull( uuid )) {
HXLINE(  57)			_hx_tmp = uuid;
            		}
            		else {
HXLINE(  57)			_hx_tmp = id;
            		}
HXDLIN(  57)		this->instanceID = _hx_tmp;
HXLINE(  59)		this->alphaCheck =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  60)		this->bitmapClassNames =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  65)		this->rootPath = HX_("",00,00,00,00);
HXLINE(  68)		if (hx::IsNull( ::openfl::_internal::formats::animate::AnimateLibrary_obj::instances )) {
HXLINE(  68)			::openfl::_internal::formats::animate::AnimateLibrary_obj::instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  69)		::openfl::_internal::formats::animate::AnimateLibrary_obj::instances->set(uuid,hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic AnimateLibrary_obj::__CreateEmpty() { return new AnimateLibrary_obj; }

void *AnimateLibrary_obj::_hx_vtable = 0;

Dynamic AnimateLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AnimateLibrary_obj > _hx_result = new AnimateLibrary_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AnimateLibrary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x425552e3) {
		if (inClassId<=(int)0x34644188) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x34644188;
		} else {
			return inClassId==(int)0x425552e3;
		}
	} else {
		return inClassId==(int)0x5869209f;
	}
}

bool AnimateLibrary_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_80_exists)
HXLINE(  81)		if (hx::IsNotNull( this->symbols )) {
HXLINE(  83)			bool _hx_tmp;
HXDLIN(  83)			if ((id == HX_("",00,00,00,00))) {
HXLINE(  83)				_hx_tmp = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            			}
            			else {
HXLINE(  83)				_hx_tmp = false;
            			}
HXDLIN(  83)			if (_hx_tmp) {
HXLINE(  85)				return true;
            			}
HXLINE(  88)			bool _hx_tmp1;
HXDLIN(  88)			if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  88)				_hx_tmp1 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            			}
            			else {
HXLINE(  88)				_hx_tmp1 = true;
            			}
HXDLIN(  88)			if (_hx_tmp1) {
HXLINE(  90)				if (hx::IsNotNull( this->symbolsByClassName )) {
HXLINE(  90)					return this->symbolsByClassName->exists(id);
            				}
            				else {
HXLINE(  90)					return false;
            				}
            			}
            		}
HXLINE(  94)		return this->super::exists(id,type);
            	}


 ::lime::graphics::Image AnimateLibrary_obj::getImage(::String id){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_106_getImage)
HXLINE( 107)		if (this->bitmapClassNames->exists(id)) {
HXLINE( 109)			id = this->bitmapClassNames->get_string(id);
            		}
HXLINE( 114)		if (!(this->alphaCheck->exists(id))) {
HXLINE( 116)			{
HXLINE( 116)				int _g = 0;
HXDLIN( 116)				::Array< ::Dynamic> _g1 = this->bitmapSymbols;
HXDLIN( 116)				while((_g < _g1->length)){
HXLINE( 116)					 ::openfl::_internal::formats::animate::AnimateBitmapSymbol bitmapSymbol = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::animate::AnimateBitmapSymbol >();
HXDLIN( 116)					_g = (_g + 1);
HXLINE( 118)					bool _hx_tmp;
HXDLIN( 118)					if ((bitmapSymbol->path == id)) {
HXLINE( 118)						_hx_tmp = hx::IsNotNull( bitmapSymbol->alpha );
            					}
            					else {
HXLINE( 118)						_hx_tmp = false;
            					}
HXDLIN( 118)					if (_hx_tmp) {
HXLINE( 120)						 ::lime::graphics::Image image = this->super::getImage(id);
HXLINE( 121)						 ::lime::graphics::Image alpha = this->super::getImage(bitmapSymbol->alpha);
HXLINE( 123)						this->_hx___copyChannel(image,alpha);
HXLINE( 125)						this->cachedImages->set(id,image);
HXLINE( 126)						this->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 127)						this->alphaCheck->set(id,true);
HXLINE( 129)						return image;
            					}
            				}
            			}
HXLINE( 132)			this->alphaCheck->set(id,true);
            		}
HXLINE( 135)		return this->super::getImage(id);
            	}


 ::openfl::display::MovieClip AnimateLibrary_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_141_getMovieClip)
HXLINE( 142)		if (hx::IsNull( this->symbols )) {
HXLINE( 142)			return null();
            		}
HXLINE( 144)		if ((id == HX_("",00,00,00,00))) {
HXLINE( 146)			return Dynamic( this->root->_hx___createObject(hx::ObjectPtr<OBJ_>(this))).StaticCast<  ::openfl::display::MovieClip >();
            		}
            		else {
HXLINE( 150)			 ::openfl::_internal::formats::animate::AnimateSymbol symbol = ( ( ::openfl::_internal::formats::animate::AnimateSymbol)(this->symbolsByClassName->get(id)) );
HXLINE( 151)			if (hx::IsNotNull( symbol )) {
HXLINE( 153)				if (::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::formats::animate::AnimateSpriteSymbol >())) {
HXLINE( 155)					return Dynamic( hx::TCast<  ::openfl::_internal::formats::animate::AnimateSpriteSymbol >::cast(symbol)->_hx___createObject(hx::ObjectPtr<OBJ_>(this))).StaticCast<  ::openfl::display::MovieClip >();
            				}
            			}
            		}
HXLINE( 160)		return null();
            	}


bool AnimateLibrary_obj::isLocal(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_167_isLocal)
HXDLIN( 167)		return true;
            	}


 ::lime::app::Future AnimateLibrary_obj::load(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::openfl::_internal::formats::animate::AnimateLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::_internal::formats::animate::AnimateLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetLibrary _){
            				HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_238_load)
HXLINE( 239)				_gthis->preloading = false;
HXLINE( 240)				promise->complete(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_183_load)
HXLINE( 184)			_gthis->cachedText->set(_gthis->id,data);
HXLINE( 186)			 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,data)->doParse();
HXLINE( 187)			 ::Dynamic version =  ::Dynamic(json->__Field(HX_("version",18,e7,f1,7c),hx::paccDynamic));
HXLINE( 188)			_gthis->frameRate = ( (Float)(json->__Field(HX_("frameRate",ad,11,25,39),hx::paccDynamic)) );
HXLINE( 190)			int rootIndex = ( (int)(json->__Field(HX_("root",22,ee,ae,4b),hx::paccDynamic)) );
HXLINE( 191)			::cpp::VirtualArray symbolData = ( (::cpp::VirtualArray)(json->__Field(HX_("symbols",1b,be,1b,13),hx::paccDynamic)) );
HXLINE( 193)			 ::Dynamic data1;
HXDLIN( 193)			int type;
HXDLIN( 193)			 ::openfl::_internal::formats::animate::AnimateSymbol symbol = null();
HXLINE( 194)			 ::openfl::_internal::formats::animate::AnimateBitmapSymbol bitmapSymbol;
HXDLIN( 194)			 ::openfl::_internal::formats::animate::AnimateSpriteSymbol spriteSymbol;
HXLINE( 196)			_gthis->symbols =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 197)			_gthis->symbolsByClassName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 198)			_gthis->bitmapSymbols = ::Array_obj< ::Dynamic>::__new();
HXLINE( 200)			{
HXLINE( 200)				int _g = 0;
HXDLIN( 200)				int _g1 = symbolData->get_length();
HXDLIN( 200)				while((_g < _g1)){
HXLINE( 200)					_g = (_g + 1);
HXDLIN( 200)					int i = (_g - 1);
HXLINE( 202)					data1 = symbolData->__get(i);
HXLINE( 203)					if (hx::IsNull( data1 )) {
HXLINE( 203)						continue;
            					}
HXLINE( 204)					type = ( (int)(data1->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 206)					switch((int)(type)){
            						case (int)0: {
HXLINE( 209)							bitmapSymbol = _gthis->_hx___parseBitmap(data1);
HXLINE( 210)							_gthis->bitmapSymbols->push(bitmapSymbol);
HXLINE( 211)							if (hx::IsNotNull( bitmapSymbol->className )) {
HXLINE( 211)								_gthis->bitmapClassNames->set(bitmapSymbol->className,bitmapSymbol->path);
            							}
HXLINE( 212)							symbol = bitmapSymbol;
            						}
            						break;
            						case (int)1: {
HXLINE( 214)							symbol = _gthis->_hx___parseButton(data1);
            						}
            						break;
            						case (int)2: {
HXLINE( 216)							symbol = _gthis->_hx___parseDynamicText(data1);
            						}
            						break;
            						case (int)3: {
HXLINE( 218)							symbol = _gthis->_hx___parseFont(data1);
            						}
            						break;
            						case (int)4: {
HXLINE( 220)							symbol = _gthis->_hx___parseShape(data1);
            						}
            						break;
            						case (int)5: {
HXLINE( 222)							spriteSymbol = _gthis->_hx___parseSprite(data1);
HXLINE( 223)							if ((i == rootIndex)) {
HXLINE( 223)								_gthis->root = spriteSymbol;
            							}
HXLINE( 224)							symbol = spriteSymbol;
            						}
            						break;
            						case (int)6: {
HXLINE( 226)							symbol = _gthis->_hx___parseStaticText(data1);
            						}
            						break;
            						default:{
            						}
            					}
HXLINE( 230)					if (hx::IsNull( symbol )) {
HXLINE( 230)						continue;
            					}
HXLINE( 231)					_gthis->symbols->set(symbol->id,symbol);
HXLINE( 232)					if (hx::IsNotNull( symbol->className )) {
HXLINE( 232)						_gthis->symbolsByClassName->set(symbol->className,symbol);
            					}
            				}
            			}
HXLINE( 237)			_gthis->_hx___load()->onProgress(promise->progress_dyn())->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(_gthis,promise)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_173_load)
HXLINE( 172)		 ::openfl::_internal::formats::animate::AnimateLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 174)		if (hx::IsNotNull( this->id )) {
HXLINE( 176)			this->preload->set(this->id,true);
            		}
HXLINE( 179)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 180)		this->preloading = true;
HXLINE( 182)		 ::Dynamic onComplete =  ::Dynamic(new _hx_Closure_1(_gthis,promise));
HXLINE( 244)		bool _hx_tmp;
HXDLIN( 244)		if (!(this->exists(this->id,HX_("TEXT",ad,94,ba,37)))) {
HXLINE( 244)			_hx_tmp = this->exists(this->id,HX_("BINARY",01,68,8e,9f));
            		}
            		else {
HXLINE( 244)			_hx_tmp = true;
            		}
HXDLIN( 244)		if (_hx_tmp) {
HXLINE( 261)			this->loadText(this->id)->onError(promise->error_dyn())->onComplete(onComplete);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::openfl::net::URLLoader,loader, ::Dynamic,onComplete) HXARGC(1)
            			void _hx_run( ::openfl::events::Event _1){
            				HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_282_load)
HXLINE( 282)				onComplete(loader->data);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::openfl::events::IOErrorEvent e){
            				HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_283_load)
HXLINE( 283)				promise->error(e);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 265)			{
HXLINE( 265)				 ::Dynamic id = this->paths->keys();
HXDLIN( 265)				while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 265)					::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 267)					this->preload->set(id1,true);
            				}
            			}
HXLINE( 270)			::String path = null();
HXLINE( 272)			if (this->paths->exists(this->id)) {
HXLINE( 274)				path = this->paths->get_string(this->id);
            			}
            			else {
HXLINE( 278)				bool path1;
HXDLIN( 278)				if (hx::IsNotNull( this->rootPath )) {
HXLINE( 278)					path1 = (this->rootPath != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 278)					path1 = false;
            				}
HXDLIN( 278)				if (path1) {
HXLINE( 278)					path = ((this->rootPath + HX_("/",2f,00,00,00)) + this->id);
            				}
            				else {
HXLINE( 278)					path = this->id;
            				}
            			}
HXLINE( 281)			 ::openfl::net::URLLoader loader =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE( 282)			loader->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_2(loader,onComplete)),null(),null(),null());
HXLINE( 283)			loader->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_3(promise)),null(),null(),null());
HXLINE( 284)			loader->load( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,path));
            		}
HXLINE( 287)		return promise->future;
            	}


 ::lime::app::Future AnimateLibrary_obj::loadImage(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_293_loadImage)
HXLINE( 292)		 ::openfl::_internal::formats::animate::AnimateLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 294)		if (this->bitmapClassNames->exists(id)) {
HXLINE( 296)			id = this->bitmapClassNames->get_string(id);
            		}
HXLINE( 299)		bool _hx_tmp;
HXDLIN( 299)		if (!(this->preloading)) {
HXLINE( 299)			_hx_tmp = !(this->alphaCheck->exists(id));
            		}
            		else {
HXLINE( 299)			_hx_tmp = false;
            		}
HXDLIN( 299)		if (_hx_tmp) {
HXLINE( 301)			int _g = 0;
HXDLIN( 301)			::Array< ::Dynamic> _g1 = this->bitmapSymbols;
HXDLIN( 301)			while((_g < _g1->length)){
HXLINE( 301)				 ::openfl::_internal::formats::animate::AnimateBitmapSymbol bitmapSymbol = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::animate::AnimateBitmapSymbol >();
HXDLIN( 301)				_g = (_g + 1);
HXLINE( 303)				bool _hx_tmp1;
HXDLIN( 303)				if ((bitmapSymbol->path == id)) {
HXLINE( 303)					_hx_tmp1 = hx::IsNotNull( bitmapSymbol->alpha );
            				}
            				else {
HXLINE( 303)					_hx_tmp1 = false;
            				}
HXDLIN( 303)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_internal::formats::animate::AnimateLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::formats::animate::AnimateBitmapSymbol,bitmapSymbol) HXARGC(1)
            					void _hx_run( ::lime::graphics::Image image){
            						HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::String,id, ::openfl::_internal::formats::animate::AnimateLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::formats::animate::AnimateBitmapSymbol,bitmapSymbol, ::lime::graphics::Image,image) HXARGC(1)
            						void _hx_run( ::lime::graphics::Image alpha){
            							HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_310_loadImage)
HXLINE( 311)							_gthis->_hx___copyChannel(image,alpha);
HXLINE( 313)							_gthis->cachedImages->set(id,image);
HXLINE( 314)							_gthis->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 315)							_gthis->alphaCheck->set(id,true);
HXLINE( 317)							promise->complete(image);
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_309_loadImage)
HXLINE( 309)						_gthis->_hx___loadImage(bitmapSymbol->alpha)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(id,_gthis,promise,bitmapSymbol,image)));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 305)					 ::lime::app::Promise_lime_graphics_Image promise =  ::lime::app::Promise_lime_graphics_Image_obj::__alloc( HX_CTX );
HXLINE( 307)					this->_hx___loadImage(id)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_1(id,_gthis,promise,bitmapSymbol)));
HXLINE( 321)					return promise->future;
            				}
            				else {
HXLINE( 325)					this->alphaCheck->set(id,true);
            				}
            			}
            		}
HXLINE( 330)		return this->super::loadImage(id);
            	}


void AnimateLibrary_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_336_unload)
HXLINE( 337)		::openfl::_internal::formats::animate::AnimateLibrary_obj::instances->remove(this->uuid);
HXLINE( 338)		if (hx::IsNull( this->symbols )) {
HXLINE( 338)			return;
            		}
HXLINE( 346)		{
HXLINE( 346)			int _g = 0;
HXDLIN( 346)			::Array< ::Dynamic> _g1 = this->bitmapSymbols;
HXDLIN( 346)			while((_g < _g1->length)){
HXLINE( 346)				 ::openfl::_internal::formats::animate::AnimateBitmapSymbol bitmapSymbol = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::animate::AnimateBitmapSymbol >();
HXDLIN( 346)				_g = (_g + 1);
HXLINE( 348)				::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,bitmapSymbol->path);
            			}
            		}
            	}


void AnimateLibrary_obj::_hx___copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image alpha){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_355___copyChannel)
HXLINE( 356)		if (hx::IsNotNull( alpha )) {
HXLINE( 358)			 ::lime::math::Rectangle _hx_tmp = alpha->get_rect();
HXDLIN( 358)			image->copyChannel(alpha,_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
            		}
HXLINE( 361)		image->buffer->premultiplied = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AnimateLibrary_obj,_hx___copyChannel,(void))

void AnimateLibrary_obj::_hx___fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_371___fromManifest)
HXLINE( 372)		this->rootPath = manifest->rootPath;
HXLINE( 373)		this->super::_hx___fromManifest(manifest);
HXLINE( 375)		this->bytesTotal = 0;
HXLINE( 377)		{
HXLINE( 377)			 ::Dynamic id = this->paths->keys();
HXDLIN( 377)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 377)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 379)				 ::openfl::_internal::formats::animate::AnimateLibrary _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 379)				int _hx_tmp1 = _hx_tmp->bytesTotal;
HXDLIN( 379)				_hx_tmp->bytesTotal = (_hx_tmp1 + this->sizes->get(id1));
            			}
            		}
            	}


 ::lime::app::Future AnimateLibrary_obj::_hx___load(){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_387___load)
HXDLIN( 387)		return this->super::load();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnimateLibrary_obj,_hx___load,return )

 ::lime::app::Future AnimateLibrary_obj::_hx___loadImage(::String id){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_394___loadImage)
HXDLIN( 394)		return this->super::loadImage(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___loadImage,return )

 ::openfl::_internal::formats::animate::AnimateBitmapSymbol AnimateLibrary_obj::_hx___parseBitmap( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_399___parseBitmap)
HXLINE( 400)		 ::openfl::_internal::formats::animate::AnimateBitmapSymbol symbol =  ::openfl::_internal::formats::animate::AnimateBitmapSymbol_obj::__alloc( HX_CTX );
HXLINE( 401)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 402)		symbol->className = ( (::String)(data->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) );
HXLINE( 403)		symbol->alpha = ( (::String)(data->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)) );
HXLINE( 404)		symbol->path = ( (::String)(data->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXLINE( 405)		symbol->smooth = data->__Field(HX_("smooth",2e,08,6b,07),hx::paccDynamic);
HXLINE( 406)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseBitmap,return )

 ::openfl::_internal::formats::animate::AnimateButtonSymbol AnimateLibrary_obj::_hx___parseButton( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_410___parseButton)
HXLINE( 411)		 ::openfl::_internal::formats::animate::AnimateButtonSymbol symbol =  ::openfl::_internal::formats::animate::AnimateButtonSymbol_obj::__alloc( HX_CTX );
HXLINE( 412)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 413)		symbol->className = ( (::String)(data->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) );
HXLINE( 415)		symbol->downState = this->_hx___parseSprite( ::Dynamic(data->__Field(HX_("downState",4f,4a,21,9a),hx::paccDynamic)));
HXLINE( 416)		symbol->hitState = this->_hx___parseSprite( ::Dynamic(data->__Field(HX_("hitState",be,d2,6a,c3),hx::paccDynamic)));
HXLINE( 417)		symbol->overState = this->_hx___parseSprite( ::Dynamic(data->__Field(HX_("overState",1d,04,cd,e7),hx::paccDynamic)));
HXLINE( 418)		symbol->upState = this->_hx___parseSprite( ::Dynamic(data->__Field(HX_("upState",b6,95,80,e0),hx::paccDynamic)));
HXLINE( 419)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseButton,return )

 ::openfl::_internal::formats::animate::AnimateDynamicTextSymbol AnimateLibrary_obj::_hx___parseDynamicText( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_423___parseDynamicText)
HXLINE( 424)		 ::openfl::_internal::formats::animate::AnimateDynamicTextSymbol symbol =  ::openfl::_internal::formats::animate::AnimateDynamicTextSymbol_obj::__alloc( HX_CTX );
HXLINE( 425)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 426)		symbol->align = ( (::String)(data->__Field(HX_("align",c5,56,91,21),hx::paccDynamic)) );
HXLINE( 427)		symbol->border = ( (bool)(data->__Field(HX_("border",ec,4c,1a,64),hx::paccDynamic)) );
HXLINE( 428)		symbol->color = data->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic);
HXLINE( 429)		symbol->fontHeight = ( (int)(data->__Field(HX_("fontHeight",16,9f,9f,b6),hx::paccDynamic)) );
HXLINE( 430)		symbol->fontID = ( (int)(data->__Field(HX_("fontID",6a,ef,ee,fa),hx::paccDynamic)) );
HXLINE( 431)		symbol->fontName = ( (::String)(data->__Field(HX_("fontName",ba,8f,7d,cb),hx::paccDynamic)) );
HXLINE( 432)		symbol->html = ( (bool)(data->__Field(HX_("html",6b,95,16,45),hx::paccDynamic)) );
HXLINE( 433)		symbol->indent = data->__Field(HX_("indent",6c,0c,f3,93),hx::paccDynamic);
HXLINE( 434)		symbol->input = ( (bool)(data->__Field(HX_("input",0a,c4,1d,be),hx::paccDynamic)) );
HXLINE( 435)		symbol->leading = data->__Field(HX_("leading",c6,32,61,09),hx::paccDynamic);
HXLINE( 436)		symbol->leftMargin = data->__Field(HX_("leftMargin",95,2b,7e,e9),hx::paccDynamic);
HXLINE( 437)		symbol->multiline = ( (bool)(data->__Field(HX_("multiline",ed,d2,11,9e),hx::paccDynamic)) );
HXLINE( 438)		symbol->password = ( (bool)(data->__Field(HX_("password",1b,23,d0,48),hx::paccDynamic)) );
HXLINE( 439)		symbol->rightMargin = data->__Field(HX_("rightMargin",2a,3d,f2,23),hx::paccDynamic);
HXLINE( 440)		symbol->selectable = ( (bool)(data->__Field(HX_("selectable",96,b6,2a,c4),hx::paccDynamic)) );
HXLINE( 441)		symbol->text = ( (::String)(data->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)) );
HXLINE( 442)		symbol->wordWrap = ( (bool)(data->__Field(HX_("wordWrap",b4,14,db,00),hx::paccDynamic)) );
HXLINE( 443)		symbol->x = (( (Float)( ::Dynamic(data->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic))->__GetItem(0)) ) / ( (Float)(20) ));
HXLINE( 444)		symbol->y = (( (Float)( ::Dynamic(data->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic))->__GetItem(1)) ) / ( (Float)(20) ));
HXLINE( 445)		symbol->width = (( (Float)( ::Dynamic(data->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic))->__GetItem(2)) ) / ( (Float)(20) ));
HXLINE( 446)		symbol->height = (( (Float)( ::Dynamic(data->__Field(HX_("rect",24,4d,a7,4b),hx::paccDynamic))->__GetItem(3)) ) / ( (Float)(20) ));
HXLINE( 447)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseDynamicText,return )

 ::openfl::_internal::formats::animate::AnimateFontSymbol AnimateLibrary_obj::_hx___parseFont( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_451___parseFont)
HXLINE( 452)		 ::openfl::_internal::formats::animate::AnimateFontSymbol symbol =  ::openfl::_internal::formats::animate::AnimateFontSymbol_obj::__alloc( HX_CTX );
HXLINE( 453)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 454)		symbol->advances = ( (::Array< int >)(data->__Field(HX_("advances",b1,69,7b,3b),hx::paccDynamic)) );
HXLINE( 455)		symbol->ascent = ( (int)(data->__Field(HX_("ascent",5a,d9,6f,41),hx::paccDynamic)) );
HXLINE( 456)		symbol->bold = ( (bool)(data->__Field(HX_("bold",85,81,1b,41),hx::paccDynamic)) );
HXLINE( 457)		symbol->codes = ( (::Array< int >)(data->__Field(HX_("codes",a6,56,56,4a),hx::paccDynamic)) );
HXLINE( 458)		symbol->descent = ( (int)(data->__Field(HX_("descent",3a,ae,3f,19),hx::paccDynamic)) );
HXLINE( 459)		symbol->italic = ( (bool)(data->__Field(HX_("italic",f0,2e,64,06),hx::paccDynamic)) );
HXLINE( 460)		symbol->leading = ( (int)(data->__Field(HX_("leading",c6,32,61,09),hx::paccDynamic)) );
HXLINE( 461)		symbol->name = ( (::String)(data->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 462)		if (::Reflect_obj::hasField(data,HX_("glyphs",47,f9,58,ae))) {
HXLINE( 464)			symbol->glyphs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 465)			::Array< ::Dynamic> glyphs = ( (::Array< ::Dynamic>)(data->__Field(HX_("glyphs",47,f9,58,ae),hx::paccDynamic)) );
HXLINE( 466)			{
HXLINE( 466)				int _g = 0;
HXDLIN( 466)				int _g1 = glyphs->length;
HXDLIN( 466)				while((_g < _g1)){
HXLINE( 466)					_g = (_g + 1);
HXDLIN( 466)					int glyphIndex = (_g - 1);
HXLINE( 468)					::cpp::VirtualArray data1 = ::cpp::VirtualArray( glyphs->__get(glyphIndex));
HXLINE( 469)					if (hx::IsNotNull( data1 )) {
HXLINE( 471)						::Array< ::Dynamic> commands = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 472)						symbol->glyphs[glyphIndex] = commands;
HXLINE( 473)						int i = 0;
HXLINE( 475)						while((i < data1->get_length())){
HXLINE( 477)							 ::Dynamic _hx_switch_0 = data1->__get(i);
            							if (  (_hx_switch_0==0) ){
HXLINE( 480)								 ::Dynamic data2 = data1->__get((i + 1));
HXDLIN( 480)								 ::openfl::geom::Matrix _hx_tmp = this->_hx___parseMatrix(( (::Array< int >)(data1->__get((i + 2))) ));
HXDLIN( 480)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginBitmapFill(data2,_hx_tmp,data1->__get((i + 3)),data1->__get((i + 4))));
HXLINE( 481)								i = (i + 5);
HXLINE( 479)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==1) ){
HXLINE( 483)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginFill(data1->__get((i + 1)),data1->__get((i + 2))));
HXLINE( 484)								i = (i + 3);
HXLINE( 482)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==2) ){
HXLINE( 486)								 ::Dynamic data3 = data1->__get((i + 1));
HXDLIN( 486)								 ::Dynamic data4 = data1->__get((i + 2));
HXDLIN( 486)								 ::Dynamic data5 = data1->__get((i + 3));
HXDLIN( 486)								 ::Dynamic data6 = data1->__get((i + 4));
HXDLIN( 486)								 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___parseMatrix(( (::Array< int >)(data1->__get((i + 5))) ));
HXDLIN( 486)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginGradientFill(data3,data4,data5,data6,_hx_tmp1,data1->__get((i + 6)),data1->__get((i + 7)),data1->__get((i + 8))));
HXLINE( 488)								i = (i + 9);
HXLINE( 485)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==3) ){
HXLINE( 490)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineStyle(null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 491)								i = (i + 1);
HXLINE( 489)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==4) ){
HXLINE( 493)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::CurveTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 3))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 4))) )) ) / ( (Float)(20) ))));
HXLINE( 494)								i = (i + 5);
HXLINE( 492)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==5) ){
HXLINE( 496)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::EndFill_dyn());
HXLINE( 497)								i = (i + 1);
HXLINE( 495)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==6) ){
HXLINE( 499)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineStyle(data1->__get((i + 1)),data1->__get((i + 2)),data1->__get((i + 3)),data1->__get((i + 4)),data1->__get((i + 5)),data1->__get((i + 6)),data1->__get((i + 7)),data1->__get((i + 8))));
HXLINE( 501)								i = (i + 9);
HXLINE( 498)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==7) ){
HXLINE( 503)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) ))));
HXLINE( 504)								i = (i + 3);
HXLINE( 502)								goto _hx_goto_29;
            							}
            							if (  (_hx_switch_0==8) ){
HXLINE( 506)								commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::MoveTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) ))));
HXLINE( 507)								i = (i + 3);
HXLINE( 505)								goto _hx_goto_29;
            							}
            							/* default */{
HXLINE( 509)								i = (i + 1);
            							}
            							_hx_goto_29:;
            						}
            					}
            				}
            			}
            		}
HXLINE( 515)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseFont,return )

 ::openfl::geom::Matrix AnimateLibrary_obj::_hx___parseMatrix(::Array< int > values){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_520___parseMatrix)
HXDLIN( 520)		if (hx::IsNotNull( values )) {
HXDLIN( 520)			return  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,values->__get(0),values->__get(1),values->__get(2),values->__get(3),(( (Float)(values->__get(4)) ) / ( (Float)(20) )),(( (Float)(values->__get(5)) ) / ( (Float)(20) )));
            		}
            		else {
HXDLIN( 520)			return null();
            		}
HXDLIN( 520)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseMatrix,return )

 ::openfl::_internal::formats::animate::AnimateShapeSymbol AnimateLibrary_obj::_hx___parseShape( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_524___parseShape)
HXLINE( 525)		 ::openfl::_internal::formats::animate::AnimateShapeSymbol symbol =  ::openfl::_internal::formats::animate::AnimateShapeSymbol_obj::__alloc( HX_CTX );
HXLINE( 526)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 527)		symbol->commands = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 529)		::cpp::VirtualArray data1 = ( (::cpp::VirtualArray)(data->__Field(HX_("commands",c8,b0,55,be),hx::paccDynamic)) );
HXLINE( 530)		::Array< ::Dynamic> commands = symbol->commands;
HXLINE( 531)		int i = 0;
HXLINE( 533)		while((i < data1->get_length())){
HXLINE( 535)			 ::Dynamic _hx_switch_0 = data1->__get(i);
            			if (  (_hx_switch_0==0) ){
HXLINE( 538)				 ::Dynamic data2 = data1->__get((i + 1));
HXDLIN( 538)				 ::openfl::geom::Matrix _hx_tmp = this->_hx___parseMatrix(( (::Array< int >)(data1->__get((i + 2))) ));
HXDLIN( 538)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginBitmapFill(data2,_hx_tmp,data1->__get((i + 3)),data1->__get((i + 4))));
HXLINE( 539)				i = (i + 5);
HXLINE( 537)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==1) ){
HXLINE( 541)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginFill(data1->__get((i + 1)),data1->__get((i + 2))));
HXLINE( 542)				i = (i + 3);
HXLINE( 540)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==2) ){
HXLINE( 544)				 ::Dynamic data3 = data1->__get((i + 1));
HXDLIN( 544)				 ::Dynamic data4 = data1->__get((i + 2));
HXDLIN( 544)				 ::Dynamic data5 = data1->__get((i + 3));
HXDLIN( 544)				 ::Dynamic data6 = data1->__get((i + 4));
HXDLIN( 544)				 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___parseMatrix(( (::Array< int >)(data1->__get((i + 5))) ));
HXDLIN( 544)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::BeginGradientFill(data3,data4,data5,data6,_hx_tmp1,data1->__get((i + 6)),data1->__get((i + 7)),data1->__get((i + 8))));
HXLINE( 546)				i = (i + 9);
HXLINE( 543)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==3) ){
HXLINE( 548)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineStyle(null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 549)				i = (i + 1);
HXLINE( 547)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==4) ){
HXLINE( 551)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::CurveTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 3))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 4))) )) ) / ( (Float)(20) ))));
HXLINE( 552)				i = (i + 5);
HXLINE( 550)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==5) ){
HXLINE( 554)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::EndFill_dyn());
HXLINE( 555)				i = (i + 1);
HXLINE( 553)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==6) ){
HXLINE( 557)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineStyle(data1->__get((i + 1)),data1->__get((i + 2)),data1->__get((i + 3)),data1->__get((i + 4)),data1->__get((i + 5)),data1->__get((i + 6)),data1->__get((i + 7)),data1->__get((i + 8))));
HXLINE( 558)				i = (i + 9);
HXLINE( 556)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==7) ){
HXLINE( 560)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::LineTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) ))));
HXLINE( 561)				i = (i + 3);
HXLINE( 559)				goto _hx_goto_33;
            			}
            			if (  (_hx_switch_0==8) ){
HXLINE( 563)				commands->push(::openfl::_internal::formats::swf::ShapeCommand_obj::MoveTo((( (Float)(( (int)(data1->__get((i + 1))) )) ) / ( (Float)(20) )),(( (Float)(( (int)(data1->__get((i + 2))) )) ) / ( (Float)(20) ))));
HXLINE( 564)				i = (i + 3);
HXLINE( 562)				goto _hx_goto_33;
            			}
            			/* default */{
HXLINE( 566)				i = (i + 1);
            			}
            			_hx_goto_33:;
            		}
HXLINE( 569)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseShape,return )

 ::openfl::_internal::formats::animate::AnimateSpriteSymbol AnimateLibrary_obj::_hx___parseSprite( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_573___parseSprite)
HXLINE( 574)		 ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol =  ::openfl::_internal::formats::animate::AnimateSpriteSymbol_obj::__alloc( HX_CTX );
HXLINE( 575)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 576)		symbol->className = ( (::String)(data->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) );
HXLINE( 577)		symbol->baseClassName = ( (::String)(data->__Field(HX_("baseClassName",52,80,94,dc),hx::paccDynamic)) );
HXLINE( 578)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 578)		if (hx::IsNotNull( data->__Field(HX_("scale9Grid",d5,50,22,8f),hx::paccDynamic) )) {
HXLINE( 578)			_hx_tmp =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(( (Float)( ::Dynamic(data->__Field(HX_("scale9Grid",d5,50,22,8f),hx::paccDynamic))->__GetItem(0)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(data->__Field(HX_("scale9Grid",d5,50,22,8f),hx::paccDynamic))->__GetItem(1)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(data->__Field(HX_("scale9Grid",d5,50,22,8f),hx::paccDynamic))->__GetItem(2)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(data->__Field(HX_("scale9Grid",d5,50,22,8f),hx::paccDynamic))->__GetItem(3)) ) / ( (Float)(20) )));
            		}
            		else {
HXLINE( 578)			_hx_tmp = null();
            		}
HXDLIN( 578)		symbol->scale9Grid = _hx_tmp;
HXLINE( 580)		::cpp::VirtualArray frames = ( (::cpp::VirtualArray)(data->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)) );
HXLINE( 581)		 ::openfl::_internal::formats::animate::AnimateFrame frame;
HXDLIN( 581)		::cpp::VirtualArray objects;
HXDLIN( 581)		 ::openfl::_internal::formats::animate::AnimateFrameObject object;
HXLINE( 584)		{
HXLINE( 584)			int _g = 0;
HXDLIN( 584)			while((_g < frames->get_length())){
HXLINE( 584)				 ::Dynamic frameData = frames->__get(_g);
HXDLIN( 584)				_g = (_g + 1);
HXLINE( 586)				frame =  ::openfl::_internal::formats::animate::AnimateFrame_obj::__alloc( HX_CTX );
HXLINE( 587)				frame->label = ( (::String)(frameData->__Field(HX_("label",f4,0d,af,6f),hx::paccDynamic)) );
HXLINE( 590)				objects = ( (::cpp::VirtualArray)(frameData->__Field(HX_("objects",d4,68,4f,82),hx::paccDynamic)) );
HXLINE( 591)				bool _hx_tmp1;
HXDLIN( 591)				if (hx::IsNotNull( objects )) {
HXLINE( 591)					_hx_tmp1 = (objects->get_length() > 0);
            				}
            				else {
HXLINE( 591)					_hx_tmp1 = false;
            				}
HXDLIN( 591)				if (_hx_tmp1) {
HXLINE( 593)					frame->objects = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 594)					{
HXLINE( 594)						int _g1 = 0;
HXDLIN( 594)						while((_g1 < objects->get_length())){
HXLINE( 594)							 ::Dynamic objectData = objects->__get(_g1);
HXDLIN( 594)							_g1 = (_g1 + 1);
HXLINE( 596)							object =  ::openfl::_internal::formats::animate::AnimateFrameObject_obj::__alloc( HX_CTX );
HXLINE( 597)							object->blendMode = objectData->__Field(HX_("blendMode",54,e4,37,0c),hx::paccDynamic);
HXLINE( 598)							object->cacheAsBitmap = objectData->__Field(HX_("cacheAsBitmap",e3,82,0f,6a),hx::paccDynamic);
HXLINE( 599)							object->clipDepth = ( (int)(objectData->__Field(HX_("clipDepth",13,40,41,f5),hx::paccDynamic)) );
HXLINE( 600)							 ::openfl::geom::ColorTransform _hx_tmp2;
HXDLIN( 600)							if (hx::IsNotNull( objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic) )) {
HXLINE( 600)								_hx_tmp2 =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(0)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(1)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(2)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(3)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(4)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(5)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(6)) ) / ( (Float)(20) )),(( (Float)( ::Dynamic(objectData->__Field(HX_("colorTransform",89,d7,3f,ad),hx::paccDynamic))->__GetItem(7)) ) / ( (Float)(20) )));
            							}
            							else {
HXLINE( 600)								_hx_tmp2 = null();
            							}
HXDLIN( 600)							object->colorTransform = _hx_tmp2;
HXLINE( 604)							object->depth = ( (int)(objectData->__Field(HX_("depth",03,f1,29,d7),hx::paccDynamic)) );
HXLINE( 605)							object->filters = ( (::Array< ::Dynamic>)(objectData->__Field(HX_("filters",bb,a1,46,09),hx::paccDynamic)) );
HXLINE( 606)							object->id = ( (int)(objectData->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 607)							object->matrix = this->_hx___parseMatrix(( (::Array< int >)(objectData->__Field(HX_("matrix",41,36,c8,bb),hx::paccDynamic)) ));
HXLINE( 608)							object->name = ( (::String)(objectData->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 609)							object->symbol = ( (int)(objectData->__Field(HX_("symbol",58,af,dd,ee),hx::paccDynamic)) );
HXLINE( 610)							object->type = ( (int)(objectData->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 611)							object->visible = objectData->__Field(HX_("visible",72,78,24,a3),hx::paccDynamic);
HXLINE( 612)							frame->objects->push(object);
            						}
            					}
            				}
HXLINE( 615)				symbol->frames->push(frame);
            			}
            		}
HXLINE( 617)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseSprite,return )

 ::openfl::_internal::formats::animate::AnimateStaticTextSymbol AnimateLibrary_obj::_hx___parseStaticText( ::Dynamic data){
            	HX_GC_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_621___parseStaticText)
HXLINE( 622)		 ::openfl::_internal::formats::animate::AnimateStaticTextSymbol symbol =  ::openfl::_internal::formats::animate::AnimateStaticTextSymbol_obj::__alloc( HX_CTX );
HXLINE( 623)		symbol->id = ( (int)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE( 624)		symbol->matrix = this->_hx___parseMatrix(( (::Array< int >)(data->__Field(HX_("matrix",41,36,c8,bb),hx::paccDynamic)) ));
HXLINE( 625)		symbol->records = ( (::Array< ::Dynamic>)(data->__Field(HX_("records",c2,48,fb,30),hx::paccDynamic)) );
HXLINE( 626)		return symbol;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___parseStaticText,return )

Float AnimateLibrary_obj::_hx___pixel(int value){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_631___pixel)
HXDLIN( 631)		return (( (Float)(value) ) / ( (Float)(20) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,_hx___pixel,return )

 ::haxe::ds::StringMap AnimateLibrary_obj::instances;

 ::openfl::_internal::formats::animate::AnimateLibrary AnimateLibrary_obj::get(::String uuid){
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_99_get)
HXLINE( 100)		if (hx::IsNull( ::openfl::_internal::formats::animate::AnimateLibrary_obj::instances )) {
HXLINE( 100)			return null();
            		}
HXLINE( 101)		return ( ( ::openfl::_internal::formats::animate::AnimateLibrary)(::openfl::_internal::formats::animate::AnimateLibrary_obj::instances->get(uuid)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnimateLibrary_obj,get,return )


hx::ObjectPtr< AnimateLibrary_obj > AnimateLibrary_obj::__new(::String id,::String uuid) {
	hx::ObjectPtr< AnimateLibrary_obj > __this = new AnimateLibrary_obj();
	__this->__construct(id,uuid);
	return __this;
}

hx::ObjectPtr< AnimateLibrary_obj > AnimateLibrary_obj::__alloc(hx::Ctx *_hx_ctx,::String id,::String uuid) {
	AnimateLibrary_obj *__this = (AnimateLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AnimateLibrary_obj), true, "openfl._internal.formats.animate.AnimateLibrary"));
	*(void **)__this = AnimateLibrary_obj::_hx_vtable;
	__this->__construct(id,uuid);
	return __this;
}

AnimateLibrary_obj::AnimateLibrary_obj()
{
}

void AnimateLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnimateLibrary);
	HX_MARK_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_MARK_MEMBER_NAME(bitmapClassNames,"bitmapClassNames");
	HX_MARK_MEMBER_NAME(bitmapSymbols,"bitmapSymbols");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(instanceID,"instanceID");
	HX_MARK_MEMBER_NAME(preloading,"preloading");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_MEMBER_NAME(symbols,"symbols");
	HX_MARK_MEMBER_NAME(symbolsByClassName,"symbolsByClassName");
	HX_MARK_MEMBER_NAME(uuid,"uuid");
	 ::openfl::utils::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AnimateLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_VISIT_MEMBER_NAME(bitmapClassNames,"bitmapClassNames");
	HX_VISIT_MEMBER_NAME(bitmapSymbols,"bitmapSymbols");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(instanceID,"instanceID");
	HX_VISIT_MEMBER_NAME(preloading,"preloading");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
	HX_VISIT_MEMBER_NAME(symbols,"symbols");
	HX_VISIT_MEMBER_NAME(symbolsByClassName,"symbolsByClassName");
	HX_VISIT_MEMBER_NAME(uuid,"uuid");
	 ::openfl::utils::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AnimateLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		if (HX_FIELD_EQ(inName,"uuid") ) { return hx::Val( uuid ); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"__load") ) { return hx::Val( _hx___load_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"symbols") ) { return hx::Val( symbols ); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"__pixel") ) { return hx::Val( _hx___pixel_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath ); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { return hx::Val( alphaCheck ); }
		if (HX_FIELD_EQ(inName,"instanceID") ) { return hx::Val( instanceID ); }
		if (HX_FIELD_EQ(inName,"preloading") ) { return hx::Val( preloading ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__loadImage") ) { return hx::Val( _hx___loadImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseFont") ) { return hx::Val( _hx___parseFont_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return hx::Val( getMovieClip_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseShape") ) { return hx::Val( _hx___parseShape_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitmapSymbols") ) { return hx::Val( bitmapSymbols ); }
		if (HX_FIELD_EQ(inName,"__copyChannel") ) { return hx::Val( _hx___copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseBitmap") ) { return hx::Val( _hx___parseBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseButton") ) { return hx::Val( _hx___parseButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseMatrix") ) { return hx::Val( _hx___parseMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"__parseSprite") ) { return hx::Val( _hx___parseSprite_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__fromManifest") ) { return hx::Val( _hx___fromManifest_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bitmapClassNames") ) { return hx::Val( bitmapClassNames ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__parseStaticText") ) { return hx::Val( _hx___parseStaticText_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"symbolsByClassName") ) { return hx::Val( symbolsByClassName ); }
		if (HX_FIELD_EQ(inName,"__parseDynamicText") ) { return hx::Val( _hx___parseDynamicText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AnimateLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { outValue = ( instances ); return true; }
	}
	return false;
}

hx::Val AnimateLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::openfl::_internal::formats::animate::AnimateSpriteSymbol >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uuid") ) { uuid=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"symbols") ) { symbols=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { alphaCheck=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanceID") ) { instanceID=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preloading") ) { preloading=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitmapSymbols") ) { bitmapSymbols=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bitmapClassNames") ) { bitmapClassNames=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"symbolsByClassName") ) { symbolsByClassName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AnimateLibrary_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { instances=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void AnimateLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alphaCheck",8a,ec,5b,66));
	outFields->push(HX_("bitmapClassNames",3f,b1,4e,60));
	outFields->push(HX_("bitmapSymbols",ec,41,a9,c3));
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("instanceID",b0,2e,18,6c));
	outFields->push(HX_("preloading",b9,08,ef,a9));
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("rootPath",e7,b8,88,e1));
	outFields->push(HX_("symbols",1b,be,1b,13));
	outFields->push(HX_("symbolsByClassName",71,53,ec,f9));
	outFields->push(HX_("uuid",3b,1a,af,4d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AnimateLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AnimateLibrary_obj,alphaCheck),HX_("alphaCheck",8a,ec,5b,66)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AnimateLibrary_obj,bitmapClassNames),HX_("bitmapClassNames",3f,b1,4e,60)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AnimateLibrary_obj,bitmapSymbols),HX_("bitmapSymbols",ec,41,a9,c3)},
	{hx::fsFloat,(int)offsetof(AnimateLibrary_obj,frameRate),HX_("frameRate",ad,11,25,39)},
	{hx::fsString,(int)offsetof(AnimateLibrary_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsString,(int)offsetof(AnimateLibrary_obj,instanceID),HX_("instanceID",b0,2e,18,6c)},
	{hx::fsBool,(int)offsetof(AnimateLibrary_obj,preloading),HX_("preloading",b9,08,ef,a9)},
	{hx::fsObject /*  ::openfl::_internal::formats::animate::AnimateSpriteSymbol */ ,(int)offsetof(AnimateLibrary_obj,root),HX_("root",22,ee,ae,4b)},
	{hx::fsString,(int)offsetof(AnimateLibrary_obj,rootPath),HX_("rootPath",e7,b8,88,e1)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(AnimateLibrary_obj,symbols),HX_("symbols",1b,be,1b,13)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(AnimateLibrary_obj,symbolsByClassName),HX_("symbolsByClassName",71,53,ec,f9)},
	{hx::fsString,(int)offsetof(AnimateLibrary_obj,uuid),HX_("uuid",3b,1a,af,4d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AnimateLibrary_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AnimateLibrary_obj::instances,HX_("instances",3e,83,1a,4b)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AnimateLibrary_obj_sMemberFields[] = {
	HX_("alphaCheck",8a,ec,5b,66),
	HX_("bitmapClassNames",3f,b1,4e,60),
	HX_("bitmapSymbols",ec,41,a9,c3),
	HX_("frameRate",ad,11,25,39),
	HX_("id",db,5b,00,00),
	HX_("instanceID",b0,2e,18,6c),
	HX_("preloading",b9,08,ef,a9),
	HX_("root",22,ee,ae,4b),
	HX_("rootPath",e7,b8,88,e1),
	HX_("symbols",1b,be,1b,13),
	HX_("symbolsByClassName",71,53,ec,f9),
	HX_("uuid",3b,1a,af,4d),
	HX_("exists",dc,1d,e0,bf),
	HX_("getImage",e5,2e,40,1d),
	HX_("getMovieClip",2a,9f,71,27),
	HX_("isLocal",21,6d,76,15),
	HX_("load",26,9a,b7,47),
	HX_("loadImage",55,6b,a0,d8),
	HX_("unload",ff,a0,8c,65),
	HX_("__copyChannel",6e,be,5e,6b),
	HX_("__fromManifest",59,5a,01,91),
	HX_("__load",46,fd,af,f6),
	HX_("__loadImage",35,b4,cc,06),
	HX_("__parseBitmap",62,fd,c0,b4),
	HX_("__parseButton",65,4f,95,9d),
	HX_("__parseDynamicText",79,35,e2,51),
	HX_("__parseFont",82,f8,92,f9),
	HX_("__parseMatrix",b4,23,7d,7f),
	HX_("__parseShape",0e,a5,91,de),
	HX_("__parseSprite",78,c9,4a,87),
	HX_("__parseStaticText",6e,e7,e9,8a),
	HX_("__pixel",66,1f,02,2d),
	::String(null()) };

static void AnimateLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnimateLibrary_obj::instances,"instances");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnimateLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnimateLibrary_obj::instances,"instances");
};

#endif

hx::Class AnimateLibrary_obj::__mClass;

static ::String AnimateLibrary_obj_sStaticFields[] = {
	HX_("instances",3e,83,1a,4b),
	HX_("get",96,80,4e,00),
	::String(null())
};

void AnimateLibrary_obj::__register()
{
	AnimateLibrary_obj _hx_dummy;
	AnimateLibrary_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.formats.animate.AnimateLibrary",a9,ac,95,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AnimateLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &AnimateLibrary_obj::__SetStatic;
	__mClass->mMarkFunc = AnimateLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AnimateLibrary_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AnimateLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AnimateLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnimateLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnimateLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnimateLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AnimateLibrary_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a1d3644f9a738b9_34_boot)
HXDLIN(  34)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace animate
