// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageFileFormat
#include <lime/graphics/ImageFileFormat.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_BitmapDataPool
#include <openfl/_internal/renderer/BitmapDataPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#include <openfl/_internal/renderer/cairo/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DRenderer
#include <openfl/_internal/renderer/context3D/Context3DRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_AbstractNoise
#include <openfl/_internal/utils/AbstractNoise.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_250_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",250,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_354_applyFilter,"openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",354,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_406_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",406,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_452_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",452,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_472_compare,"openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",472,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_638_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",638,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_705_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",705,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_790_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",790,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_843_disposeImage,"openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",843,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_922_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",922,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1114_drawWithQuality,"openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",1114,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1140_encode,"openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",1140,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1186_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",1186,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1218_floodFill,"openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",1218,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1401_generateFilterRect,"openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",1401,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1413_getIndexBuffer,"openfl.display.BitmapData","getIndexBuffer",0x8fe8ca27,"openfl.display.BitmapData.getIndexBuffer","openfl/display/BitmapData.hx",1413,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1631_getVertexBuffer,"openfl.display.BitmapData","getVertexBuffer",0xd07f316f,"openfl.display.BitmapData.getVertexBuffer","openfl/display/BitmapData.hx",1631,0xdd12d5b9)
static const int _hx_array_data_9a4112a3_20[] = {
	(int)3,(int)6,(int)13,(int)16,
};
static const int _hx_array_data_9a4112a3_21[] = {
	(int)2,(int)12,
};
static const int _hx_array_data_9a4112a3_22[] = {
	(int)1,(int)4,
};
static const int _hx_array_data_9a4112a3_23[] = {
	(int)7,(int)10,(int)18,(int)20,
};
static const int _hx_array_data_9a4112a3_24[] = {
	(int)5,(int)8,
};
static const int _hx_array_data_9a4112a3_25[] = {
	(int)11,(int)21,
};
static const int _hx_array_data_9a4112a3_26[] = {
	(int)15,(int)17,(int)25,(int)28,
};
static const int _hx_array_data_9a4112a3_27[] = {
	(int)14,(int)24,
};
static const int _hx_array_data_9a4112a3_28[] = {
	(int)19,(int)22,(int)29,(int)32,
};
static const int _hx_array_data_9a4112a3_29[] = {
	(int)23,(int)33,
};
static const int _hx_array_data_9a4112a3_30[] = {
	(int)27,(int)30,
};
static const int _hx_array_data_9a4112a3_31[] = {
	(int)31,(int)34,
};
static const int _hx_array_data_9a4112a3_32[] = {
	(int)1,(int)3,(int)5,(int)7,(int)13,(int)15,(int)18,(int)19,(int)25,(int)27,(int)29,(int)31,
};
static const int _hx_array_data_9a4112a3_33[] = {
	(int)4,(int)6,(int)8,(int)10,(int)16,(int)17,(int)20,(int)22,(int)28,(int)30,(int)32,(int)34,
};
static const int _hx_array_data_9a4112a3_34[] = {
	(int)2,(int)3,(int)6,(int)7,(int)10,(int)11,(int)14,(int)15,(int)17,(int)19,(int)22,(int)23,
};
static const int _hx_array_data_9a4112a3_35[] = {
	(int)12,(int)13,(int)16,(int)18,(int)20,(int)21,(int)24,(int)25,(int)28,(int)29,(int)32,(int)33,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2032_getColorBoundsRect,"openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",2032,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2073_getPixel,"openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",2073,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2105_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",2105,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2124_getPixels,"openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",2124,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2147_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",2147,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2171_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",2171,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2249_getVector,"openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",2249,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2272_histogram,"openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",2272,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2318_hitTest,"openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",2318,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2525_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",2525,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2566_merge,"openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",2566,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2610_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2610,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2602_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2602,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2700_paletteMap,"openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",2700,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2798_perlinNoise,"openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",2798,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2814_scroll,"openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",2814,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2837_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",2837,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2876_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",2876,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2903_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",2903,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2924_setVector,"openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",2924,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2987_threshold,"openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",2987,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3019_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",3019,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3022___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",3022,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3039___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",3039,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3047___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",3047,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3060___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",3060,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3071___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",3071,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3094___fromSymbol,"openfl.display.BitmapData","__fromSymbol",0x68a3802d,"openfl.display.BitmapData.__fromSymbol","openfl/display/BitmapData.hx",3094,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3149___getBounds,"openfl.display.BitmapData","__getBounds",0x4b2a0640,"openfl.display.BitmapData.__getBounds","openfl/display/BitmapData.hx",3149,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3187___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",3187,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3184___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",3184,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3200___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",3200,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3197___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",3197,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3219___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",3219,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3216___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",3216,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3229___resize,"openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",3229,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3240___setUVRect,"openfl.display.BitmapData","__setUVRect",0x4b14ffdc,"openfl.display.BitmapData.__setUVRect","openfl/display/BitmapData.hx",3240,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3273___setVertex,"openfl.display.BitmapData","__setVertex",0x69a5473b,"openfl.display.BitmapData.__setVertex","openfl/display/BitmapData.hx",3273,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3283___setVertices,"openfl.display.BitmapData","__setVertices",0x15870f90,"openfl.display.BitmapData.__setVertices","openfl/display/BitmapData.hx",3283,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3291___setUOffsets,"openfl.display.BitmapData","__setUOffsets",0x7435a922,"openfl.display.BitmapData.__setUOffsets","openfl/display/BitmapData.hx",3291,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3299___setVOffsets,"openfl.display.BitmapData","__setVOffsets",0xad681b41,"openfl.display.BitmapData.__setVOffsets","openfl/display/BitmapData.hx",3299,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3306___sync,"openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",3306,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3314___update,"openfl.display.BitmapData","__update",0x580cd054,"openfl.display.BitmapData.__update","openfl/display/BitmapData.hx",3314,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3318___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",3318,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1242_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",1242,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1270_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",1270,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1318_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",1318,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1340_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",1340,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1361_fromTexture,"openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",1361,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2457_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",2457,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2455_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",2455,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2481_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",2481,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2480_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",2480,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2510_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",2510,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2508_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",2508,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_130_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",130,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_132_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",132,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_134_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",134,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_136_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",136,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_140_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",140,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
            		bool transparent = __o_transparent.Default(true);
            		int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_250_new)
HXLINE( 251)		this->transparent = transparent;
HXLINE( 258)		if ((width < 0)) {
HXLINE( 258)			width = 0;
            		}
            		else {
HXLINE( 258)			width = width;
            		}
HXLINE( 259)		if ((height < 0)) {
HXLINE( 259)			height = 0;
            		}
            		else {
HXLINE( 259)			height = height;
            		}
HXLINE( 261)		this->width = width;
HXLINE( 262)		this->height = height;
HXLINE( 263)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height);
HXLINE( 265)		this->_hx___textureWidth = width;
HXLINE( 266)		this->_hx___textureHeight = height;
HXLINE( 268)		bool _hx_tmp;
HXDLIN( 268)		if ((width > 0)) {
HXLINE( 268)			_hx_tmp = (height > 0);
            		}
            		else {
HXLINE( 268)			_hx_tmp = false;
            		}
HXDLIN( 268)		if (_hx_tmp) {
HXLINE( 270)			if (transparent) {
HXLINE( 272)				if (((fillColor & -16777216) == 0)) {
HXLINE( 274)					fillColor = 0;
            				}
            			}
            			else {
HXLINE( 279)				fillColor = (-16777216 | (fillColor & 16777215));
            			}
HXLINE( 282)			fillColor = ((fillColor << 8) | (hx::UShr(fillColor,24) & 255));
HXLINE( 286)			 ::Dynamic elements = ((width * height) * 4);
HXDLIN( 286)			 ::haxe::io::Bytes buffer = null();
HXDLIN( 286)			::cpp::VirtualArray array = null();
HXDLIN( 286)			 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 286)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 286)			 ::Dynamic len = null();
HXDLIN( 286)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 286)			if (hx::IsNotNull( elements )) {
HXLINE( 286)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            			}
            			else {
HXLINE( 286)				if (hx::IsNotNull( array )) {
HXLINE( 286)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 286)					_this->byteOffset = 0;
HXDLIN( 286)					_this->length = array->get_length();
HXDLIN( 286)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 286)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 286)					_this->buffer = this2;
HXDLIN( 286)					_this->copyFromArray(array,null());
HXDLIN( 286)					this1 = _this;
            				}
            				else {
HXLINE( 286)					if (hx::IsNotNull( vector )) {
HXLINE( 286)						 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 286)						::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 286)						_this1->byteOffset = 0;
HXDLIN( 286)						_this1->length = array1->get_length();
HXDLIN( 286)						_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 286)						 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 286)						_this1->buffer = this3;
HXDLIN( 286)						_this1->copyFromArray(array1,null());
HXDLIN( 286)						this1 = _this1;
            					}
            					else {
HXLINE( 286)						if (hx::IsNotNull( view )) {
HXLINE( 286)							 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 286)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 286)							int srcLength = view->length;
HXDLIN( 286)							int srcByteOffset = view->byteOffset;
HXDLIN( 286)							int srcElementSize = view->bytesPerElement;
HXDLIN( 286)							int elementSize = _this2->bytesPerElement;
HXDLIN( 286)							if ((view->type == _this2->type)) {
HXLINE( 286)								int srcLength1 = srcData->length;
HXDLIN( 286)								int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 286)								 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 286)								_this2->buffer = this4;
HXDLIN( 286)								_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE( 286)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN( 286)							_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 286)							_this2->byteOffset = 0;
HXDLIN( 286)							_this2->length = srcLength;
HXDLIN( 286)							this1 = _this2;
            						}
            						else {
HXLINE( 286)							if (hx::IsNotNull( buffer )) {
HXLINE( 286)								 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 286)								int in_byteOffset = 0;
HXDLIN( 286)								if ((in_byteOffset < 0)) {
HXLINE( 286)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 286)								if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 286)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 286)								int bufferByteLength = buffer->length;
HXDLIN( 286)								int elementSize1 = _this3->bytesPerElement;
HXDLIN( 286)								int newByteLength = bufferByteLength;
HXDLIN( 286)								if (hx::IsNull( len )) {
HXLINE( 286)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 286)									if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 286)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 286)									if ((newByteLength < 0)) {
HXLINE( 286)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 286)									newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN( 286)									int newRange = (in_byteOffset + newByteLength);
HXDLIN( 286)									if ((newRange > bufferByteLength)) {
HXLINE( 286)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 286)								_this3->buffer = buffer;
HXDLIN( 286)								_this3->byteOffset = in_byteOffset;
HXDLIN( 286)								_this3->byteLength = newByteLength;
HXDLIN( 286)								_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 286)								this1 = _this3;
            							}
            							else {
HXLINE( 286)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            							}
            						}
            					}
            				}
            			}
HXDLIN( 286)			 ::lime::graphics::ImageBuffer buffer1 =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 287)			buffer1->format = 2;
HXLINE( 288)			buffer1->premultiplied = true;
HXLINE( 290)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer1,0,0,width,height,null(),null());
HXLINE( 292)			if ((fillColor != 0)) {
HXLINE( 294)				 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 294)				_hx_tmp1->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 314)			this->image->set_transparent(transparent);
HXLINE( 317)			this->_hx___isValid = true;
HXLINE( 318)			this->readable = true;
            		}
HXLINE( 321)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 322)		this->_hx___worldAlpha = ( (Float)(1) );
HXLINE( 323)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 324)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 325)		this->_hx___renderable = true;
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___getBounds,
	( void (hx::Object::*)(bool,bool))&::openfl::display::BitmapData_obj::_hx___update,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_354_applyFilter)
HXLINE( 355)		bool _hx_tmp;
HXDLIN( 355)		bool _hx_tmp1;
HXDLIN( 355)		if (!(!(this->readable))) {
HXLINE( 355)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 355)			_hx_tmp1 = true;
            		}
HXDLIN( 355)		if (!(_hx_tmp1)) {
HXLINE( 355)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 355)			_hx_tmp = true;
            		}
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 355)			return;
            		}
HXLINE( 359)		bool needSecondBitmapData = filter->_hx___needSecondBitmapData;
HXLINE( 360)		bool needCopyOfOriginal = filter->_hx___preserveObject;
HXLINE( 362)		 ::openfl::display::BitmapData bitmapData2 = null();
HXLINE( 363)		 ::openfl::display::BitmapData bitmapData3 = null();
HXLINE( 365)		if (needSecondBitmapData) {
HXLINE( 367)			bitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
            		}
            		else {
HXLINE( 371)			bitmapData2 = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 374)		if (needCopyOfOriginal) {
HXLINE( 376)			bitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
            		}
HXLINE( 379)		if (filter->_hx___preserveObject) {
HXLINE( 381)			bitmapData3->copyPixels(hx::ObjectPtr<OBJ_>(this),this->rect,destPoint,null(),null(),null());
            		}
HXLINE( 384)		 ::openfl::display::BitmapData lastBitmap = filter->_hx___applyFilter(bitmapData2,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
HXLINE( 386)		if (filter->_hx___preserveObject) {
HXLINE( 388)			lastBitmap->draw(bitmapData3,null(),null(),null(),null(),null());
            		}
HXLINE( 391)		bool _hx_tmp2;
HXDLIN( 391)		if (needSecondBitmapData) {
HXLINE( 391)			_hx_tmp2 = hx::IsEq( lastBitmap,bitmapData2 );
            		}
            		else {
HXLINE( 391)			_hx_tmp2 = false;
            		}
HXDLIN( 391)		if (_hx_tmp2) {
HXLINE( 393)			bitmapData2->image->version = this->image->version;
HXLINE( 394)			this->image = bitmapData2->image;
            		}
HXLINE( 397)		this->image->dirty = true;
HXLINE( 398)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_406_clone)
HXLINE( 408)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 410)		if (!(this->_hx___isValid)) {
HXLINE( 412)			bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,0);
            		}
            		else {
HXLINE( 414)			bool _hx_tmp;
HXDLIN( 414)			if (!(this->readable)) {
HXLINE( 414)				_hx_tmp = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 414)				_hx_tmp = false;
            			}
HXDLIN( 414)			if (_hx_tmp) {
HXLINE( 416)				bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,this->transparent,0);
HXLINE( 418)				bitmapData->width = this->width;
HXLINE( 419)				bitmapData->height = this->height;
HXLINE( 420)				bitmapData->_hx___textureWidth = this->_hx___textureWidth;
HXLINE( 421)				bitmapData->_hx___textureHeight = this->_hx___textureHeight;
HXLINE( 422)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 424)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 425)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 426)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 427)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 428)				bitmapData->_hx___isValid = true;
            			}
            			else {
HXLINE( 432)				 ::lime::graphics::Image bitmapData1 = this->image->clone();
HXDLIN( 432)				bitmapData = ::openfl::display::BitmapData_obj::fromImage(bitmapData1,this->transparent);
            			}
            		}
HXLINE( 435)		bitmapData->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 436)		bitmapData->_hx___renderTransform->copyFrom(this->_hx___renderTransform);
HXLINE( 438)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_452_colorTransform)
HXLINE( 453)		if (!(this->readable)) {
HXLINE( 453)			return;
            		}
HXLINE( 456)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 456)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 456)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_472_compare)
HXLINE( 474)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 476)			return 0;
            		}
            		else {
HXLINE( 478)			if (hx::IsNull( otherBitmapData )) {
HXLINE( 480)				return -1;
            			}
            			else {
HXLINE( 482)				bool _hx_tmp;
HXDLIN( 482)				if ((this->readable != false)) {
HXLINE( 482)					_hx_tmp = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 482)					_hx_tmp = true;
            				}
HXDLIN( 482)				if (_hx_tmp) {
HXLINE( 484)					return -2;
            				}
            				else {
HXLINE( 486)					if ((this->width != otherBitmapData->width)) {
HXLINE( 488)						return -3;
            					}
            					else {
HXLINE( 490)						if ((this->height != otherBitmapData->height)) {
HXLINE( 492)							return -4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 495)		bool _hx_tmp1;
HXDLIN( 495)		bool _hx_tmp2;
HXDLIN( 495)		if (hx::IsNotNull( this->image )) {
HXLINE( 495)			_hx_tmp2 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 495)			_hx_tmp2 = false;
            		}
HXDLIN( 495)		if (_hx_tmp2) {
HXLINE( 495)			int _hx_tmp3 = this->image->get_format();
HXDLIN( 495)			_hx_tmp1 = (_hx_tmp3 == otherBitmapData->image->get_format());
            		}
            		else {
HXLINE( 495)			_hx_tmp1 = false;
            		}
HXDLIN( 495)		if (_hx_tmp1) {
HXLINE( 497)			 ::lime::utils::ArrayBufferView bytes = this->image->get_data();
HXLINE( 498)			 ::lime::utils::ArrayBufferView otherBytes = otherBitmapData->image->get_data();
HXLINE( 499)			bool equal = true;
HXLINE( 501)			{
HXLINE( 501)				int _g = 0;
HXDLIN( 501)				int _g1 = bytes->length;
HXDLIN( 501)				while((_g < _g1)){
HXLINE( 501)					_g = (_g + 1);
HXDLIN( 501)					int i = (_g - 1);
HXLINE( 503)					int a = ( (int)(( ::__hxcpp_memory_get_byte(bytes->buffer->b,(bytes->byteOffset + i)) & 255)) );
HXDLIN( 503)					if (hx::IsNotEq( a,( ::__hxcpp_memory_get_byte(otherBytes->buffer->b,(otherBytes->byteOffset + i)) & 255) )) {
HXLINE( 505)						equal = false;
HXLINE( 506)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 510)			if (equal) {
HXLINE( 512)				return 0;
            			}
            		}
HXLINE( 516)		 ::openfl::display::BitmapData bitmapData = null();
HXLINE( 517)		bool foundDifference;
HXDLIN( 517)		int pixel;
HXDLIN( 517)		int otherPixel;
HXDLIN( 517)		int comparePixel;
HXDLIN( 517)		int r;
HXDLIN( 517)		int g;
HXDLIN( 517)		int b;
HXDLIN( 517)		int a1;
HXLINE( 526)		{
HXLINE( 526)			int _g2 = 0;
HXDLIN( 526)			int _g11 = this->height;
HXDLIN( 526)			while((_g2 < _g11)){
HXLINE( 526)				_g2 = (_g2 + 1);
HXDLIN( 526)				int y = (_g2 - 1);
HXLINE( 528)				{
HXLINE( 528)					int _g3 = 0;
HXDLIN( 528)					int _g12 = this->width;
HXDLIN( 528)					while((_g3 < _g12)){
HXLINE( 528)						_g3 = (_g3 + 1);
HXDLIN( 528)						int x = (_g3 - 1);
HXLINE( 530)						foundDifference = false;
HXLINE( 532)						pixel = this->getPixel32(x,y);
HXLINE( 533)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 534)						comparePixel = 0;
HXLINE( 536)						if ((pixel != otherPixel)) {
HXLINE( 538)							r = ((hx::UShr(pixel,16) & 255) - (hx::UShr(otherPixel,16) & 255));
HXLINE( 539)							g = ((hx::UShr(pixel,8) & 255) - (hx::UShr(otherPixel,8) & 255));
HXLINE( 540)							b = ((pixel & 255) - (otherPixel & 255));
HXLINE( 542)							if ((r < 0)) {
HXLINE( 542)								r = (r * -1);
            							}
HXLINE( 543)							if ((g < 0)) {
HXLINE( 543)								g = (g * -1);
            							}
HXLINE( 544)							if ((b < 0)) {
HXLINE( 544)								b = (b * -1);
            							}
HXLINE( 546)							bool _hx_tmp4;
HXDLIN( 546)							bool _hx_tmp5;
HXDLIN( 546)							if ((r == 0)) {
HXLINE( 546)								_hx_tmp5 = (g == 0);
            							}
            							else {
HXLINE( 546)								_hx_tmp5 = false;
            							}
HXDLIN( 546)							if (_hx_tmp5) {
HXLINE( 546)								_hx_tmp4 = (b == 0);
            							}
            							else {
HXLINE( 546)								_hx_tmp4 = false;
            							}
HXDLIN( 546)							if (_hx_tmp4) {
HXLINE( 548)								a1 = ((hx::UShr(pixel,24) & 255) - (hx::UShr(otherPixel,24) & 255));
HXLINE( 550)								if ((a1 != 0)) {
HXLINE( 552)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | 16711680) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 553)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | 65280) | ((comparePixel & 255) & 255));
HXLINE( 554)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | 255);
HXLINE( 555)									comparePixel = (((((a1 & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 557)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 562)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | ((r & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 563)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | ((g & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 564)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | (b & 255));
HXLINE( 565)								comparePixel = (((-16777216 | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 567)								foundDifference = true;
            							}
            						}
HXLINE( 571)						if (foundDifference) {
HXLINE( 573)							if (hx::IsNull( bitmapData )) {
HXLINE( 575)								bool bitmapData1;
HXDLIN( 575)								if (!(this->transparent)) {
HXLINE( 575)									bitmapData1 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 575)									bitmapData1 = true;
            								}
HXDLIN( 575)								bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,bitmapData1,0);
            							}
HXLINE( 578)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 583)		if (hx::IsNull( bitmapData )) {
HXLINE( 585)			return 0;
            		}
HXLINE( 588)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_638_copyChannel)
HXLINE( 639)		if (!(this->readable)) {
HXLINE( 639)			return;
            		}
HXLINE( 642)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 642)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 642)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 642)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 642)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 642)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 648)				return;
            			}
            		}
HXLINE( 651)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 651)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 651)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 651)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 651)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 651)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 657)				return;
            			}
            		}
HXLINE( 660)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 660)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 660)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 660)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_705_copyPixels)
HXLINE( 706)		bool _hx_tmp;
HXDLIN( 706)		if (!(!(this->readable))) {
HXLINE( 706)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 706)			_hx_tmp = true;
            		}
HXDLIN( 706)		if (_hx_tmp) {
HXLINE( 706)			return;
            		}
HXLINE( 757)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 759)			::openfl::display::BitmapData_obj::_hx___tempVector->x = alphaPoint->x;
HXLINE( 760)			::openfl::display::BitmapData_obj::_hx___tempVector->y = alphaPoint->y;
            		}
HXLINE( 763)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 763)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 763)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 763)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXLINE( 764)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 764)		if (hx::IsNotNull( alphaBitmapData )) {
HXLINE( 764)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 764)			_hx_tmp4 = null();
            		}
HXDLIN( 764)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 764)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 764)			_hx_tmp5 = ::openfl::display::BitmapData_obj::_hx___tempVector;
            		}
            		else {
HXLINE( 764)			_hx_tmp5 = null();
            		}
HXLINE( 763)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_790_dispose)
HXLINE( 791)		this->image = null();
HXLINE( 793)		this->width = 0;
HXLINE( 794)		this->height = 0;
HXLINE( 795)		this->rect = null();
HXLINE( 797)		this->_hx___isValid = false;
HXLINE( 798)		this->readable = false;
HXLINE( 800)		this->_hx___surface = null();
HXLINE( 802)		this->_hx___vertexBuffer = null();
HXLINE( 803)		this->_hx___framebuffer = null();
HXLINE( 804)		this->_hx___framebufferContext = null();
HXLINE( 805)		this->_hx___texture = null();
HXLINE( 806)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_843_disposeImage)
HXDLIN( 843)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_922_draw)
HXLINE( 923)		if (hx::IsNull( source )) {
HXLINE( 923)			return;
            		}
HXLINE( 925)		::openfl::display::IBitmapDrawable_obj::_hx___update(source,false,true);
HXLINE( 927)		 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 929)		transform->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 930)		transform->invert();
HXLINE( 932)		if (hx::IsNotNull( matrix )) {
HXLINE( 934)			transform->concat(matrix);
            		}
HXLINE( 937)		 ::openfl::geom::ColorTransform _colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 938)		_colorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 939)		_colorTransform->_hx___invert();
HXLINE( 941)		bool _hx_tmp;
HXDLIN( 941)		bool _hx_tmp1;
HXDLIN( 941)		if (!(this->readable)) {
HXLINE( 941)			_hx_tmp1 = hx::IsNotNull( this->_hx___texture );
            		}
            		else {
HXLINE( 941)			_hx_tmp1 = false;
            		}
HXDLIN( 941)		if (_hx_tmp1) {
HXLINE( 941)			_hx_tmp = hx::IsNotNull( ::openfl::display::BitmapData_obj::_hx___hardwareRenderer );
            		}
            		else {
HXLINE( 941)			_hx_tmp = false;
            		}
HXDLIN( 941)		if (_hx_tmp) {
HXLINE( 943)			if (hx::IsNull( this->_hx___textureContext )) {
HXLINE( 946)				this->_hx___textureContext = ::lime::app::Application_obj::current->_hx___window->context;
            			}
HXLINE( 949)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 951)				_colorTransform->_hx___combine(colorTransform);
            			}
HXLINE( 954)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___allowSmoothing = smoothing;
HXLINE( 955)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___overrideBlendMode = blendMode;
HXLINE( 957)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___worldTransform = transform;
HXLINE( 958)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE( 959)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 961)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___resize(this->width,this->height);
HXLINE( 963)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___drawBitmapData(hx::ObjectPtr<OBJ_>(this),source,clipRect);
            		}
            		else {
HXLINE( 968)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 970)				 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 971)				 ::openfl::geom::Matrix boundsMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 973)				::openfl::display::IBitmapDrawable_obj::_hx___getBounds(source,bounds,boundsMatrix);
HXLINE( 975)				int width = ::Math_obj::ceil(bounds->width);
HXLINE( 976)				int height = ::Math_obj::ceil(bounds->height);
HXLINE( 978)				boundsMatrix->tx = -(bounds->x);
HXLINE( 979)				boundsMatrix->ty = -(bounds->y);
HXLINE( 981)				 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXLINE( 982)				copy->draw(source,boundsMatrix,null(),null(),null(),null());
HXLINE( 984)				copy->colorTransform(copy->rect,colorTransform);
HXLINE( 985)				copy->_hx___renderTransform->identity();
HXLINE( 986)				copy->_hx___renderTransform->tx = bounds->x;
HXLINE( 987)				copy->_hx___renderTransform->ty = bounds->y;
HXLINE( 988)				copy->_hx___renderTransform->concat(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 989)				copy->_hx___worldAlpha = ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) );
HXLINE( 990)				copy->_hx___worldColorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 991)				source = copy;
HXLINE( 993)				::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE( 994)				::openfl::geom::Matrix_obj::_hx___pool->release(boundsMatrix);
            			}
HXLINE(1003)			if (hx::IsNull( ::openfl::display::BitmapData_obj::_hx___softwareRenderer )) {
HXLINE(1003)				::openfl::display::BitmapData_obj::_hx___softwareRenderer =  ::openfl::_internal::renderer::cairo::CairoRenderer_obj::__alloc( HX_CTX ,null());
            			}
HXLINE(1004)			 ::openfl::_internal::renderer::cairo::CairoRenderer renderer = ( ( ::openfl::_internal::renderer::cairo::CairoRenderer)(::openfl::display::BitmapData_obj::_hx___softwareRenderer) );
HXLINE(1005)			renderer->cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->getSurface());
HXLINE(1008)			renderer->_hx___allowSmoothing = smoothing;
HXLINE(1009)			renderer->_hx___overrideBlendMode = blendMode;
HXLINE(1011)			renderer->_hx___worldTransform = transform;
HXLINE(1012)			renderer->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE(1013)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE(1015)			renderer->_hx___drawBitmapData(hx::ObjectPtr<OBJ_>(this),source,clipRect);
            		}
HXLINE(1019)		::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing, ::Dynamic quality){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1114_drawWithQuality)
HXDLIN(1114)		bool _hx_tmp;
HXDLIN(1114)		if (hx::IsNotEq( quality,2 )) {
HXDLIN(1114)			_hx_tmp = smoothing;
            		}
            		else {
HXDLIN(1114)			_hx_tmp = false;
            		}
HXDLIN(1114)		this->draw(source,matrix,colorTransform,blendMode,clipRect,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1140_encode)
HXLINE(1142)		bool _hx_tmp;
HXDLIN(1142)		if (!(!(this->readable))) {
HXLINE(1142)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1142)			_hx_tmp = true;
            		}
HXDLIN(1142)		if (_hx_tmp) {
HXLINE(1142)			byteArray = null();
HXDLIN(1142)			return byteArray;
            		}
HXLINE(1143)		if (hx::IsNull( byteArray )) {
HXLINE(1143)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(1143)			byteArray = this1;
            		}
HXLINE(1145)		 ::lime::graphics::Image image = this->image;
HXLINE(1147)		if (!(rect->equals(this->rect))) {
HXLINE(1149)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(1150)			matrix->tx = ( (Float)(::Math_obj::round(-(rect->x))) );
HXLINE(1151)			matrix->ty = ( (Float)(::Math_obj::round(-(rect->y))) );
HXLINE(1153)			 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(rect->width),::Math_obj::ceil(rect->height),true,0);
HXLINE(1154)			bitmapData->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE(1156)			image = bitmapData->image;
HXLINE(1158)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
HXLINE(1161)		if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE(1163)			byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::PNG_dyn(),null())),0,0);
HXLINE(1164)			return byteArray;
            		}
            		else {
HXLINE(1166)			if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE(1168)				byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::JPEG_dyn(),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality)),0,0);
HXLINE(1169)				return byteArray;
            			}
            		}
HXLINE(1173)		byteArray = null();
HXDLIN(1173)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1186_fillRect)
HXLINE(1188)		if (hx::IsNull( rect )) {
HXLINE(1188)			return;
            		}
HXLINE(1190)		bool _hx_tmp;
HXDLIN(1190)		if (this->transparent) {
HXLINE(1190)			_hx_tmp = ((color & -16777216) == 0);
            		}
            		else {
HXLINE(1190)			_hx_tmp = false;
            		}
HXDLIN(1190)		if (_hx_tmp) {
HXLINE(1192)			color = 0;
            		}
HXLINE(1195)		bool _hx_tmp1;
HXDLIN(1195)		bool _hx_tmp2;
HXDLIN(1195)		if (!(this->readable)) {
HXLINE(1195)			_hx_tmp2 = hx::IsNotNull( this->_hx___texture );
            		}
            		else {
HXLINE(1195)			_hx_tmp2 = false;
            		}
HXDLIN(1195)		if (_hx_tmp2) {
HXLINE(1195)			_hx_tmp1 = hx::IsNotNull( ::openfl::display::BitmapData_obj::_hx___hardwareRenderer );
            		}
            		else {
HXLINE(1195)			_hx_tmp1 = false;
            		}
HXDLIN(1195)		if (_hx_tmp1) {
HXLINE(1197)			::openfl::display::BitmapData_obj::_hx___hardwareRenderer->_hx___fillRect(hx::ObjectPtr<OBJ_>(this),rect,color);
            		}
            		else {
HXLINE(1199)			if (this->readable) {
HXLINE(1201)				 ::lime::graphics::Image _hx_tmp3 = this->image;
HXDLIN(1201)				_hx_tmp3->fillRect(rect->_hx___toLimeRectangle(),color,1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1218_floodFill)
HXLINE(1220)		if (!(this->readable)) {
HXLINE(1220)			return;
            		}
HXLINE(1221)		this->image->floodFill(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1401_generateFilterRect)
HXDLIN(1401)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::openfl::display3D::IndexBuffer3D BitmapData_obj::getIndexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1413_getIndexBuffer)
HXLINE(1414)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1416)		bool _hx_tmp;
HXDLIN(1416)		bool _hx_tmp1;
HXDLIN(1416)		bool _hx_tmp2;
HXDLIN(1416)		if (hx::IsNotNull( this->_hx___indexBuffer )) {
HXLINE(1416)			_hx_tmp2 = hx::IsNotEq( this->_hx___indexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1416)			_hx_tmp2 = true;
            		}
HXDLIN(1416)		if (!(_hx_tmp2)) {
HXLINE(1418)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1416)				_hx_tmp1 = hx::IsNull( this->_hx___indexBufferGrid );
            			}
            			else {
HXLINE(1416)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1416)			_hx_tmp1 = true;
            		}
HXDLIN(1416)		if (!(_hx_tmp1)) {
HXLINE(1419)			if (hx::IsNotNull( this->_hx___indexBufferGrid )) {
HXLINE(1416)				_hx_tmp = !(this->_hx___indexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1416)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1416)			_hx_tmp = true;
            		}
HXDLIN(1416)		if (_hx_tmp) {
HXLINE(1425)			this->_hx___indexBufferContext = context->_hx___context;
HXLINE(1426)			this->_hx___indexBuffer = null();
HXLINE(1428)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1430)				if (hx::IsNull( this->_hx___indexBufferGrid )) {
HXLINE(1430)					this->_hx___indexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1431)				this->_hx___indexBufferGrid->copyFrom(scale9Grid);
HXLINE(1433)				Float centerX = scale9Grid->width;
HXLINE(1434)				Float centerY = scale9Grid->height;
HXLINE(1435)				bool _hx_tmp3;
HXDLIN(1435)				if ((centerX != 0)) {
HXLINE(1435)					_hx_tmp3 = (centerY != 0);
            				}
            				else {
HXLINE(1435)					_hx_tmp3 = false;
            				}
HXDLIN(1435)				if (_hx_tmp3) {
HXLINE(1437)					 ::haxe::io::Bytes buffer = null();
HXDLIN(1437)					::cpp::VirtualArray array = null();
HXDLIN(1437)					 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1437)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1437)					 ::Dynamic len = null();
HXDLIN(1437)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,54,6);
HXDLIN(1437)					this->_hx___indexBufferData = this1;
HXLINE(1452)					{
HXLINE(1452)						 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1452)						 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            					}
HXLINE(1453)					{
HXLINE(1453)						 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1453)						 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            					}
HXLINE(1454)					{
HXLINE(1454)						 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1454)						 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            					}
HXLINE(1455)					{
HXLINE(1455)						 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1455)						 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            					}
HXLINE(1456)					{
HXLINE(1456)						 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1456)						 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            					}
HXLINE(1457)					{
HXLINE(1457)						 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1457)						 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            					}
HXLINE(1460)					{
HXLINE(1460)						 ::lime::utils::ArrayBufferView this8 = this->_hx___indexBufferData;
HXDLIN(1460)						 ::__hxcpp_memory_set_ui16(this8->buffer->b,(this8->byteOffset + 12),4);
            					}
HXLINE(1461)					{
HXLINE(1461)						 ::lime::utils::ArrayBufferView this9 = this->_hx___indexBufferData;
HXDLIN(1461)						 ::__hxcpp_memory_set_ui16(this9->buffer->b,(this9->byteOffset + 14),5);
            					}
HXLINE(1462)					{
HXLINE(1462)						 ::lime::utils::ArrayBufferView this10 = this->_hx___indexBufferData;
HXDLIN(1462)						 ::__hxcpp_memory_set_ui16(this10->buffer->b,(this10->byteOffset + 16),6);
            					}
HXLINE(1463)					{
HXLINE(1463)						 ::lime::utils::ArrayBufferView this11 = this->_hx___indexBufferData;
HXDLIN(1463)						 ::__hxcpp_memory_set_ui16(this11->buffer->b,(this11->byteOffset + 18),6);
            					}
HXLINE(1464)					{
HXLINE(1464)						 ::lime::utils::ArrayBufferView this12 = this->_hx___indexBufferData;
HXDLIN(1464)						 ::__hxcpp_memory_set_ui16(this12->buffer->b,(this12->byteOffset + 20),5);
            					}
HXLINE(1465)					{
HXLINE(1465)						 ::lime::utils::ArrayBufferView this13 = this->_hx___indexBufferData;
HXDLIN(1465)						 ::__hxcpp_memory_set_ui16(this13->buffer->b,(this13->byteOffset + 22),7);
            					}
HXLINE(1468)					{
HXLINE(1468)						 ::lime::utils::ArrayBufferView this14 = this->_hx___indexBufferData;
HXDLIN(1468)						 ::__hxcpp_memory_set_ui16(this14->buffer->b,(this14->byteOffset + 24),8);
            					}
HXLINE(1469)					{
HXLINE(1469)						 ::lime::utils::ArrayBufferView this15 = this->_hx___indexBufferData;
HXDLIN(1469)						 ::__hxcpp_memory_set_ui16(this15->buffer->b,(this15->byteOffset + 26),9);
            					}
HXLINE(1470)					{
HXLINE(1470)						 ::lime::utils::ArrayBufferView this16 = this->_hx___indexBufferData;
HXDLIN(1470)						 ::__hxcpp_memory_set_ui16(this16->buffer->b,(this16->byteOffset + 28),10);
            					}
HXLINE(1471)					{
HXLINE(1471)						 ::lime::utils::ArrayBufferView this17 = this->_hx___indexBufferData;
HXDLIN(1471)						 ::__hxcpp_memory_set_ui16(this17->buffer->b,(this17->byteOffset + 30),10);
            					}
HXLINE(1472)					{
HXLINE(1472)						 ::lime::utils::ArrayBufferView this18 = this->_hx___indexBufferData;
HXDLIN(1472)						 ::__hxcpp_memory_set_ui16(this18->buffer->b,(this18->byteOffset + 32),9);
            					}
HXLINE(1473)					{
HXLINE(1473)						 ::lime::utils::ArrayBufferView this19 = this->_hx___indexBufferData;
HXDLIN(1473)						 ::__hxcpp_memory_set_ui16(this19->buffer->b,(this19->byteOffset + 34),11);
            					}
HXLINE(1476)					{
HXLINE(1476)						 ::lime::utils::ArrayBufferView this20 = this->_hx___indexBufferData;
HXDLIN(1476)						 ::__hxcpp_memory_set_ui16(this20->buffer->b,(this20->byteOffset + 36),12);
            					}
HXLINE(1477)					{
HXLINE(1477)						 ::lime::utils::ArrayBufferView this21 = this->_hx___indexBufferData;
HXDLIN(1477)						 ::__hxcpp_memory_set_ui16(this21->buffer->b,(this21->byteOffset + 38),13);
            					}
HXLINE(1478)					{
HXLINE(1478)						 ::lime::utils::ArrayBufferView this22 = this->_hx___indexBufferData;
HXDLIN(1478)						 ::__hxcpp_memory_set_ui16(this22->buffer->b,(this22->byteOffset + 40),14);
            					}
HXLINE(1479)					{
HXLINE(1479)						 ::lime::utils::ArrayBufferView this23 = this->_hx___indexBufferData;
HXDLIN(1479)						 ::__hxcpp_memory_set_ui16(this23->buffer->b,(this23->byteOffset + 42),14);
            					}
HXLINE(1480)					{
HXLINE(1480)						 ::lime::utils::ArrayBufferView this24 = this->_hx___indexBufferData;
HXDLIN(1480)						 ::__hxcpp_memory_set_ui16(this24->buffer->b,(this24->byteOffset + 44),13);
            					}
HXLINE(1481)					{
HXLINE(1481)						 ::lime::utils::ArrayBufferView this25 = this->_hx___indexBufferData;
HXDLIN(1481)						 ::__hxcpp_memory_set_ui16(this25->buffer->b,(this25->byteOffset + 46),15);
            					}
HXLINE(1484)					{
HXLINE(1484)						 ::lime::utils::ArrayBufferView this26 = this->_hx___indexBufferData;
HXDLIN(1484)						 ::__hxcpp_memory_set_ui16(this26->buffer->b,(this26->byteOffset + 48),16);
            					}
HXLINE(1485)					{
HXLINE(1485)						 ::lime::utils::ArrayBufferView this27 = this->_hx___indexBufferData;
HXDLIN(1485)						 ::__hxcpp_memory_set_ui16(this27->buffer->b,(this27->byteOffset + 50),18);
            					}
HXLINE(1486)					{
HXLINE(1486)						 ::lime::utils::ArrayBufferView this28 = this->_hx___indexBufferData;
HXDLIN(1486)						 ::__hxcpp_memory_set_ui16(this28->buffer->b,(this28->byteOffset + 52),17);
            					}
HXLINE(1487)					{
HXLINE(1487)						 ::lime::utils::ArrayBufferView this29 = this->_hx___indexBufferData;
HXDLIN(1487)						 ::__hxcpp_memory_set_ui16(this29->buffer->b,(this29->byteOffset + 54),17);
            					}
HXLINE(1488)					{
HXLINE(1488)						 ::lime::utils::ArrayBufferView this30 = this->_hx___indexBufferData;
HXDLIN(1488)						 ::__hxcpp_memory_set_ui16(this30->buffer->b,(this30->byteOffset + 56),18);
            					}
HXLINE(1489)					{
HXLINE(1489)						 ::lime::utils::ArrayBufferView this31 = this->_hx___indexBufferData;
HXDLIN(1489)						 ::__hxcpp_memory_set_ui16(this31->buffer->b,(this31->byteOffset + 58),19);
            					}
HXLINE(1492)					{
HXLINE(1492)						 ::lime::utils::ArrayBufferView this32 = this->_hx___indexBufferData;
HXDLIN(1492)						 ::__hxcpp_memory_set_ui16(this32->buffer->b,(this32->byteOffset + 60),20);
            					}
HXLINE(1493)					{
HXLINE(1493)						 ::lime::utils::ArrayBufferView this33 = this->_hx___indexBufferData;
HXDLIN(1493)						 ::__hxcpp_memory_set_ui16(this33->buffer->b,(this33->byteOffset + 62),21);
            					}
HXLINE(1494)					{
HXLINE(1494)						 ::lime::utils::ArrayBufferView this34 = this->_hx___indexBufferData;
HXDLIN(1494)						 ::__hxcpp_memory_set_ui16(this34->buffer->b,(this34->byteOffset + 64),22);
            					}
HXLINE(1495)					{
HXLINE(1495)						 ::lime::utils::ArrayBufferView this35 = this->_hx___indexBufferData;
HXDLIN(1495)						 ::__hxcpp_memory_set_ui16(this35->buffer->b,(this35->byteOffset + 66),22);
            					}
HXLINE(1496)					{
HXLINE(1496)						 ::lime::utils::ArrayBufferView this36 = this->_hx___indexBufferData;
HXDLIN(1496)						 ::__hxcpp_memory_set_ui16(this36->buffer->b,(this36->byteOffset + 68),21);
            					}
HXLINE(1497)					{
HXLINE(1497)						 ::lime::utils::ArrayBufferView this37 = this->_hx___indexBufferData;
HXDLIN(1497)						 ::__hxcpp_memory_set_ui16(this37->buffer->b,(this37->byteOffset + 70),23);
            					}
HXLINE(1500)					{
HXLINE(1500)						 ::lime::utils::ArrayBufferView this38 = this->_hx___indexBufferData;
HXDLIN(1500)						 ::__hxcpp_memory_set_ui16(this38->buffer->b,(this38->byteOffset + 72),24);
            					}
HXLINE(1501)					{
HXLINE(1501)						 ::lime::utils::ArrayBufferView this39 = this->_hx___indexBufferData;
HXDLIN(1501)						 ::__hxcpp_memory_set_ui16(this39->buffer->b,(this39->byteOffset + 74),25);
            					}
HXLINE(1502)					{
HXLINE(1502)						 ::lime::utils::ArrayBufferView this40 = this->_hx___indexBufferData;
HXDLIN(1502)						 ::__hxcpp_memory_set_ui16(this40->buffer->b,(this40->byteOffset + 76),26);
            					}
HXLINE(1503)					{
HXLINE(1503)						 ::lime::utils::ArrayBufferView this41 = this->_hx___indexBufferData;
HXDLIN(1503)						 ::__hxcpp_memory_set_ui16(this41->buffer->b,(this41->byteOffset + 78),26);
            					}
HXLINE(1504)					{
HXLINE(1504)						 ::lime::utils::ArrayBufferView this42 = this->_hx___indexBufferData;
HXDLIN(1504)						 ::__hxcpp_memory_set_ui16(this42->buffer->b,(this42->byteOffset + 80),25);
            					}
HXLINE(1505)					{
HXLINE(1505)						 ::lime::utils::ArrayBufferView this43 = this->_hx___indexBufferData;
HXDLIN(1505)						 ::__hxcpp_memory_set_ui16(this43->buffer->b,(this43->byteOffset + 82),27);
            					}
HXLINE(1508)					{
HXLINE(1508)						 ::lime::utils::ArrayBufferView this44 = this->_hx___indexBufferData;
HXDLIN(1508)						 ::__hxcpp_memory_set_ui16(this44->buffer->b,(this44->byteOffset + 84),28);
            					}
HXLINE(1509)					{
HXLINE(1509)						 ::lime::utils::ArrayBufferView this45 = this->_hx___indexBufferData;
HXDLIN(1509)						 ::__hxcpp_memory_set_ui16(this45->buffer->b,(this45->byteOffset + 86),29);
            					}
HXLINE(1510)					{
HXLINE(1510)						 ::lime::utils::ArrayBufferView this46 = this->_hx___indexBufferData;
HXDLIN(1510)						 ::__hxcpp_memory_set_ui16(this46->buffer->b,(this46->byteOffset + 88),30);
            					}
HXLINE(1511)					{
HXLINE(1511)						 ::lime::utils::ArrayBufferView this47 = this->_hx___indexBufferData;
HXDLIN(1511)						 ::__hxcpp_memory_set_ui16(this47->buffer->b,(this47->byteOffset + 90),30);
            					}
HXLINE(1512)					{
HXLINE(1512)						 ::lime::utils::ArrayBufferView this48 = this->_hx___indexBufferData;
HXDLIN(1512)						 ::__hxcpp_memory_set_ui16(this48->buffer->b,(this48->byteOffset + 92),29);
            					}
HXLINE(1513)					{
HXLINE(1513)						 ::lime::utils::ArrayBufferView this49 = this->_hx___indexBufferData;
HXDLIN(1513)						 ::__hxcpp_memory_set_ui16(this49->buffer->b,(this49->byteOffset + 94),31);
            					}
HXLINE(1516)					{
HXLINE(1516)						 ::lime::utils::ArrayBufferView this50 = this->_hx___indexBufferData;
HXDLIN(1516)						 ::__hxcpp_memory_set_ui16(this50->buffer->b,(this50->byteOffset + 96),32);
            					}
HXLINE(1517)					{
HXLINE(1517)						 ::lime::utils::ArrayBufferView this51 = this->_hx___indexBufferData;
HXDLIN(1517)						 ::__hxcpp_memory_set_ui16(this51->buffer->b,(this51->byteOffset + 98),33);
            					}
HXLINE(1518)					{
HXLINE(1518)						 ::lime::utils::ArrayBufferView this52 = this->_hx___indexBufferData;
HXDLIN(1518)						 ::__hxcpp_memory_set_ui16(this52->buffer->b,(this52->byteOffset + 100),34);
            					}
HXLINE(1519)					{
HXLINE(1519)						 ::lime::utils::ArrayBufferView this53 = this->_hx___indexBufferData;
HXDLIN(1519)						 ::__hxcpp_memory_set_ui16(this53->buffer->b,(this53->byteOffset + 102),34);
            					}
HXLINE(1520)					{
HXLINE(1520)						 ::lime::utils::ArrayBufferView this54 = this->_hx___indexBufferData;
HXDLIN(1520)						 ::__hxcpp_memory_set_ui16(this54->buffer->b,(this54->byteOffset + 104),33);
            					}
HXLINE(1521)					{
HXLINE(1521)						 ::lime::utils::ArrayBufferView this55 = this->_hx___indexBufferData;
HXDLIN(1521)						 ::__hxcpp_memory_set_ui16(this55->buffer->b,(this55->byteOffset + 106),35);
            					}
HXLINE(1523)					this->_hx___indexBuffer = context->createIndexBuffer(54,null());
            				}
            				else {
HXLINE(1525)					bool _hx_tmp4;
HXDLIN(1525)					if ((centerX == 0)) {
HXLINE(1525)						_hx_tmp4 = (centerY != 0);
            					}
            					else {
HXLINE(1525)						_hx_tmp4 = false;
            					}
HXDLIN(1525)					if (_hx_tmp4) {
HXLINE(1527)						 ::haxe::io::Bytes buffer1 = null();
HXDLIN(1527)						::cpp::VirtualArray array1 = null();
HXDLIN(1527)						 ::openfl::_Vector::IntVector vector1 = null();
HXDLIN(1527)						 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(1527)						 ::Dynamic len1 = null();
HXDLIN(1527)						 ::lime::utils::ArrayBufferView this56 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1527)						this->_hx___indexBufferData = this56;
HXLINE(1538)						{
HXLINE(1538)							 ::lime::utils::ArrayBufferView this57 = this->_hx___indexBufferData;
HXDLIN(1538)							 ::__hxcpp_memory_set_ui16(this57->buffer->b,this57->byteOffset,0);
            						}
HXLINE(1539)						{
HXLINE(1539)							 ::lime::utils::ArrayBufferView this58 = this->_hx___indexBufferData;
HXDLIN(1539)							 ::__hxcpp_memory_set_ui16(this58->buffer->b,(this58->byteOffset + 2),1);
            						}
HXLINE(1540)						{
HXLINE(1540)							 ::lime::utils::ArrayBufferView this59 = this->_hx___indexBufferData;
HXDLIN(1540)							 ::__hxcpp_memory_set_ui16(this59->buffer->b,(this59->byteOffset + 4),2);
            						}
HXLINE(1541)						{
HXLINE(1541)							 ::lime::utils::ArrayBufferView this60 = this->_hx___indexBufferData;
HXDLIN(1541)							 ::__hxcpp_memory_set_ui16(this60->buffer->b,(this60->byteOffset + 6),2);
            						}
HXLINE(1542)						{
HXLINE(1542)							 ::lime::utils::ArrayBufferView this61 = this->_hx___indexBufferData;
HXDLIN(1542)							 ::__hxcpp_memory_set_ui16(this61->buffer->b,(this61->byteOffset + 8),1);
            						}
HXLINE(1543)						{
HXLINE(1543)							 ::lime::utils::ArrayBufferView this62 = this->_hx___indexBufferData;
HXDLIN(1543)							 ::__hxcpp_memory_set_ui16(this62->buffer->b,(this62->byteOffset + 10),3);
            						}
HXLINE(1546)						{
HXLINE(1546)							 ::lime::utils::ArrayBufferView this63 = this->_hx___indexBufferData;
HXDLIN(1546)							 ::__hxcpp_memory_set_ui16(this63->buffer->b,(this63->byteOffset + 12),4);
            						}
HXLINE(1547)						{
HXLINE(1547)							 ::lime::utils::ArrayBufferView this64 = this->_hx___indexBufferData;
HXDLIN(1547)							 ::__hxcpp_memory_set_ui16(this64->buffer->b,(this64->byteOffset + 14),5);
            						}
HXLINE(1548)						{
HXLINE(1548)							 ::lime::utils::ArrayBufferView this65 = this->_hx___indexBufferData;
HXDLIN(1548)							 ::__hxcpp_memory_set_ui16(this65->buffer->b,(this65->byteOffset + 16),0);
            						}
HXLINE(1549)						{
HXLINE(1549)							 ::lime::utils::ArrayBufferView this66 = this->_hx___indexBufferData;
HXDLIN(1549)							 ::__hxcpp_memory_set_ui16(this66->buffer->b,(this66->byteOffset + 18),0);
            						}
HXLINE(1550)						{
HXLINE(1550)							 ::lime::utils::ArrayBufferView this67 = this->_hx___indexBufferData;
HXDLIN(1550)							 ::__hxcpp_memory_set_ui16(this67->buffer->b,(this67->byteOffset + 20),5);
            						}
HXLINE(1551)						{
HXLINE(1551)							 ::lime::utils::ArrayBufferView this68 = this->_hx___indexBufferData;
HXDLIN(1551)							 ::__hxcpp_memory_set_ui16(this68->buffer->b,(this68->byteOffset + 22),1);
            						}
HXLINE(1554)						{
HXLINE(1554)							 ::lime::utils::ArrayBufferView this69 = this->_hx___indexBufferData;
HXDLIN(1554)							 ::__hxcpp_memory_set_ui16(this69->buffer->b,(this69->byteOffset + 24),6);
            						}
HXLINE(1555)						{
HXLINE(1555)							 ::lime::utils::ArrayBufferView this70 = this->_hx___indexBufferData;
HXDLIN(1555)							 ::__hxcpp_memory_set_ui16(this70->buffer->b,(this70->byteOffset + 26),7);
            						}
HXLINE(1556)						{
HXLINE(1556)							 ::lime::utils::ArrayBufferView this71 = this->_hx___indexBufferData;
HXDLIN(1556)							 ::__hxcpp_memory_set_ui16(this71->buffer->b,(this71->byteOffset + 28),4);
            						}
HXLINE(1557)						{
HXLINE(1557)							 ::lime::utils::ArrayBufferView this72 = this->_hx___indexBufferData;
HXDLIN(1557)							 ::__hxcpp_memory_set_ui16(this72->buffer->b,(this72->byteOffset + 30),4);
            						}
HXLINE(1558)						{
HXLINE(1558)							 ::lime::utils::ArrayBufferView this73 = this->_hx___indexBufferData;
HXDLIN(1558)							 ::__hxcpp_memory_set_ui16(this73->buffer->b,(this73->byteOffset + 32),7);
            						}
HXLINE(1559)						{
HXLINE(1559)							 ::lime::utils::ArrayBufferView this74 = this->_hx___indexBufferData;
HXDLIN(1559)							 ::__hxcpp_memory_set_ui16(this74->buffer->b,(this74->byteOffset + 34),5);
            						}
HXLINE(1561)						this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            					}
            					else {
HXLINE(1563)						bool _hx_tmp5;
HXDLIN(1563)						if ((centerX != 0)) {
HXLINE(1563)							_hx_tmp5 = (centerY == 0);
            						}
            						else {
HXLINE(1563)							_hx_tmp5 = false;
            						}
HXDLIN(1563)						if (_hx_tmp5) {
HXLINE(1565)							 ::haxe::io::Bytes buffer2 = null();
HXDLIN(1565)							::cpp::VirtualArray array2 = null();
HXDLIN(1565)							 ::openfl::_Vector::IntVector vector2 = null();
HXDLIN(1565)							 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN(1565)							 ::Dynamic len2 = null();
HXDLIN(1565)							 ::lime::utils::ArrayBufferView this75 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1565)							this->_hx___indexBufferData = this75;
HXLINE(1572)							{
HXLINE(1572)								 ::lime::utils::ArrayBufferView this76 = this->_hx___indexBufferData;
HXDLIN(1572)								 ::__hxcpp_memory_set_ui16(this76->buffer->b,this76->byteOffset,0);
            							}
HXLINE(1573)							{
HXLINE(1573)								 ::lime::utils::ArrayBufferView this77 = this->_hx___indexBufferData;
HXDLIN(1573)								 ::__hxcpp_memory_set_ui16(this77->buffer->b,(this77->byteOffset + 2),1);
            							}
HXLINE(1574)							{
HXLINE(1574)								 ::lime::utils::ArrayBufferView this78 = this->_hx___indexBufferData;
HXDLIN(1574)								 ::__hxcpp_memory_set_ui16(this78->buffer->b,(this78->byteOffset + 4),2);
            							}
HXLINE(1575)							{
HXLINE(1575)								 ::lime::utils::ArrayBufferView this79 = this->_hx___indexBufferData;
HXDLIN(1575)								 ::__hxcpp_memory_set_ui16(this79->buffer->b,(this79->byteOffset + 6),2);
            							}
HXLINE(1576)							{
HXLINE(1576)								 ::lime::utils::ArrayBufferView this80 = this->_hx___indexBufferData;
HXDLIN(1576)								 ::__hxcpp_memory_set_ui16(this80->buffer->b,(this80->byteOffset + 8),1);
            							}
HXLINE(1577)							{
HXLINE(1577)								 ::lime::utils::ArrayBufferView this81 = this->_hx___indexBufferData;
HXDLIN(1577)								 ::__hxcpp_memory_set_ui16(this81->buffer->b,(this81->byteOffset + 10),3);
            							}
HXLINE(1580)							{
HXLINE(1580)								 ::lime::utils::ArrayBufferView this82 = this->_hx___indexBufferData;
HXDLIN(1580)								 ::__hxcpp_memory_set_ui16(this82->buffer->b,(this82->byteOffset + 12),4);
            							}
HXLINE(1581)							{
HXLINE(1581)								 ::lime::utils::ArrayBufferView this83 = this->_hx___indexBufferData;
HXDLIN(1581)								 ::__hxcpp_memory_set_ui16(this83->buffer->b,(this83->byteOffset + 14),0);
            							}
HXLINE(1582)							{
HXLINE(1582)								 ::lime::utils::ArrayBufferView this84 = this->_hx___indexBufferData;
HXDLIN(1582)								 ::__hxcpp_memory_set_ui16(this84->buffer->b,(this84->byteOffset + 16),5);
            							}
HXLINE(1583)							{
HXLINE(1583)								 ::lime::utils::ArrayBufferView this85 = this->_hx___indexBufferData;
HXDLIN(1583)								 ::__hxcpp_memory_set_ui16(this85->buffer->b,(this85->byteOffset + 18),5);
            							}
HXLINE(1584)							{
HXLINE(1584)								 ::lime::utils::ArrayBufferView this86 = this->_hx___indexBufferData;
HXDLIN(1584)								 ::__hxcpp_memory_set_ui16(this86->buffer->b,(this86->byteOffset + 20),0);
            							}
HXLINE(1585)							{
HXLINE(1585)								 ::lime::utils::ArrayBufferView this87 = this->_hx___indexBufferData;
HXDLIN(1585)								 ::__hxcpp_memory_set_ui16(this87->buffer->b,(this87->byteOffset + 22),2);
            							}
HXLINE(1588)							{
HXLINE(1588)								 ::lime::utils::ArrayBufferView this88 = this->_hx___indexBufferData;
HXDLIN(1588)								 ::__hxcpp_memory_set_ui16(this88->buffer->b,(this88->byteOffset + 24),6);
            							}
HXLINE(1589)							{
HXLINE(1589)								 ::lime::utils::ArrayBufferView this89 = this->_hx___indexBufferData;
HXDLIN(1589)								 ::__hxcpp_memory_set_ui16(this89->buffer->b,(this89->byteOffset + 26),4);
            							}
HXLINE(1590)							{
HXLINE(1590)								 ::lime::utils::ArrayBufferView this90 = this->_hx___indexBufferData;
HXDLIN(1590)								 ::__hxcpp_memory_set_ui16(this90->buffer->b,(this90->byteOffset + 28),7);
            							}
HXLINE(1591)							{
HXLINE(1591)								 ::lime::utils::ArrayBufferView this91 = this->_hx___indexBufferData;
HXDLIN(1591)								 ::__hxcpp_memory_set_ui16(this91->buffer->b,(this91->byteOffset + 30),7);
            							}
HXLINE(1592)							{
HXLINE(1592)								 ::lime::utils::ArrayBufferView this92 = this->_hx___indexBufferData;
HXDLIN(1592)								 ::__hxcpp_memory_set_ui16(this92->buffer->b,(this92->byteOffset + 32),4);
            							}
HXLINE(1593)							{
HXLINE(1593)								 ::lime::utils::ArrayBufferView this93 = this->_hx___indexBufferData;
HXDLIN(1593)								 ::__hxcpp_memory_set_ui16(this93->buffer->b,(this93->byteOffset + 34),5);
            							}
HXLINE(1595)							this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1600)				this->_hx___indexBufferGrid = null();
            			}
HXLINE(1603)			if (hx::IsNull( this->_hx___indexBuffer )) {
HXLINE(1605)				 ::haxe::io::Bytes buffer3 = null();
HXDLIN(1605)				::cpp::VirtualArray array3 = null();
HXDLIN(1605)				 ::openfl::_Vector::IntVector vector3 = null();
HXDLIN(1605)				 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN(1605)				 ::Dynamic len3 = null();
HXDLIN(1605)				 ::lime::utils::ArrayBufferView this94 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,6,6);
HXDLIN(1605)				this->_hx___indexBufferData = this94;
HXLINE(1606)				{
HXLINE(1606)					 ::lime::utils::ArrayBufferView this95 = this->_hx___indexBufferData;
HXDLIN(1606)					 ::__hxcpp_memory_set_ui16(this95->buffer->b,this95->byteOffset,0);
            				}
HXLINE(1607)				{
HXLINE(1607)					 ::lime::utils::ArrayBufferView this96 = this->_hx___indexBufferData;
HXDLIN(1607)					 ::__hxcpp_memory_set_ui16(this96->buffer->b,(this96->byteOffset + 2),1);
            				}
HXLINE(1608)				{
HXLINE(1608)					 ::lime::utils::ArrayBufferView this97 = this->_hx___indexBufferData;
HXDLIN(1608)					 ::__hxcpp_memory_set_ui16(this97->buffer->b,(this97->byteOffset + 4),2);
            				}
HXLINE(1609)				{
HXLINE(1609)					 ::lime::utils::ArrayBufferView this98 = this->_hx___indexBufferData;
HXDLIN(1609)					 ::__hxcpp_memory_set_ui16(this98->buffer->b,(this98->byteOffset + 6),2);
            				}
HXLINE(1610)				{
HXLINE(1610)					 ::lime::utils::ArrayBufferView this99 = this->_hx___indexBufferData;
HXDLIN(1610)					 ::__hxcpp_memory_set_ui16(this99->buffer->b,(this99->byteOffset + 8),1);
            				}
HXLINE(1611)				{
HXLINE(1611)					 ::lime::utils::ArrayBufferView this100 = this->_hx___indexBufferData;
HXDLIN(1611)					 ::__hxcpp_memory_set_ui16(this100->buffer->b,(this100->byteOffset + 10),3);
            				}
HXLINE(1612)				this->_hx___indexBuffer = context->createIndexBuffer(6,null());
            			}
HXLINE(1615)			this->_hx___indexBuffer->uploadFromTypedArray(this->_hx___indexBufferData,null());
            		}
HXLINE(1619)		return this->_hx___indexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getIndexBuffer,return )

 ::openfl::display3D::VertexBuffer3D BitmapData_obj::getVertexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid, ::openfl::display::DisplayObject targetObject){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1631_getVertexBuffer)
HXLINE(1632)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1637)		bool _hx_tmp;
HXDLIN(1637)		bool _hx_tmp1;
HXDLIN(1637)		bool _hx_tmp2;
HXDLIN(1637)		bool _hx_tmp3;
HXDLIN(1637)		if (hx::IsNotNull( this->_hx___vertexBuffer )) {
HXLINE(1637)			_hx_tmp3 = hx::IsNotEq( this->_hx___vertexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1637)			_hx_tmp3 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp3)) {
HXLINE(1639)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1637)				_hx_tmp2 = hx::IsNull( this->_hx___vertexBufferGrid );
            			}
            			else {
HXLINE(1637)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE(1637)			_hx_tmp2 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp2)) {
HXLINE(1640)			if (hx::IsNotNull( this->_hx___vertexBufferGrid )) {
HXLINE(1637)				_hx_tmp1 = !(this->_hx___vertexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1637)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1637)			_hx_tmp1 = true;
            		}
HXDLIN(1637)		if (!(_hx_tmp1)) {
HXLINE(1641)			if (hx::IsNotNull( targetObject )) {
HXLINE(1642)				bool _hx_tmp4;
HXDLIN(1642)				bool _hx_tmp5;
HXDLIN(1642)				Float _hx_tmp6 = this->_hx___vertexBufferWidth;
HXDLIN(1642)				if ((_hx_tmp6 == targetObject->get_width())) {
HXLINE(1643)					Float _hx_tmp7 = this->_hx___vertexBufferHeight;
HXLINE(1642)					_hx_tmp5 = (_hx_tmp7 != targetObject->get_height());
            				}
            				else {
HXLINE(1642)					_hx_tmp5 = true;
            				}
HXDLIN(1642)				if (!(_hx_tmp5)) {
HXLINE(1644)					Float _hx_tmp8 = this->_hx___vertexBufferScaleX;
HXLINE(1642)					_hx_tmp4 = (_hx_tmp8 != targetObject->get_scaleX());
            				}
            				else {
HXLINE(1642)					_hx_tmp4 = true;
            				}
HXDLIN(1642)				if (!(_hx_tmp4)) {
HXLINE(1645)					Float _hx_tmp9 = this->_hx___vertexBufferScaleY;
HXLINE(1637)					_hx_tmp = (_hx_tmp9 != targetObject->get_scaleY());
            				}
            				else {
HXLINE(1637)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1637)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1637)			_hx_tmp = true;
            		}
HXDLIN(1637)		if (_hx_tmp) {
HXLINE(1669)			this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
HXLINE(1671)			int uvWidth = 1;
HXLINE(1672)			int uvHeight = 1;
HXLINE(1689)			this->_hx___vertexBufferContext = context->_hx___context;
HXLINE(1690)			this->_hx___vertexBuffer = null();
HXLINE(1692)			bool _hx_tmp10;
HXDLIN(1692)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1692)				_hx_tmp10 = hx::IsNotNull( targetObject );
            			}
            			else {
HXLINE(1692)				_hx_tmp10 = false;
            			}
HXDLIN(1692)			if (_hx_tmp10) {
HXLINE(1694)				if (hx::IsNull( this->_hx___vertexBufferGrid )) {
HXLINE(1694)					this->_hx___vertexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1695)				this->_hx___vertexBufferGrid->copyFrom(scale9Grid);
HXLINE(1697)				this->_hx___vertexBufferWidth = targetObject->get_width();
HXLINE(1698)				this->_hx___vertexBufferHeight = targetObject->get_height();
HXLINE(1699)				this->_hx___vertexBufferScaleX = targetObject->get_scaleX();
HXLINE(1700)				this->_hx___vertexBufferScaleY = targetObject->get_scaleY();
HXLINE(1702)				Float centerX = scale9Grid->width;
HXLINE(1703)				Float centerY = scale9Grid->height;
HXLINE(1704)				bool _hx_tmp11;
HXDLIN(1704)				if ((centerX != 0)) {
HXLINE(1704)					_hx_tmp11 = (centerY != 0);
            				}
            				else {
HXLINE(1704)					_hx_tmp11 = false;
            				}
HXDLIN(1704)				if (_hx_tmp11) {
HXLINE(1706)					 ::haxe::io::Bytes buffer = null();
HXDLIN(1706)					::cpp::VirtualArray array = null();
HXDLIN(1706)					 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1706)					 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1706)					 ::Dynamic len = null();
HXDLIN(1706)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,504,8);
HXDLIN(1706)					this->_hx___vertexBufferData = this1;
HXLINE(1708)					Float left = scale9Grid->x;
HXLINE(1709)					Float top = scale9Grid->y;
HXLINE(1710)					Float right = ((this->_hx___vertexBufferWidth - centerX) - left);
HXLINE(1711)					Float bottom = ((this->_hx___vertexBufferHeight - centerY) - top);
HXLINE(1713)					Float uvLeft = (left / this->_hx___vertexBufferWidth);
HXLINE(1714)					Float uvTop = (top / this->_hx___vertexBufferHeight);
HXLINE(1715)					Float uvCenterX = (scale9Grid->width / this->_hx___vertexBufferWidth);
HXLINE(1716)					Float uvCenterY = (scale9Grid->height / this->_hx___vertexBufferHeight);
HXLINE(1717)					Float uvRight = (right / ( (Float)(this->width) ));
HXLINE(1718)					Float uvBottom = (bottom / ( (Float)(this->height) ));
HXLINE(1719)					Float uvOffsetU = (((Float)0.5) / this->_hx___vertexBufferWidth);
HXLINE(1720)					Float uvOffsetV = (((Float)0.5) / this->_hx___vertexBufferHeight);
HXLINE(1722)					Float renderedLeft = (left / targetObject->get_scaleX());
HXLINE(1723)					Float renderedTop = (top / targetObject->get_scaleY());
HXLINE(1724)					Float renderedRight = (right / targetObject->get_scaleX());
HXLINE(1725)					Float renderedBottom = (bottom / targetObject->get_scaleY());
HXLINE(1726)					Float renderedCenterX = ((( (Float)(this->width) ) - renderedLeft) - renderedRight);
HXLINE(1727)					Float renderedCenterY = ((( (Float)(this->height) ) - renderedTop) - renderedBottom);
HXLINE(1741)					this->_hx___setVertex(0,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXLINE(1742)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_20,4),renderedLeft,renderedTop,(( (Float)(uvWidth) ) * uvLeft),(( (Float)(uvHeight) ) * uvTop));
HXLINE(1743)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_21,2),( (Float)(0) ),renderedTop,( (Float)(0) ),(( (Float)(uvHeight) ) * uvTop));
HXLINE(1744)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_22,2),renderedLeft,( (Float)(0) ),(( (Float)(uvWidth) ) * uvLeft),( (Float)(0) ));
HXLINE(1745)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_23,4),(renderedLeft + renderedCenterX),renderedTop,(( (Float)(uvWidth) ) * (uvLeft + uvCenterX)),(( (Float)(uvHeight) ) * uvTop));
HXLINE(1746)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_24,2),(renderedLeft + renderedCenterX),( (Float)(0) ),(( (Float)(uvWidth) ) * (uvLeft + uvCenterX)),( (Float)(0) ));
HXLINE(1747)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_25,2),( (Float)(this->width) ),renderedTop,( (Float)(uvWidth) ),(( (Float)(uvHeight) ) * uvTop));
HXLINE(1748)					this->_hx___setVertex(9,( (Float)(this->width) ),( (Float)(0) ),( (Float)(uvWidth) ),( (Float)(0) ));
HXLINE(1749)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_26,4),renderedLeft,(renderedTop + renderedCenterY),(( (Float)(uvWidth) ) * uvLeft),(( (Float)(uvHeight) ) * (uvTop + uvCenterY)));
HXLINE(1750)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_27,2),( (Float)(0) ),(renderedTop + renderedCenterY),( (Float)(0) ),(( (Float)(uvHeight) ) * (uvTop + uvCenterY)));
HXLINE(1751)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_28,4),(renderedLeft + renderedCenterX),(renderedTop + renderedCenterY),(( (Float)(uvWidth) ) * (uvLeft + uvCenterX)),(( (Float)(uvHeight) ) * (uvTop + uvCenterY)));
HXLINE(1753)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_29,2),( (Float)(this->width) ),(renderedTop + renderedCenterY),( (Float)(uvWidth) ),(( (Float)(uvHeight) ) * (uvTop + uvCenterY)));
HXLINE(1754)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_30,2),renderedLeft,( (Float)(this->height) ),(( (Float)(uvWidth) ) * uvLeft),( (Float)(uvHeight) ));
HXLINE(1755)					this->_hx___setVertex(26,( (Float)(0) ),( (Float)(this->height) ),( (Float)(0) ),( (Float)(uvHeight) ));
HXLINE(1756)					this->_hx___setVertices(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_31,2),(renderedLeft + renderedCenterX),( (Float)(this->height) ),(( (Float)(uvWidth) ) * (uvLeft + uvCenterX)),( (Float)(uvHeight) ));
HXLINE(1757)					this->_hx___setVertex(35,( (Float)(this->width) ),( (Float)(this->height) ),( (Float)(uvWidth) ),( (Float)(uvHeight) ));
HXLINE(1759)					this->_hx___setUOffsets(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_32,12),-(uvOffsetU));
HXLINE(1760)					this->_hx___setUOffsets(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_33,12),uvOffsetU);
HXLINE(1761)					this->_hx___setVOffsets(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_34,12),-(uvOffsetV));
HXLINE(1762)					this->_hx___setVOffsets(::Array_obj< int >::fromData( _hx_array_data_9a4112a3_35,12),uvOffsetV);
HXLINE(1764)					this->_hx___vertexBuffer = context->createVertexBuffer(16,14,null());
            				}
            				else {
HXLINE(1766)					bool _hx_tmp12;
HXDLIN(1766)					if ((centerX == 0)) {
HXLINE(1766)						_hx_tmp12 = (centerY != 0);
            					}
            					else {
HXLINE(1766)						_hx_tmp12 = false;
            					}
HXDLIN(1766)					if (_hx_tmp12) {
HXLINE(1768)						 ::haxe::io::Bytes buffer1 = null();
HXDLIN(1768)						::cpp::VirtualArray array1 = null();
HXDLIN(1768)						 ::openfl::_Vector::FloatVector vector1 = null();
HXDLIN(1768)						 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN(1768)						 ::Dynamic len1 = null();
HXDLIN(1768)						 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1768)						this->_hx___vertexBufferData = this2;
HXLINE(1770)						Float top1 = scale9Grid->y;
HXLINE(1771)						Float bottom1 = ((( (Float)(this->height) ) - centerY) - top1);
HXLINE(1773)						Float uvTop1 = (top1 / ( (Float)(this->height) ));
HXLINE(1774)						Float uvCenterY1 = (centerY / ( (Float)(this->height) ));
HXLINE(1775)						Float uvBottom1 = (bottom1 / ( (Float)(this->height) ));
HXLINE(1777)						Float renderedTop1 = (top1 / targetObject->get_scaleY());
HXLINE(1778)						Float renderedBottom1 = (bottom1 / targetObject->get_scaleY());
HXLINE(1779)						Float renderedCenterY1 = targetObject->get_height();
HXDLIN(1779)						Float renderedCenterY2 = (((renderedCenterY1 / targetObject->get_scaleY()) - renderedTop1) - renderedBottom1);
HXLINE(1781)						Float renderedWidth = targetObject->get_width();
HXDLIN(1781)						Float renderedWidth1 = (renderedWidth / targetObject->get_scaleX());
HXLINE(1792)						{
HXLINE(1792)							 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1792)							 ::__hxcpp_memory_set_float(this3->buffer->b,this3->byteOffset,renderedWidth1);
            						}
HXLINE(1793)						{
HXLINE(1793)							 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1793)							 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 4),renderedTop1);
            						}
HXLINE(1794)						{
HXLINE(1794)							 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1794)							 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 12),uvWidth);
            						}
HXLINE(1795)						{
HXLINE(1795)							 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1795)							Float val = (( (Float)(uvHeight) ) * uvTop1);
HXDLIN(1795)							 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 16),val);
            						}
HXLINE(1797)						{
HXLINE(1797)							 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1797)							 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 60),renderedTop1);
            						}
HXLINE(1798)						{
HXLINE(1798)							 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1798)							Float val1 = (( (Float)(uvHeight) ) * uvTop1);
HXDLIN(1798)							 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 72),val1);
            						}
HXLINE(1800)						{
HXLINE(1800)							 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1800)							 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 112),renderedWidth1);
            						}
HXLINE(1801)						{
HXLINE(1801)							 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(1801)							 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 124),uvWidth);
            						}
HXLINE(1804)						{
HXLINE(1804)							 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(1804)							 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 224),renderedWidth1);
            						}
HXLINE(1805)						{
HXLINE(1805)							 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(1805)							Float val2 = (renderedTop1 + renderedCenterY2);
HXDLIN(1805)							 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 228),val2);
            						}
HXLINE(1806)						{
HXLINE(1806)							 ::lime::utils::ArrayBufferView this13 = this->_hx___vertexBufferData;
HXDLIN(1806)							 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 236),uvWidth);
            						}
HXLINE(1807)						{
HXLINE(1807)							 ::lime::utils::ArrayBufferView this14 = this->_hx___vertexBufferData;
HXDLIN(1807)							Float val3 = (( (Float)(uvHeight) ) * (uvTop1 + uvCenterY1));
HXDLIN(1807)							 ::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + 240),val3);
            						}
HXLINE(1809)						{
HXLINE(1809)							 ::lime::utils::ArrayBufferView this15 = this->_hx___vertexBufferData;
HXDLIN(1809)							Float val4 = (renderedTop1 + renderedCenterY2);
HXDLIN(1809)							 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 284),val4);
            						}
HXLINE(1810)						{
HXLINE(1810)							 ::lime::utils::ArrayBufferView this16 = this->_hx___vertexBufferData;
HXDLIN(1810)							Float val5 = (( (Float)(uvHeight) ) * (uvTop1 + uvCenterY1));
HXDLIN(1810)							 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 296),val5);
            						}
HXLINE(1813)						{
HXLINE(1813)							 ::lime::utils::ArrayBufferView this17 = this->_hx___vertexBufferData;
HXDLIN(1813)							 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 336),renderedWidth1);
            						}
HXLINE(1814)						{
HXLINE(1814)							 ::lime::utils::ArrayBufferView this18 = this->_hx___vertexBufferData;
HXDLIN(1814)							Float val6 = ( (Float)(this->height) );
HXDLIN(1814)							 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 340),val6);
            						}
HXLINE(1815)						{
HXLINE(1815)							 ::lime::utils::ArrayBufferView this19 = this->_hx___vertexBufferData;
HXDLIN(1815)							 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 348),uvWidth);
            						}
HXLINE(1816)						{
HXLINE(1816)							 ::lime::utils::ArrayBufferView this20 = this->_hx___vertexBufferData;
HXDLIN(1816)							 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 352),uvHeight);
            						}
HXLINE(1818)						{
HXLINE(1818)							 ::lime::utils::ArrayBufferView this21 = this->_hx___vertexBufferData;
HXDLIN(1818)							Float val7 = ( (Float)(this->height) );
HXDLIN(1818)							 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 396),val7);
            						}
HXLINE(1819)						{
HXLINE(1819)							 ::lime::utils::ArrayBufferView this22 = this->_hx___vertexBufferData;
HXDLIN(1819)							 ::__hxcpp_memory_set_float(this22->buffer->b,(this22->byteOffset + 408),uvHeight);
            						}
HXLINE(1821)						this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            					}
            					else {
HXLINE(1823)						bool _hx_tmp13;
HXDLIN(1823)						if ((centerY == 0)) {
HXLINE(1823)							_hx_tmp13 = (centerX != 0);
            						}
            						else {
HXLINE(1823)							_hx_tmp13 = false;
            						}
HXDLIN(1823)						if (_hx_tmp13) {
HXLINE(1825)							 ::haxe::io::Bytes buffer2 = null();
HXDLIN(1825)							::cpp::VirtualArray array2 = null();
HXDLIN(1825)							 ::openfl::_Vector::FloatVector vector2 = null();
HXDLIN(1825)							 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN(1825)							 ::Dynamic len2 = null();
HXDLIN(1825)							 ::lime::utils::ArrayBufferView this23 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1825)							this->_hx___vertexBufferData = this23;
HXLINE(1827)							Float left1 = scale9Grid->x;
HXLINE(1828)							Float right1 = ((( (Float)(this->width) ) - centerX) - left1);
HXLINE(1830)							Float uvLeft1 = (left1 / ( (Float)(this->width) ));
HXLINE(1831)							Float uvCenterX1 = (centerX / ( (Float)(this->width) ));
HXLINE(1832)							Float uvRight1 = (right1 / ( (Float)(this->width) ));
HXLINE(1834)							Float renderedLeft1 = (left1 / targetObject->get_scaleX());
HXLINE(1835)							Float renderedRight1 = (right1 / targetObject->get_scaleX());
HXLINE(1836)							Float renderedCenterX1 = targetObject->get_width();
HXDLIN(1836)							Float renderedCenterX2 = (((renderedCenterX1 / targetObject->get_scaleX()) - renderedLeft1) - renderedRight1);
HXLINE(1838)							Float renderedHeight = targetObject->get_height();
HXDLIN(1838)							Float renderedHeight1 = (renderedHeight / targetObject->get_scaleY());
HXLINE(1845)							{
HXLINE(1845)								 ::lime::utils::ArrayBufferView this24 = this->_hx___vertexBufferData;
HXDLIN(1845)								 ::__hxcpp_memory_set_float(this24->buffer->b,this24->byteOffset,renderedLeft1);
            							}
HXLINE(1846)							{
HXLINE(1846)								 ::lime::utils::ArrayBufferView this25 = this->_hx___vertexBufferData;
HXDLIN(1846)								 ::__hxcpp_memory_set_float(this25->buffer->b,(this25->byteOffset + 4),renderedHeight1);
            							}
HXLINE(1847)							{
HXLINE(1847)								 ::lime::utils::ArrayBufferView this26 = this->_hx___vertexBufferData;
HXDLIN(1847)								Float val8 = (( (Float)(uvWidth) ) * uvLeft1);
HXDLIN(1847)								 ::__hxcpp_memory_set_float(this26->buffer->b,(this26->byteOffset + 12),val8);
            							}
HXLINE(1848)							{
HXLINE(1848)								 ::lime::utils::ArrayBufferView this27 = this->_hx___vertexBufferData;
HXDLIN(1848)								 ::__hxcpp_memory_set_float(this27->buffer->b,(this27->byteOffset + 16),uvHeight);
            							}
HXLINE(1850)							{
HXLINE(1850)								 ::lime::utils::ArrayBufferView this28 = this->_hx___vertexBufferData;
HXDLIN(1850)								 ::__hxcpp_memory_set_float(this28->buffer->b,(this28->byteOffset + 60),renderedHeight1);
            							}
HXLINE(1851)							{
HXLINE(1851)								 ::lime::utils::ArrayBufferView this29 = this->_hx___vertexBufferData;
HXDLIN(1851)								 ::__hxcpp_memory_set_float(this29->buffer->b,(this29->byteOffset + 72),uvHeight);
            							}
HXLINE(1853)							{
HXLINE(1853)								 ::lime::utils::ArrayBufferView this30 = this->_hx___vertexBufferData;
HXDLIN(1853)								 ::__hxcpp_memory_set_float(this30->buffer->b,(this30->byteOffset + 112),renderedLeft1);
            							}
HXLINE(1854)							{
HXLINE(1854)								 ::lime::utils::ArrayBufferView this31 = this->_hx___vertexBufferData;
HXDLIN(1854)								Float val9 = (( (Float)(uvWidth) ) * uvLeft1);
HXDLIN(1854)								 ::__hxcpp_memory_set_float(this31->buffer->b,(this31->byteOffset + 124),val9);
            							}
HXLINE(1857)							{
HXLINE(1857)								 ::lime::utils::ArrayBufferView this32 = this->_hx___vertexBufferData;
HXDLIN(1857)								Float val10 = (renderedLeft1 + renderedCenterX2);
HXDLIN(1857)								 ::__hxcpp_memory_set_float(this32->buffer->b,(this32->byteOffset + 224),val10);
            							}
HXLINE(1858)							{
HXLINE(1858)								 ::lime::utils::ArrayBufferView this33 = this->_hx___vertexBufferData;
HXDLIN(1858)								 ::__hxcpp_memory_set_float(this33->buffer->b,(this33->byteOffset + 228),renderedHeight1);
            							}
HXLINE(1859)							{
HXLINE(1859)								 ::lime::utils::ArrayBufferView this34 = this->_hx___vertexBufferData;
HXDLIN(1859)								Float val11 = (( (Float)(uvWidth) ) * (uvLeft1 + uvCenterX1));
HXDLIN(1859)								 ::__hxcpp_memory_set_float(this34->buffer->b,(this34->byteOffset + 236),val11);
            							}
HXLINE(1860)							{
HXLINE(1860)								 ::lime::utils::ArrayBufferView this35 = this->_hx___vertexBufferData;
HXDLIN(1860)								 ::__hxcpp_memory_set_float(this35->buffer->b,(this35->byteOffset + 240),uvHeight);
            							}
HXLINE(1862)							{
HXLINE(1862)								 ::lime::utils::ArrayBufferView this36 = this->_hx___vertexBufferData;
HXDLIN(1862)								Float val12 = (renderedLeft1 + renderedCenterX2);
HXDLIN(1862)								 ::__hxcpp_memory_set_float(this36->buffer->b,(this36->byteOffset + 280),val12);
            							}
HXLINE(1863)							{
HXLINE(1863)								 ::lime::utils::ArrayBufferView this37 = this->_hx___vertexBufferData;
HXDLIN(1863)								Float val13 = (( (Float)(uvWidth) ) * (uvLeft1 + uvCenterX1));
HXDLIN(1863)								 ::__hxcpp_memory_set_float(this37->buffer->b,(this37->byteOffset + 292),val13);
            							}
HXLINE(1866)							{
HXLINE(1866)								 ::lime::utils::ArrayBufferView this38 = this->_hx___vertexBufferData;
HXDLIN(1866)								Float val14 = ( (Float)(this->width) );
HXDLIN(1866)								 ::__hxcpp_memory_set_float(this38->buffer->b,(this38->byteOffset + 336),val14);
            							}
HXLINE(1867)							{
HXLINE(1867)								 ::lime::utils::ArrayBufferView this39 = this->_hx___vertexBufferData;
HXDLIN(1867)								 ::__hxcpp_memory_set_float(this39->buffer->b,(this39->byteOffset + 340),renderedHeight1);
            							}
HXLINE(1868)							{
HXLINE(1868)								 ::lime::utils::ArrayBufferView this40 = this->_hx___vertexBufferData;
HXDLIN(1868)								 ::__hxcpp_memory_set_float(this40->buffer->b,(this40->byteOffset + 348),uvWidth);
            							}
HXLINE(1869)							{
HXLINE(1869)								 ::lime::utils::ArrayBufferView this41 = this->_hx___vertexBufferData;
HXDLIN(1869)								 ::__hxcpp_memory_set_float(this41->buffer->b,(this41->byteOffset + 352),uvHeight);
            							}
HXLINE(1871)							{
HXLINE(1871)								 ::lime::utils::ArrayBufferView this42 = this->_hx___vertexBufferData;
HXDLIN(1871)								Float val15 = ( (Float)(this->width) );
HXDLIN(1871)								 ::__hxcpp_memory_set_float(this42->buffer->b,(this42->byteOffset + 392),val15);
            							}
HXLINE(1872)							{
HXLINE(1872)								 ::lime::utils::ArrayBufferView this43 = this->_hx___vertexBufferData;
HXDLIN(1872)								 ::__hxcpp_memory_set_float(this43->buffer->b,(this43->byteOffset + 404),uvWidth);
            							}
HXLINE(1874)							this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1879)				this->_hx___vertexBufferGrid = null();
            			}
HXLINE(1882)			if (hx::IsNull( this->_hx___vertexBuffer )) {
HXLINE(1884)				 ::haxe::io::Bytes buffer3 = null();
HXDLIN(1884)				::cpp::VirtualArray array3 = null();
HXDLIN(1884)				 ::openfl::_Vector::FloatVector vector3 = null();
HXDLIN(1884)				 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN(1884)				 ::Dynamic len3 = null();
HXDLIN(1884)				 ::lime::utils::ArrayBufferView this44 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,56,8);
HXDLIN(1884)				this->_hx___vertexBufferData = this44;
HXLINE(1886)				{
HXLINE(1886)					 ::lime::utils::ArrayBufferView this45 = this->_hx___vertexBufferData;
HXDLIN(1886)					Float val16 = ( (Float)(this->width) );
HXDLIN(1886)					 ::__hxcpp_memory_set_float(this45->buffer->b,this45->byteOffset,val16);
            				}
HXLINE(1887)				{
HXLINE(1887)					 ::lime::utils::ArrayBufferView this46 = this->_hx___vertexBufferData;
HXDLIN(1887)					Float val17 = ( (Float)(this->height) );
HXDLIN(1887)					 ::__hxcpp_memory_set_float(this46->buffer->b,(this46->byteOffset + 4),val17);
            				}
HXLINE(1888)				{
HXLINE(1888)					 ::lime::utils::ArrayBufferView this47 = this->_hx___vertexBufferData;
HXDLIN(1888)					 ::__hxcpp_memory_set_float(this47->buffer->b,(this47->byteOffset + 12),uvWidth);
            				}
HXLINE(1889)				{
HXLINE(1889)					 ::lime::utils::ArrayBufferView this48 = this->_hx___vertexBufferData;
HXDLIN(1889)					 ::__hxcpp_memory_set_float(this48->buffer->b,(this48->byteOffset + 16),uvHeight);
            				}
HXLINE(1890)				{
HXLINE(1890)					 ::lime::utils::ArrayBufferView this49 = this->_hx___vertexBufferData;
HXDLIN(1890)					Float val18 = ( (Float)(this->height) );
HXDLIN(1890)					 ::__hxcpp_memory_set_float(this49->buffer->b,(this49->byteOffset + 60),val18);
            				}
HXLINE(1891)				{
HXLINE(1891)					 ::lime::utils::ArrayBufferView this50 = this->_hx___vertexBufferData;
HXDLIN(1891)					 ::__hxcpp_memory_set_float(this50->buffer->b,(this50->byteOffset + 72),uvHeight);
            				}
HXLINE(1892)				{
HXLINE(1892)					 ::lime::utils::ArrayBufferView this51 = this->_hx___vertexBufferData;
HXDLIN(1892)					Float val19 = ( (Float)(this->width) );
HXDLIN(1892)					 ::__hxcpp_memory_set_float(this51->buffer->b,(this51->byteOffset + 112),val19);
            				}
HXLINE(1893)				{
HXLINE(1893)					 ::lime::utils::ArrayBufferView this52 = this->_hx___vertexBufferData;
HXDLIN(1893)					 ::__hxcpp_memory_set_float(this52->buffer->b,(this52->byteOffset + 124),uvWidth);
            				}
HXLINE(1895)				this->_hx___vertexBuffer = context->createVertexBuffer(3,14,null());
            			}
HXLINE(1920)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
HXLINE(1994)		return this->_hx___vertexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getVertexBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
            		bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2032_getColorBoundsRect)
HXLINE(2034)		if (!(this->readable)) {
HXLINE(2034)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
            		}
HXLINE(2036)		bool _hx_tmp;
HXDLIN(2036)		if (!(!(this->transparent))) {
HXLINE(2036)			_hx_tmp = (((mask >> 24) & 255) > 0);
            		}
            		else {
HXLINE(2036)			_hx_tmp = true;
            		}
HXDLIN(2036)		if (_hx_tmp) {
HXLINE(2038)			int color1 = color;
HXLINE(2039)			if (((hx::UShr(color1,24) & 255) == 0)) {
HXLINE(2039)				color1 = 0;
            			}
            		}
HXLINE(2042)		 ::lime::math::Rectangle rect = this->image->getColorBoundsRect(mask,color,findColor,1);
HXLINE(2043)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2073_getPixel)
HXLINE(2074)		if (!(this->readable)) {
HXLINE(2074)			return 0;
            		}
HXLINE(2076)		return this->image->getPixel(x,y,1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2105_getPixel32)
HXLINE(2106)		if (!(this->readable)) {
HXLINE(2106)			return 0;
            		}
HXLINE(2108)		return this->image->getPixel32(x,y,1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2124_getPixels)
HXLINE(2126)		if (!(this->readable)) {
HXLINE(2126)			return null();
            		}
HXLINE(2127)		if (hx::IsNull( rect )) {
HXLINE(2127)			rect = this->rect;
            		}
HXLINE(2128)		 ::lime::graphics::Image byteArray = this->image;
HXDLIN(2128)		 ::openfl::utils::ByteArrayData byteArray1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(byteArray->getPixels(rect->_hx___toLimeRectangle(),1));
HXLINE(2130)		byteArray1->_hx___endian = 0;
HXLINE(2131)		return byteArray1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2147_getSurface)
HXLINE(2149)		if (!(this->readable)) {
HXLINE(2149)			return null();
            		}
HXLINE(2151)		if (hx::IsNull( this->_hx___surface )) {
HXLINE(2153)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE(2156)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::openfl::display3D::textures::TextureBase BitmapData_obj::getTexture( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2171_getTexture)
HXLINE(2172)		if (!(this->_hx___isValid)) {
HXLINE(2172)			return null();
            		}
HXLINE(2174)		bool _hx_tmp;
HXDLIN(2174)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE(2174)			_hx_tmp = hx::IsNotEq( this->_hx___textureContext,context->_hx___context );
            		}
            		else {
HXLINE(2174)			_hx_tmp = true;
            		}
HXDLIN(2174)		if (_hx_tmp) {
HXLINE(2176)			this->_hx___textureContext = context->_hx___context;
HXLINE(2177)			this->_hx___texture = context->createRectangleTexture(this->width,this->height,1,false);
HXLINE(2184)			this->_hx___textureVersion = -1;
            		}
HXLINE(2192)		bool _hx_tmp1;
HXDLIN(2192)		if (hx::IsNotNull( this->image )) {
HXLINE(2192)			_hx_tmp1 = (this->image->version > this->_hx___textureVersion);
            		}
            		else {
HXLINE(2192)			_hx_tmp1 = false;
            		}
HXDLIN(2192)		if (_hx_tmp1) {
HXLINE(2194)			if (hx::IsNotNull( this->_hx___surface )) {
HXLINE(2196)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE(2199)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(2212)			bool _hx_tmp2;
HXDLIN(2212)			if (!(textureImage->get_premultiplied())) {
HXLINE(2212)				_hx_tmp2 = textureImage->get_transparent();
            			}
            			else {
HXLINE(2212)				_hx_tmp2 = false;
            			}
HXDLIN(2212)			if (_hx_tmp2) {
HXLINE(2214)				textureImage = textureImage->clone();
HXLINE(2215)				textureImage->set_premultiplied(true);
            			}
HXLINE(2222)			this->_hx___texture->_hx___uploadFromImage(textureImage);
HXLINE(2224)			this->_hx___textureVersion = this->image->version;
HXLINE(2226)			this->_hx___textureWidth = textureImage->buffer->width;
HXLINE(2227)			this->_hx___textureHeight = textureImage->buffer->height;
            		}
HXLINE(2230)		bool _hx_tmp3;
HXDLIN(2230)		if (!(this->readable)) {
HXLINE(2230)			_hx_tmp3 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(2230)			_hx_tmp3 = false;
            		}
HXDLIN(2230)		if (_hx_tmp3) {
HXLINE(2232)			this->_hx___surface = null();
HXLINE(2233)			this->image = null();
            		}
HXLINE(2237)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2249_getVector)
HXLINE(2250)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(2251)		int _hx_int = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(2251)		Float length;
HXDLIN(2251)		if ((_hx_int < 0)) {
HXLINE(2251)			length = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2251)			length = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2251)		int int1 = 4;
HXDLIN(2251)		Float length1;
HXDLIN(2251)		if ((int1 < 0)) {
HXLINE(2251)			length1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE(2251)			length1 = (int1 + ((Float)0.0));
            		}
HXDLIN(2251)		int length2 = ::Std_obj::_hx_int((length / length1));
HXLINE(2252)		::Array< int > array = null();
HXDLIN(2252)		 ::openfl::_Vector::IntVector result =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length2,true,array);
HXLINE(2254)		{
HXLINE(2254)			int _g = 0;
HXDLIN(2254)			int _g1 = length2;
HXDLIN(2254)			while((_g < _g1)){
HXLINE(2254)				_g = (_g + 1);
HXDLIN(2254)				int i = (_g - 1);
HXLINE(2256)				result->set(i,pixels->readUnsignedInt());
            			}
            		}
HXLINE(2259)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2272_histogram)
HXLINE(2273)		 ::openfl::geom::Rectangle rect;
HXDLIN(2273)		if (hx::IsNotNull( hRect )) {
HXLINE(2273)			rect = hRect;
            		}
            		else {
HXLINE(2273)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
            		}
HXLINE(2274)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(2275)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2275)		{
HXLINE(2275)			::Array< int > _g1 = ::Array_obj< int >::__new(0);
HXDLIN(2275)			{
HXLINE(2275)				int _g2 = 0;
HXDLIN(2275)				while((_g2 < 256)){
HXLINE(2275)					_g2 = (_g2 + 1);
HXDLIN(2275)					int j = (_g2 - 1);
HXDLIN(2275)					_g1->push(0);
            				}
            			}
HXDLIN(2275)			_g->push(_g1);
HXDLIN(2275)			::Array< int > _g11 = ::Array_obj< int >::__new(0);
HXDLIN(2275)			{
HXLINE(2275)				int _g21 = 0;
HXDLIN(2275)				while((_g21 < 256)){
HXLINE(2275)					_g21 = (_g21 + 1);
HXDLIN(2275)					int j1 = (_g21 - 1);
HXDLIN(2275)					_g11->push(0);
            				}
            			}
HXDLIN(2275)			_g->push(_g11);
HXDLIN(2275)			::Array< int > _g12 = ::Array_obj< int >::__new(0);
HXDLIN(2275)			{
HXLINE(2275)				int _g22 = 0;
HXDLIN(2275)				while((_g22 < 256)){
HXLINE(2275)					_g22 = (_g22 + 1);
HXDLIN(2275)					int j2 = (_g22 - 1);
HXDLIN(2275)					_g12->push(0);
            				}
            			}
HXDLIN(2275)			_g->push(_g12);
HXDLIN(2275)			::Array< int > _g13 = ::Array_obj< int >::__new(0);
HXDLIN(2275)			{
HXLINE(2275)				int _g23 = 0;
HXDLIN(2275)				while((_g23 < 256)){
HXLINE(2275)					_g23 = (_g23 + 1);
HXDLIN(2275)					int j3 = (_g23 - 1);
HXDLIN(2275)					_g13->push(0);
            				}
            			}
HXDLIN(2275)			_g->push(_g13);
            		}
HXDLIN(2275)		::Array< ::Dynamic> result = _g;
HXLINE(2277)		{
HXLINE(2277)			int _g14 = 0;
HXDLIN(2277)			int _g24 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(2277)			while((_g14 < _g24)){
HXLINE(2277)				_g14 = (_g14 + 1);
HXDLIN(2277)				int i = (_g14 - 1);
HXLINE(2279)				::Array< int > result1 = result->__get(hx::Mod(i,4)).StaticCast< ::Array< int > >();
HXDLIN(2279)				++result1[pixels->readUnsignedByte()];
            			}
            		}
HXLINE(2282)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< int >  __o_secondAlphaThreshold){
            		int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2318_hitTest)
HXLINE(2319)		if (!(this->readable)) {
HXLINE(2319)			return false;
            		}
HXLINE(2322)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE(2324)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->_hx___bitmapData;
            		}
HXLINE(2328)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >())) {
HXLINE(2330)			 ::openfl::geom::Point secondPoint = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(2332)			int x = ::Std_obj::_hx_int((secondPoint->x - firstPoint->x));
HXLINE(2333)			int y = ::Std_obj::_hx_int((secondPoint->y - firstPoint->y));
HXLINE(2335)			if (this->rect->contains(( (Float)(x) ),( (Float)(y) ))) {
HXLINE(2337)				int pixel = this->getPixel32(x,y);
HXLINE(2339)				if ((((pixel >> 24) & 255) > firstAlphaThreshold)) {
HXLINE(2341)					return true;
            				}
            			}
            		}
            		else {
HXLINE(2345)			if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(2347)				 ::openfl::display::BitmapData secondBitmapData = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(2348)				int x1;
HXDLIN(2348)				int y1;
HXLINE(2350)				if (hx::IsNull( secondBitmapDataPoint )) {
HXLINE(2352)					x1 = 0;
HXLINE(2353)					y1 = 0;
            				}
            				else {
HXLINE(2357)					x1 = ::Math_obj::round((secondBitmapDataPoint->x - firstPoint->x));
HXLINE(2358)					y1 = ::Math_obj::round((secondBitmapDataPoint->y - firstPoint->y));
            				}
HXLINE(2361)				 ::openfl::geom::Rectangle hitRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2362)				hitRect->setTo(( (Float)(x1) ),( (Float)(y1) ),( (Float)(secondBitmapData->width) ),( (Float)(secondBitmapData->height) ));
HXLINE(2364)				if (this->rect->intersects(hitRect)) {
HXLINE(2366)					if ((x1 < 0)) {
HXLINE(2368)						hitRect->x = ( (Float)(0) );
HXLINE(2369)						hitRect->width = ::Math_obj::min(( (Float)((secondBitmapData->width + x1)) ),( (Float)(this->width) ));
            					}
            					else {
HXLINE(2373)						hitRect->width = ::Math_obj::min(( (Float)(secondBitmapData->width) ),( (Float)((this->width - x1)) ));
            					}
HXLINE(2376)					if ((y1 < 0)) {
HXLINE(2378)						hitRect->y = ( (Float)(0) );
HXLINE(2379)						hitRect->height = ::Math_obj::min(( (Float)((secondBitmapData->height + y1)) ),( (Float)(this->height) ));
            					}
            					else {
HXLINE(2383)						hitRect->height = ::Math_obj::min(( (Float)(secondBitmapData->height) ),( (Float)((this->height - y1)) ));
            					}
HXLINE(2386)					 ::openfl::utils::ByteArrayData pixels = this->getPixels(hitRect);
HXLINE(2388)					Float _hx_tmp;
HXDLIN(2388)					if ((x1 < 0)) {
HXLINE(2388)						_hx_tmp = ( (Float)(-(x1)) );
            					}
            					else {
HXLINE(2388)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(2388)					hitRect->x = _hx_tmp;
HXLINE(2389)					Float _hx_tmp1;
HXDLIN(2389)					if ((y1 < 0)) {
HXLINE(2389)						_hx_tmp1 = ( (Float)(-(y1)) );
            					}
            					else {
HXLINE(2389)						_hx_tmp1 = ( (Float)(0) );
            					}
HXDLIN(2389)					hitRect->y = _hx_tmp1;
HXLINE(2391)					 ::openfl::utils::ByteArrayData testPixels = secondBitmapData->getPixels(hitRect);
HXLINE(2393)					int length = ::Std_obj::_hx_int((hitRect->width * hitRect->height));
HXLINE(2394)					int pixel1;
HXDLIN(2394)					int testPixel;
HXLINE(2396)					{
HXLINE(2396)						int _g = 0;
HXDLIN(2396)						int _g1 = length;
HXDLIN(2396)						while((_g < _g1)){
HXLINE(2396)							_g = (_g + 1);
HXDLIN(2396)							int i = (_g - 1);
HXLINE(2398)							pixel1 = pixels->readUnsignedInt();
HXLINE(2399)							testPixel = testPixels->readUnsignedInt();
HXLINE(2401)							bool _hx_tmp2;
HXDLIN(2401)							int a = (hx::UShr(pixel1,24) & 255);
HXDLIN(2401)							bool aNeg = (a < 0);
HXDLIN(2401)							bool bNeg = (firstAlphaThreshold < 0);
HXDLIN(2401)							bool _hx_tmp3;
HXDLIN(2401)							if ((aNeg != bNeg)) {
HXLINE(2401)								_hx_tmp3 = aNeg;
            							}
            							else {
HXLINE(2401)								_hx_tmp3 = (a > firstAlphaThreshold);
            							}
HXDLIN(2401)							if (_hx_tmp3) {
HXLINE(2401)								int a1 = (hx::UShr(testPixel,24) & 255);
HXDLIN(2401)								bool aNeg1 = (a1 < 0);
HXDLIN(2401)								bool bNeg1 = (secondAlphaThreshold < 0);
HXDLIN(2401)								if ((aNeg1 != bNeg1)) {
HXLINE(2401)									_hx_tmp2 = aNeg1;
            								}
            								else {
HXLINE(2401)									_hx_tmp2 = (a1 > secondAlphaThreshold);
            								}
            							}
            							else {
HXLINE(2401)								_hx_tmp2 = false;
            							}
HXDLIN(2401)							if (_hx_tmp2) {
HXLINE(2403)								::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
HXLINE(2404)								return true;
            							}
            						}
            					}
            				}
HXLINE(2409)				::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
            			}
            			else {
HXLINE(2411)				if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >())) {
HXLINE(2413)					 ::openfl::geom::Rectangle secondRectangle = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2414)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(2415)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(2416)					secondRectangle->_hx___contract(( (Float)(0) ),( (Float)(0) ),( (Float)(this->width) ),( (Float)(this->height) ));
HXLINE(2418)					bool _hx_tmp4;
HXDLIN(2418)					if ((secondRectangle->width > 0)) {
HXLINE(2418)						_hx_tmp4 = (secondRectangle->height > 0);
            					}
            					else {
HXLINE(2418)						_hx_tmp4 = false;
            					}
HXDLIN(2418)					if (_hx_tmp4) {
HXLINE(2420)						 ::openfl::utils::ByteArrayData pixels1 = this->getPixels(secondRectangle);
HXLINE(2421)						int _hx_int = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1);
HXDLIN(2421)						Float length1;
HXDLIN(2421)						if ((_hx_int < 0)) {
HXLINE(2421)							length1 = (((Float)4294967296.0) + _hx_int);
            						}
            						else {
HXLINE(2421)							length1 = (_hx_int + ((Float)0.0));
            						}
HXDLIN(2421)						int int1 = 4;
HXDLIN(2421)						Float length2;
HXDLIN(2421)						if ((int1 < 0)) {
HXLINE(2421)							length2 = (((Float)4294967296.0) + int1);
            						}
            						else {
HXLINE(2421)							length2 = (int1 + ((Float)0.0));
            						}
HXDLIN(2421)						int length3 = ::Std_obj::_hx_int((length1 / length2));
HXLINE(2422)						int pixel2;
HXLINE(2424)						{
HXLINE(2424)							int _g2 = 0;
HXDLIN(2424)							int _g11 = length3;
HXDLIN(2424)							while((_g2 < _g11)){
HXLINE(2424)								_g2 = (_g2 + 1);
HXDLIN(2424)								int i1 = (_g2 - 1);
HXLINE(2426)								pixel2 = pixels1->readUnsignedInt();
HXLINE(2428)								int a2 = (hx::UShr(pixel2,24) & 255);
HXDLIN(2428)								bool aNeg2 = (a2 < 0);
HXDLIN(2428)								bool bNeg2 = (firstAlphaThreshold < 0);
HXDLIN(2428)								bool _hx_tmp5;
HXDLIN(2428)								if ((aNeg2 != bNeg2)) {
HXLINE(2428)									_hx_tmp5 = aNeg2;
            								}
            								else {
HXLINE(2428)									_hx_tmp5 = (a2 > firstAlphaThreshold);
            								}
HXDLIN(2428)								if (_hx_tmp5) {
HXLINE(2430)									::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
HXLINE(2431)									return true;
            								}
            							}
            						}
            					}
HXLINE(2436)					::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
            				}
            			}
            		}
HXLINE(2439)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2525_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2566_merge)
HXLINE(2568)		bool _hx_tmp;
HXDLIN(2568)		bool _hx_tmp1;
HXDLIN(2568)		bool _hx_tmp2;
HXDLIN(2568)		bool _hx_tmp3;
HXDLIN(2568)		if (!(!(this->readable))) {
HXLINE(2568)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(2568)			_hx_tmp3 = true;
            		}
HXDLIN(2568)		if (!(_hx_tmp3)) {
HXLINE(2568)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(2568)			_hx_tmp2 = true;
            		}
HXDLIN(2568)		if (!(_hx_tmp2)) {
HXLINE(2568)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2568)			_hx_tmp1 = true;
            		}
HXDLIN(2568)		if (!(_hx_tmp1)) {
HXLINE(2568)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2568)			_hx_tmp = true;
            		}
HXDLIN(2568)		if (_hx_tmp) {
HXLINE(2568)			return;
            		}
HXLINE(2569)		 ::lime::graphics::Image _hx_tmp4 = this->image;
HXDLIN(2569)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(2569)		 ::lime::math::Rectangle _hx_tmp5 = sourceRect->_hx___toLimeRectangle();
HXDLIN(2569)		_hx_tmp4->merge(sourceBitmapData1,_hx_tmp5,destPoint->_hx___toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,randomSeed1) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2610_noise)
HXLINE(2611)			randomSeed1[0] = ((randomSeed1->__get(0) * (int)1103515245) + 12345);
HXLINE(2612)			return hx::Mod(::Std_obj::_hx_int(::Math_obj::abs((( (Float)(randomSeed1->__get(0)) ) / ( (Float)(65536) )))),32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		int low = __o_low.Default(0);
            		int high = __o_high.Default(255);
            		int channelOptions = __o_channelOptions.Default(7);
            		bool grayScale = __o_grayScale.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2602_noise)
HXDLIN(2602)		::Array< int > randomSeed1 = ::Array_obj< int >::__new(1)->init(0,randomSeed);
HXLINE(2604)		if (!(this->readable)) {
HXLINE(2604)			return;
            		}
HXLINE(2609)		 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(2607)		 ::Dynamic rand = func;
HXLINE(2615)		rand();
HXLINE(2618)		int range = (high - low);
HXLINE(2620)		bool redChannel = ((channelOptions & 1) == 1);
HXLINE(2621)		bool greenChannel = (((channelOptions & 2) >> 1) == 1);
HXLINE(2622)		bool blueChannel = (((channelOptions & 4) >> 2) == 1);
HXLINE(2623)		bool alphaChannel = (((channelOptions & 8) >> 3) == 1);
HXLINE(2625)		{
HXLINE(2625)			int _g = 0;
HXDLIN(2625)			int _g1 = this->height;
HXDLIN(2625)			while((_g < _g1)){
HXLINE(2625)				_g = (_g + 1);
HXDLIN(2625)				int y = (_g - 1);
HXLINE(2627)				{
HXLINE(2627)					int _g2 = 0;
HXDLIN(2627)					int _g11 = this->width;
HXDLIN(2627)					while((_g2 < _g11)){
HXLINE(2627)						_g2 = (_g2 + 1);
HXDLIN(2627)						int x = (_g2 - 1);
HXLINE(2630)						int red = 0;
HXLINE(2631)						int blue = 0;
HXLINE(2632)						int green = 0;
HXLINE(2633)						int alpha = 255;
HXLINE(2635)						if (grayScale) {
HXLINE(2637)							blue = (low + hx::Mod(rand(),range));
HXDLIN(2637)							green = blue;
HXDLIN(2637)							red = green;
HXLINE(2638)							alpha = 255;
            						}
            						else {
HXLINE(2642)							if (redChannel) {
HXLINE(2642)								red = (low + hx::Mod(rand(),range));
            							}
HXLINE(2643)							if (greenChannel) {
HXLINE(2643)								green = (low + hx::Mod(rand(),range));
            							}
HXLINE(2644)							if (blueChannel) {
HXLINE(2644)								blue = (low + hx::Mod(rand(),range));
            							}
HXLINE(2645)							if (alphaChannel) {
HXLINE(2645)								alpha = (low + hx::Mod(rand(),range));
            							}
            						}
HXLINE(2648)						int rgb = alpha;
HXLINE(2649)						rgb = ((rgb << 8) + red);
HXLINE(2650)						rgb = ((rgb << 8) + green);
HXLINE(2651)						rgb = ((rgb << 8) + blue);
HXLINE(2653)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2700_paletteMap)
HXLINE(2701)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(2702)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(2704)		 ::openfl::utils::ByteArrayData pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE(2706)		int pixelValue;
HXDLIN(2706)		int r;
HXDLIN(2706)		int g;
HXDLIN(2706)		int b;
HXDLIN(2706)		int a;
HXDLIN(2706)		int color;
HXLINE(2708)		{
HXLINE(2708)			int _g = 0;
HXDLIN(2708)			int _g1 = (sh * sw);
HXDLIN(2708)			while((_g < _g1)){
HXLINE(2708)				_g = (_g + 1);
HXDLIN(2708)				int i = (_g - 1);
HXLINE(2710)				pixelValue = pixels->readUnsignedInt();
HXLINE(2712)				if (hx::IsNull( alphaArray )) {
HXLINE(2712)					a = (pixelValue & -16777216);
            				}
            				else {
HXLINE(2712)					a = alphaArray->__get(((pixelValue >> 24) & 255));
            				}
HXLINE(2713)				if (hx::IsNull( redArray )) {
HXLINE(2713)					r = (pixelValue & 16711680);
            				}
            				else {
HXLINE(2713)					r = redArray->__get(((pixelValue >> 16) & 255));
            				}
HXLINE(2714)				if (hx::IsNull( greenArray )) {
HXLINE(2714)					g = (pixelValue & 65280);
            				}
            				else {
HXLINE(2714)					g = greenArray->__get(((pixelValue >> 8) & 255));
            				}
HXLINE(2715)				if (hx::IsNull( blueArray )) {
HXLINE(2715)					b = (pixelValue & 255);
            				}
            				else {
HXLINE(2715)					b = blueArray->__get((pixelValue & 255));
            				}
HXLINE(2717)				color = (((a + r) + g) + b);
HXLINE(2719)				pixels->position = (i * 4);
HXLINE(2720)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(2723)		pixels->position = 0;
HXLINE(2724)		 ::openfl::geom::Rectangle destRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2725)		destRect->setTo(destPoint->x,destPoint->y,( (Float)(sw) ),( (Float)(sh) ));
HXLINE(2726)		this->setPixels(destRect,pixels);
HXLINE(2727)		::openfl::geom::Rectangle_obj::_hx___pool->release(destRect);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
            		int channelOptions = __o_channelOptions.Default(7);
            		bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2798_perlinNoise)
HXLINE(2799)		if (!(this->readable)) {
HXLINE(2799)			return;
            		}
HXLINE(2800)		 ::openfl::_internal::utils::PerlinNoise noise =  ::openfl::_internal::utils::PerlinNoise_obj::__alloc( HX_CTX ,randomSeed,numOctaves,channelOptions,grayScale,((Float)0.5),stitch,((Float)0.15));
HXLINE(2801)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,( (Float)(0) ));
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2814_scroll)
HXLINE(2815)		if (!(this->readable)) {
HXLINE(2815)			return;
            		}
HXLINE(2816)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2837_setPixel)
HXLINE(2838)		if (!(this->readable)) {
HXLINE(2838)			return;
            		}
HXLINE(2840)		this->image->setPixel(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2876_setPixel32)
HXLINE(2877)		if (!(this->readable)) {
HXLINE(2877)			return;
            		}
HXLINE(2879)		this->image->setPixel32(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2903_setPixels)
HXLINE(2904)		bool _hx_tmp;
HXDLIN(2904)		if (!(!(this->readable))) {
HXLINE(2904)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(2904)			_hx_tmp = true;
            		}
HXDLIN(2904)		if (_hx_tmp) {
HXLINE(2904)			return;
            		}
HXLINE(2906)		Float length = ((rect->width * rect->height) * ( (Float)(4) ));
HXLINE(2907)		int _hx_int = (byteArray->length - byteArray->position);
HXDLIN(2907)		Float _hx_tmp1;
HXDLIN(2907)		if ((_hx_int < 0)) {
HXLINE(2907)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2907)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2907)		if ((_hx_tmp1 < length)) {
HXLINE(2907)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("End of file was encountered.",d3,7b,d9,4f),2030));
            		}
HXLINE(2910)		 ::lime::graphics::Image _hx_tmp2 = this->image;
HXDLIN(2910)		 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN(2910)		 ::lime::utils::BytePointerData _hx_tmp4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytePointer(byteArray);
HXDLIN(2910)		_hx_tmp2->setPixels(_hx_tmp3,_hx_tmp4,1,::openfl::utils::_Endian::Endian_Impl__obj::toLimeEndian(byteArray->_hx___endian));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2924_setVector)
HXLINE(2925)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(2925)		 ::openfl::utils::ByteArrayData byteArray = this1;
HXLINE(2926)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(inputVector->get_length() * 4));
HXLINE(2928)		{
HXLINE(2928)			 ::Dynamic color = inputVector->iterator();
HXDLIN(2928)			while(( (bool)(color->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2928)				int color1 = ( (int)(color->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2930)				byteArray->writeUnsignedInt(color1);
            			}
            		}
HXLINE(2933)		byteArray->position = 0;
HXLINE(2934)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
            		int color = __o_color.Default(0);
            		int mask = __o_mask.Default(-1);
            		bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2987_threshold)
HXLINE(2988)		bool _hx_tmp;
HXDLIN(2988)		bool _hx_tmp1;
HXDLIN(2988)		bool _hx_tmp2;
HXDLIN(2988)		bool _hx_tmp3;
HXDLIN(2988)		bool _hx_tmp4;
HXDLIN(2988)		bool _hx_tmp5;
HXDLIN(2988)		if (hx::IsNotNull( sourceBitmapData )) {
HXLINE(2988)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2988)			_hx_tmp5 = true;
            		}
HXDLIN(2988)		if (!(_hx_tmp5)) {
HXLINE(2988)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2988)			_hx_tmp4 = true;
            		}
HXDLIN(2988)		if (!(_hx_tmp4)) {
HXLINE(2988)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(2988)			_hx_tmp3 = true;
            		}
HXDLIN(2988)		if (!(_hx_tmp3)) {
HXLINE(2988)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(2988)			_hx_tmp2 = true;
            		}
HXDLIN(2988)		if (!(_hx_tmp2)) {
HXLINE(2988)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(2988)			_hx_tmp1 = true;
            		}
HXDLIN(2988)		if (!(_hx_tmp1)) {
HXLINE(2988)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(2988)			_hx_tmp = true;
            		}
HXDLIN(2988)		if (_hx_tmp) {
HXLINE(2996)			return 0;
            		}
HXLINE(3000)		 ::lime::graphics::Image _hx_tmp6 = this->image;
HXDLIN(3000)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(3000)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(3000)		return _hx_tmp6->threshold(sourceBitmapData1,_hx_tmp7,destPoint->_hx___toLimeVector2(),operation,threshold,color,mask,copySource,1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3019_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3022___applyAlpha)
HXLINE(3028)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(3030)		{
HXLINE(3030)			int _g = 0;
HXDLIN(3030)			int _g1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(3030)			while((_g < _g1)){
HXLINE(3030)				_g = (_g + 1);
HXDLIN(3030)				int i = (_g - 1);
HXLINE(3032)				{
HXLINE(3032)					int val = alpha->readUnsignedByte();
HXDLIN(3032)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + ((i * 4) + 3)),val);
            				}
            			}
            		}
HXLINE(3035)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3039___fromBase64)
HXLINE(3041)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXLINE(3042)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3047___fromBytes)
HXLINE(3049)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(3050)		this->_hx___fromImage(image);
HXLINE(3052)		if (hx::IsNotNull( rawAlpha )) {
HXLINE(3054)			this->_hx___applyAlpha(rawAlpha);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3060___fromFile)
HXLINE(3062)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(3063)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3071___fromImage)
HXDLIN(3071)		bool _hx_tmp;
HXDLIN(3071)		if (hx::IsNotNull( image )) {
HXDLIN(3071)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(3071)			_hx_tmp = false;
            		}
HXDLIN(3071)		if (_hx_tmp) {
HXLINE(3073)			this->image = image;
HXLINE(3075)			this->width = image->width;
HXLINE(3076)			this->height = image->height;
HXLINE(3077)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,image->width,image->height);
HXLINE(3079)			this->_hx___textureWidth = this->width;
HXLINE(3080)			this->_hx___textureHeight = this->height;
HXLINE(3083)			image->set_format(2);
HXLINE(3084)			image->set_premultiplied(true);
HXLINE(3087)			this->readable = true;
HXLINE(3088)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::BitmapSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3094___fromSymbol)
HXLINE(3095)		this->_hx___symbol = symbol;
HXLINE(3126)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(symbol->path);
HXLINE(3128)		if (hx::IsNotNull( symbol->alpha )) {
HXLINE(3130)			 ::lime::graphics::Image alpha = ::lime::graphics::Image_obj::fromFile(symbol->alpha);
HXLINE(3132)			bool _hx_tmp;
HXDLIN(3132)			if (hx::IsNotNull( image )) {
HXLINE(3132)				_hx_tmp = hx::IsNotNull( alpha );
            			}
            			else {
HXLINE(3132)				_hx_tmp = false;
            			}
HXDLIN(3132)			if (_hx_tmp) {
HXLINE(3134)				 ::lime::math::Rectangle _hx_tmp1 = alpha->get_rect();
HXDLIN(3134)				image->copyChannel(alpha,_hx_tmp1, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE(3135)				image->buffer->premultiplied = true;
            			}
            		}
HXLINE(3143)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromSymbol,(void))

void BitmapData_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3149___getBounds)
HXLINE(3150)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(3151)		this->rect->_hx___transform(bounds,matrix);
HXLINE(3152)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(3153)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getBounds,(void))

 ::lime::app::Future BitmapData_obj::_hx___loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3187___loadFromBase64)
HXLINE(3188)			_gthis->_hx___fromImage(image);
HXLINE(3189)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3184___loadFromBase64)
HXLINE(3183)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3186)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3200___loadFromBytes)
HXLINE(3201)			_gthis->_hx___fromImage(image);
HXLINE(3203)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(3205)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(3208)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3197___loadFromBytes)
HXLINE(3196)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3199)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3219___loadFromFile)
HXLINE(3220)			_gthis->_hx___fromImage(image);
HXLINE(3221)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3216___loadFromFile)
HXLINE(3215)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3218)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___loadFromFile,return )

void BitmapData_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3229___resize)
HXLINE(3230)		this->width = width;
HXLINE(3231)		this->height = height;
HXLINE(3232)		this->rect->width = ( (Float)(width) );
HXLINE(3233)		this->rect->height = ( (Float)(height) );
HXLINE(3235)		this->_hx___textureWidth = width;
HXLINE(3236)		this->_hx___textureHeight = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___setUVRect( ::openfl::display3D::Context3D context,Float x,Float y,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3240___setUVRect)
HXLINE(3241)		 ::openfl::display3D::VertexBuffer3D buffer = this->getVertexBuffer(context,null(),null());
HXLINE(3243)		bool _hx_tmp;
HXDLIN(3243)		if (hx::IsNotNull( buffer )) {
HXLINE(3243)			bool _hx_tmp1;
HXDLIN(3243)			bool _hx_tmp2;
HXDLIN(3243)			if ((width == this->_hx___uvRect->width)) {
HXLINE(3243)				_hx_tmp2 = (height != this->_hx___uvRect->height);
            			}
            			else {
HXLINE(3243)				_hx_tmp2 = true;
            			}
HXDLIN(3243)			if (!(_hx_tmp2)) {
HXLINE(3243)				_hx_tmp1 = (x != this->_hx___uvRect->x);
            			}
            			else {
HXLINE(3243)				_hx_tmp1 = true;
            			}
HXDLIN(3243)			if (!(_hx_tmp1)) {
HXLINE(3243)				_hx_tmp = (y != this->_hx___uvRect->y);
            			}
            			else {
HXLINE(3243)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3243)			_hx_tmp = false;
            		}
HXDLIN(3243)		if (_hx_tmp) {
HXLINE(3245)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(3247)			if (hx::IsNull( this->_hx___uvRect )) {
HXLINE(3247)				this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(3248)			this->_hx___uvRect->setTo(x,y,width,height);
HXLINE(3250)			Float uvX;
HXDLIN(3250)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3250)				uvX = (x / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3250)				uvX = ( (Float)(0) );
            			}
HXLINE(3251)			Float uvY;
HXDLIN(3251)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3251)				uvY = (y / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3251)				uvY = ( (Float)(0) );
            			}
HXLINE(3252)			Float uvWidth;
HXDLIN(3252)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3252)				uvWidth = (width / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3252)				uvWidth = ( (Float)(0) );
            			}
HXLINE(3253)			Float uvHeight;
HXDLIN(3253)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3253)				uvHeight = (height / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3253)				uvHeight = ( (Float)(0) );
            			}
HXLINE(3255)			{
HXLINE(3255)				 ::lime::utils::ArrayBufferView this1 = this->_hx___vertexBufferData;
HXDLIN(3255)				 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,width);
            			}
HXLINE(3256)			{
HXLINE(3256)				 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(3256)				 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),height);
            			}
HXLINE(3257)			{
HXLINE(3257)				 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(3257)				Float val = (uvX + uvWidth);
HXDLIN(3257)				 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 12),val);
            			}
HXLINE(3258)			{
HXLINE(3258)				 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(3258)				Float val1 = (uvY + uvHeight);
HXDLIN(3258)				 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 16),val1);
            			}
HXLINE(3259)			{
HXLINE(3259)				 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(3259)				 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 60),height);
            			}
HXLINE(3260)			{
HXLINE(3260)				 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(3260)				 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 68),uvX);
            			}
HXLINE(3261)			{
HXLINE(3261)				 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(3261)				Float val2 = (uvY + uvHeight);
HXDLIN(3261)				 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val2);
            			}
HXLINE(3262)			{
HXLINE(3262)				 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(3262)				 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),width);
            			}
HXLINE(3263)			{
HXLINE(3263)				 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(3263)				Float val3 = (uvX + uvWidth);
HXDLIN(3263)				 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val3);
            			}
HXLINE(3264)			{
HXLINE(3264)				 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(3264)				 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 128),uvY);
            			}
HXLINE(3265)			{
HXLINE(3265)				 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(3265)				 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 180),uvX);
            			}
HXLINE(3266)			{
HXLINE(3266)				 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(3266)				 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 184),uvY);
            			}
HXLINE(3268)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setUVRect,(void))

void BitmapData_obj::_hx___setVertex(int index,Float x,Float y,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3273___setVertex)
HXLINE(3274)		int i = (index * 14);
HXLINE(3275)		{
HXLINE(3275)			 ::lime::utils::ArrayBufferView this1 = this->_hx___vertexBufferData;
HXDLIN(3275)			 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (i * 4)),x);
            		}
HXLINE(3276)		{
HXLINE(3276)			 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(3276)			 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + ((i + 1) * 4)),y);
            		}
HXLINE(3277)		{
HXLINE(3277)			 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(3277)			 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + ((i + 3) * 4)),u);
            		}
HXLINE(3278)		{
HXLINE(3278)			 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(3278)			 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + ((i + 4) * 4)),v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setVertex,(void))

void BitmapData_obj::_hx___setVertices(::Array< int > indices,Float x,Float y,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3283___setVertices)
HXDLIN(3283)		int _g = 0;
HXDLIN(3283)		while((_g < indices->length)){
HXDLIN(3283)			int index = indices->__get(_g);
HXDLIN(3283)			_g = (_g + 1);
HXLINE(3285)			this->_hx___setVertex(index,x,y,u,v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setVertices,(void))

void BitmapData_obj::_hx___setUOffsets(::Array< int > indices,Float offset){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3291___setUOffsets)
HXDLIN(3291)		int _g = 0;
HXDLIN(3291)		while((_g < indices->length)){
HXDLIN(3291)			int index = indices->__get(_g);
HXDLIN(3291)			_g = (_g + 1);
HXLINE(3293)			{
HXLINE(3293)				int _g1 = ((index * 14) + 3);
HXDLIN(3293)				 ::lime::utils::ArrayBufferView _g11 = this->_hx___vertexBufferData;
HXDLIN(3293)				{
HXLINE(3293)					Float val = ( ::__hxcpp_memory_get_float(_g11->buffer->b,(_g11->byteOffset + (_g1 * 4))) + offset);
HXDLIN(3293)					 ::__hxcpp_memory_set_float(_g11->buffer->b,(_g11->byteOffset + (_g1 * 4)),val);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___setUOffsets,(void))

void BitmapData_obj::_hx___setVOffsets(::Array< int > indices,Float offset){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3299___setVOffsets)
HXDLIN(3299)		int _g = 0;
HXDLIN(3299)		while((_g < indices->length)){
HXDLIN(3299)			int index = indices->__get(_g);
HXDLIN(3299)			_g = (_g + 1);
HXLINE(3301)			{
HXLINE(3301)				int _g1 = ((index * 14) + 4);
HXDLIN(3301)				 ::lime::utils::ArrayBufferView _g11 = this->_hx___vertexBufferData;
HXDLIN(3301)				{
HXLINE(3301)					Float val = ( ::__hxcpp_memory_get_float(_g11->buffer->b,(_g11->byteOffset + (_g1 * 4))) + offset);
HXDLIN(3301)					 ::__hxcpp_memory_set_float(_g11->buffer->b,(_g11->byteOffset + (_g1 * 4)),val);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___setVOffsets,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3306___sync)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3314___update)
HXDLIN(3314)		this->_hx___updateTransforms(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___update,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3318___updateTransforms)
HXLINE(3319)		if (hx::IsNull( overrideTransform )) {
HXLINE(3321)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(3325)			this->_hx___worldTransform->copyFrom(overrideTransform);
            		}
HXLINE(3328)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

int BitmapData_obj::VERTEX_BUFFER_STRIDE;

 ::openfl::_internal::renderer::context3D::Context3DRenderer BitmapData_obj::_hx___hardwareRenderer;

 ::openfl::_internal::renderer::BitmapDataPool BitmapData_obj::_hx___pool;

 ::openfl::display::DisplayObjectRenderer BitmapData_obj::_hx___softwareRenderer;

 ::Dynamic BitmapData_obj::_hx___supportsBGRA;

int BitmapData_obj::_hx___textureFormat;

int BitmapData_obj::_hx___textureInternalFormat;

 ::lime::math::Vector2 BitmapData_obj::_hx___tempVector;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1242_fromBase64)
HXLINE(1246)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1247)		{
HXLINE(1247)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXDLIN(1247)			bitmapData->_hx___fromImage(image);
            		}
HXLINE(1248)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1270_fromBytes)
HXLINE(1274)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1275)		{
HXLINE(1275)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXDLIN(1275)			bitmapData->_hx___fromImage(image);
HXDLIN(1275)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1275)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
            		}
HXLINE(1276)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1318_fromFile)
HXLINE(1322)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1323)		bitmapData->_hx___fromFile(path);
HXLINE(1324)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1324)			return bitmapData;
            		}
            		else {
HXLINE(1324)			return null();
            		}
HXDLIN(1324)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< bool >  __o_transparent){
            		bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1340_fromImage)
HXLINE(1341)		bool _hx_tmp;
HXDLIN(1341)		if (hx::IsNotNull( image )) {
HXLINE(1341)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE(1341)			_hx_tmp = true;
            		}
HXDLIN(1341)		if (_hx_tmp) {
HXLINE(1341)			return null();
            		}
HXLINE(1343)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,transparent,0);
HXLINE(1344)		bitmapData->_hx___fromImage(image);
HXLINE(1345)		bitmapData->image->set_transparent(transparent);
HXLINE(1346)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1346)			return bitmapData;
            		}
            		else {
HXLINE(1346)			return null();
            		}
HXDLIN(1346)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::TextureBase texture){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1361_fromTexture)
HXLINE(1362)		if (hx::IsNull( texture )) {
HXLINE(1362)			return null();
            		}
HXLINE(1364)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,texture->_hx___width,texture->_hx___height,true,0);
HXLINE(1365)		bitmapData->readable = false;
HXLINE(1366)		bitmapData->_hx___texture = texture;
HXLINE(1367)		bitmapData->_hx___textureContext = texture->_hx___textureContext;
HXLINE(1368)		bitmapData->image = null();
HXLINE(1369)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2457_loadFromBase64)
HXLINE(2457)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2455_loadFromBase64)
HXDLIN(2455)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2481_loadFromBytes)
HXLINE(2482)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(2484)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(2486)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(2489)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2480_loadFromBytes)
HXDLIN(2480)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2510_loadFromFile)
HXLINE(2510)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2508_loadFromFile)
HXDLIN(2508)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_MARK_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_MARK_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___type,"__type");
	HX_MARK_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_MARK_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___type,"__type");
	HX_VISIT_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_VISIT_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"__type") ) { return hx::Val( _hx___type ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { return hx::Val( _hx___uvRect ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUVRect") ) { return hx::Val( _hx___setUVRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setVertex") ) { return hx::Val( _hx___setVertex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { return hx::Val( _hx___indexBuffer ); }
		if (HX_FIELD_EQ(inName,"__setVertices") ) { return hx::Val( _hx___setVertices_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUOffsets") ) { return hx::Val( _hx___setUOffsets_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setVOffsets") ) { return hx::Val( _hx___setVOffsets_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { return hx::Val( _hx___textureWidth ); }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { return hx::Val( _hx___vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIndexBuffer") ) { return hx::Val( getIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromFile") ) { return hx::Val( _hx___loadFromFile_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { return hx::Val( _hx___stencilBuffer ); }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { return hx::Val( _hx___textureHeight ); }
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexBuffer") ) { return hx::Val( getVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBytes") ) { return hx::Val( _hx___loadFromBytes_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"__loadFromBase64") ) { return hx::Val( _hx___loadFromBase64_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { return hx::Val( _hx___indexBufferData ); }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { return hx::Val( _hx___indexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { return hx::Val( _hx___vertexBufferData ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { return hx::Val( _hx___vertexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { return hx::Val( _hx___vertexBufferWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return hx::Val( _hx___framebufferContext ); }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { return hx::Val( _hx___indexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { return hx::Val( _hx___vertexBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { return hx::Val( _hx___vertexBufferScaleX ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { return hx::Val( _hx___vertexBufferScaleY ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { return hx::Val( _hx___vertexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { outValue = ( _hx___pool ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { outValue = ( _hx___tempVector ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { outValue = ( _hx___supportsBGRA ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { outValue = ( _hx___textureFormat ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__hardwareRenderer") ) { outValue = ( _hx___hardwareRenderer ); return true; }
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { outValue = ( _hx___softwareRenderer ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { outValue = ( _hx___textureInternalFormat ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__type") ) { _hx___type=inValue.Cast<  ::openfl::_internal::renderer::DisplayObjectType >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::BitmapSymbol >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { _hx___uvRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { _hx___indexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { _hx___textureWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { _hx___vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { _hx___stencilBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { _hx___textureHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { _hx___indexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { _hx___indexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { _hx___vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { _hx___vertexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { _hx___vertexBufferWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { _hx___indexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { _hx___vertexBufferHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { _hx___vertexBufferScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { _hx___vertexBufferScaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { _hx___vertexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { _hx___pool=ioValue.Cast<  ::openfl::_internal::renderer::BitmapDataPool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { _hx___tempVector=ioValue.Cast<  ::lime::math::Vector2 >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { _hx___supportsBGRA=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__hardwareRenderer") ) { _hx___hardwareRenderer=ioValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DRenderer >(); return true; }
		if (HX_FIELD_EQ(inName,"__softwareRenderer") ) { _hx___softwareRenderer=ioValue.Cast<  ::openfl::display::DisplayObjectRenderer >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { _hx___textureInternalFormat=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("readable",f0,1b,87,7d));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("transparent",52,2b,ba,22));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("__blendMode",34,2d,64,3a));
	outFields->push(HX_("__framebuffer",cd,55,c0,c2));
	outFields->push(HX_("__framebufferContext",a2,6b,52,89));
	outFields->push(HX_("__indexBuffer",92,a6,1e,3e));
	outFields->push(HX_("__indexBufferContext",7d,ed,2f,1d));
	outFields->push(HX_("__indexBufferData",dc,d9,26,67));
	outFields->push(HX_("__indexBufferGrid",78,5a,2f,69));
	outFields->push(HX_("__isMask",16,71,ec,0d));
	outFields->push(HX_("__isValid",92,69,8c,4f));
	outFields->push(HX_("__mask",0c,a4,4e,f7));
	outFields->push(HX_("__renderable",10,b7,2c,2b));
	outFields->push(HX_("__renderTransform",16,b8,95,b1));
	outFields->push(HX_("__scrollRect",f1,56,fa,41));
	outFields->push(HX_("__stencilBuffer",fc,cc,eb,b8));
	outFields->push(HX_("__surface",0d,b7,97,de));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__textureContext",74,21,78,6f));
	outFields->push(HX_("__textureHeight",02,14,16,1d));
	outFields->push(HX_("__textureVersion",9d,72,f2,d2));
	outFields->push(HX_("__textureWidth",4b,e6,c2,e3));
	outFields->push(HX_("__transform",4c,76,bf,73));
	outFields->push(HX_("__type",da,55,01,fc));
	outFields->push(HX_("__uvRect",45,8f,b9,97));
	outFields->push(HX_("__vertexBuffer",a4,32,6a,91));
	outFields->push(HX_("__vertexBufferContext",ab,e7,39,35));
	outFields->push(HX_("__vertexBufferData",ee,d6,5e,32));
	outFields->push(HX_("__vertexBufferGrid",8a,57,67,34));
	outFields->push(HX_("__vertexBufferHeight",ab,41,bc,88));
	outFields->push(HX_("__vertexBufferScaleX",52,24,96,c2));
	outFields->push(HX_("__vertexBufferScaleY",53,24,96,c2));
	outFields->push(HX_("__vertexBufferWidth",c2,e0,77,d6));
	outFields->push(HX_("__worldAlpha",cc,d2,d6,c5));
	outFields->push(HX_("__worldColorTransform",5b,ce,21,a3));
	outFields->push(HX_("__worldTransform",da,a7,d8,9a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::lime::graphics::Image */ ,(int)offsetof(BitmapData_obj,image),HX_("image",5b,1f,69,bd)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_("readable",f0,1b,87,7d)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,rect),HX_("rect",24,4d,a7,4b)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_("transparent",52,2b,ba,22)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_("__blendMode",34,2d,64,3a)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_("__framebuffer",cd,55,c0,c2)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_("__framebufferContext",a2,6b,52,89)},
	{hx::fsObject /*  ::openfl::display3D::IndexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___indexBuffer),HX_("__indexBuffer",92,a6,1e,3e)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferContext),HX_("__indexBufferContext",7d,ed,2f,1d)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferData),HX_("__indexBufferData",dc,d9,26,67)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferGrid),HX_("__indexBufferGrid",78,5a,2f,69)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isMask),HX_("__isMask",16,71,ec,0d)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_("__isValid",92,69,8c,4f)},
	{hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BitmapData_obj,_hx___mask),HX_("__mask",0c,a4,4e,f7)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___renderable),HX_("__renderable",10,b7,2c,2b)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___renderTransform),HX_("__renderTransform",16,b8,95,b1)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___scrollRect),HX_("__scrollRect",f1,56,fa,41)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(BitmapData_obj,_hx___stencilBuffer),HX_("__stencilBuffer",fc,cc,eb,b8)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_("__surface",0d,b7,97,de)},
	{hx::fsObject /*  ::openfl::_internal::symbols::BitmapSymbol */ ,(int)offsetof(BitmapData_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{hx::fsObject /*  ::openfl::display3D::textures::TextureBase */ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_("__textureContext",74,21,78,6f)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureHeight),HX_("__textureHeight",02,14,16,1d)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_("__textureVersion",9d,72,f2,d2)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureWidth),HX_("__textureWidth",4b,e6,c2,e3)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_("__transform",4c,76,bf,73)},
	{hx::fsObject /*  ::openfl::_internal::renderer::DisplayObjectType */ ,(int)offsetof(BitmapData_obj,_hx___type),HX_("__type",da,55,01,fc)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___uvRect),HX_("__uvRect",45,8f,b9,97)},
	{hx::fsObject /*  ::openfl::display3D::VertexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___vertexBuffer),HX_("__vertexBuffer",a4,32,6a,91)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferContext),HX_("__vertexBufferContext",ab,e7,39,35)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferData),HX_("__vertexBufferData",ee,d6,5e,32)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferGrid),HX_("__vertexBufferGrid",8a,57,67,34)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferHeight),HX_("__vertexBufferHeight",ab,41,bc,88)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleX),HX_("__vertexBufferScaleX",52,24,96,c2)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleY),HX_("__vertexBufferScaleY",53,24,96,c2)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferWidth),HX_("__vertexBufferWidth",c2,e0,77,d6)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___worldAlpha),HX_("__worldAlpha",cc,d2,d6,c5)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_("__worldColorTransform",5b,ce,21,a3)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_("__worldTransform",da,a7,d8,9a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapData_obj::VERTEX_BUFFER_STRIDE,HX_("VERTEX_BUFFER_STRIDE",5d,b3,e6,c3)},
	{hx::fsObject /*  ::openfl::_internal::renderer::context3D::Context3DRenderer */ ,(void *) &BitmapData_obj::_hx___hardwareRenderer,HX_("__hardwareRenderer",2b,df,10,86)},
	{hx::fsObject /*  ::openfl::_internal::renderer::BitmapDataPool */ ,(void *) &BitmapData_obj::_hx___pool,HX_("__pool",fc,e3,54,f9)},
	{hx::fsObject /*  ::openfl::display::DisplayObjectRenderer */ ,(void *) &BitmapData_obj::_hx___softwareRenderer,HX_("__softwareRenderer",aa,4f,cd,76)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapData_obj::_hx___supportsBGRA,HX_("__supportsBGRA",58,53,57,0f)},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureFormat,HX_("__textureFormat",52,9b,58,18)},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureInternalFormat,HX_("__textureInternalFormat",6f,15,aa,a7)},
	{hx::fsObject /*  ::lime::math::Vector2 */ ,(void *) &BitmapData_obj::_hx___tempVector,HX_("__tempVector",17,ea,60,eb)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("image",5b,1f,69,bd),
	HX_("readable",f0,1b,87,7d),
	HX_("rect",24,4d,a7,4b),
	HX_("transparent",52,2b,ba,22),
	HX_("width",06,b6,62,ca),
	HX_("__blendMode",34,2d,64,3a),
	HX_("__framebuffer",cd,55,c0,c2),
	HX_("__framebufferContext",a2,6b,52,89),
	HX_("__indexBuffer",92,a6,1e,3e),
	HX_("__indexBufferContext",7d,ed,2f,1d),
	HX_("__indexBufferData",dc,d9,26,67),
	HX_("__indexBufferGrid",78,5a,2f,69),
	HX_("__isMask",16,71,ec,0d),
	HX_("__isValid",92,69,8c,4f),
	HX_("__mask",0c,a4,4e,f7),
	HX_("__renderable",10,b7,2c,2b),
	HX_("__renderTransform",16,b8,95,b1),
	HX_("__scrollRect",f1,56,fa,41),
	HX_("__stencilBuffer",fc,cc,eb,b8),
	HX_("__surface",0d,b7,97,de),
	HX_("__symbol",78,1a,0d,97),
	HX_("__texture",bb,19,2f,20),
	HX_("__textureContext",74,21,78,6f),
	HX_("__textureHeight",02,14,16,1d),
	HX_("__textureVersion",9d,72,f2,d2),
	HX_("__textureWidth",4b,e6,c2,e3),
	HX_("__transform",4c,76,bf,73),
	HX_("__type",da,55,01,fc),
	HX_("__uvRect",45,8f,b9,97),
	HX_("__vertexBuffer",a4,32,6a,91),
	HX_("__vertexBufferContext",ab,e7,39,35),
	HX_("__vertexBufferData",ee,d6,5e,32),
	HX_("__vertexBufferGrid",8a,57,67,34),
	HX_("__vertexBufferHeight",ab,41,bc,88),
	HX_("__vertexBufferScaleX",52,24,96,c2),
	HX_("__vertexBufferScaleY",53,24,96,c2),
	HX_("__vertexBufferWidth",c2,e0,77,d6),
	HX_("__worldAlpha",cc,d2,d6,c5),
	HX_("__worldColorTransform",5b,ce,21,a3),
	HX_("__worldTransform",da,a7,d8,9a),
	HX_("applyFilter",c6,df,2f,c1),
	HX_("clone",5d,13,63,48),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("compare",a5,18,69,83),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("dispose",9f,80,4c,bb),
	HX_("disposeImage",3c,6e,b8,62),
	HX_("draw",04,2c,70,42),
	HX_("drawWithQuality",b5,c5,05,6f),
	HX_("encode",16,f2,e3,f9),
	HX_("fillRect",47,45,b9,6c),
	HX_("floodFill",61,83,8a,59),
	HX_("generateFilterRect",91,2c,98,7e),
	HX_("getIndexBuffer",bc,b8,44,7d),
	HX_("getVertexBuffer",3a,05,94,93),
	HX_("getColorBoundsRect",86,ad,e8,80),
	HX_("getPixel",10,d6,7a,22),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getPixels",63,78,00,09),
	HX_("getSurface",37,ec,aa,ac),
	HX_("getTexture",e5,4e,42,ee),
	HX_("getVector",f9,39,b4,13),
	HX_("histogram",a4,de,33,65),
	HX_("hitTest",45,60,7f,e2),
	HX_("lock",eb,9b,b7,47),
	HX_("merge",b8,a2,c6,05),
	HX_("noise",9a,8f,c2,9f),
	HX_("paletteMap",e1,ae,2b,06),
	HX_("perlinNoise",66,84,f8,8b),
	HX_("scroll",0d,d8,64,47),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("setVector",05,26,05,f7),
	HX_("threshold",ab,c3,a3,34),
	HX_("unlock",c4,a2,8c,65),
	HX_("__applyAlpha",30,9e,7b,05),
	HX_("__fromBase64",b9,7d,ff,d0),
	HX_("__fromBytes",81,3b,4d,a0),
	HX_("__fromFile",26,10,c0,44),
	HX_("__fromImage",71,52,1e,a0),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__loadFromBase64",7f,97,5c,63),
	HX_("__loadFromBytes",7b,fc,38,7c),
	HX_("__loadFromFile",6c,0c,b1,7b),
	HX_("__resize",14,c5,aa,b0),
	HX_("__setUVRect",27,52,8b,10),
	HX_("__setVertex",86,99,1b,2f),
	HX_("__setVertices",9b,ca,ee,e2),
	HX_("__setUOffsets",2d,64,9d,41),
	HX_("__setVOffsets",4c,d6,cf,7a),
	HX_("__sync",7b,1d,58,fb),
	HX_("__update",29,f1,34,2f),
	HX_("__updateTransforms",10,f4,b0,50),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::VERTEX_BUFFER_STRIDE,"VERTEX_BUFFER_STRIDE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___hardwareRenderer,"__hardwareRenderer");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___pool,"__pool");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___softwareRenderer,"__softwareRenderer");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::VERTEX_BUFFER_STRIDE,"VERTEX_BUFFER_STRIDE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___hardwareRenderer,"__hardwareRenderer");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___pool,"__pool");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___softwareRenderer,"__softwareRenderer");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_("VERTEX_BUFFER_STRIDE",5d,b3,e6,c3),
	HX_("__hardwareRenderer",2b,df,10,86),
	HX_("__pool",fc,e3,54,f9),
	HX_("__softwareRenderer",aa,4f,cd,76),
	HX_("__supportsBGRA",58,53,57,0f),
	HX_("__textureFormat",52,9b,58,18),
	HX_("__textureInternalFormat",6f,15,aa,a7),
	HX_("__tempVector",17,ea,60,eb),
	HX_("fromBase64",99,02,6c,98),
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromFile",06,9d,87,a1),
	HX_("fromImage",91,09,f2,71),
	HX_("fromTexture",91,2c,21,37),
	HX_("loadFromBase64",5f,0c,1d,2f),
	HX_("loadFromBytes",9b,c3,86,f4),
	HX_("loadFromFile",4c,89,f0,5a),
	::String(null())
};

void BitmapData_obj::__register()
{
	BitmapData_obj _hx_dummy;
	BitmapData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.BitmapData",a3,12,41,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_130_boot)
HXDLIN( 130)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(9)
            				->setFixed(0,HX_("compare",a5,18,69,83), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("__framebufferContext",a2,6b,52,89), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("__fromImage",71,52,1e,a0), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(3,HX_("getSurface",37,ec,aa,ac), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(4,HX_("image",5b,1f,69,bd), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(5,HX_("__surface",0d,b7,97,de), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(6,HX_("__indexBufferContext",7d,ed,2f,1d), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(7,HX_("__vertexBufferContext",ab,e7,39,35), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(8,HX_("__textureContext",74,21,78,6f), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_132_boot)
HXDLIN( 132)		VERTEX_BUFFER_STRIDE = 14;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_134_boot)
HXDLIN( 134)		_hx___pool =  ::openfl::_internal::renderer::BitmapDataPool_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_136_boot)
HXDLIN( 136)		_hx___supportsBGRA = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_140_boot)
HXDLIN( 140)		_hx___tempVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace openfl
} // end namespace display
