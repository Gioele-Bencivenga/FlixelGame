// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d11618aadd936e00_113_new,"openfl.display.DisplayObjectContainer","new",0x4362e03c,"openfl.display.DisplayObjectContainer.new","openfl/display/DisplayObjectContainer.hx",113,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_157_addChild,"openfl.display.DisplayObjectContainer","addChild",0x5694c25f,"openfl.display.DisplayObjectContainer.addChild","openfl/display/DisplayObjectContainer.hx",157,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_192_addChildAt,"openfl.display.DisplayObjectContainer","addChildAt",0xb7119132,"openfl.display.DisplayObjectContainer.addChildAt","openfl/display/DisplayObjectContainer.hx",192,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_302_areInaccessibleObjectsUnderPoint,"openfl.display.DisplayObjectContainer","areInaccessibleObjectsUnderPoint",0x2380e0e1,"openfl.display.DisplayObjectContainer.areInaccessibleObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",302,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_318_contains,"openfl.display.DisplayObjectContainer","contains",0xc3f94cc3,"openfl.display.DisplayObjectContainer.contains","openfl/display/DisplayObjectContainer.hx",318,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_341_getChildAt,"openfl.display.DisplayObjectContainer","getChildAt",0x9ee8eb5d,"openfl.display.DisplayObjectContainer.getChildAt","openfl/display/DisplayObjectContainer.hx",341,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_369_getChildByName,"openfl.display.DisplayObjectContainer","getChildByName",0x64b33f2c,"openfl.display.DisplayObjectContainer.getChildByName","openfl/display/DisplayObjectContainer.hx",369,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_387_getChildIndex,"openfl.display.DisplayObjectContainer","getChildIndex",0xcc3e62e8,"openfl.display.DisplayObjectContainer.getChildIndex","openfl/display/DisplayObjectContainer.hx",387,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_416_getObjectsUnderPoint,"openfl.display.DisplayObjectContainer","getObjectsUnderPoint",0x85c6693a,"openfl.display.DisplayObjectContainer.getObjectsUnderPoint","openfl/display/DisplayObjectContainer.hx",416,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_443_removeChild,"openfl.display.DisplayObjectContainer","removeChild",0x1a99d294,"openfl.display.DisplayObjectContainer.removeChild","openfl/display/DisplayObjectContainer.hx",443,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_498_removeChildAt,"openfl.display.DisplayObjectContainer","removeChildAt",0x52a2d8a7,"openfl.display.DisplayObjectContainer.removeChildAt","openfl/display/DisplayObjectContainer.hx",498,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_519_removeChildren,"openfl.display.DisplayObjectContainer","removeChildren",0xfbffdb47,"openfl.display.DisplayObjectContainer.removeChildren","openfl/display/DisplayObjectContainer.hx",519,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_548_resolve,"openfl.display.DisplayObjectContainer","resolve",0x8cca40c8,"openfl.display.DisplayObjectContainer.resolve","openfl/display/DisplayObjectContainer.hx",548,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_600_setChildIndex,"openfl.display.DisplayObjectContainer","setChildIndex",0x114444f4,"openfl.display.DisplayObjectContainer.setChildIndex","openfl/display/DisplayObjectContainer.hx",600,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_618_stopAllMovieClips,"openfl.display.DisplayObjectContainer","stopAllMovieClips",0x46e0f9ce,"openfl.display.DisplayObjectContainer.stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",618,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_633_swapChildren,"openfl.display.DisplayObjectContainer","swapChildren",0xe0695f96,"openfl.display.DisplayObjectContainer.swapChildren","openfl/display/DisplayObjectContainer.hx",633,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_655_swapChildrenAt,"openfl.display.DisplayObjectContainer","swapChildrenAt",0xd5312a29,"openfl.display.DisplayObjectContainer.swapChildrenAt","openfl/display/DisplayObjectContainer.hx",655,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_664___cleanup,"openfl.display.DisplayObjectContainer","__cleanup",0x2346b9e0,"openfl.display.DisplayObjectContainer.__cleanup","openfl/display/DisplayObjectContainer.hx",664,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_676___cleanupRemovedChildren,"openfl.display.DisplayObjectContainer","__cleanupRemovedChildren",0x4395feff,"openfl.display.DisplayObjectContainer.__cleanupRemovedChildren","openfl/display/DisplayObjectContainer.hx",676,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_690___dispatchChildren,"openfl.display.DisplayObjectContainer","__dispatchChildren",0x7a91a8dd,"openfl.display.DisplayObjectContainer.__dispatchChildren","openfl/display/DisplayObjectContainer.hx",690,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_708___enterFrame,"openfl.display.DisplayObjectContainer","__enterFrame",0x3af993b9,"openfl.display.DisplayObjectContainer.__enterFrame","openfl/display/DisplayObjectContainer.hx",708,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_715___getBounds,"openfl.display.DisplayObjectContainer","__getBounds",0xe74ca467,"openfl.display.DisplayObjectContainer.__getBounds","openfl/display/DisplayObjectContainer.hx",715,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_735___getFilterBounds,"openfl.display.DisplayObjectContainer","__getFilterBounds",0xbea2d3bf,"openfl.display.DisplayObjectContainer.__getFilterBounds","openfl/display/DisplayObjectContainer.hx",735,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_756___getRenderBounds,"openfl.display.DisplayObjectContainer","__getRenderBounds",0x21a0a9dd,"openfl.display.DisplayObjectContainer.__getRenderBounds","openfl/display/DisplayObjectContainer.hx",756,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_785___hitTest,"openfl.display.DisplayObjectContainer","__hitTest",0x5a840e01,"openfl.display.DisplayObjectContainer.__hitTest","openfl/display/DisplayObjectContainer.hx",785,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_874___hitTestMask,"openfl.display.DisplayObjectContainer","__hitTestMask",0x4f390f8d,"openfl.display.DisplayObjectContainer.__hitTestMask","openfl/display/DisplayObjectContainer.hx",874,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_889___readGraphicsData,"openfl.display.DisplayObjectContainer","__readGraphicsData",0x782e37cf,"openfl.display.DisplayObjectContainer.__readGraphicsData","openfl/display/DisplayObjectContainer.hx",889,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_902___setStageReference,"openfl.display.DisplayObjectContainer","__setStageReference",0x58cb6d2b,"openfl.display.DisplayObjectContainer.__setStageReference","openfl/display/DisplayObjectContainer.hx",902,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_916___setWorldTransformInvalid,"openfl.display.DisplayObjectContainer","__setWorldTransformInvalid",0xa8fd351f,"openfl.display.DisplayObjectContainer.__setWorldTransformInvalid","openfl/display/DisplayObjectContainer.hx",916,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_932___stopAllMovieClips,"openfl.display.DisplayObjectContainer","__stopAllMovieClips",0xb7ce11ae,"openfl.display.DisplayObjectContainer.__stopAllMovieClips","openfl/display/DisplayObjectContainer.hx",932,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_939___tabTest,"openfl.display.DisplayObjectContainer","__tabTest",0xbd744b03,"openfl.display.DisplayObjectContainer.__tabTest","openfl/display/DisplayObjectContainer.hx",939,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_960___update,"openfl.display.DisplayObjectContainer","__update",0xc6b2e3cd,"openfl.display.DisplayObjectContainer.__update","openfl/display/DisplayObjectContainer.hx",960,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_975_get_numChildren,"openfl.display.DisplayObjectContainer","get_numChildren",0x73b78b18,"openfl.display.DisplayObjectContainer.get_numChildren","openfl/display/DisplayObjectContainer.hx",975,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_980_get_tabChildren,"openfl.display.DisplayObjectContainer","get_tabChildren",0x62bd2e27,"openfl.display.DisplayObjectContainer.get_tabChildren","openfl/display/DisplayObjectContainer.hx",980,0x5f4d3d72)
HX_LOCAL_STACK_FRAME(_hx_pos_d11618aadd936e00_984_set_tabChildren,"openfl.display.DisplayObjectContainer","set_tabChildren",0x5e88ab33,"openfl.display.DisplayObjectContainer.set_tabChildren","openfl/display/DisplayObjectContainer.hx",984,0x5f4d3d72)
namespace openfl{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_113_new)
HXLINE( 114)		super::__construct();
HXLINE( 116)		this->_hx___type = ::openfl::_internal::renderer::DisplayObjectType_obj::DISPLAY_OBJECT_CONTAINER_dyn();
HXLINE( 118)		this->mouseChildren = true;
HXLINE( 119)		this->_hx___tabChildren = true;
HXLINE( 121)		this->_hx___children = ::Array_obj< ::Dynamic>::__new();
HXLINE( 122)		int length = null();
HXDLIN( 122)		bool fixed = null();
HXDLIN( 122)		::Array< ::Dynamic> array = null();
HXDLIN( 122)		this->_hx___removedChildren =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17120186;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_157_addChild)
HXDLIN( 157)		return this->addChildAt(child,this->get_numChildren());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_192_addChildAt)
HXLINE( 193)		if (hx::IsNull( child )) {
HXLINE( 195)			 ::openfl::errors::TypeError error =  ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Error #2007: Parameter child must be non-null.",30,5a,a7,aa));
HXLINE( 196)			error->errorID = 2007;
HXLINE( 197)			HX_STACK_DO_THROW(error);
            		}
            		else {
HXLINE( 200)			if (hx::IsEq( child->stage,child )) {
HXLINE( 202)				 ::openfl::errors::ArgumentError error1 =  ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Error #3783: A Stage object cannot be added as the child of another object.",fa,51,93,42));
HXLINE( 203)				error1->errorID = 3783;
HXLINE( 204)				HX_STACK_DO_THROW(error1);
            			}
            		}
HXLINE( 208)		bool _hx_tmp;
HXDLIN( 208)		if ((index <= this->_hx___children->length)) {
HXLINE( 208)			_hx_tmp = (index < 0);
            		}
            		else {
HXLINE( 208)			_hx_tmp = true;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 210)			HX_STACK_DO_THROW((HX_("Invalid index position ",80,59,50,86) + index));
            		}
HXLINE( 213)		if (hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 215)			if (hx::IsNotEq( this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 217)				this->_hx___children->remove(child);
HXLINE( 218)				this->_hx___children->insert(index,child);
HXLINE( 220)				if (!(this->_hx___renderDirty)) {
HXLINE( 220)					this->_hx___renderDirty = true;
HXDLIN( 220)					this->_hx___setParentRenderDirty();
            				}
            			}
            		}
            		else {
HXLINE( 225)			if (hx::IsNotNull( child->parent )) {
HXLINE( 227)				child->parent->removeChild(child);
            			}
HXLINE( 230)			this->_hx___children->insert(index,child);
HXLINE( 231)			child->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 233)			bool addedToStage;
HXDLIN( 233)			if (hx::IsNotNull( this->stage )) {
HXLINE( 233)				addedToStage = hx::IsNull( child->stage );
            			}
            			else {
HXLINE( 233)				addedToStage = false;
            			}
HXLINE( 235)			if (addedToStage) {
HXLINE( 237)				this->_hx___setStageReference(this->stage);
            			}
HXLINE( 240)			child->_hx___setTransformDirty();
HXLINE( 241)			if (!(child->_hx___renderDirty)) {
HXLINE( 241)				child->_hx___renderDirty = true;
HXDLIN( 241)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 242)			if (!(this->_hx___renderDirty)) {
HXLINE( 242)				this->_hx___renderDirty = true;
HXDLIN( 242)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 245)			 ::openfl::events::Event event = ::openfl::events::Event_obj::_hx___pool->get().StaticCast<  ::openfl::events::Event >();
HXLINE( 246)			event->type = HX_("added",c0,d4,43,1c);
HXLINE( 250)			event->bubbles = true;
HXLINE( 252)			event->target = child;
HXLINE( 254)			child->_hx___dispatchWithCapture(event);
HXLINE( 257)			::openfl::events::Event_obj::_hx___pool->release(event);
HXLINE( 260)			if (addedToStage) {
HXLINE( 265)				event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false);
HXLINE( 268)				child->_hx___dispatchWithCapture(event);
HXLINE( 269)				child->_hx___dispatchChildren(event);
            			}
            		}
HXLINE( 277)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

bool DisplayObjectContainer_obj::areInaccessibleObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_302_areInaccessibleObjectsUnderPoint)
HXDLIN( 302)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,areInaccessibleObjectsUnderPoint,return )

bool DisplayObjectContainer_obj::contains( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_318_contains)
HXLINE( 319)		while(true){
HXLINE( 319)			bool _hx_tmp;
HXDLIN( 319)			if (hx::IsNotEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 319)				_hx_tmp = hx::IsNotNull( child );
            			}
            			else {
HXLINE( 319)				_hx_tmp = false;
            			}
HXDLIN( 319)			if (!(_hx_tmp)) {
HXLINE( 319)				goto _hx_goto_4;
            			}
HXLINE( 321)			child = child->parent;
            		}
            		_hx_goto_4:;
HXLINE( 324)		return hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_341_getChildAt)
HXLINE( 342)		bool _hx_tmp;
HXDLIN( 342)		if ((index >= 0)) {
HXLINE( 342)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 342)			_hx_tmp = false;
            		}
HXDLIN( 342)		if (_hx_tmp) {
HXLINE( 344)			return this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            		}
HXLINE( 347)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_369_getChildByName)
HXLINE( 370)		{
HXLINE( 370)			int _g = 0;
HXDLIN( 370)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 370)			while((_g < _g1->length)){
HXLINE( 370)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 370)				_g = (_g + 1);
HXLINE( 372)				if ((child->get_name() == name)) {
HXLINE( 372)					return child;
            				}
            			}
            		}
HXLINE( 375)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_387_getChildIndex)
HXLINE( 388)		{
HXLINE( 388)			int _g = 0;
HXDLIN( 388)			int _g1 = this->_hx___children->length;
HXDLIN( 388)			while((_g < _g1)){
HXLINE( 388)				_g = (_g + 1);
HXDLIN( 388)				int i = (_g - 1);
HXLINE( 390)				if (hx::IsEq( this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >(),child )) {
HXLINE( 390)					return i;
            				}
            			}
            		}
HXLINE( 393)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

::Array< ::Dynamic> DisplayObjectContainer_obj::getObjectsUnderPoint( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_416_getObjectsUnderPoint)
HXLINE( 417)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 418)		this->_hx___hitTest(point->x,point->y,false,stack,false,hx::ObjectPtr<OBJ_>(this));
HXLINE( 419)		stack->reverse();
HXLINE( 420)		return stack;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getObjectsUnderPoint,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_443_removeChild)
HXLINE( 444)		bool _hx_tmp;
HXDLIN( 444)		if (hx::IsNotNull( child )) {
HXLINE( 444)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 444)			_hx_tmp = false;
            		}
HXDLIN( 444)		if (_hx_tmp) {
HXLINE( 446)			child->_hx___setTransformDirty();
HXLINE( 447)			if (!(child->_hx___renderDirty)) {
HXLINE( 447)				child->_hx___renderDirty = true;
HXDLIN( 447)				child->_hx___setParentRenderDirty();
            			}
HXLINE( 448)			if (!(this->_hx___renderDirty)) {
HXLINE( 448)				this->_hx___renderDirty = true;
HXDLIN( 448)				this->_hx___setParentRenderDirty();
            			}
HXLINE( 450)			 ::openfl::events::Event event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 451)			child->_hx___dispatchWithCapture(event);
HXLINE( 453)			if (hx::IsNotNull( this->stage )) {
HXLINE( 455)				bool _hx_tmp1;
HXDLIN( 455)				if (hx::IsNotNull( child->stage )) {
HXLINE( 455)					_hx_tmp1 = hx::IsEq( this->stage->get_focus(),child );
            				}
            				else {
HXLINE( 455)					_hx_tmp1 = false;
            				}
HXDLIN( 455)				if (_hx_tmp1) {
HXLINE( 457)					this->stage->set_focus(null());
            				}
HXLINE( 460)				 ::openfl::events::Event event1 =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("removedFromStage",34,21,76,ba),false,false);
HXLINE( 461)				child->_hx___dispatchWithCapture(event1);
HXLINE( 462)				child->_hx___dispatchChildren(event1);
HXLINE( 463)				child->_hx___setStageReference(null());
            			}
HXLINE( 466)			child->parent = null();
HXLINE( 467)			this->_hx___children->remove(child);
HXLINE( 468)			this->_hx___removedChildren->push(child);
HXLINE( 469)			child->_hx___setTransformDirty();
            		}
HXLINE( 472)		return child;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChild,return )

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_498_removeChildAt)
HXLINE( 499)		bool _hx_tmp;
HXDLIN( 499)		if ((index >= 0)) {
HXLINE( 499)			_hx_tmp = (index < this->_hx___children->length);
            		}
            		else {
HXLINE( 499)			_hx_tmp = false;
            		}
HXDLIN( 499)		if (_hx_tmp) {
HXLINE( 501)			return this->removeChild(this->_hx___children->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            		}
HXLINE( 504)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_519_removeChildren)
HXLINE( 520)		if ((endIndex == (int)2147483647)) {
HXLINE( 522)			endIndex = (this->_hx___children->length - 1);
HXLINE( 524)			if ((endIndex < 0)) {
HXLINE( 526)				return;
            			}
            		}
HXLINE( 530)		if ((beginIndex > (this->_hx___children->length - 1))) {
HXLINE( 532)			return;
            		}
            		else {
HXLINE( 534)			bool _hx_tmp;
HXDLIN( 534)			bool _hx_tmp1;
HXDLIN( 534)			if ((endIndex >= beginIndex)) {
HXLINE( 534)				_hx_tmp1 = (beginIndex < 0);
            			}
            			else {
HXLINE( 534)				_hx_tmp1 = true;
            			}
HXDLIN( 534)			if (!(_hx_tmp1)) {
HXLINE( 534)				_hx_tmp = (endIndex > this->_hx___children->length);
            			}
            			else {
HXLINE( 534)				_hx_tmp = true;
            			}
HXDLIN( 534)			if (_hx_tmp) {
HXLINE( 536)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 539)		int numRemovals = (endIndex - beginIndex);
HXLINE( 540)		while((numRemovals >= 0)){
HXLINE( 542)			this->removeChildAt(beginIndex);
HXLINE( 543)			numRemovals = (numRemovals - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildren,(void))

 ::openfl::display::DisplayObject DisplayObjectContainer_obj::resolve(::String fieldName){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_548_resolve)
HXLINE( 549)		if (hx::IsNull( this->_hx___children )) {
HXLINE( 549)			return null();
            		}
HXLINE( 551)		{
HXLINE( 551)			int _g = 0;
HXDLIN( 551)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 551)			while((_g < _g1->length)){
HXLINE( 551)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 551)				_g = (_g + 1);
HXLINE( 553)				if ((child->get_name() == fieldName)) {
HXLINE( 555)					return child;
            				}
            			}
            		}
HXLINE( 559)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,resolve,return )

void DisplayObjectContainer_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_600_setChildIndex)
HXDLIN( 600)		bool _hx_tmp;
HXDLIN( 600)		bool _hx_tmp1;
HXDLIN( 600)		if ((index >= 0)) {
HXDLIN( 600)			_hx_tmp1 = (index <= this->_hx___children->length);
            		}
            		else {
HXDLIN( 600)			_hx_tmp1 = false;
            		}
HXDLIN( 600)		if (_hx_tmp1) {
HXDLIN( 600)			_hx_tmp = hx::IsEq( child->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 600)			_hx_tmp = false;
            		}
HXDLIN( 600)		if (_hx_tmp) {
HXLINE( 602)			this->_hx___children->remove(child);
HXLINE( 603)			this->_hx___children->insert(index,child);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_618_stopAllMovieClips)
HXDLIN( 618)		this->_hx___stopAllMovieClips();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,stopAllMovieClips,(void))

void DisplayObjectContainer_obj::swapChildren( ::openfl::display::DisplayObject child1, ::openfl::display::DisplayObject child2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_633_swapChildren)
HXDLIN( 633)		bool _hx_tmp;
HXDLIN( 633)		if (hx::IsEq( child1->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXDLIN( 633)			_hx_tmp = hx::IsEq( child2->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 633)			_hx_tmp = false;
            		}
HXDLIN( 633)		if (_hx_tmp) {
HXLINE( 635)			int index1 = this->_hx___children->indexOf(child1,null());
HXLINE( 636)			int index2 = this->_hx___children->indexOf(child2,null());
HXLINE( 638)			this->_hx___children[index1] = child2;
HXLINE( 639)			this->_hx___children[index2] = child1;
HXLINE( 641)			if (!(this->_hx___renderDirty)) {
HXLINE( 641)				this->_hx___renderDirty = true;
HXDLIN( 641)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_655_swapChildrenAt)
HXLINE( 656)		 ::openfl::display::DisplayObject swap = this->_hx___children->__get(index1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 657)		this->_hx___children[index1] = this->_hx___children->__get(index2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 658)		this->_hx___children[index2] = swap;
HXLINE( 659)		swap = null();
HXLINE( 660)		if (!(this->_hx___renderDirty)) {
HXLINE( 660)			this->_hx___renderDirty = true;
HXDLIN( 660)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_664___cleanup)
HXLINE( 665)		this->super::_hx___cleanup();
HXLINE( 667)		{
HXLINE( 667)			int _g = 0;
HXDLIN( 667)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 667)			while((_g < _g1->length)){
HXLINE( 667)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 667)				_g = (_g + 1);
HXLINE( 669)				child->_hx___cleanup();
            			}
            		}
HXLINE( 672)		{
HXLINE( 672)			{
HXLINE( 672)				 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 672)				while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 672)					 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 672)					if (hx::IsNull( orphan1->stage )) {
HXLINE( 672)						orphan1->_hx___cleanup();
            					}
            				}
            			}
HXDLIN( 672)			this->_hx___removedChildren->set_length(0);
            		}
            	}


void DisplayObjectContainer_obj::_hx___cleanupRemovedChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_676___cleanupRemovedChildren)
HXLINE( 677)		{
HXLINE( 677)			 ::Dynamic orphan = this->_hx___removedChildren->iterator();
HXDLIN( 677)			while(( (bool)(orphan->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 677)				 ::openfl::display::DisplayObject orphan1 = ( ( ::openfl::display::DisplayObject)(orphan->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 679)				if (hx::IsNull( orphan1->stage )) {
HXLINE( 681)					orphan1->_hx___cleanup();
            				}
            			}
            		}
HXLINE( 685)		this->_hx___removedChildren->set_length(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,_hx___cleanupRemovedChildren,(void))

void DisplayObjectContainer_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_690___dispatchChildren)
HXDLIN( 690)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 692)			int _g = 0;
HXDLIN( 692)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 692)			while((_g < _g1->length)){
HXLINE( 692)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 692)				_g = (_g + 1);
HXLINE( 694)				event->target = child;
HXLINE( 696)				if (!(child->_hx___dispatchWithCapture(event))) {
HXLINE( 698)					goto _hx_goto_27;
            				}
HXLINE( 701)				child->_hx___dispatchChildren(event);
            			}
            			_hx_goto_27:;
            		}
            	}


void DisplayObjectContainer_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_708___enterFrame)
HXDLIN( 708)		int _g = 0;
HXDLIN( 708)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 708)		while((_g < _g1->length)){
HXDLIN( 708)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 708)			_g = (_g + 1);
HXLINE( 710)			child->_hx___enterFrame(deltaTime);
            		}
            	}


void DisplayObjectContainer_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_715___getBounds)
HXLINE( 716)		this->super::_hx___getBounds(rect,matrix);
HXLINE( 718)		if ((this->_hx___children->length == 0)) {
HXLINE( 718)			return;
            		}
HXLINE( 720)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 722)		{
HXLINE( 722)			int _g = 0;
HXDLIN( 722)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 722)			while((_g < _g1->length)){
HXLINE( 722)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 722)				_g = (_g + 1);
HXLINE( 724)				bool _hx_tmp;
HXDLIN( 724)				if ((child->_hx___scaleX != 0)) {
HXLINE( 724)					_hx_tmp = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 724)					_hx_tmp = true;
            				}
HXDLIN( 724)				if (_hx_tmp) {
HXLINE( 724)					continue;
            				}
HXLINE( 726)				{
HXLINE( 726)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 726)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 726)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 726)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 726)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 726)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 726)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 728)				child->_hx___getBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 731)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_735___getFilterBounds)
HXLINE( 736)		this->super::_hx___getFilterBounds(rect,matrix);
HXLINE( 737)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 737)			return;
            		}
HXLINE( 739)		if ((this->_hx___children->length == 0)) {
HXLINE( 739)			return;
            		}
HXLINE( 741)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 743)		{
HXLINE( 743)			int _g = 0;
HXDLIN( 743)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 743)			while((_g < _g1->length)){
HXLINE( 743)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 743)				_g = (_g + 1);
HXLINE( 745)				bool _hx_tmp;
HXDLIN( 745)				bool _hx_tmp1;
HXDLIN( 745)				if ((child->_hx___scaleX != 0)) {
HXLINE( 745)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 745)					_hx_tmp1 = true;
            				}
HXDLIN( 745)				if (!(_hx_tmp1)) {
HXLINE( 745)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 745)					_hx_tmp = true;
            				}
HXDLIN( 745)				if (_hx_tmp) {
HXLINE( 745)					continue;
            				}
HXLINE( 747)				{
HXLINE( 747)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 747)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 747)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 747)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 747)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 747)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 747)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 749)				child->_hx___getFilterBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 752)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


void DisplayObjectContainer_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_756___getRenderBounds)
HXLINE( 757)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 759)			this->super::_hx___getRenderBounds(rect,matrix);
HXLINE( 760)			return;
            		}
            		else {
HXLINE( 764)			this->super::_hx___getBounds(rect,matrix);
            		}
HXLINE( 767)		if ((this->_hx___children->length == 0)) {
HXLINE( 767)			return;
            		}
HXLINE( 769)		 ::openfl::geom::Matrix childWorldTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 771)		{
HXLINE( 771)			int _g = 0;
HXDLIN( 771)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 771)			while((_g < _g1->length)){
HXLINE( 771)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 771)				_g = (_g + 1);
HXLINE( 773)				bool _hx_tmp;
HXDLIN( 773)				bool _hx_tmp1;
HXDLIN( 773)				if ((child->_hx___scaleX != 0)) {
HXLINE( 773)					_hx_tmp1 = (child->_hx___scaleY == 0);
            				}
            				else {
HXLINE( 773)					_hx_tmp1 = true;
            				}
HXDLIN( 773)				if (!(_hx_tmp1)) {
HXLINE( 773)					_hx_tmp = child->_hx___isMask;
            				}
            				else {
HXLINE( 773)					_hx_tmp = true;
            				}
HXDLIN( 773)				if (_hx_tmp) {
HXLINE( 773)					continue;
            				}
HXLINE( 775)				{
HXLINE( 775)					 ::openfl::geom::Matrix local = child->_hx___transform;
HXDLIN( 775)					childWorldTransform->a = ((local->a * matrix->a) + (local->b * matrix->c));
HXDLIN( 775)					childWorldTransform->b = ((local->a * matrix->b) + (local->b * matrix->d));
HXDLIN( 775)					childWorldTransform->c = ((local->c * matrix->a) + (local->d * matrix->c));
HXDLIN( 775)					childWorldTransform->d = ((local->c * matrix->b) + (local->d * matrix->d));
HXDLIN( 775)					childWorldTransform->tx = (((local->tx * matrix->a) + (local->ty * matrix->c)) + matrix->tx);
HXDLIN( 775)					childWorldTransform->ty = (((local->tx * matrix->b) + (local->ty * matrix->d)) + matrix->ty);
            				}
HXLINE( 777)				child->_hx___getRenderBounds(rect,childWorldTransform);
            			}
            		}
HXLINE( 780)		::openfl::geom::Matrix_obj::_hx___pool->release(childWorldTransform);
            	}


bool DisplayObjectContainer_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_785___hitTest)
HXLINE( 786)		bool _hx_tmp;
HXDLIN( 786)		bool _hx_tmp1;
HXDLIN( 786)		if (!(!(hitObject->get_visible()))) {
HXLINE( 786)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 786)			_hx_tmp1 = true;
            		}
HXDLIN( 786)		if (!(_hx_tmp1)) {
HXLINE( 786)			bool _hx_tmp2;
HXDLIN( 786)			if (interactiveOnly) {
HXLINE( 786)				_hx_tmp2 = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 786)				_hx_tmp2 = false;
            			}
HXDLIN( 786)			if (_hx_tmp2) {
HXLINE( 786)				_hx_tmp = !(this->mouseChildren);
            			}
            			else {
HXLINE( 786)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 786)			_hx_tmp = true;
            		}
HXDLIN( 786)		if (_hx_tmp) {
HXLINE( 786)			return false;
            		}
HXLINE( 787)		bool _hx_tmp3;
HXDLIN( 787)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 787)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 787)			_hx_tmp3 = false;
            		}
HXDLIN( 787)		if (_hx_tmp3) {
HXLINE( 787)			return false;
            		}
HXLINE( 789)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE( 791)			 ::openfl::geom::Point point = ::openfl::geom::Point_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Point >();
HXLINE( 792)			point->setTo(x,y);
HXLINE( 793)			{
HXLINE( 793)				 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 793)				Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 793)				if ((norm == 0)) {
HXLINE( 793)					point->x = -(_this->tx);
HXDLIN( 793)					point->y = -(_this->ty);
            				}
            				else {
HXLINE( 793)					Float px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - point->y)) + (_this->d * (point->x - _this->tx))));
HXDLIN( 793)					point->y = ((((Float)1.0) / norm) * ((_this->a * (point->y - _this->ty)) + (_this->b * (_this->tx - point->x))));
HXDLIN( 793)					point->x = px;
            				}
            			}
HXLINE( 795)			if (!(this->_hx___scrollRect->containsPoint(point))) {
HXLINE( 797)				::openfl::geom::Point_obj::_hx___pool->release(point);
HXLINE( 798)				return false;
            			}
HXLINE( 801)			::openfl::geom::Point_obj::_hx___pool->release(point);
            		}
HXLINE( 804)		int i = this->_hx___children->length;
HXLINE( 805)		if (interactiveOnly) {
HXLINE( 807)			bool _hx_tmp4;
HXDLIN( 807)			if (hx::IsNotNull( stack )) {
HXLINE( 807)				_hx_tmp4 = !(this->mouseChildren);
            			}
            			else {
HXLINE( 807)				_hx_tmp4 = true;
            			}
HXDLIN( 807)			if (_hx_tmp4) {
HXLINE( 809)				while(true){
HXLINE( 809)					i = (i - 1);
HXDLIN( 809)					if (!((i >= 0))) {
HXLINE( 809)						goto _hx_goto_37;
            					}
HXLINE( 811)					if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,null(),true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 813)						if (hx::IsNotNull( stack )) {
HXLINE( 815)							stack->push(hitObject);
            						}
HXLINE( 818)						return true;
            					}
            				}
            				_hx_goto_37:;
            			}
            			else {
HXLINE( 822)				if (hx::IsNotNull( stack )) {
HXLINE( 824)					int length = stack->length;
HXLINE( 826)					bool interactive = false;
HXLINE( 827)					bool hitTest = false;
HXLINE( 829)					while(true){
HXLINE( 829)						i = (i - 1);
HXDLIN( 829)						if (!((i >= 0))) {
HXLINE( 829)							goto _hx_goto_38;
            						}
HXLINE( 831)						interactive = this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___getInteractive(null());
HXLINE( 833)						bool _hx_tmp5;
HXDLIN( 833)						if (!(interactive)) {
HXLINE( 833)							if (this->mouseEnabled) {
HXLINE( 833)								_hx_tmp5 = !(hitTest);
            							}
            							else {
HXLINE( 833)								_hx_tmp5 = false;
            							}
            						}
            						else {
HXLINE( 833)							_hx_tmp5 = true;
            						}
HXDLIN( 833)						if (_hx_tmp5) {
HXLINE( 835)							if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,true,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 837)								hitTest = true;
HXLINE( 839)								bool _hx_tmp6;
HXDLIN( 839)								if (interactive) {
HXLINE( 839)									_hx_tmp6 = (stack->length > length);
            								}
            								else {
HXLINE( 839)									_hx_tmp6 = false;
            								}
HXDLIN( 839)								if (_hx_tmp6) {
HXLINE( 841)									goto _hx_goto_38;
            								}
            							}
            						}
            					}
            					_hx_goto_38:;
HXLINE( 847)					if (hitTest) {
HXLINE( 849)						stack->insert(length,hitObject);
HXLINE( 850)						return true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 856)			bool hitTest1 = false;
HXLINE( 858)			while(true){
HXLINE( 858)				i = (i - 1);
HXDLIN( 858)				if (!((i >= 0))) {
HXLINE( 858)					goto _hx_goto_39;
            				}
HXLINE( 860)				if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTest(x,y,shapeFlag,stack,false,this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >())) {
HXLINE( 862)					hitTest1 = true;
HXLINE( 863)					if (hx::IsNull( stack )) {
HXLINE( 863)						goto _hx_goto_39;
            					}
            				}
            			}
            			_hx_goto_39:;
HXLINE( 867)			return hitTest1;
            		}
HXLINE( 870)		return false;
            	}


bool DisplayObjectContainer_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_874___hitTestMask)
HXLINE( 875)		int i = this->_hx___children->length;
HXLINE( 877)		while(true){
HXLINE( 877)			i = (i - 1);
HXDLIN( 877)			if (!((i >= 0))) {
HXLINE( 877)				goto _hx_goto_41;
            			}
HXLINE( 879)			if (this->_hx___children->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___hitTestMask(x,y)) {
HXLINE( 881)				return true;
            			}
            		}
            		_hx_goto_41:;
HXLINE( 885)		return false;
            	}


void DisplayObjectContainer_obj::_hx___readGraphicsData( ::openfl::_Vector::ObjectVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_889___readGraphicsData)
HXLINE( 890)		this->super::_hx___readGraphicsData(graphicsData,recurse);
HXLINE( 892)		if (recurse) {
HXLINE( 894)			int _g = 0;
HXDLIN( 894)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 894)			while((_g < _g1->length)){
HXLINE( 894)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 894)				_g = (_g + 1);
HXLINE( 896)				child->_hx___readGraphicsData(graphicsData,recurse);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_902___setStageReference)
HXLINE( 903)		this->super::_hx___setStageReference(stage);
HXLINE( 905)		if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 907)			int _g = 0;
HXDLIN( 907)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 907)			while((_g < _g1->length)){
HXLINE( 907)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 907)				_g = (_g + 1);
HXLINE( 909)				child->_hx___setStageReference(stage);
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_916___setWorldTransformInvalid)
HXDLIN( 916)		if (!(this->_hx___worldTransformInvalid)) {
HXLINE( 918)			this->_hx___worldTransformInvalid = true;
HXLINE( 920)			if (hx::IsNotNull( this->_hx___children )) {
HXLINE( 922)				int _g = 0;
HXDLIN( 922)				::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 922)				while((_g < _g1->length)){
HXLINE( 922)					 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 922)					_g = (_g + 1);
HXLINE( 924)					child->_hx___setWorldTransformInvalid();
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_932___stopAllMovieClips)
HXDLIN( 932)		int _g = 0;
HXDLIN( 932)		::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 932)		while((_g < _g1->length)){
HXDLIN( 932)			 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 932)			_g = (_g + 1);
HXLINE( 934)			child->_hx___stopAllMovieClips();
            		}
            	}


void DisplayObjectContainer_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_939___tabTest)
HXLINE( 940)		this->super::_hx___tabTest(stack);
HXLINE( 942)		if (!(this->get_tabChildren())) {
HXLINE( 942)			return;
            		}
HXLINE( 944)		bool interactive = false;
HXLINE( 945)		 ::openfl::display::InteractiveObject interactiveObject = null();
HXLINE( 947)		{
HXLINE( 947)			int _g = 0;
HXDLIN( 947)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 947)			while((_g < _g1->length)){
HXLINE( 947)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 947)				_g = (_g + 1);
HXLINE( 949)				interactive = child->_hx___getInteractive(null());
HXLINE( 951)				if (interactive) {
HXLINE( 953)					interactiveObject = ( ( ::openfl::display::InteractiveObject)(child) );
HXLINE( 954)					interactiveObject->_hx___tabTest(stack);
            				}
            			}
            		}
            	}


void DisplayObjectContainer_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_960___update)
HXLINE( 961)		this->super::_hx___update(transformOnly,updateChildren);
HXLINE( 963)		if (updateChildren) {
HXLINE( 965)			int _g = 0;
HXDLIN( 965)			::Array< ::Dynamic> _g1 = this->_hx___children;
HXDLIN( 965)			while((_g < _g1->length)){
HXLINE( 965)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 965)				_g = (_g + 1);
HXLINE( 967)				child->_hx___update(transformOnly,true);
            			}
            		}
            	}


int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_975_get_numChildren)
HXDLIN( 975)		return this->_hx___children->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_tabChildren(){
            	HX_STACKFRAME(&_hx_pos_d11618aadd936e00_980_get_tabChildren)
HXDLIN( 980)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_tabChildren,return )

bool DisplayObjectContainer_obj::set_tabChildren(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_d11618aadd936e00_984_set_tabChildren)
HXLINE( 985)		if ((this->_hx___tabChildren != value)) {
HXLINE( 987)			this->_hx___tabChildren = value;
HXLINE( 989)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("tabChildrenChange",44,91,b5,de),true,false));
            		}
HXLINE( 992)		return this->_hx___tabChildren;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_tabChildren,return )


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "openfl.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_MARK_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_MARK_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mouseChildren,"mouseChildren");
	HX_VISIT_MEMBER_NAME(_hx___removedChildren,"__removedChildren");
	HX_VISIT_MEMBER_NAME(_hx___tabChildren,"__tabChildren");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numChildren() ); }
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tabChildren() ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { return hx::Val( mouseChildren ); }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { return hx::Val( _hx___tabChildren ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabChildren") ) { return hx::Val( get_tabChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tabChildren") ) { return hx::Val( set_tabChildren_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { return hx::Val( _hx___removedChildren ); }
		if (HX_FIELD_EQ(inName,"stopAllMovieClips") ) { return hx::Val( stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getObjectsUnderPoint") ) { return hx::Val( getObjectsUnderPoint_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__cleanupRemovedChildren") ) { return hx::Val( _hx___cleanupRemovedChildren_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"areInaccessibleObjectsUnderPoint") ) { return hx::Val( areInaccessibleObjectsUnderPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tabChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tabChildren(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mouseChildren") ) { mouseChildren=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tabChildren") ) { _hx___tabChildren=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__removedChildren") ) { _hx___removedChildren=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mouseChildren",84,18,6b,ff));
	outFields->push(HX_("numChildren",a5,69,80,5c));
	outFields->push(HX_("tabChildren",b4,0c,86,4b));
	outFields->push(HX_("__removedChildren",df,c5,0e,d3));
	outFields->push(HX_("__tabChildren",94,4d,fe,93));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,mouseChildren),HX_("mouseChildren",84,18,6b,ff)},
	{hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(DisplayObjectContainer_obj,_hx___removedChildren),HX_("__removedChildren",df,c5,0e,d3)},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,_hx___tabChildren),HX_("__tabChildren",94,4d,fe,93)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DisplayObjectContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_("mouseChildren",84,18,6b,ff),
	HX_("__removedChildren",df,c5,0e,d3),
	HX_("__tabChildren",94,4d,fe,93),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("areInaccessibleObjectsUnderPoint",3d,22,9b,1e),
	HX_("contains",1f,5a,7b,2c),
	HX_("getChildAt",b9,07,0e,b6),
	HX_("getChildByName",88,b9,73,a3),
	HX_("getChildIndex",0c,68,02,b9),
	HX_("getObjectsUnderPoint",96,10,d5,80),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("removeChildren",a3,55,c0,3a),
	HX_("resolve",ec,12,60,67),
	HX_("setChildIndex",18,4a,08,fe),
	HX_("stopAllMovieClips",f2,60,f8,a0),
	HX_("swapChildren",f2,4a,53,e0),
	HX_("swapChildrenAt",85,a4,f1,13),
	HX_("__cleanup",04,5d,90,2c),
	HX_("__cleanupRemovedChildren",5b,84,61,c1),
	HX_("__dispatchChildren",39,81,f4,f4),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getFilterBounds",e3,3a,ba,18),
	HX_("__getRenderBounds",01,11,b8,7b),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__readGraphicsData",2b,10,91,f2),
	HX_("__setStageReference",4f,e5,e5,f4),
	HX_("__setWorldTransformInvalid",7b,c9,b9,d4),
	HX_("__stopAllMovieClips",d2,89,e8,53),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__update",29,f1,34,2f),
	HX_("get_numChildren",3c,21,62,1d),
	HX_("get_tabChildren",4b,c4,67,0c),
	HX_("set_tabChildren",57,41,33,08),
	::String(null()) };

hx::Class DisplayObjectContainer_obj::__mClass;

void DisplayObjectContainer_obj::__register()
{
	DisplayObjectContainer_obj _hx_dummy;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.DisplayObjectContainer",4a,52,ef,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
