// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_BitmapDataPool
#include <openfl/_internal/renderer/BitmapDataPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProgramType_Context3DProgramType_Impl_
#include <openfl/display3D/_Context3DProgramType/Context3DProgramType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#include <openfl/utils/AGALMiniAssembler.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_148_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",148,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_2[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_449_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",449,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_569_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",569,0xc899cbb9)
static const int _hx_array_data_2fa0bfa7_5[] = {
	(int)0,(int)1,(int)2,(int)2,(int)1,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_699_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",699,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_732_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",732,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_757_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",757,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_806_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",806,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_882_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",882,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_927_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",927,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_967_createVideoTexture,"openfl.display3D.Context3D","createVideoTexture",0x922f1723,"openfl.display3D.Context3D.createVideoTexture","openfl/display3D/Context3D.hx",967,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_993_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",993,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1040_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",1040,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1163_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",1163,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1212_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",1212,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1270_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",1270,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1275_setBlendFactorsSeparate,"openfl.display3D.Context3D","setBlendFactorsSeparate",0x9ca665f1,"openfl.display3D.Context3D.setBlendFactorsSeparate","openfl/display3D/Context3D.hx",1275,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1300_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",1300,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1322_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",1322,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1346_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",1346,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1358_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",1358,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1398_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",1398,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1458_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",1458,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1555_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",1555,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1596_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",1596,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1636_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",1636,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1664_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",1664,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1696_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",1696,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1754_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",1754,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1777_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",1777,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1809_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",1809,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1863_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",1863,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1900___bindGLArrayBuffer,"openfl.display3D.Context3D","__bindGLArrayBuffer",0x84209c10,"openfl.display3D.Context3D.__bindGLArrayBuffer","openfl/display3D/Context3D.hx",1900,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1909___bindGLElementArrayBuffer,"openfl.display3D.Context3D","__bindGLElementArrayBuffer",0x269f0e66,"openfl.display3D.Context3D.__bindGLElementArrayBuffer","openfl/display3D/Context3D.hx",1909,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1918___bindGLFramebuffer,"openfl.display3D.Context3D","__bindGLFramebuffer",0x408c5984,"openfl.display3D.Context3D.__bindGLFramebuffer","openfl/display3D/Context3D.hx",1918,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1926___bindGLTexture2D,"openfl.display3D.Context3D","__bindGLTexture2D",0x24624244,"openfl.display3D.Context3D.__bindGLTexture2D","openfl/display3D/Context3D.hx",1926,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1938___bindGLTextureCubeMap,"openfl.display3D.Context3D","__bindGLTextureCubeMap",0x811ec0d5,"openfl.display3D.Context3D.__bindGLTextureCubeMap","openfl/display3D/Context3D.hx",1938,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1950___dispose,"openfl.display3D.Context3D","__dispose",0xc4b9d1f8,"openfl.display3D.Context3D.__dispose","openfl/display3D/Context3D.hx",1950,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1974___drawTriangles,"openfl.display3D.Context3D","__drawTriangles",0xf71e9e20,"openfl.display3D.Context3D.__drawTriangles","openfl/display3D/Context3D.hx",1974,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2002___flushGL,"openfl.display3D.Context3D","__flushGL",0x73ba2b42,"openfl.display3D.Context3D.__flushGL","openfl/display3D/Context3D.hx",2002,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2018___flushGLBlend,"openfl.display3D.Context3D","__flushGLBlend",0xce3a1daf,"openfl.display3D.Context3D.__flushGLBlend","openfl/display3D/Context3D.hx",2018,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2045___flushGLColor,"openfl.display3D.Context3D","__flushGLColor",0x63a1a6c1,"openfl.display3D.Context3D.__flushGLColor","openfl/display3D/Context3D.hx",2045,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2060___flushGLCulling,"openfl.display3D.Context3D","__flushGLCulling",0x308bab4e,"openfl.display3D.Context3D.__flushGLCulling","openfl/display3D/Context3D.hx",2060,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2089___flushGLDepth,"openfl.display3D.Context3D","__flushGLDepth",0xf06f2661,"openfl.display3D.Context3D.__flushGLDepth","openfl/display3D/Context3D.hx",2089,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2129___flushGLFramebuffer,"openfl.display3D.Context3D","__flushGLFramebuffer",0x8bc4a4cb,"openfl.display3D.Context3D.__flushGLFramebuffer","openfl/display3D/Context3D.hx",2129,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2175___flushGLProgram,"openfl.display3D.Context3D","__flushGLProgram",0xd0fd1362,"openfl.display3D.Context3D.__flushGLProgram","openfl/display3D/Context3D.hx",2175,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2220___flushGLScissor,"openfl.display3D.Context3D","__flushGLScissor",0xe1eaf0fa,"openfl.display3D.Context3D.__flushGLScissor","openfl/display3D/Context3D.hx",2220,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2256___flushGLStencil,"openfl.display3D.Context3D","__flushGLStencil",0x5d0786da,"openfl.display3D.Context3D.__flushGLStencil","openfl/display3D/Context3D.hx",2256,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2289___flushGLTextures,"openfl.display3D.Context3D","__flushGLTextures",0xec1af09a,"openfl.display3D.Context3D.__flushGLTextures","openfl/display3D/Context3D.hx",2289,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2373___flushGLViewport,"openfl.display3D.Context3D","__flushGLViewport",0x22f145c8,"openfl.display3D.Context3D.__flushGLViewport","openfl/display3D/Context3D.hx",2373,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2416___getGLBlend,"openfl.display3D.Context3D","__getGLBlend",0x53955e5d,"openfl.display3D.Context3D.__getGLBlend","openfl/display3D/Context3D.hx",2416,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2447___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",2447,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2463___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",2463,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2479___getGLTriangleFace,"openfl.display3D.Context3D","__getGLTriangleFace",0x318746f9,"openfl.display3D.Context3D.__getGLTriangleFace","openfl/display3D/Context3D.hx",2479,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2490___renderStage3D,"openfl.display3D.Context3D","__renderStage3D",0x426e1052,"openfl.display3D.Context3D.__renderStage3D","openfl/display3D/Context3D.hx",2490,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2538___setGLBlend,"openfl.display3D.Context3D","__setGLBlend",0x5712fcd1,"openfl.display3D.Context3D.__setGLBlend","openfl/display3D/Context3D.hx",2538,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2554___setGLBlendEquation,"openfl.display3D.Context3D","__setGLBlendEquation",0x47b42d7d,"openfl.display3D.Context3D.__setGLBlendEquation","openfl/display3D/Context3D.hx",2554,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2563___setGLCullFace,"openfl.display3D.Context3D","__setGLCullFace",0x3db3a2ef,"openfl.display3D.Context3D.__setGLCullFace","openfl/display3D/Context3D.hx",2563,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2579___setGLDepthTest,"openfl.display3D.Context3D","__setGLDepthTest",0x637f7775,"openfl.display3D.Context3D.__setGLDepthTest","openfl/display3D/Context3D.hx",2579,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2595___setGLFrontFace,"openfl.display3D.Context3D","__setGLFrontFace",0x40c35666,"openfl.display3D.Context3D.__setGLFrontFace","openfl/display3D/Context3D.hx",2595,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2604___setGLScissorTest,"openfl.display3D.Context3D","__setGLScissorTest",0xe746cf0e,"openfl.display3D.Context3D.__setGLScissorTest","openfl/display3D/Context3D.hx",2604,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2620___setGLStencilTest,"openfl.display3D.Context3D","__setGLStencilTest",0xce93d4ee,"openfl.display3D.Context3D.__setGLStencilTest","openfl/display3D/Context3D.hx",2620,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2637_get_enableErrorChecking,"openfl.display3D.Context3D","get_enableErrorChecking",0x0dbc654f,"openfl.display3D.Context3D.get_enableErrorChecking","openfl/display3D/Context3D.hx",2637,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_2642_set_enableErrorChecking,"openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",2642,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_153_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",153,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_255_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",255,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_256_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",256,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_257_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",257,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_258_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",258,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_148_new)
HXLINE( 252)		this->totalGPUMemory = 0;
HXLINE( 233)		this->profile = 3;
HXLINE( 194)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE( 173)		this->backBufferWidth = 0;
HXLINE( 163)		this->backBufferHeight = 0;
HXLINE( 286)		super::__construct(null());
HXLINE( 288)		this->_hx___stage = stage;
HXLINE( 289)		this->_hx___contextState = contextState;
HXLINE( 290)		this->_hx___stage3D = stage3D;
HXLINE( 292)		this->_hx___context = stage->window->context;
HXLINE( 293)		this->gl = this->_hx___context->webgl;
HXLINE( 295)		if (hx::IsNull( this->_hx___contextState )) {
HXLINE( 295)			this->_hx___contextState =  ::openfl::_internal::renderer::context3D::Context3DState_obj::__alloc( HX_CTX );
            		}
HXLINE( 296)		this->_hx___state =  ::openfl::_internal::renderer::context3D::Context3DState_obj::__alloc( HX_CTX );
HXLINE( 299)		 ::haxe::io::Bytes buffer = null();
HXDLIN( 299)		::cpp::VirtualArray array = null();
HXDLIN( 299)		 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 299)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 299)		 ::Dynamic len = null();
HXDLIN( 299)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,512,8);
HXDLIN( 299)		this->_hx___vertexConstants = this1;
HXLINE( 300)		 ::haxe::io::Bytes buffer1 = null();
HXDLIN( 300)		::cpp::VirtualArray array1 = null();
HXDLIN( 300)		 ::openfl::_Vector::FloatVector vector1 = null();
HXDLIN( 300)		 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN( 300)		 ::Dynamic len1 = null();
HXDLIN( 300)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,512,8);
HXDLIN( 300)		this->_hx___fragmentConstants = this2;
HXLINE( 301)		 ::Dynamic elements = null();
HXDLIN( 301)		 ::haxe::io::Bytes buffer2 = null();
HXDLIN( 301)		::cpp::VirtualArray array2 = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_2,4);
HXDLIN( 301)		 ::openfl::_Vector::FloatVector vector2 = null();
HXDLIN( 301)		 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN( 301)		 ::Dynamic len2 = null();
HXDLIN( 301)		 ::lime::utils::ArrayBufferView this3;
HXDLIN( 301)		if (hx::IsNotNull( elements )) {
HXLINE( 301)			this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            		}
            		else {
HXLINE( 301)			if (hx::IsNotNull( array2 )) {
HXLINE( 301)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 301)				_this->byteOffset = 0;
HXDLIN( 301)				_this->length = array2->get_length();
HXDLIN( 301)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 301)				 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 301)				_this->buffer = this4;
HXDLIN( 301)				_this->copyFromArray(array2,null());
HXDLIN( 301)				this3 = _this;
            			}
            			else {
HXLINE( 301)				if (hx::IsNotNull( vector2 )) {
HXLINE( 301)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 301)					::cpp::VirtualArray array3 = ( (::cpp::VirtualArray)(vector2->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 301)					_this1->byteOffset = 0;
HXDLIN( 301)					_this1->length = array3->get_length();
HXDLIN( 301)					_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 301)					 ::haxe::io::Bytes this5 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 301)					_this1->buffer = this5;
HXDLIN( 301)					_this1->copyFromArray(array3,null());
HXDLIN( 301)					this3 = _this1;
            				}
            				else {
HXLINE( 301)					if (hx::IsNotNull( view2 )) {
HXLINE( 301)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 301)						 ::haxe::io::Bytes srcData = view2->buffer;
HXDLIN( 301)						int srcLength = view2->length;
HXDLIN( 301)						int srcByteOffset = view2->byteOffset;
HXDLIN( 301)						int srcElementSize = view2->bytesPerElement;
HXDLIN( 301)						int elementSize = _this2->bytesPerElement;
HXDLIN( 301)						if ((view2->type == _this2->type)) {
HXLINE( 301)							int srcLength1 = srcData->length;
HXDLIN( 301)							int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 301)							 ::haxe::io::Bytes this6 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 301)							_this2->buffer = this6;
HXDLIN( 301)							_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXLINE( 301)							HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            						}
HXDLIN( 301)						_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 301)						_this2->byteOffset = 0;
HXDLIN( 301)						_this2->length = srcLength;
HXDLIN( 301)						this3 = _this2;
            					}
            					else {
HXLINE( 301)						if (hx::IsNotNull( buffer2 )) {
HXLINE( 301)							 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 301)							int in_byteOffset = 0;
HXDLIN( 301)							if ((in_byteOffset < 0)) {
HXLINE( 301)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 301)							if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 301)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 301)							int bufferByteLength = buffer2->length;
HXDLIN( 301)							int elementSize1 = _this3->bytesPerElement;
HXDLIN( 301)							int newByteLength = bufferByteLength;
HXDLIN( 301)							if (hx::IsNull( len2 )) {
HXLINE( 301)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 301)								if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 301)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 301)								if ((newByteLength < 0)) {
HXLINE( 301)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
            							else {
HXLINE( 301)								newByteLength = (( (int)(len2) ) * _this3->bytesPerElement);
HXDLIN( 301)								int newRange = (in_byteOffset + newByteLength);
HXDLIN( 301)								if ((newRange > bufferByteLength)) {
HXLINE( 301)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
HXDLIN( 301)							_this3->buffer = buffer2;
HXDLIN( 301)							_this3->byteOffset = in_byteOffset;
HXDLIN( 301)							_this3->byteLength = newByteLength;
HXDLIN( 301)							_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 301)							this3 = _this3;
            						}
            						else {
HXLINE( 301)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 301)		this->_hx___positionScale = this3;
HXLINE( 303)		this->_hx___programs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 305)		if ((::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims == -1)) {
HXLINE( 310)			::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims = 16384;
            		}
HXLINE( 314)		this->maxBackBufferWidth = ::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims;
HXLINE( 315)		this->maxBackBufferHeight = ::openfl::display3D::Context3D_obj::_hx___glMaxViewportDims;
HXLINE( 317)		if ((::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy == -1)) {
HXLINE( 319)			 ::Dynamic extension = this->gl->getExtension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXLINE( 328)			if (hx::IsNotNull( extension )) {
HXLINE( 330)				::openfl::display3D::Context3D_obj::_hx___glTextureMaxAnisotropy = ( (int)(extension->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),hx::paccDynamic)) );
HXLINE( 331)				::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy = ( (int)(this->gl->getParameter(( (int)(extension->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),hx::paccDynamic)) ))) );
            			}
            			else {
HXLINE( 335)				::openfl::display3D::Context3D_obj::_hx___glTextureMaxAnisotropy = 0;
HXLINE( 336)				::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy = 0;
            			}
            		}
HXLINE( 341)		if ((::openfl::display3D::Context3D_obj::_hx___glDepthStencil == -1)) {
HXLINE( 346)			bool _hx_tmp;
HXDLIN( 346)			if ((this->_hx___context->type == HX_("opengles",9d,f6,c9,fa))) {
HXLINE( 346)				_hx_tmp = (::Std_obj::parseFloat(this->_hx___context->version) >= 3);
            			}
            			else {
HXLINE( 346)				_hx_tmp = false;
            			}
HXDLIN( 346)			if (_hx_tmp) {
HXLINE( 348)				::openfl::display3D::Context3D_obj::_hx___glDepthStencil = this->_hx___context->gles3->DEPTH24_STENCIL8;
            			}
            			else {
HXLINE( 352)				 ::Dynamic extension1 = this->gl->getExtension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXLINE( 353)				if (hx::IsNotNull( extension1 )) {
HXLINE( 355)					::openfl::display3D::Context3D_obj::_hx___glDepthStencil = ( (int)(extension1->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 359)					extension1 = this->gl->getExtension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXLINE( 360)					if (hx::IsNotNull( extension1 )) {
HXLINE( 362)						::openfl::display3D::Context3D_obj::_hx___glDepthStencil = ( (int)(extension1->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),hx::paccDynamic)) );
            					}
            					else {
HXLINE( 366)						::openfl::display3D::Context3D_obj::_hx___glDepthStencil = 0;
            					}
            				}
            			}
            		}
HXLINE( 374)		if (hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___driverInfo )) {
HXLINE( 376)			::String vendor = ( (::String)(this->gl->getParameter(this->gl->VENDOR)) );
HXLINE( 377)			::String version = ( (::String)(this->gl->getParameter(this->gl->VERSION)) );
HXLINE( 378)			::String renderer = ( (::String)(this->gl->getParameter(this->gl->RENDERER)) );
HXLINE( 379)			::String glslVersion = ( (::String)(this->gl->getParameter(this->gl->SHADING_LANGUAGE_VERSION)) );
HXLINE( 381)			::openfl::display3D::Context3D_obj::_hx___driverInfo = (((((((HX_("OpenGL Vendor=",04,c1,2f,f5) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
            		}
HXLINE( 384)		this->driverInfo = ::openfl::display3D::Context3D_obj::_hx___driverInfo;
HXLINE( 386)		this->_hx___quadIndexBufferElements = 16383;
HXLINE( 387)		this->_hx___quadIndexBufferCount = (this->_hx___quadIndexBufferElements * 6);
HXLINE( 390)		 ::Dynamic elements1 = this->_hx___quadIndexBufferCount;
HXDLIN( 390)		 ::haxe::io::Bytes buffer3 = null();
HXDLIN( 390)		::cpp::VirtualArray array4 = null();
HXDLIN( 390)		 ::openfl::_Vector::IntVector vector3 = null();
HXDLIN( 390)		 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN( 390)		 ::Dynamic len3 = null();
HXDLIN( 390)		 ::lime::utils::ArrayBufferView this7;
HXDLIN( 390)		if (hx::IsNotNull( elements1 )) {
HXLINE( 390)			this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements1,6);
            		}
            		else {
HXLINE( 390)			if (hx::IsNotNull( array4 )) {
HXLINE( 390)				 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 390)				_this4->byteOffset = 0;
HXDLIN( 390)				_this4->length = array4->get_length();
HXDLIN( 390)				_this4->byteLength = (_this4->length * _this4->bytesPerElement);
HXDLIN( 390)				 ::haxe::io::Bytes this8 = ::haxe::io::Bytes_obj::alloc(_this4->byteLength);
HXDLIN( 390)				_this4->buffer = this8;
HXDLIN( 390)				_this4->copyFromArray(array4,null());
HXDLIN( 390)				this7 = _this4;
            			}
            			else {
HXLINE( 390)				if (hx::IsNotNull( vector3 )) {
HXLINE( 390)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 390)					::cpp::VirtualArray array5 = ( (::cpp::VirtualArray)(vector3->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)					_this5->byteOffset = 0;
HXDLIN( 390)					_this5->length = array5->get_length();
HXDLIN( 390)					_this5->byteLength = (_this5->length * _this5->bytesPerElement);
HXDLIN( 390)					 ::haxe::io::Bytes this9 = ::haxe::io::Bytes_obj::alloc(_this5->byteLength);
HXDLIN( 390)					_this5->buffer = this9;
HXDLIN( 390)					_this5->copyFromArray(array5,null());
HXDLIN( 390)					this7 = _this5;
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( view3 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 390)						 ::haxe::io::Bytes srcData1 = view3->buffer;
HXDLIN( 390)						int srcLength2 = view3->length;
HXDLIN( 390)						int srcByteOffset1 = view3->byteOffset;
HXDLIN( 390)						int srcElementSize1 = view3->bytesPerElement;
HXDLIN( 390)						int elementSize2 = _this6->bytesPerElement;
HXDLIN( 390)						if ((view3->type == _this6->type)) {
HXLINE( 390)							int srcLength3 = srcData1->length;
HXDLIN( 390)							int cloneLength1 = (srcLength3 - srcByteOffset1);
HXDLIN( 390)							 ::haxe::io::Bytes this10 = ::haxe::io::Bytes_obj::alloc(cloneLength1);
HXDLIN( 390)							_this6->buffer = this10;
HXDLIN( 390)							_this6->buffer->blit(0,srcData1,srcByteOffset1,cloneLength1);
            						}
            						else {
HXLINE( 390)							HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            						}
HXDLIN( 390)						_this6->byteLength = (_this6->bytesPerElement * srcLength2);
HXDLIN( 390)						_this6->byteOffset = 0;
HXDLIN( 390)						_this6->length = srcLength2;
HXDLIN( 390)						this7 = _this6;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( buffer3 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 390)							int in_byteOffset1 = 0;
HXDLIN( 390)							if ((in_byteOffset1 < 0)) {
HXLINE( 390)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 390)							if ((hx::Mod(in_byteOffset1,_this7->bytesPerElement) != 0)) {
HXLINE( 390)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 390)							int bufferByteLength1 = buffer3->length;
HXDLIN( 390)							int elementSize3 = _this7->bytesPerElement;
HXDLIN( 390)							int newByteLength1 = bufferByteLength1;
HXDLIN( 390)							if (hx::IsNull( len3 )) {
HXLINE( 390)								newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 390)								if ((hx::Mod(bufferByteLength1,_this7->bytesPerElement) != 0)) {
HXLINE( 390)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 390)								if ((newByteLength1 < 0)) {
HXLINE( 390)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
            							else {
HXLINE( 390)								newByteLength1 = (( (int)(len3) ) * _this7->bytesPerElement);
HXDLIN( 390)								int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 390)								if ((newRange1 > bufferByteLength1)) {
HXLINE( 390)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
HXDLIN( 390)							_this7->buffer = buffer3;
HXDLIN( 390)							_this7->byteOffset = in_byteOffset1;
HXDLIN( 390)							_this7->byteLength = newByteLength1;
HXDLIN( 390)							_this7->length = ::Std_obj::_hx_int((( (Float)(newByteLength1) ) / ( (Float)(_this7->bytesPerElement) )));
HXDLIN( 390)							this7 = _this7;
            						}
            						else {
HXLINE( 390)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 390)		 ::lime::utils::ArrayBufferView data = this7;
HXLINE( 392)		int index = 0;
HXLINE( 393)		int vertex = 0;
HXLINE( 395)		{
HXLINE( 395)			int _g = 0;
HXDLIN( 395)			int _g1 = this->_hx___quadIndexBufferElements;
HXDLIN( 395)			while((_g < _g1)){
HXLINE( 395)				_g = (_g + 1);
HXDLIN( 395)				int i = (_g - 1);
HXLINE( 397)				 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + (index * 2)),vertex);
HXLINE( 398)				{
HXLINE( 398)					int val = (vertex + 1);
HXDLIN( 398)					 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 1) * 2)),val);
            				}
HXLINE( 399)				{
HXLINE( 399)					int val1 = (vertex + 2);
HXDLIN( 399)					 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 2) * 2)),val1);
            				}
HXLINE( 400)				{
HXLINE( 400)					int val2 = (vertex + 2);
HXDLIN( 400)					 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 3) * 2)),val2);
            				}
HXLINE( 401)				{
HXLINE( 401)					int val3 = (vertex + 1);
HXDLIN( 401)					 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 4) * 2)),val3);
            				}
HXLINE( 402)				{
HXLINE( 402)					int val4 = (vertex + 3);
HXDLIN( 402)					 ::__hxcpp_memory_set_ui16(data->buffer->b,(data->byteOffset + ((index + 5) * 2)),val4);
            				}
HXLINE( 404)				index = (index + 6);
HXLINE( 405)				vertex = (vertex + 4);
            			}
            		}
HXLINE( 408)		this->_hx___quadIndexBuffer = this->createIndexBuffer(this->_hx___quadIndexBufferCount,null());
HXLINE( 409)		this->_hx___quadIndexBuffer->uploadFromTypedArray(data,null());
HXLINE( 412)		this->_hx___bitmapDataPool =  ::openfl::_internal::renderer::BitmapDataPool_obj::__alloc( HX_CTX ,30,hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x6271873d;
	}
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
            		Float red = __o_red.Default(0);
            		Float green = __o_green.Default(0);
            		Float blue = __o_blue.Default(0);
            		Float alpha = __o_alpha.Default(1);
            		Float depth = __o_depth.Default(1);
            		int stencil = __o_stencil.Default(0);
            		int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_449_clear)
HXLINE( 450)		this->_hx___flushGLFramebuffer();
HXLINE( 451)		this->_hx___flushGLViewport();
HXLINE( 453)		int clearMask = 0;
HXLINE( 455)		if (((mask & 1) != 0)) {
HXLINE( 457)			if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE( 459)				bool _hx_tmp;
HXDLIN( 459)				if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 459)					_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            				}
            				else {
HXLINE( 459)					_hx_tmp = false;
            				}
HXDLIN( 459)				if (_hx_tmp) {
HXLINE( 459)					this->_hx___stage->_hx___renderer->_hx___cleared = true;
            				}
HXLINE( 460)				this->_hx___cleared = true;
            			}
HXLINE( 463)			clearMask = (clearMask | this->gl->COLOR_BUFFER_BIT);
HXLINE( 465)			bool _hx_tmp1;
HXDLIN( 465)			bool _hx_tmp2;
HXDLIN( 465)			bool _hx_tmp3;
HXDLIN( 465)			if ((this->_hx___contextState->colorMaskRed == true)) {
HXLINE( 465)				_hx_tmp3 = (this->_hx___contextState->colorMaskGreen != true);
            			}
            			else {
HXLINE( 465)				_hx_tmp3 = true;
            			}
HXDLIN( 465)			if (!(_hx_tmp3)) {
HXLINE( 465)				_hx_tmp2 = (this->_hx___contextState->colorMaskBlue != true);
            			}
            			else {
HXLINE( 465)				_hx_tmp2 = true;
            			}
HXDLIN( 465)			if (!(_hx_tmp2)) {
HXLINE( 465)				_hx_tmp1 = (this->_hx___contextState->colorMaskAlpha != true);
            			}
            			else {
HXLINE( 465)				_hx_tmp1 = true;
            			}
HXDLIN( 465)			if (_hx_tmp1) {
HXLINE( 470)				this->gl->colorMask(true,true,true,true);
HXLINE( 471)				this->_hx___contextState->colorMaskRed = true;
HXLINE( 472)				this->_hx___contextState->colorMaskGreen = true;
HXLINE( 473)				this->_hx___contextState->colorMaskBlue = true;
HXLINE( 474)				this->_hx___contextState->colorMaskAlpha = true;
            			}
HXLINE( 477)			this->gl->clearColor(red,green,blue,alpha);
            		}
HXLINE( 480)		if (((mask & 2) != 0)) {
HXLINE( 482)			clearMask = (clearMask | this->gl->DEPTH_BUFFER_BIT);
HXLINE( 484)			if ((this->_hx___contextState->depthMask != true)) {
HXLINE( 486)				this->gl->depthMask(true);
HXLINE( 487)				this->_hx___contextState->depthMask = true;
            			}
HXLINE( 490)			this->gl->clearDepthf(depth);
            		}
HXLINE( 493)		if (((mask & 4) != 0)) {
HXLINE( 495)			clearMask = (clearMask | this->gl->STENCIL_BUFFER_BIT);
HXLINE( 497)			if ((this->_hx___contextState->stencilWriteMask != 255)) {
HXLINE( 499)				this->gl->stencilMask(255);
HXLINE( 500)				this->_hx___contextState->stencilWriteMask = 255;
            			}
HXLINE( 503)			this->gl->clearStencil(stencil);
HXLINE( 504)			this->_hx___contextState->stencilWriteMask = 255;
            		}
HXLINE( 507)		if ((clearMask == 0)) {
HXLINE( 507)			return;
            		}
HXLINE( 509)		this->_hx___setGLScissorTest(false);
HXLINE( 510)		this->gl->clear(clearMask);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
            		bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
            		bool wantsBestResolution = __o_wantsBestResolution.Default(false);
            		bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_569_configureBackBuffer)
HXDLIN( 569)		if (hx::IsNull( this->_hx___stage3D )) {
HXLINE( 571)			this->backBufferWidth = width;
HXLINE( 572)			this->backBufferHeight = height;
HXLINE( 574)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 575)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 576)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 577)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
            		}
            		else {
HXLINE( 581)			bool _hx_tmp;
HXDLIN( 581)			bool _hx_tmp1;
HXDLIN( 581)			if (hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 581)				_hx_tmp1 = (this->backBufferWidth != width);
            			}
            			else {
HXLINE( 581)				_hx_tmp1 = true;
            			}
HXDLIN( 581)			if (!(_hx_tmp1)) {
HXLINE( 581)				_hx_tmp = (this->backBufferHeight != height);
            			}
            			else {
HXLINE( 581)				_hx_tmp = true;
            			}
HXDLIN( 581)			if (_hx_tmp) {
HXLINE( 583)				if (hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE( 583)					this->_hx___backBufferTexture->dispose();
            				}
HXLINE( 584)				if (hx::IsNotNull( this->_hx___frontBufferTexture )) {
HXLINE( 584)					this->_hx___frontBufferTexture->dispose();
            				}
HXLINE( 586)				this->_hx___backBufferTexture = this->createRectangleTexture(width,height,1,true);
HXLINE( 587)				this->_hx___frontBufferTexture = this->createRectangleTexture(width,height,1,true);
HXLINE( 589)				if (hx::IsNull( this->_hx___stage3D->_hx___vertexBuffer )) {
HXLINE( 591)					this->_hx___stage3D->_hx___vertexBuffer = this->createVertexBuffer(4,5,null());
            				}
HXLINE( 594)				int length = null();
HXDLIN( 594)				bool fixed = null();
HXDLIN( 594)				 ::openfl::_Vector::FloatVector vertexData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(20)->init(0,width)->init(1,height)->init(2,0)->init(3,1)->init(4,1)->init(5,0)->init(6,height)->init(7,0)->init(8,0)->init(9,1)->init(10,width)->init(11,0)->init(12,0)->init(13,1)->init(14,0)->init(15,0)->init(16,0)->init(17,0)->init(18,0)->init(19,((Float)0.0)),true);
HXLINE( 596)				this->_hx___stage3D->_hx___vertexBuffer->uploadFromVector(vertexData,0,20);
HXLINE( 598)				if (hx::IsNull( this->_hx___stage3D->_hx___indexBuffer )) {
HXLINE( 600)					this->_hx___stage3D->_hx___indexBuffer = this->createIndexBuffer(6,null());
HXLINE( 602)					int length1 = null();
HXDLIN( 602)					bool fixed1 = null();
HXDLIN( 602)					 ::openfl::_Vector::IntVector indexData =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,::Array_obj< int >::fromData( _hx_array_data_2fa0bfa7_5,6));
HXLINE( 604)					this->_hx___stage3D->_hx___indexBuffer->uploadFromVector(indexData,0,6);
            				}
            			}
HXLINE( 608)			this->backBufferWidth = width;
HXLINE( 609)			this->backBufferHeight = height;
HXLINE( 611)			this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 612)			this->_hx___state->backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 613)			this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 614)			this->_hx___backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
HXLINE( 615)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
HXLINE( 616)			this->_hx___frontBufferTexture->_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
            		int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_699_createCubeTexture)
HXDLIN( 699)		return  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
            		 ::Dynamic bufferUsage = __o_bufferUsage;
            		if (hx::IsNull(__o_bufferUsage)) bufferUsage = 1;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_732_createIndexBuffer)
HXDLIN( 732)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numIndices,bufferUsage);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram( ::Dynamic __o_format){
            		 ::Dynamic format = __o_format;
            		if (hx::IsNull(__o_format)) format = 0;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_757_createProgram)
HXDLIN( 757)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),format);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_806_createRectangleTexture)
HXDLIN( 806)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
            		int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_882_createTexture)
HXDLIN( 882)		return  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
            		 ::Dynamic bufferUsage = __o_bufferUsage;
            		if (hx::IsNull(__o_bufferUsage)) bufferUsage = 1;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_927_createVertexBuffer)
HXDLIN( 927)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

 ::openfl::display3D::textures::VideoTexture Context3D_obj::createVideoTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_967_createVideoTexture)
HXDLIN( 967)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Video textures are not supported on this platform",02,cd,86,ca),null()));
HXDLIN( 967)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createVideoTexture,return )

void Context3D_obj::dispose(hx::Null< bool >  __o_recreate){
            		bool recreate = __o_recreate.Default(true);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_993_dispose)
HXLINE( 996)		this->gl = null();
HXLINE( 997)		this->_hx___dispose();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination, ::openfl::geom::Rectangle srcRect, ::openfl::geom::Point destPoint){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1040_drawToBitmapData)
HXLINE(1042)		if (hx::IsNull( destination )) {
HXLINE(1042)			return;
            		}
HXLINE(1044)		 ::lime::math::Rectangle sourceRect;
HXDLIN(1044)		if (hx::IsNotNull( srcRect )) {
HXLINE(1044)			sourceRect = srcRect->_hx___toLimeRectangle();
            		}
            		else {
HXLINE(1044)			sourceRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,0,0,this->backBufferWidth,this->backBufferHeight);
            		}
HXLINE(1045)		 ::lime::math::Vector2 destVector;
HXDLIN(1045)		if (hx::IsNotNull( destPoint )) {
HXLINE(1045)			destVector = destPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE(1045)			destVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE(1047)		if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1049)			if (hx::IsNotNull( this->_hx___stage->window )) {
HXLINE(1051)				if (hx::IsNotNull( this->_hx___stage3D )) {
HXLINE(1053)					Float xa = ( (Float)(::Std_obj::_hx_int(-(this->_hx___stage3D->get_x()))) );
HXDLIN(1053)					Float ya = ( (Float)(::Std_obj::_hx_int(-(this->_hx___stage3D->get_y()))) );
HXDLIN(1053)					destVector->x = xa;
HXDLIN(1053)					destVector->y = ya;
            				}
HXLINE(1056)				 ::lime::graphics::Image image = this->_hx___stage->window->readPixels(null());
HXLINE(1057)				destination->image->copyPixels(image,sourceRect,destVector,null(),null(),null());
            			}
            		}
            		else {
HXLINE(1060)			if (hx::IsNotNull( this->_hx___backBufferTexture )) {
HXLINE(1062)				 ::openfl::display3D::textures::TextureBase cacheRenderToTexture = this->_hx___state->renderToTexture;
HXLINE(1063)				this->setRenderToBackBuffer();
HXLINE(1065)				this->_hx___flushGLFramebuffer();
HXLINE(1066)				this->_hx___flushGLViewport();
HXLINE(1070)				 ::Dynamic elements = ((this->backBufferWidth * this->backBufferHeight) * 4);
HXDLIN(1070)				 ::haxe::io::Bytes buffer = null();
HXDLIN(1070)				::cpp::VirtualArray array = null();
HXDLIN(1070)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1070)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1070)				 ::Dynamic len = null();
HXDLIN(1070)				 ::lime::utils::ArrayBufferView this1;
HXDLIN(1070)				if (hx::IsNotNull( elements )) {
HXLINE(1070)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            				}
            				else {
HXLINE(1070)					if (hx::IsNotNull( array )) {
HXLINE(1070)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1070)						_this->byteOffset = 0;
HXDLIN(1070)						_this->length = array->get_length();
HXDLIN(1070)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(1070)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(1070)						_this->buffer = this2;
HXDLIN(1070)						_this->copyFromArray(array,null());
HXDLIN(1070)						this1 = _this;
            					}
            					else {
HXLINE(1070)						if (hx::IsNotNull( vector )) {
HXLINE(1070)							 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1070)							::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN(1070)							_this1->byteOffset = 0;
HXDLIN(1070)							_this1->length = array1->get_length();
HXDLIN(1070)							_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN(1070)							 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN(1070)							_this1->buffer = this3;
HXDLIN(1070)							_this1->copyFromArray(array1,null());
HXDLIN(1070)							this1 = _this1;
            						}
            						else {
HXLINE(1070)							if (hx::IsNotNull( view )) {
HXLINE(1070)								 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1070)								 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(1070)								int srcLength = view->length;
HXDLIN(1070)								int srcByteOffset = view->byteOffset;
HXDLIN(1070)								int srcElementSize = view->bytesPerElement;
HXDLIN(1070)								int elementSize = _this2->bytesPerElement;
HXDLIN(1070)								if ((view->type == _this2->type)) {
HXLINE(1070)									int srcLength1 = srcData->length;
HXDLIN(1070)									int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN(1070)									 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(1070)									_this2->buffer = this4;
HXDLIN(1070)									_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXLINE(1070)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN(1070)								_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN(1070)								_this2->byteOffset = 0;
HXDLIN(1070)								_this2->length = srcLength;
HXDLIN(1070)								this1 = _this2;
            							}
            							else {
HXLINE(1070)								if (hx::IsNotNull( buffer )) {
HXLINE(1070)									 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1070)									int in_byteOffset = 0;
HXDLIN(1070)									if ((in_byteOffset < 0)) {
HXLINE(1070)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1070)									if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE(1070)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1070)									int bufferByteLength = buffer->length;
HXDLIN(1070)									int elementSize1 = _this3->bytesPerElement;
HXDLIN(1070)									int newByteLength = bufferByteLength;
HXDLIN(1070)									if (hx::IsNull( len )) {
HXLINE(1070)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1070)										if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE(1070)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN(1070)										if ((newByteLength < 0)) {
HXLINE(1070)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE(1070)										newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN(1070)										int newRange = (in_byteOffset + newByteLength);
HXDLIN(1070)										if ((newRange > bufferByteLength)) {
HXLINE(1070)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN(1070)									_this3->buffer = buffer;
HXDLIN(1070)									_this3->byteOffset = in_byteOffset;
HXDLIN(1070)									_this3->byteLength = newByteLength;
HXDLIN(1070)									_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN(1070)									this1 = _this3;
            								}
            								else {
HXLINE(1070)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN(1070)				 ::lime::utils::ArrayBufferView data = this1;
HXLINE(1071)				{
HXLINE(1071)					 ::lime::_internal::backend::native::NativeOpenGLRenderContext this5 = this->gl;
HXDLIN(1071)					int width = this->backBufferWidth;
HXDLIN(1071)					int height = this->backBufferHeight;
HXDLIN(1071)					int format = this->_hx___backBufferTexture->_hx___format;
HXDLIN(1071)					int type = this->gl->UNSIGNED_BYTE;
HXDLIN(1071)					{
HXLINE(1071)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),0);
HXDLIN(1071)						this5->readPixels(0,0,width,height,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
HXLINE(1073)				 ::lime::graphics::Image image1 =  ::lime::graphics::Image_obj::__alloc( HX_CTX , ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,data,this->backBufferWidth,this->backBufferHeight,32,2),null(),null(),null(),null(),null(),null());
HXLINE(1074)				destination->image->copyPixels(image1,sourceRect,destVector,null(),null(),null());
HXLINE(1076)				if (hx::IsNotNull( cacheRenderToTexture )) {
HXLINE(1078)					this->setRenderToTexture(cacheRenderToTexture,this->_hx___state->renderToTextureDepthStencil,this->_hx___state->renderToTextureAntiAlias,this->_hx___state->renderToTextureSurfaceSelector);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
            		int firstIndex = __o_firstIndex.Default(0);
            		int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1163_drawTriangles)
HXLINE(1165)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(1168)			bool _hx_tmp;
HXDLIN(1168)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1168)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE(1168)				_hx_tmp = false;
            			}
HXDLIN(1168)			if (_hx_tmp) {
HXLINE(1170)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE(1172)				if (!(this->_hx___cleared)) {
HXLINE(1175)					this->clear(0,0,0,0,1,0,1);
            				}
            			}
            		}
HXLINE(1179)		this->_hx___flushGL();
HXLINE(1182)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1184)			this->_hx___state->program->_hx___flush();
            		}
HXLINE(1187)		int count;
HXDLIN(1187)		if ((numTriangles == -1)) {
HXLINE(1187)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE(1187)			count = (numTriangles * 3);
            		}
HXLINE(1189)		this->_hx___bindGLElementArrayBuffer(indexBuffer->_hx___id);
HXLINE(1190)		{
HXLINE(1190)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1190)			int mode = this->gl->TRIANGLES;
HXDLIN(1190)			int type = this->gl->UNSIGNED_SHORT;
HXDLIN(1190)			this1->drawElements(mode,count,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((firstIndex * 2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1212_present)
HXLINE(1213)		this->setRenderToBackBuffer();
HXLINE(1215)		bool _hx_tmp;
HXDLIN(1215)		if (hx::IsNotNull( this->_hx___stage3D )) {
HXLINE(1215)			_hx_tmp = hx::IsNotNull( this->_hx___backBufferTexture );
            		}
            		else {
HXLINE(1215)			_hx_tmp = false;
            		}
HXDLIN(1215)		if (_hx_tmp) {
HXLINE(1217)			if (!(this->_hx___cleared)) {
HXLINE(1221)				this->clear(0,0,0,0,1,0,1);
            			}
HXLINE(1224)			 ::openfl::display3D::textures::RectangleTexture cacheBuffer = this->_hx___backBufferTexture;
HXLINE(1225)			this->_hx___backBufferTexture = this->_hx___frontBufferTexture;
HXLINE(1226)			this->_hx___frontBufferTexture = cacheBuffer;
HXLINE(1228)			this->_hx___state->_hx___primaryGLFramebuffer = this->_hx___backBufferTexture->_hx___getGLFramebuffer(this->_hx___state->backBufferEnableDepthAndStencil,this->_hx___backBufferAntiAlias,0);
HXLINE(1229)			this->_hx___cleared = false;
            		}
HXLINE(1232)		this->_hx___present = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1270_setBlendFactors)
HXDLIN(1270)		this->setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setBlendFactorsSeparate( ::Dynamic sourceRGBFactor, ::Dynamic destinationRGBFactor, ::Dynamic sourceAlphaFactor, ::Dynamic destinationAlphaFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1275_setBlendFactorsSeparate)
HXLINE(1276)		this->_hx___state->blendSourceRGBFactor = sourceRGBFactor;
HXLINE(1277)		this->_hx___state->blendDestinationRGBFactor = destinationRGBFactor;
HXLINE(1278)		this->_hx___state->blendSourceAlphaFactor = sourceAlphaFactor;
HXLINE(1279)		this->_hx___state->blendDestinationAlphaFactor = destinationAlphaFactor;
HXLINE(1282)		this->_hx___setGLBlendEquation(this->gl->FUNC_ADD);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setBlendFactorsSeparate,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1300_setColorMask)
HXLINE(1301)		this->_hx___state->colorMaskRed = red;
HXLINE(1302)		this->_hx___state->colorMaskGreen = green;
HXLINE(1303)		this->_hx___state->colorMaskBlue = blue;
HXLINE(1304)		this->_hx___state->colorMaskAlpha = alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1322_setCulling)
HXDLIN(1322)		this->_hx___state->culling = triangleFaceToCull;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1346_setDepthTest)
HXLINE(1347)		this->_hx___state->depthMask = depthMask;
HXLINE(1348)		this->_hx___state->depthCompareMode = passCompareMode;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1358_setProgram)
HXLINE(1359)		this->_hx___state->program = program;
HXLINE(1360)		this->_hx___state->shader = null();
HXLINE(1362)		if (hx::IsNotNull( program )) {
HXLINE(1364)			int _g = 0;
HXDLIN(1364)			int _g1 = program->_hx___samplerStates->length;
HXDLIN(1364)			while((_g < _g1)){
HXLINE(1364)				_g = (_g + 1);
HXDLIN(1364)				int i = (_g - 1);
HXLINE(1366)				if (hx::IsNull( this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >() )) {
HXLINE(1368)					this->_hx___state->samplerStates[i] = program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >()->clone();
            				}
            				else {
HXLINE(1372)					this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >()->copyFrom(program->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1398_setProgramConstantsFromByteArray)
HXLINE(1400)		bool _hx_tmp;
HXDLIN(1400)		if ((numRegisters != 0)) {
HXLINE(1400)			_hx_tmp = hx::IsNull( this->_hx___state->program );
            		}
            		else {
HXLINE(1400)			_hx_tmp = true;
            		}
HXDLIN(1400)		if (_hx_tmp) {
HXLINE(1400)			return;
            		}
HXLINE(1402)		bool _hx_tmp1;
HXDLIN(1402)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1402)			_hx_tmp1 = hx::IsEq( this->_hx___state->program->_hx___format,1 );
            		}
            		else {
HXLINE(1402)			_hx_tmp1 = false;
            		}
HXDLIN(1402)		if (!(_hx_tmp1)) {
HXLINE(1410)			if ((numRegisters == -1)) {
HXLINE(1412)				numRegisters = (hx::UShr(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data),2) - byteArrayOffset);
            			}
HXLINE(1415)			bool isVertex = hx::IsEq( programType,1 );
HXLINE(1416)			 ::lime::utils::ArrayBufferView dest;
HXDLIN(1416)			if (isVertex) {
HXLINE(1416)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE(1416)				dest = this->_hx___fragmentConstants;
            			}
HXLINE(1418)			 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN(1418)			 ::Dynamic byteOffset = 0;
HXDLIN(1418)			 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXLINE( 132)			if (hx::IsNull( byteOffset )) {
HXLINE( 132)				byteOffset = 0;
            			}
HXLINE(1418)			 ::Dynamic elements = null();
HXDLIN(1418)			::cpp::VirtualArray array = null();
HXDLIN(1418)			 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1418)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1418)			 ::Dynamic byteoffset = byteOffset;
HXDLIN(1418)			if (hx::IsNull( byteoffset )) {
HXLINE(1418)				byteoffset = 0;
            			}
HXDLIN(1418)			 ::lime::utils::ArrayBufferView this1;
HXDLIN(1418)			if (hx::IsNotNull( elements )) {
HXLINE(1418)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            			}
            			else {
HXLINE(1418)				if (hx::IsNotNull( array )) {
HXLINE(1418)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(1418)					_this->byteOffset = 0;
HXDLIN(1418)					_this->length = array->get_length();
HXDLIN(1418)					_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(1418)					 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(1418)					_this->buffer = this2;
HXDLIN(1418)					_this->copyFromArray(array,null());
HXDLIN(1418)					this1 = _this;
            				}
            				else {
HXLINE(1418)					if (hx::IsNotNull( vector )) {
HXLINE(1418)						 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(1418)						::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN(1418)						_this1->byteOffset = 0;
HXDLIN(1418)						_this1->length = array1->get_length();
HXDLIN(1418)						_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN(1418)						 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN(1418)						_this1->buffer = this3;
HXDLIN(1418)						_this1->copyFromArray(array1,null());
HXDLIN(1418)						this1 = _this1;
            					}
            					else {
HXLINE(1418)						if (hx::IsNotNull( view )) {
HXLINE(1418)							 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(1418)							 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(1418)							int srcLength = view->length;
HXDLIN(1418)							int srcByteOffset = view->byteOffset;
HXDLIN(1418)							int srcElementSize = view->bytesPerElement;
HXDLIN(1418)							int elementSize = _this2->bytesPerElement;
HXDLIN(1418)							if ((view->type == _this2->type)) {
HXLINE(1418)								int srcLength1 = srcData->length;
HXDLIN(1418)								int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN(1418)								 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(1418)								_this2->buffer = this4;
HXDLIN(1418)								_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            							}
            							else {
HXLINE(1418)								HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            							}
HXDLIN(1418)							_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN(1418)							_this2->byteOffset = 0;
HXDLIN(1418)							_this2->length = srcLength;
HXDLIN(1418)							this1 = _this2;
            						}
            						else {
HXLINE(1418)							if (hx::IsNotNull( bytes )) {
HXLINE(1418)								 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN(1418)								int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(1418)								if ((in_byteOffset < 0)) {
HXLINE(1418)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1418)								if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE(1418)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1418)								int bufferByteLength = bytes->length;
HXDLIN(1418)								int elementSize1 = _this3->bytesPerElement;
HXDLIN(1418)								int newByteLength = bufferByteLength;
HXDLIN(1418)								if (hx::IsNull( len )) {
HXLINE(1418)									newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1418)									if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE(1418)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1418)									if ((newByteLength < 0)) {
HXLINE(1418)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1418)									newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN(1418)									int newRange = (in_byteOffset + newByteLength);
HXDLIN(1418)									if ((newRange > bufferByteLength)) {
HXLINE(1418)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1418)								_this3->buffer = bytes;
HXDLIN(1418)								_this3->byteOffset = in_byteOffset;
HXDLIN(1418)								_this3->byteLength = newByteLength;
HXDLIN(1418)								_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN(1418)								this1 = _this3;
            							}
            							else {
HXLINE(1418)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
            						}
            					}
            				}
            			}
HXDLIN(1418)			 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE(1419)			int outOffset = (firstRegister * 4);
HXLINE(1420)			int _hx_int = byteArrayOffset;
HXDLIN(1420)			Float inOffset;
HXDLIN(1420)			if ((_hx_int < 0)) {
HXLINE(1420)				inOffset = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(1420)				inOffset = (_hx_int + ((Float)0.0));
            			}
HXDLIN(1420)			int int1 = 4;
HXDLIN(1420)			Float inOffset1;
HXDLIN(1420)			if ((int1 < 0)) {
HXLINE(1420)				inOffset1 = (((Float)4294967296.0) + int1);
            			}
            			else {
HXLINE(1420)				inOffset1 = (int1 + ((Float)0.0));
            			}
HXDLIN(1420)			int inOffset2 = ::Std_obj::_hx_int((inOffset / inOffset1));
HXLINE(1422)			{
HXLINE(1422)				int _g = 0;
HXDLIN(1422)				int _g1 = (numRegisters * 4);
HXDLIN(1422)				while((_g < _g1)){
HXLINE(1422)					_g = (_g + 1);
HXDLIN(1422)					int i = (_g - 1);
HXLINE(1424)					{
HXLINE(1424)						Float val =  ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData->byteOffset + ((inOffset2 + i) * 4)));
HXDLIN(1424)						 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((outOffset + i) * 4)),val);
            					}
            				}
            			}
HXLINE(1427)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1429)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
            		bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1458_setProgramConstantsFromMatrix)
HXDLIN(1458)		bool _hx_tmp;
HXDLIN(1458)		if (hx::IsNotNull( this->_hx___state->program )) {
HXDLIN(1458)			_hx_tmp = hx::IsEq( this->_hx___state->program->_hx___format,1 );
            		}
            		else {
HXDLIN(1458)			_hx_tmp = false;
            		}
HXDLIN(1458)		if (_hx_tmp) {
HXLINE(1460)			this->_hx___flushGLProgram();
HXLINE(1463)			 ::haxe::io::Bytes buffer = null();
HXDLIN(1463)			::cpp::VirtualArray array = null();
HXDLIN(1463)			 ::openfl::_Vector::FloatVector vector = null();
HXDLIN(1463)			 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1463)			 ::Dynamic len = null();
HXDLIN(1463)			 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,16,8);
HXDLIN(1463)			 ::lime::utils::ArrayBufferView data = this1;
HXLINE(1464)			{
HXLINE(1466)				{
HXLINE(1466)					Float val = matrix->rawData->get(0);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,data->byteOffset,val);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val1 = matrix->rawData->get(1);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 4),val1);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val2 = matrix->rawData->get(2);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 8),val2);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val3 = matrix->rawData->get(3);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 12),val3);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val4 = matrix->rawData->get(4);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 16),val4);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val5 = matrix->rawData->get(5);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 20),val5);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val6 = matrix->rawData->get(6);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 24),val6);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val7 = matrix->rawData->get(7);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 28),val7);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val8 = matrix->rawData->get(8);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 32),val8);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val9 = matrix->rawData->get(9);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 36),val9);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val10 = matrix->rawData->get(10);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 40),val10);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val11 = matrix->rawData->get(11);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 44),val11);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val12 = matrix->rawData->get(12);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 48),val12);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val13 = matrix->rawData->get(13);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 52),val13);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val14 = matrix->rawData->get(14);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 56),val14);
            				}
HXDLIN(1466)				{
HXLINE(1466)					Float val15 = matrix->rawData->get(15);
HXDLIN(1466)					 ::__hxcpp_memory_set_float(data->buffer->b,(data->byteOffset + 60),val15);
            				}
            			}
HXLINE(1469)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(this->gl,firstRegister,transposedMatrix,data);
            		}
            		else {
HXLINE(1473)			bool isVertex = hx::IsEq( programType,1 );
HXLINE(1474)			 ::lime::utils::ArrayBufferView dest;
HXDLIN(1474)			if (isVertex) {
HXLINE(1474)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE(1474)				dest = this->_hx___fragmentConstants;
            			}
HXLINE(1475)			 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE(1476)			int i = (firstRegister * 4);
HXLINE(1478)			if (transposedMatrix) {
HXLINE(1480)				{
HXLINE(1480)					i = (i + 1);
HXDLIN(1480)					Float val16 = source->get(0);
HXDLIN(1480)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val16);
            				}
HXLINE(1481)				{
HXLINE(1481)					i = (i + 1);
HXDLIN(1481)					Float val17 = source->get(4);
HXDLIN(1481)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val17);
            				}
HXLINE(1482)				{
HXLINE(1482)					i = (i + 1);
HXDLIN(1482)					Float val18 = source->get(8);
HXDLIN(1482)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val18);
            				}
HXLINE(1483)				{
HXLINE(1483)					i = (i + 1);
HXDLIN(1483)					Float val19 = source->get(12);
HXDLIN(1483)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val19);
            				}
HXLINE(1485)				{
HXLINE(1485)					i = (i + 1);
HXDLIN(1485)					Float val20 = source->get(1);
HXDLIN(1485)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val20);
            				}
HXLINE(1486)				{
HXLINE(1486)					i = (i + 1);
HXDLIN(1486)					Float val21 = source->get(5);
HXDLIN(1486)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val21);
            				}
HXLINE(1487)				{
HXLINE(1487)					i = (i + 1);
HXDLIN(1487)					Float val22 = source->get(9);
HXDLIN(1487)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val22);
            				}
HXLINE(1488)				{
HXLINE(1488)					i = (i + 1);
HXDLIN(1488)					Float val23 = source->get(13);
HXDLIN(1488)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val23);
            				}
HXLINE(1490)				{
HXLINE(1490)					i = (i + 1);
HXDLIN(1490)					Float val24 = source->get(2);
HXDLIN(1490)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val24);
            				}
HXLINE(1491)				{
HXLINE(1491)					i = (i + 1);
HXDLIN(1491)					Float val25 = source->get(6);
HXDLIN(1491)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val25);
            				}
HXLINE(1492)				{
HXLINE(1492)					i = (i + 1);
HXDLIN(1492)					Float val26 = source->get(10);
HXDLIN(1492)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val26);
            				}
HXLINE(1493)				{
HXLINE(1493)					i = (i + 1);
HXDLIN(1493)					Float val27 = source->get(14);
HXDLIN(1493)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val27);
            				}
HXLINE(1495)				{
HXLINE(1495)					i = (i + 1);
HXDLIN(1495)					Float val28 = source->get(3);
HXDLIN(1495)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val28);
            				}
HXLINE(1496)				{
HXLINE(1496)					i = (i + 1);
HXDLIN(1496)					Float val29 = source->get(7);
HXDLIN(1496)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val29);
            				}
HXLINE(1497)				{
HXLINE(1497)					i = (i + 1);
HXDLIN(1497)					Float val30 = source->get(11);
HXDLIN(1497)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val30);
            				}
HXLINE(1498)				{
HXLINE(1498)					i = (i + 1);
HXDLIN(1498)					Float val31 = source->get(15);
HXDLIN(1498)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val31);
            				}
            			}
            			else {
HXLINE(1502)				{
HXLINE(1502)					i = (i + 1);
HXDLIN(1502)					Float val32 = source->get(0);
HXDLIN(1502)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val32);
            				}
HXLINE(1503)				{
HXLINE(1503)					i = (i + 1);
HXDLIN(1503)					Float val33 = source->get(1);
HXDLIN(1503)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val33);
            				}
HXLINE(1504)				{
HXLINE(1504)					i = (i + 1);
HXDLIN(1504)					Float val34 = source->get(2);
HXDLIN(1504)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val34);
            				}
HXLINE(1505)				{
HXLINE(1505)					i = (i + 1);
HXDLIN(1505)					Float val35 = source->get(3);
HXDLIN(1505)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val35);
            				}
HXLINE(1507)				{
HXLINE(1507)					i = (i + 1);
HXDLIN(1507)					Float val36 = source->get(4);
HXDLIN(1507)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val36);
            				}
HXLINE(1508)				{
HXLINE(1508)					i = (i + 1);
HXDLIN(1508)					Float val37 = source->get(5);
HXDLIN(1508)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val37);
            				}
HXLINE(1509)				{
HXLINE(1509)					i = (i + 1);
HXDLIN(1509)					Float val38 = source->get(6);
HXDLIN(1509)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val38);
            				}
HXLINE(1510)				{
HXLINE(1510)					i = (i + 1);
HXDLIN(1510)					Float val39 = source->get(7);
HXDLIN(1510)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val39);
            				}
HXLINE(1512)				{
HXLINE(1512)					i = (i + 1);
HXDLIN(1512)					Float val40 = source->get(8);
HXDLIN(1512)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val40);
            				}
HXLINE(1513)				{
HXLINE(1513)					i = (i + 1);
HXDLIN(1513)					Float val41 = source->get(9);
HXDLIN(1513)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val41);
            				}
HXLINE(1514)				{
HXLINE(1514)					i = (i + 1);
HXDLIN(1514)					Float val42 = source->get(10);
HXDLIN(1514)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val42);
            				}
HXLINE(1515)				{
HXLINE(1515)					i = (i + 1);
HXDLIN(1515)					Float val43 = source->get(11);
HXDLIN(1515)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val43);
            				}
HXLINE(1517)				{
HXLINE(1517)					i = (i + 1);
HXDLIN(1517)					Float val44 = source->get(12);
HXDLIN(1517)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val44);
            				}
HXLINE(1518)				{
HXLINE(1518)					i = (i + 1);
HXDLIN(1518)					Float val45 = source->get(13);
HXDLIN(1518)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val45);
            				}
HXLINE(1519)				{
HXLINE(1519)					i = (i + 1);
HXDLIN(1519)					Float val46 = source->get(14);
HXDLIN(1519)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val46);
            				}
HXLINE(1520)				{
HXLINE(1520)					i = (i + 1);
HXDLIN(1520)					Float val47 = source->get(15);
HXDLIN(1520)					 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - 1) * 4)),val47);
            				}
            			}
HXLINE(1523)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1525)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,4);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
            		int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1555_setProgramConstantsFromVector)
HXLINE(1556)		if ((numRegisters == 0)) {
HXLINE(1556)			return;
            		}
HXLINE(1558)		bool _hx_tmp;
HXDLIN(1558)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1558)			_hx_tmp = hx::IsEq( this->_hx___state->program->_hx___format,1 );
            		}
            		else {
HXLINE(1558)			_hx_tmp = false;
            		}
HXDLIN(1558)		if (!(_hx_tmp)) {
HXLINE(1561)			if ((numRegisters == -1)) {
HXLINE(1563)				numRegisters = (data->get_length() >> 2);
            			}
HXLINE(1566)			bool isVertex = hx::IsEq( programType,1 );
HXLINE(1567)			 ::lime::utils::ArrayBufferView dest;
HXDLIN(1567)			if (isVertex) {
HXLINE(1567)				dest = this->_hx___vertexConstants;
            			}
            			else {
HXLINE(1567)				dest = this->_hx___fragmentConstants;
            			}
HXLINE(1568)			 ::openfl::_Vector::FloatVector source = data;
HXLINE(1570)			int sourceIndex = 0;
HXLINE(1571)			int destIndex = (firstRegister * 4);
HXLINE(1573)			{
HXLINE(1573)				int _g = 0;
HXDLIN(1573)				int _g1 = numRegisters;
HXDLIN(1573)				while((_g < _g1)){
HXLINE(1573)					_g = (_g + 1);
HXDLIN(1573)					int i = (_g - 1);
HXLINE(1575)					{
HXLINE(1575)						destIndex = (destIndex + 1);
HXDLIN(1575)						sourceIndex = (sourceIndex + 1);
HXDLIN(1575)						Float val = source->get((sourceIndex - 1));
HXDLIN(1575)						 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - 1) * 4)),val);
            					}
HXLINE(1576)					{
HXLINE(1576)						destIndex = (destIndex + 1);
HXDLIN(1576)						sourceIndex = (sourceIndex + 1);
HXDLIN(1576)						Float val1 = source->get((sourceIndex - 1));
HXDLIN(1576)						 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - 1) * 4)),val1);
            					}
HXLINE(1577)					{
HXLINE(1577)						destIndex = (destIndex + 1);
HXDLIN(1577)						sourceIndex = (sourceIndex + 1);
HXDLIN(1577)						Float val2 = source->get((sourceIndex - 1));
HXDLIN(1577)						 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - 1) * 4)),val2);
            					}
HXLINE(1578)					{
HXLINE(1578)						destIndex = (destIndex + 1);
HXDLIN(1578)						sourceIndex = (sourceIndex + 1);
HXDLIN(1578)						Float val3 = source->get((sourceIndex - 1));
HXDLIN(1578)						 ::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - 1) * 4)),val3);
            					}
            				}
            			}
HXLINE(1581)			if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1583)				this->_hx___state->program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1596_setRenderToBackBuffer)
HXDLIN(1596)		this->_hx___state->renderToTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
            		bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
            		int antiAlias = __o_antiAlias.Default(0);
            		int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1636_setRenderToTexture)
HXLINE(1637)		this->_hx___state->renderToTexture = texture;
HXLINE(1638)		this->_hx___state->renderToTextureDepthStencil = enableDepthAndStencil;
HXLINE(1639)		this->_hx___state->renderToTextureAntiAlias = antiAlias;
HXLINE(1640)		this->_hx___state->renderToTextureSurfaceSelector = surfaceSelector;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1664_setSamplerStateAt)
HXLINE(1671)		if (hx::IsNull( this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::renderer::SamplerState >() )) {
HXLINE(1673)			this->_hx___state->samplerStates[sampler] =  ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1676)		 ::openfl::_internal::renderer::SamplerState state = this->_hx___state->samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
HXLINE(1677)		state->wrap = wrap;
HXLINE(1678)		state->filter = filter;
HXLINE(1679)		state->mipfilter = mipfilter;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1696_setScissorRectangle)
HXDLIN(1696)		if (hx::IsNotNull( rectangle )) {
HXLINE(1698)			this->_hx___state->scissorEnabled = true;
HXLINE(1699)			this->_hx___state->scissorRectangle->copyFrom(rectangle);
            		}
            		else {
HXLINE(1703)			this->_hx___state->scissorEnabled = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
            		 ::Dynamic triangleFace = __o_triangleFace;
            		if (hx::IsNull(__o_triangleFace)) triangleFace = 2;
            		 ::Dynamic compareMode = __o_compareMode;
            		if (hx::IsNull(__o_compareMode)) compareMode = 0;
            		 ::Dynamic actionOnBothPass = __o_actionOnBothPass;
            		if (hx::IsNull(__o_actionOnBothPass)) actionOnBothPass = 5;
            		 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail;
            		if (hx::IsNull(__o_actionOnDepthFail)) actionOnDepthFail = 5;
            		 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail;
            		if (hx::IsNull(__o_actionOnDepthPassStencilFail)) actionOnDepthPassStencilFail = 5;
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1754_setStencilActions)
HXLINE(1755)		this->_hx___state->stencilTriangleFace = triangleFace;
HXLINE(1756)		this->_hx___state->stencilCompareMode = compareMode;
HXLINE(1757)		this->_hx___state->stencilPass = actionOnBothPass;
HXLINE(1758)		this->_hx___state->stencilDepthFail = actionOnDepthFail;
HXLINE(1759)		this->_hx___state->stencilFail = actionOnDepthPassStencilFail;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
            		int readMask = __o_readMask.Default(255);
            		int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1777_setStencilReferenceValue)
HXLINE(1778)		this->_hx___state->stencilReferenceValue = referenceValue;
HXLINE(1779)		this->_hx___state->stencilReadMask = readMask;
HXLINE(1780)		this->_hx___state->stencilWriteMask = writeMask;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1809_setTextureAt)
HXDLIN(1809)		this->_hx___state->textures[sampler] = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
            		int bufferOffset = __o_bufferOffset.Default(0);
            		 ::Dynamic format = __o_format;
            		if (hx::IsNull(__o_format)) format = 4;
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1863_setVertexBufferAt)
HXLINE(1864)		if (hx::IsNull( buffer )) {
HXLINE(1866)			this->gl->disableVertexAttribArray(index);
HXLINE(1867)			this->_hx___bindGLArrayBuffer(null());
HXLINE(1868)			return;
            		}
HXLINE(1871)		this->_hx___bindGLArrayBuffer(buffer->_hx___id);
HXLINE(1872)		this->gl->enableVertexAttribArray(index);
HXLINE(1874)		int byteOffset = (bufferOffset * 4);
HXLINE(1876)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==0) ){
HXLINE(1879)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(1879)			int type = this->gl->UNSIGNED_BYTE;
HXDLIN(1879)			int stride = buffer->_hx___stride;
HXDLIN(1879)			this1->vertexAttribPointer(index,4,type,true,stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1879)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(1891)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN(1891)			int type1 = this->gl->FLOAT;
HXDLIN(1891)			int stride1 = buffer->_hx___stride;
HXDLIN(1891)			this2->vertexAttribPointer(index,1,type1,false,stride1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1891)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(1888)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this3 = this->gl;
HXDLIN(1888)			int type2 = this->gl->FLOAT;
HXDLIN(1888)			int stride2 = buffer->_hx___stride;
HXDLIN(1888)			this3->vertexAttribPointer(index,2,type2,false,stride2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1888)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(1885)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this4 = this->gl;
HXDLIN(1885)			int type3 = this->gl->FLOAT;
HXDLIN(1885)			int stride3 = buffer->_hx___stride;
HXDLIN(1885)			this4->vertexAttribPointer(index,3,type3,false,stride3,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1885)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(1882)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext this5 = this->gl;
HXDLIN(1882)			int type4 = this->gl->FLOAT;
HXDLIN(1882)			int stride4 = buffer->_hx___stride;
HXDLIN(1882)			this5->vertexAttribPointer(index,4,type4,false,stride4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXDLIN(1882)			goto _hx_goto_36;
            		}
            		/* default */{
HXLINE(1894)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_36:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___bindGLArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1900___bindGLArrayBuffer)
HXDLIN(1900)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLArrayBuffer,buffer )) {
HXLINE(1902)			this->gl->bindBuffer(this->gl->ARRAY_BUFFER,buffer);
HXLINE(1903)			this->_hx___contextState->_hx___currentGLArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLArrayBuffer,(void))

void Context3D_obj::_hx___bindGLElementArrayBuffer( ::lime::graphics::opengl::GLObject buffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1909___bindGLElementArrayBuffer)
HXDLIN(1909)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLElementArrayBuffer,buffer )) {
HXLINE(1911)			this->gl->bindBuffer(this->gl->ELEMENT_ARRAY_BUFFER,buffer);
HXLINE(1912)			this->_hx___contextState->_hx___currentGLElementArrayBuffer = buffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLElementArrayBuffer,(void))

void Context3D_obj::_hx___bindGLFramebuffer( ::lime::graphics::opengl::GLObject framebuffer){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1918___bindGLFramebuffer)
HXDLIN(1918)		if (hx::IsNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,framebuffer )) {
HXLINE(1920)			this->gl->bindFramebuffer(this->gl->FRAMEBUFFER,framebuffer);
HXLINE(1921)			this->_hx___contextState->_hx___currentGLFramebuffer = framebuffer;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLFramebuffer,(void))

void Context3D_obj::_hx___bindGLTexture2D( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1926___bindGLTexture2D)
HXLINE(1931)		this->gl->bindTexture(this->gl->TEXTURE_2D,texture);
HXLINE(1932)		this->_hx___contextState->_hx___currentGLTexture2D = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTexture2D,(void))

void Context3D_obj::_hx___bindGLTextureCubeMap( ::lime::graphics::opengl::GLObject texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1938___bindGLTextureCubeMap)
HXLINE(1943)		this->gl->bindTexture(this->gl->TEXTURE_CUBE_MAP,texture);
HXLINE(1944)		this->_hx___contextState->_hx___currentGLTextureCubeMap = texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___bindGLTextureCubeMap,(void))

void Context3D_obj::_hx___dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1950___dispose)
HXLINE(1951)		 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1951)		_hx_tmp->driverInfo = (_hx_tmp->driverInfo + HX_(" (Disposed)",7c,80,28,51));
HXLINE(1953)		if (hx::IsNotNull( this->_hx___stage3D )) {
HXLINE(1955)			this->_hx___stage3D->_hx___indexBuffer = null();
HXLINE(1956)			this->_hx___stage3D->_hx___vertexBuffer = null();
HXLINE(1957)			this->_hx___stage3D->context3D = null();
HXLINE(1958)			this->_hx___stage3D = null();
            		}
HXLINE(1961)		this->_hx___backBufferTexture = null();
HXLINE(1962)		this->_hx___context = null();
HXLINE(1963)		this->_hx___renderStage3DProgram = null();
HXLINE(1964)		this->_hx___fragmentConstants = null();
HXLINE(1965)		this->_hx___frontBufferTexture = null();
HXLINE(1966)		this->_hx___positionScale = null();
HXLINE(1967)		this->_hx___present = false;
HXLINE(1968)		this->_hx___quadIndexBuffer = null();
HXLINE(1969)		this->_hx___stage = null();
HXLINE(1970)		this->_hx___vertexConstants = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___dispose,(void))

void Context3D_obj::_hx___drawTriangles(hx::Null< int >  __o_firstIndex,int count){
            		int firstIndex = __o_firstIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1974___drawTriangles)
HXLINE(1976)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(1979)			bool _hx_tmp;
HXDLIN(1979)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1979)				_hx_tmp = !(this->_hx___stage->_hx___renderer->_hx___cleared);
            			}
            			else {
HXLINE(1979)				_hx_tmp = false;
            			}
HXDLIN(1979)			if (_hx_tmp) {
HXLINE(1981)				this->_hx___stage->_hx___renderer->_hx___clear();
            			}
            			else {
HXLINE(1983)				if (!(this->_hx___cleared)) {
HXLINE(1986)					this->clear(0,0,0,0,1,0,1);
            				}
            			}
            		}
HXLINE(1990)		this->_hx___flushGL();
HXLINE(1993)		if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(1995)			this->_hx___state->program->_hx___flush();
            		}
HXLINE(1998)		this->gl->drawArrays(this->gl->TRIANGLES,firstIndex,count);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___drawTriangles,(void))

void Context3D_obj::_hx___flushGL(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2002___flushGL)
HXLINE(2003)		this->_hx___flushGLProgram();
HXLINE(2004)		this->_hx___flushGLFramebuffer();
HXLINE(2005)		this->_hx___flushGLViewport();
HXLINE(2007)		this->_hx___flushGLBlend();
HXLINE(2008)		bool _hx_tmp;
HXDLIN(2008)		bool _hx_tmp1;
HXDLIN(2008)		bool _hx_tmp2;
HXDLIN(2008)		if ((this->_hx___contextState->colorMaskRed == this->_hx___state->colorMaskRed)) {
HXLINE(2008)			_hx_tmp2 = (this->_hx___contextState->colorMaskGreen != this->_hx___state->colorMaskGreen);
            		}
            		else {
HXLINE(2008)			_hx_tmp2 = true;
            		}
HXDLIN(2008)		if (!(_hx_tmp2)) {
HXLINE(2008)			_hx_tmp1 = (this->_hx___contextState->colorMaskBlue != this->_hx___state->colorMaskBlue);
            		}
            		else {
HXLINE(2008)			_hx_tmp1 = true;
            		}
HXDLIN(2008)		if (!(_hx_tmp1)) {
HXLINE(2008)			_hx_tmp = (this->_hx___contextState->colorMaskAlpha != this->_hx___state->colorMaskAlpha);
            		}
            		else {
HXLINE(2008)			_hx_tmp = true;
            		}
HXDLIN(2008)		if (_hx_tmp) {
HXLINE(2008)			this->gl->colorMask(this->_hx___state->colorMaskRed,this->_hx___state->colorMaskGreen,this->_hx___state->colorMaskBlue,this->_hx___state->colorMaskAlpha);
HXDLIN(2008)			this->_hx___contextState->colorMaskRed = this->_hx___state->colorMaskRed;
HXDLIN(2008)			this->_hx___contextState->colorMaskGreen = this->_hx___state->colorMaskGreen;
HXDLIN(2008)			this->_hx___contextState->colorMaskBlue = this->_hx___state->colorMaskBlue;
HXDLIN(2008)			this->_hx___contextState->colorMaskAlpha = this->_hx___state->colorMaskAlpha;
            		}
HXLINE(2009)		this->_hx___flushGLCulling();
HXLINE(2010)		this->_hx___flushGLDepth();
HXLINE(2011)		this->_hx___flushGLScissor();
HXLINE(2012)		this->_hx___flushGLStencil();
HXLINE(2013)		this->_hx___flushGLTextures();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGL,(void))

void Context3D_obj::_hx___flushGLBlend(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2018___flushGLBlend)
HXDLIN(2018)		bool _hx_tmp;
HXDLIN(2018)		bool _hx_tmp1;
HXDLIN(2018)		bool _hx_tmp2;
HXDLIN(2018)		if (hx::IsEq( this->_hx___contextState->blendDestinationRGBFactor,this->_hx___state->blendDestinationRGBFactor )) {
HXDLIN(2018)			_hx_tmp2 = hx::IsNotEq( this->_hx___contextState->blendSourceRGBFactor,this->_hx___state->blendSourceRGBFactor );
            		}
            		else {
HXDLIN(2018)			_hx_tmp2 = true;
            		}
HXDLIN(2018)		if (!(_hx_tmp2)) {
HXDLIN(2018)			_hx_tmp1 = hx::IsNotEq( this->_hx___contextState->blendDestinationAlphaFactor,this->_hx___state->blendDestinationAlphaFactor );
            		}
            		else {
HXDLIN(2018)			_hx_tmp1 = true;
            		}
HXDLIN(2018)		if (!(_hx_tmp1)) {
HXDLIN(2018)			_hx_tmp = hx::IsNotEq( this->_hx___contextState->blendSourceAlphaFactor,this->_hx___state->blendSourceAlphaFactor );
            		}
            		else {
HXDLIN(2018)			_hx_tmp = true;
            		}
HXDLIN(2018)		if (_hx_tmp) {
HXLINE(2023)			this->_hx___setGLBlend(true);
HXLINE(2025)			bool _hx_tmp3;
HXDLIN(2025)			if (hx::IsEq( this->_hx___state->blendDestinationRGBFactor,this->_hx___state->blendDestinationAlphaFactor )) {
HXLINE(2025)				_hx_tmp3 = hx::IsEq( this->_hx___state->blendSourceRGBFactor,this->_hx___state->blendSourceAlphaFactor );
            			}
            			else {
HXLINE(2025)				_hx_tmp3 = false;
            			}
HXDLIN(2025)			if (_hx_tmp3) {
HXLINE(2028)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(2028)				int sfactor = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(2028)				this1->blendFunc(sfactor,this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor));
            			}
            			else {
HXLINE(2032)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN(2032)				int srcRGB = this->_hx___getGLBlend(this->_hx___state->blendSourceRGBFactor);
HXDLIN(2032)				int dstRGB = this->_hx___getGLBlend(this->_hx___state->blendDestinationRGBFactor);
HXDLIN(2032)				int srcAlpha = this->_hx___getGLBlend(this->_hx___state->blendSourceAlphaFactor);
HXDLIN(2032)				this2->blendFuncSeparate(srcRGB,dstRGB,srcAlpha,this->_hx___getGLBlend(this->_hx___state->blendDestinationAlphaFactor));
            			}
HXLINE(2036)			this->_hx___contextState->blendDestinationRGBFactor = this->_hx___state->blendDestinationRGBFactor;
HXLINE(2037)			this->_hx___contextState->blendSourceRGBFactor = this->_hx___state->blendSourceRGBFactor;
HXLINE(2038)			this->_hx___contextState->blendDestinationAlphaFactor = this->_hx___state->blendDestinationAlphaFactor;
HXLINE(2039)			this->_hx___contextState->blendSourceAlphaFactor = this->_hx___state->blendSourceAlphaFactor;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLBlend,(void))

void Context3D_obj::_hx___flushGLColor(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2045___flushGLColor)
HXDLIN(2045)		bool _hx_tmp;
HXDLIN(2045)		bool _hx_tmp1;
HXDLIN(2045)		bool _hx_tmp2;
HXDLIN(2045)		if ((this->_hx___contextState->colorMaskRed == this->_hx___state->colorMaskRed)) {
HXDLIN(2045)			_hx_tmp2 = (this->_hx___contextState->colorMaskGreen != this->_hx___state->colorMaskGreen);
            		}
            		else {
HXDLIN(2045)			_hx_tmp2 = true;
            		}
HXDLIN(2045)		if (!(_hx_tmp2)) {
HXDLIN(2045)			_hx_tmp1 = (this->_hx___contextState->colorMaskBlue != this->_hx___state->colorMaskBlue);
            		}
            		else {
HXDLIN(2045)			_hx_tmp1 = true;
            		}
HXDLIN(2045)		if (!(_hx_tmp1)) {
HXDLIN(2045)			_hx_tmp = (this->_hx___contextState->colorMaskAlpha != this->_hx___state->colorMaskAlpha);
            		}
            		else {
HXDLIN(2045)			_hx_tmp = true;
            		}
HXDLIN(2045)		if (_hx_tmp) {
HXLINE(2050)			this->gl->colorMask(this->_hx___state->colorMaskRed,this->_hx___state->colorMaskGreen,this->_hx___state->colorMaskBlue,this->_hx___state->colorMaskAlpha);
HXLINE(2051)			this->_hx___contextState->colorMaskRed = this->_hx___state->colorMaskRed;
HXLINE(2052)			this->_hx___contextState->colorMaskGreen = this->_hx___state->colorMaskGreen;
HXLINE(2053)			this->_hx___contextState->colorMaskBlue = this->_hx___state->colorMaskBlue;
HXLINE(2054)			this->_hx___contextState->colorMaskAlpha = this->_hx___state->colorMaskAlpha;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLColor,(void))

void Context3D_obj::_hx___flushGLCulling(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2060___flushGLCulling)
HXDLIN(2060)		if (hx::IsNotEq( this->_hx___contextState->culling,this->_hx___state->culling )) {
HXLINE(2062)			if (hx::IsEq( this->_hx___state->culling,3 )) {
HXLINE(2064)				this->_hx___setGLCullFace(false);
            			}
            			else {
HXLINE(2068)				this->_hx___setGLCullFace(true);
HXLINE(2070)				 ::Dynamic _hx_switch_0 = this->_hx___state->culling;
            				if (  (_hx_switch_0==0) ){
HXLINE(2074)					this->gl->cullFace(this->gl->BACK);
HXDLIN(2074)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_0==1) ){
HXLINE(2076)					this->gl->cullFace(this->gl->FRONT);
HXDLIN(2076)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_0==2) ){
HXLINE(2078)					this->gl->cullFace(this->gl->FRONT_AND_BACK);
HXDLIN(2078)					goto _hx_goto_48;
            				}
            				if (  (_hx_switch_0==3) ){
HXLINE(2072)					goto _hx_goto_48;
            				}
            				/* default */{
HXLINE(2080)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            				}
            				_hx_goto_48:;
            			}
HXLINE(2084)			this->_hx___contextState->culling = this->_hx___state->culling;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLCulling,(void))

void Context3D_obj::_hx___flushGLDepth(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2089___flushGLDepth)
HXLINE(2090)		bool depthMask;
HXDLIN(2090)		if (this->_hx___state->depthMask) {
HXLINE(2091)			if (hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(2090)				depthMask = this->_hx___state->renderToTextureDepthStencil;
            			}
            			else {
HXLINE(2090)				depthMask = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
            		}
            		else {
HXLINE(2090)			depthMask = false;
            		}
HXLINE(2093)		if ((this->_hx___contextState->depthMask != depthMask)) {
HXLINE(2095)			this->gl->depthMask(depthMask);
HXLINE(2096)			this->_hx___contextState->depthMask = depthMask;
            		}
HXLINE(2099)		if (hx::IsNotEq( this->_hx___contextState->depthCompareMode,this->_hx___state->depthCompareMode )) {
HXLINE(2101)			 ::Dynamic _hx_switch_0 = this->_hx___state->depthCompareMode;
            			if (  (_hx_switch_0==0) ){
HXLINE(2104)				this->gl->depthFunc(this->gl->ALWAYS);
HXDLIN(2104)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==1) ){
HXLINE(2106)				this->gl->depthFunc(this->gl->EQUAL);
HXDLIN(2106)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==2) ){
HXLINE(2108)				this->gl->depthFunc(this->gl->GREATER);
HXDLIN(2108)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==3) ){
HXLINE(2110)				this->gl->depthFunc(this->gl->GEQUAL);
HXDLIN(2110)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==4) ){
HXLINE(2112)				this->gl->depthFunc(this->gl->LESS);
HXDLIN(2112)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==5) ){
HXLINE(2114)				this->gl->depthFunc(this->gl->LEQUAL);
HXDLIN(2114)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==6) ){
HXLINE(2116)				this->gl->depthFunc(this->gl->NEVER);
HXDLIN(2116)				goto _hx_goto_50;
            			}
            			if (  (_hx_switch_0==7) ){
HXLINE(2118)				this->gl->depthFunc(this->gl->NOTEQUAL);
HXDLIN(2118)				goto _hx_goto_50;
            			}
            			/* default */{
HXLINE(2120)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_50:;
HXLINE(2123)			this->_hx___contextState->depthCompareMode = this->_hx___state->depthCompareMode;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLDepth,(void))

void Context3D_obj::_hx___flushGLFramebuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2129___flushGLFramebuffer)
HXDLIN(2129)		if (hx::IsNotNull( this->_hx___state->renderToTexture )) {
HXLINE(2131)			bool _hx_tmp;
HXDLIN(2131)			if (hx::IsEq( this->_hx___contextState->renderToTexture,this->_hx___state->renderToTexture )) {
HXLINE(2131)				_hx_tmp = (this->_hx___contextState->renderToTextureSurfaceSelector != this->_hx___state->renderToTextureSurfaceSelector);
            			}
            			else {
HXLINE(2131)				_hx_tmp = true;
            			}
HXDLIN(2131)			if (_hx_tmp) {
HXLINE(2134)				 ::lime::graphics::opengl::GLObject framebuffer = this->_hx___state->renderToTexture->_hx___getGLFramebuffer(this->_hx___state->renderToTextureDepthStencil,this->_hx___state->renderToTextureAntiAlias,this->_hx___state->renderToTextureSurfaceSelector);
HXLINE(2136)				this->_hx___bindGLFramebuffer(framebuffer);
HXLINE(2138)				this->_hx___contextState->renderToTexture = this->_hx___state->renderToTexture;
HXLINE(2139)				this->_hx___contextState->renderToTextureAntiAlias = this->_hx___state->renderToTextureAntiAlias;
HXLINE(2140)				this->_hx___contextState->renderToTextureDepthStencil = this->_hx___state->renderToTextureDepthStencil;
HXLINE(2141)				this->_hx___contextState->renderToTextureSurfaceSelector = this->_hx___state->renderToTextureSurfaceSelector;
            			}
HXLINE(2144)			this->_hx___setGLDepthTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(2145)			this->_hx___setGLStencilTest(this->_hx___state->renderToTextureDepthStencil);
HXLINE(2147)			this->_hx___setGLFrontFace(true);
            		}
            		else {
HXLINE(2151)			bool _hx_tmp1;
HXDLIN(2151)			bool _hx_tmp2;
HXDLIN(2151)			if (hx::IsNull( this->_hx___stage )) {
HXLINE(2151)				_hx_tmp2 = (this->backBufferWidth == 0);
            			}
            			else {
HXLINE(2151)				_hx_tmp2 = false;
            			}
HXDLIN(2151)			if (_hx_tmp2) {
HXLINE(2151)				_hx_tmp1 = (this->backBufferHeight == 0);
            			}
            			else {
HXLINE(2151)				_hx_tmp1 = false;
            			}
HXDLIN(2151)			if (_hx_tmp1) {
HXLINE(2153)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Context3D backbuffer has not been configured",c6,54,6f,c8),null()));
            			}
HXLINE(2156)			bool _hx_tmp3;
HXDLIN(2156)			bool _hx_tmp4;
HXDLIN(2156)			if (hx::IsNull( this->_hx___contextState->renderToTexture )) {
HXLINE(2156)				_hx_tmp4 = hx::IsNotEq( this->_hx___contextState->_hx___currentGLFramebuffer,this->_hx___state->_hx___primaryGLFramebuffer );
            			}
            			else {
HXLINE(2156)				_hx_tmp4 = true;
            			}
HXDLIN(2156)			if (!(_hx_tmp4)) {
HXLINE(2156)				_hx_tmp3 = (this->_hx___contextState->backBufferEnableDepthAndStencil != this->_hx___state->backBufferEnableDepthAndStencil);
            			}
            			else {
HXLINE(2156)				_hx_tmp3 = true;
            			}
HXDLIN(2156)			if (_hx_tmp3) {
HXLINE(2161)				this->_hx___bindGLFramebuffer(this->_hx___state->_hx___primaryGLFramebuffer);
HXLINE(2163)				this->_hx___contextState->renderToTexture = null();
HXLINE(2164)				this->_hx___contextState->backBufferEnableDepthAndStencil = this->_hx___state->backBufferEnableDepthAndStencil;
            			}
HXLINE(2167)			this->_hx___setGLDepthTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(2168)			this->_hx___setGLStencilTest(this->_hx___state->backBufferEnableDepthAndStencil);
HXLINE(2170)			this->_hx___setGLFrontFace(hx::IsNotEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLFramebuffer,(void))

void Context3D_obj::_hx___flushGLProgram(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2175___flushGLProgram)
HXLINE(2176)		 ::openfl::display::Shader shader = this->_hx___state->shader;
HXLINE(2177)		 ::openfl::display3D::Program3D program = this->_hx___state->program;
HXLINE(2179)		if (hx::IsNotEq( this->_hx___contextState->shader,shader )) {
HXLINE(2183)			if (hx::IsNotNull( this->_hx___contextState->shader )) {
HXLINE(2185)				this->_hx___contextState->shader->_hx___disable();
            			}
HXLINE(2188)			if (hx::IsNotNull( shader )) {
HXLINE(2190)				shader->_hx___enable();
            			}
HXLINE(2193)			this->_hx___contextState->shader = shader;
            		}
HXLINE(2196)		if (hx::IsNotEq( this->_hx___contextState->program,program )) {
HXLINE(2198)			if (hx::IsNotNull( this->_hx___contextState->program )) {
HXLINE(2200)				this->_hx___contextState->program->_hx___disable();
            			}
HXLINE(2203)			if (hx::IsNotNull( program )) {
HXLINE(2205)				program->_hx___enable();
            			}
HXLINE(2208)			this->_hx___contextState->program = program;
            		}
HXLINE(2211)		bool _hx_tmp;
HXDLIN(2211)		if (hx::IsNotNull( program )) {
HXLINE(2211)			_hx_tmp = hx::IsEq( program->_hx___format,0 );
            		}
            		else {
HXLINE(2211)			_hx_tmp = false;
            		}
HXDLIN(2211)		if (_hx_tmp) {
HXLINE(2213)			{
HXLINE(2213)				 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN(2213)				Float val;
HXDLIN(2213)				bool val1;
HXDLIN(2213)				if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2213)					val1 = hx::IsNull( this->_hx___state->renderToTexture );
            				}
            				else {
HXLINE(2213)					val1 = false;
            				}
HXDLIN(2213)				if (val1) {
HXLINE(2213)					val = ((Float)1.0);
            				}
            				else {
HXLINE(2213)					val = ((Float)-1.0);
            				}
HXDLIN(2213)				 ::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + 4),val);
            			}
HXLINE(2214)			program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLProgram,(void))

void Context3D_obj::_hx___flushGLScissor(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2220___flushGLScissor)
HXDLIN(2220)		if (!(this->_hx___state->scissorEnabled)) {
HXLINE(2222)			if ((this->_hx___contextState->scissorEnabled != this->_hx___state->scissorEnabled)) {
HXLINE(2224)				this->_hx___setGLScissorTest(false);
HXLINE(2225)				this->_hx___contextState->scissorEnabled = false;
            			}
            		}
            		else {
HXLINE(2230)			this->_hx___setGLScissorTest(true);
HXLINE(2231)			this->_hx___contextState->scissorEnabled = true;
HXLINE(2233)			int scissorX = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->x);
HXLINE(2234)			int scissorY = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->y);
HXLINE(2235)			int scissorWidth = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->width);
HXLINE(2236)			int scissorHeight = ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height);
HXLINE(2238)			bool _hx_tmp;
HXDLIN(2238)			if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(2238)				_hx_tmp = hx::IsNull( this->_hx___stage3D );
            			}
            			else {
HXLINE(2238)				_hx_tmp = false;
            			}
HXDLIN(2238)			if (_hx_tmp) {
HXLINE(2240)				int contextHeight = ::Std_obj::_hx_int((( (Float)(this->_hx___stage->window->_hx___height) ) * this->_hx___stage->window->_hx___scale));
HXLINE(2241)				scissorY = ((contextHeight - ::Std_obj::_hx_int(this->_hx___state->scissorRectangle->height)) - scissorY);
            			}
HXLINE(2244)			bool _hx_tmp1;
HXDLIN(2244)			bool _hx_tmp2;
HXDLIN(2244)			bool _hx_tmp3;
HXDLIN(2244)			if ((this->_hx___contextState->scissorRectangle->x == scissorX)) {
HXLINE(2244)				_hx_tmp3 = (this->_hx___contextState->scissorRectangle->y != scissorY);
            			}
            			else {
HXLINE(2244)				_hx_tmp3 = true;
            			}
HXDLIN(2244)			if (!(_hx_tmp3)) {
HXLINE(2244)				_hx_tmp2 = (this->_hx___contextState->scissorRectangle->width != scissorWidth);
            			}
            			else {
HXLINE(2244)				_hx_tmp2 = true;
            			}
HXDLIN(2244)			if (!(_hx_tmp2)) {
HXLINE(2244)				_hx_tmp1 = (this->_hx___contextState->scissorRectangle->height != scissorHeight);
            			}
            			else {
HXLINE(2244)				_hx_tmp1 = true;
            			}
HXDLIN(2244)			if (_hx_tmp1) {
HXLINE(2249)				this->gl->scissor(scissorX,scissorY,scissorWidth,scissorHeight);
HXLINE(2250)				this->_hx___contextState->scissorRectangle->setTo(( (Float)(scissorX) ),( (Float)(scissorY) ),( (Float)(scissorWidth) ),( (Float)(scissorHeight) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLScissor,(void))

void Context3D_obj::_hx___flushGLStencil(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2256___flushGLStencil)
HXLINE(2257)		bool _hx_tmp;
HXDLIN(2257)		bool _hx_tmp1;
HXDLIN(2257)		bool _hx_tmp2;
HXDLIN(2257)		if (hx::IsEq( this->_hx___contextState->stencilTriangleFace,this->_hx___state->stencilTriangleFace )) {
HXLINE(2257)			_hx_tmp2 = hx::IsNotEq( this->_hx___contextState->stencilPass,this->_hx___state->stencilPass );
            		}
            		else {
HXLINE(2257)			_hx_tmp2 = true;
            		}
HXDLIN(2257)		if (!(_hx_tmp2)) {
HXLINE(2257)			_hx_tmp1 = hx::IsNotEq( this->_hx___contextState->stencilDepthFail,this->_hx___state->stencilDepthFail );
            		}
            		else {
HXLINE(2257)			_hx_tmp1 = true;
            		}
HXDLIN(2257)		if (!(_hx_tmp1)) {
HXLINE(2257)			_hx_tmp = hx::IsNotEq( this->_hx___contextState->stencilFail,this->_hx___state->stencilFail );
            		}
            		else {
HXLINE(2257)			_hx_tmp = true;
            		}
HXDLIN(2257)		if (_hx_tmp) {
HXLINE(2262)			{
HXLINE(2262)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this1 = this->gl;
HXDLIN(2262)				int face = this->_hx___getGLTriangleFace(this->_hx___state->stencilTriangleFace);
HXDLIN(2262)				int fail = this->_hx___getGLStencilAction(this->_hx___state->stencilFail);
HXDLIN(2262)				int zfail = this->_hx___getGLStencilAction(this->_hx___state->stencilDepthFail);
HXDLIN(2262)				this1->stencilOpSeparate(face,fail,zfail,this->_hx___getGLStencilAction(this->_hx___state->stencilPass));
            			}
HXLINE(2264)			this->_hx___contextState->stencilTriangleFace = this->_hx___state->stencilTriangleFace;
HXLINE(2265)			this->_hx___contextState->stencilPass = this->_hx___state->stencilPass;
HXLINE(2266)			this->_hx___contextState->stencilDepthFail = this->_hx___state->stencilDepthFail;
HXLINE(2267)			this->_hx___contextState->stencilFail = this->_hx___state->stencilFail;
            		}
HXLINE(2270)		if ((this->_hx___contextState->stencilWriteMask != this->_hx___state->stencilWriteMask)) {
HXLINE(2272)			this->gl->stencilMask(this->_hx___state->stencilWriteMask);
HXLINE(2273)			this->_hx___contextState->stencilWriteMask = this->_hx___state->stencilWriteMask;
            		}
HXLINE(2276)		bool _hx_tmp3;
HXDLIN(2276)		bool _hx_tmp4;
HXDLIN(2276)		if (hx::IsEq( this->_hx___contextState->stencilCompareMode,this->_hx___state->stencilCompareMode )) {
HXLINE(2276)			_hx_tmp4 = (this->_hx___contextState->stencilReferenceValue != this->_hx___state->stencilReferenceValue);
            		}
            		else {
HXLINE(2276)			_hx_tmp4 = true;
            		}
HXDLIN(2276)		if (!(_hx_tmp4)) {
HXLINE(2276)			_hx_tmp3 = (this->_hx___contextState->stencilReadMask != this->_hx___state->stencilReadMask);
            		}
            		else {
HXLINE(2276)			_hx_tmp3 = true;
            		}
HXDLIN(2276)		if (_hx_tmp3) {
HXLINE(2281)			{
HXLINE(2281)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext this2 = this->gl;
HXDLIN(2281)				int func = this->_hx___getGLCompareMode(this->_hx___state->stencilCompareMode);
HXDLIN(2281)				this2->stencilFunc(func,this->_hx___state->stencilReferenceValue,this->_hx___state->stencilReadMask);
            			}
HXLINE(2282)			this->_hx___contextState->stencilCompareMode = this->_hx___state->stencilCompareMode;
HXLINE(2283)			this->_hx___contextState->stencilReferenceValue = this->_hx___state->stencilReferenceValue;
HXLINE(2284)			this->_hx___contextState->stencilReadMask = this->_hx___state->stencilReadMask;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLStencil,(void))

void Context3D_obj::_hx___flushGLTextures(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2289___flushGLTextures)
HXLINE(2290)		int sampler = 0;
HXLINE(2291)		 ::openfl::display3D::textures::TextureBase texture;
HXDLIN(2291)		 ::openfl::_internal::renderer::SamplerState samplerState;
HXLINE(2293)		{
HXLINE(2293)			int _g = 0;
HXDLIN(2293)			int _g1 = this->_hx___state->textures->length;
HXDLIN(2293)			while((_g < _g1)){
HXLINE(2293)				_g = (_g + 1);
HXDLIN(2293)				int i = (_g - 1);
HXLINE(2295)				texture = this->_hx___state->textures->__get(i).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(2296)				samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
HXLINE(2297)				if (hx::IsNull( samplerState )) {
HXLINE(2299)					this->_hx___state->samplerStates[i] =  ::openfl::_internal::renderer::SamplerState_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(2300)					samplerState = this->_hx___state->samplerStates->__get(i).StaticCast<  ::openfl::_internal::renderer::SamplerState >();
            				}
HXLINE(2303)				this->gl->activeTexture((this->gl->TEXTURE0 + sampler));
HXLINE(2305)				if (hx::IsNotNull( texture )) {
HXLINE(2310)					if ((texture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(2312)						this->_hx___bindGLTexture2D(texture->_hx___getTexture());
            					}
            					else {
HXLINE(2316)						this->_hx___bindGLTextureCubeMap(texture->_hx___getTexture());
            					}
HXLINE(2321)					this->gl->enable(this->gl->TEXTURE_2D);
HXLINE(2324)					this->_hx___contextState->textures[i] = texture;
HXLINE(2328)					texture->_hx___setSamplerState(samplerState);
            				}
            				else {
HXLINE(2332)					this->_hx___bindGLTexture2D(null());
            				}
HXLINE(2335)				bool _hx_tmp;
HXDLIN(2335)				bool _hx_tmp1;
HXDLIN(2335)				if (hx::IsNotNull( this->_hx___state->program )) {
HXLINE(2335)					_hx_tmp1 = hx::IsEq( this->_hx___state->program->_hx___format,0 );
            				}
            				else {
HXLINE(2335)					_hx_tmp1 = false;
            				}
HXDLIN(2335)				if (_hx_tmp1) {
HXLINE(2335)					_hx_tmp = samplerState->textureAlpha;
            				}
            				else {
HXLINE(2335)					_hx_tmp = false;
            				}
HXDLIN(2335)				if (_hx_tmp) {
HXLINE(2337)					this->gl->activeTexture(((this->gl->TEXTURE0 + sampler) + 4));
HXLINE(2339)					bool _hx_tmp2;
HXDLIN(2339)					if (hx::IsNotNull( texture )) {
HXLINE(2339)						_hx_tmp2 = hx::IsNotNull( texture->_hx___alphaTexture );
            					}
            					else {
HXLINE(2339)						_hx_tmp2 = false;
            					}
HXDLIN(2339)					if (_hx_tmp2) {
HXLINE(2341)						if ((texture->_hx___alphaTexture->_hx___textureTarget == this->gl->TEXTURE_2D)) {
HXLINE(2343)							this->_hx___bindGLTexture2D(texture->_hx___alphaTexture->_hx___getTexture());
            						}
            						else {
HXLINE(2347)							this->_hx___bindGLTextureCubeMap(texture->_hx___alphaTexture->_hx___getTexture());
            						}
HXLINE(2350)						texture->_hx___alphaTexture->_hx___setSamplerState(samplerState);
HXLINE(2351)						this->gl->uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,1);
HXLINE(2355)						this->gl->enable(this->gl->TEXTURE_2D);
            					}
            					else {
HXLINE(2360)						this->_hx___bindGLTexture2D(null());
HXLINE(2361)						this->gl->uniform1i(this->_hx___state->program->_hx___agalAlphaSamplerEnabled->__get(sampler).StaticCast<  ::openfl::display3D::Uniform >()->location,0);
            					}
            				}
HXLINE(2365)				sampler = (sampler + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLTextures,(void))

void Context3D_obj::_hx___flushGLViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2373___flushGLViewport)
HXDLIN(2373)		if (hx::IsNull( this->_hx___state->renderToTexture )) {
HXLINE(2375)			if (hx::IsEq( this->_hx___stage->context3D,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2377)				int x;
HXDLIN(2377)				if (hx::IsNull( this->_hx___stage3D )) {
HXLINE(2377)					x = 0;
            				}
            				else {
HXLINE(2377)					x = ::Std_obj::_hx_int(this->_hx___stage3D->get_x());
            				}
HXLINE(2378)				Float y = ((( (Float)(this->_hx___stage->window->_hx___height) ) * this->_hx___stage->window->_hx___scale) - ( (Float)(this->backBufferHeight) ));
HXDLIN(2378)				Float y1;
HXDLIN(2378)				if (hx::IsNull( this->_hx___stage3D )) {
HXLINE(2378)					y1 = ( (Float)(0) );
            				}
            				else {
HXLINE(2378)					y1 = this->_hx___stage3D->get_y();
            				}
HXDLIN(2378)				int y2 = ::Std_obj::_hx_int((y - y1));
HXLINE(2379)				this->gl->viewport(x,y2,this->backBufferWidth,this->backBufferHeight);
            			}
            			else {
HXLINE(2383)				this->gl->viewport(0,0,this->backBufferWidth,this->backBufferHeight);
            			}
            		}
            		else {
HXLINE(2388)			int width = 0;
HXDLIN(2388)			int height = 0;
HXLINE(2391)			if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(2393)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(this->_hx___state->renderToTexture) );
HXLINE(2394)				width = texture2D->_hx___width;
HXLINE(2395)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(2397)				if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(2399)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___state->renderToTexture) );
HXLINE(2400)					width = rectTexture->_hx___width;
HXLINE(2401)					height = rectTexture->_hx___height;
            				}
            				else {
HXLINE(2403)					if (::Std_obj::is(this->_hx___state->renderToTexture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE(2405)						 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(this->_hx___state->renderToTexture) );
HXLINE(2406)						width = cubeTexture->_hx___size;
HXLINE(2407)						height = cubeTexture->_hx___size;
            					}
            				}
            			}
HXLINE(2410)			this->gl->viewport(0,0,width,height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushGLViewport,(void))

int Context3D_obj::_hx___getGLBlend( ::Dynamic blendFactor){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2416___getGLBlend)
HXDLIN(2416)		 ::Dynamic _hx_switch_0 = blendFactor;
            		if (  (_hx_switch_0==0) ){
HXLINE(2419)			return this->gl->DST_ALPHA;
HXDLIN(2419)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2421)			return this->gl->DST_COLOR;
HXDLIN(2421)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2423)			return this->gl->ONE;
HXDLIN(2423)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2425)			return this->gl->ONE_MINUS_DST_ALPHA;
HXDLIN(2425)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2427)			return this->gl->ONE_MINUS_DST_COLOR;
HXDLIN(2427)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2429)			return this->gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(2429)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2431)			return this->gl->ONE_MINUS_SRC_COLOR;
HXDLIN(2431)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2433)			return this->gl->SRC_ALPHA;
HXDLIN(2433)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE(2435)			return this->gl->SRC_COLOR;
HXDLIN(2435)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE(2437)			return this->gl->ZERO;
HXDLIN(2437)			goto _hx_goto_59;
            		}
            		/* default */{
HXLINE(2439)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_59:;
HXLINE(2416)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLBlend,return )

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic mode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2447___getGLCompareMode)
HXDLIN(2447)		 ::Dynamic _hx_switch_0 = mode;
            		if (  (_hx_switch_0==0) ){
HXLINE(2449)			return this->gl->ALWAYS;
HXDLIN(2449)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2450)			return this->gl->EQUAL;
HXDLIN(2450)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2451)			return this->gl->GREATER;
HXDLIN(2451)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2452)			return this->gl->GEQUAL;
HXDLIN(2452)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2453)			return this->gl->LESS;
HXDLIN(2453)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2454)			return this->gl->LEQUAL;
HXDLIN(2454)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2455)			return this->gl->NEVER;
HXDLIN(2455)			goto _hx_goto_61;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2456)			return this->gl->NOTEQUAL;
HXDLIN(2456)			goto _hx_goto_61;
            		}
            		/* default */{
HXLINE(2457)			return this->gl->EQUAL;
            		}
            		_hx_goto_61:;
HXLINE(2447)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic action){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2463___getGLStencilAction)
HXDLIN(2463)		 ::Dynamic _hx_switch_0 = action;
            		if (  (_hx_switch_0==0) ){
HXLINE(2465)			return this->gl->DECR;
HXDLIN(2465)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2466)			return this->gl->DECR_WRAP;
HXDLIN(2466)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2467)			return this->gl->INCR;
HXDLIN(2467)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2468)			return this->gl->INCR_WRAP;
HXDLIN(2468)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==4) ){
HXLINE(2469)			return this->gl->INVERT;
HXDLIN(2469)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE(2470)			return this->gl->KEEP;
HXDLIN(2470)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==6) ){
HXLINE(2471)			return this->gl->REPLACE;
HXDLIN(2471)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE(2472)			return this->gl->ZERO;
HXDLIN(2472)			goto _hx_goto_63;
            		}
            		/* default */{
HXLINE(2473)			return this->gl->KEEP;
            		}
            		_hx_goto_63:;
HXLINE(2463)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

int Context3D_obj::_hx___getGLTriangleFace( ::Dynamic face){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2479___getGLTriangleFace)
HXDLIN(2479)		 ::Dynamic _hx_switch_0 = face;
            		if (  (_hx_switch_0==0) ){
HXLINE(2482)			return this->gl->BACK;
HXDLIN(2482)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(2481)			return this->gl->FRONT;
HXDLIN(2481)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(2483)			return this->gl->FRONT_AND_BACK;
HXDLIN(2483)			goto _hx_goto_65;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE(2484)			return this->gl->NONE;
HXDLIN(2484)			goto _hx_goto_65;
            		}
            		/* default */{
HXLINE(2485)			return this->gl->FRONT_AND_BACK;
            		}
            		_hx_goto_65:;
HXLINE(2479)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLTriangleFace,return )

void Context3D_obj::_hx___renderStage3D( ::openfl::display::Stage3D stage3D){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2490___renderStage3D)
HXLINE(2493)		 ::openfl::display3D::Context3D context = stage3D->context3D;
HXLINE(2495)		bool _hx_tmp;
HXDLIN(2495)		bool _hx_tmp1;
HXDLIN(2495)		bool _hx_tmp2;
HXDLIN(2495)		bool _hx_tmp3;
HXDLIN(2495)		bool _hx_tmp4;
HXDLIN(2495)		if (hx::IsNotNull( context )) {
HXLINE(2495)			_hx_tmp4 = hx::IsNotEq( context,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2495)			_hx_tmp4 = false;
            		}
HXDLIN(2495)		if (_hx_tmp4) {
HXLINE(2495)			_hx_tmp3 = hx::IsNotNull( context->_hx___frontBufferTexture );
            		}
            		else {
HXLINE(2495)			_hx_tmp3 = false;
            		}
HXDLIN(2495)		if (_hx_tmp3) {
HXLINE(2495)			_hx_tmp2 = stage3D->visible;
            		}
            		else {
HXLINE(2495)			_hx_tmp2 = false;
            		}
HXDLIN(2495)		if (_hx_tmp2) {
HXLINE(2495)			_hx_tmp1 = (this->backBufferHeight > 0);
            		}
            		else {
HXLINE(2495)			_hx_tmp1 = false;
            		}
HXDLIN(2495)		if (_hx_tmp1) {
HXLINE(2495)			_hx_tmp = (this->backBufferWidth > 0);
            		}
            		else {
HXLINE(2495)			_hx_tmp = false;
            		}
HXDLIN(2495)		if (_hx_tmp) {
HXLINE(2504)			if (hx::IsNull( this->_hx___renderStage3DProgram )) {
HXLINE(2506)				 ::openfl::utils::AGALMiniAssembler vertexAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(2507)				vertexAssembler->assemble(::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString(1),(HX_("m44 op, va0, vc0\n",78,3e,5a,08) + HX_("mov v0, va1",2c,96,ba,67)),null(),null());
HXLINE(2509)				 ::openfl::utils::AGALMiniAssembler fragmentAssembler =  ::openfl::utils::AGALMiniAssembler_obj::__alloc( HX_CTX ,null());
HXLINE(2510)				fragmentAssembler->assemble(::openfl::display3D::_Context3DProgramType::Context3DProgramType_Impl__obj::toString(0),(HX_("tex ft1, v0, fs0 <2d,nearest,nomip>\n",ca,8f,17,34) + HX_("mov oc, ft1",4f,aa,cb,a8)),null(),null());
HXLINE(2512)				this->_hx___renderStage3DProgram = this->createProgram(null());
HXLINE(2513)				this->_hx___renderStage3DProgram->upload(vertexAssembler->agalcode,fragmentAssembler->agalcode);
            			}
HXLINE(2516)			this->setProgram(this->_hx___renderStage3DProgram);
HXLINE(2518)			this->setBlendFactors(2,9);
HXLINE(2519)			this->setColorMask(true,true,true,true);
HXLINE(2520)			this->setCulling(3);
HXLINE(2521)			this->setDepthTest(false,0);
HXLINE(2522)			this->setStencilActions(null(),null(),null(),null(),null());
HXLINE(2523)			this->setStencilReferenceValue(0,0,0);
HXLINE(2524)			this->setScissorRectangle(null());
HXLINE(2526)			this->setTextureAt(0,context->_hx___frontBufferTexture);
HXLINE(2527)			this->setVertexBufferAt(0,stage3D->_hx___vertexBuffer,0,3);
HXLINE(2528)			this->setVertexBufferAt(1,stage3D->_hx___vertexBuffer,3,2);
HXLINE(2529)			this->setProgramConstantsFromMatrix(1,0,stage3D->_hx___renderTransform,true);
HXLINE(2530)			this->drawTriangles(stage3D->_hx___indexBuffer,null(),null());
HXLINE(2532)			this->_hx___present = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___renderStage3D,(void))

void Context3D_obj::_hx___setGLBlend(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2538___setGLBlend)
HXDLIN(2538)		if ((this->_hx___contextState->_hx___enableGLBlend != enable)) {
HXLINE(2540)			if (enable) {
HXLINE(2542)				this->gl->enable(this->gl->BLEND);
            			}
            			else {
HXLINE(2546)				this->gl->disable(this->gl->BLEND);
            			}
HXLINE(2548)			this->_hx___contextState->_hx___enableGLBlend = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlend,(void))

void Context3D_obj::_hx___setGLBlendEquation(int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2554___setGLBlendEquation)
HXDLIN(2554)		if ((this->_hx___contextState->_hx___glBlendEquation != value)) {
HXLINE(2556)			this->gl->blendEquation(value);
HXLINE(2557)			this->_hx___contextState->_hx___glBlendEquation = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLBlendEquation,(void))

void Context3D_obj::_hx___setGLCullFace(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2563___setGLCullFace)
HXDLIN(2563)		if ((this->_hx___contextState->_hx___enableGLCullFace != enable)) {
HXLINE(2565)			if (enable) {
HXLINE(2567)				this->gl->enable(this->gl->CULL_FACE);
            			}
            			else {
HXLINE(2571)				this->gl->disable(this->gl->CULL_FACE);
            			}
HXLINE(2573)			this->_hx___contextState->_hx___enableGLCullFace = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLCullFace,(void))

void Context3D_obj::_hx___setGLDepthTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2579___setGLDepthTest)
HXDLIN(2579)		if ((this->_hx___contextState->_hx___enableGLDepthTest != enable)) {
HXLINE(2581)			if (enable) {
HXLINE(2583)				this->gl->enable(this->gl->DEPTH_TEST);
            			}
            			else {
HXLINE(2587)				this->gl->disable(this->gl->DEPTH_TEST);
            			}
HXLINE(2589)			this->_hx___contextState->_hx___enableGLDepthTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLDepthTest,(void))

void Context3D_obj::_hx___setGLFrontFace(bool counterClockWise){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2595___setGLFrontFace)
HXDLIN(2595)		if ((this->_hx___contextState->_hx___frontFaceGLCCW != counterClockWise)) {
HXLINE(2597)			{
HXLINE(2597)				int mode;
HXDLIN(2597)				if (counterClockWise) {
HXLINE(2597)					mode = this->gl->CCW;
            				}
            				else {
HXLINE(2597)					mode = this->gl->CW;
            				}
HXDLIN(2597)				this->gl->frontFace(mode);
            			}
HXLINE(2598)			this->_hx___contextState->_hx___frontFaceGLCCW = counterClockWise;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLFrontFace,(void))

void Context3D_obj::_hx___setGLScissorTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2604___setGLScissorTest)
HXDLIN(2604)		if ((this->_hx___contextState->_hx___enableGLScissorTest != enable)) {
HXLINE(2606)			if (enable) {
HXLINE(2608)				this->gl->enable(this->gl->SCISSOR_TEST);
            			}
            			else {
HXLINE(2612)				this->gl->disable(this->gl->SCISSOR_TEST);
            			}
HXLINE(2614)			this->_hx___contextState->_hx___enableGLScissorTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLScissorTest,(void))

void Context3D_obj::_hx___setGLStencilTest(bool enable){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2620___setGLStencilTest)
HXDLIN(2620)		if ((this->_hx___contextState->_hx___enableGLStencilTest != enable)) {
HXLINE(2622)			if (enable) {
HXLINE(2624)				this->gl->enable(this->gl->STENCIL_TEST);
            			}
            			else {
HXLINE(2628)				this->gl->disable(this->gl->STENCIL_TEST);
            			}
HXLINE(2630)			this->_hx___contextState->_hx___enableGLStencilTest = enable;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___setGLStencilTest,(void))

bool Context3D_obj::get_enableErrorChecking(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2637_get_enableErrorChecking)
HXDLIN(2637)		return this->_hx___enableErrorChecking;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,get_enableErrorChecking,return )

bool Context3D_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_2642_set_enableErrorChecking)
HXDLIN(2642)		return (this->_hx___enableErrorChecking = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

bool Context3D_obj::supportsVideoTexture;

::String Context3D_obj::_hx___driverInfo;

int Context3D_obj::_hx___glDepthStencil;

int Context3D_obj::_hx___glMaxTextureMaxAnisotropy;

int Context3D_obj::_hx___glMaxViewportDims;

int Context3D_obj::_hx___glTextureMaxAnisotropy;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage stage, ::openfl::_internal::renderer::context3D::Context3DState contextState, ::openfl::display::Stage3D stage3D) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage,contextState,stage3D);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_MARK_MEMBER_NAME(_hx___bitmapDataPool,"__bitmapDataPool");
	HX_MARK_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_MARK_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_MARK_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___present,"__present");
	HX_MARK_MEMBER_NAME(_hx___programs,"__programs");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_MARK_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_MARK_MEMBER_NAME(_hx___stage,"__stage");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___state,"__state");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferTexture,"__backBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolutionOnBrowserZoom,"__backBufferWantsBestResolutionOnBrowserZoom");
	HX_VISIT_MEMBER_NAME(_hx___bitmapDataPool,"__bitmapDataPool");
	HX_VISIT_MEMBER_NAME(_hx___cleared,"__cleared");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___contextState,"__contextState");
	HX_VISIT_MEMBER_NAME(_hx___renderStage3DProgram,"__renderStage3DProgram");
	HX_VISIT_MEMBER_NAME(_hx___enableErrorChecking,"__enableErrorChecking");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___frontBufferTexture,"__frontBufferTexture");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___present,"__present");
	HX_VISIT_MEMBER_NAME(_hx___programs,"__programs");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBuffer,"__quadIndexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferCount,"__quadIndexBufferCount");
	HX_VISIT_MEMBER_NAME(_hx___quadIndexBufferElements,"__quadIndexBufferElements");
	HX_VISIT_MEMBER_NAME(_hx___stage,"__stage");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___state,"__state");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile ); }
		if (HX_FIELD_EQ(inName,"__stage") ) { return hx::Val( _hx___stage ); }
		if (HX_FIELD_EQ(inName,"__state") ) { return hx::Val( _hx___state ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { return hx::Val( _hx___cleared ); }
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__present") ) { return hx::Val( _hx___present ); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D ); }
		if (HX_FIELD_EQ(inName,"__dispose") ) { return hx::Val( _hx___dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGL") ) { return hx::Val( _hx___flushGL_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo ); }
		if (HX_FIELD_EQ(inName,"__programs") ) { return hx::Val( _hx___programs ); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLBlend") ) { return hx::Val( _hx___getGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlend") ) { return hx::Val( _hx___setGLBlend_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory ); }
		if (HX_FIELD_EQ(inName,"__contextState") ) { return hx::Val( _hx___contextState ); }
		if (HX_FIELD_EQ(inName,"__flushGLBlend") ) { return hx::Val( _hx___flushGLBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLColor") ) { return hx::Val( _hx___flushGLColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLDepth") ) { return hx::Val( _hx___flushGLDepth_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth ); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale ); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawTriangles") ) { return hx::Val( _hx___drawTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderStage3D") ) { return hx::Val( _hx___renderStage3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLCullFace") ) { return hx::Val( _hx___setGLCullFace_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__bitmapDataPool") ) { return hx::Val( _hx___bitmapDataPool ); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLCulling") ) { return hx::Val( _hx___flushGLCulling_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLProgram") ) { return hx::Val( _hx___flushGLProgram_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLScissor") ) { return hx::Val( _hx___flushGLScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLStencil") ) { return hx::Val( _hx___flushGLStencil_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLDepthTest") ) { return hx::Val( _hx___setGLDepthTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLFrontFace") ) { return hx::Val( _hx___setGLFrontFace_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { return hx::Val( _hx___quadIndexBuffer ); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants ); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTexture2D") ) { return hx::Val( _hx___bindGLTexture2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLTextures") ) { return hx::Val( _hx___flushGLTextures_dyn() ); }
		if (HX_FIELD_EQ(inName,"__flushGLViewport") ) { return hx::Val( _hx___flushGLViewport_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth ); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"createVideoTexture") ) { return hx::Val( createVideoTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLScissorTest") ) { return hx::Val( _hx___setGLScissorTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLStencilTest") ) { return hx::Val( _hx___setGLStencilTest_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_enableErrorChecking() ); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { return hx::Val( _hx___backBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants ); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLArrayBuffer") ) { return hx::Val( _hx___bindGLArrayBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLFramebuffer") ) { return hx::Val( _hx___bindGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLTriangleFace") ) { return hx::Val( _hx___getGLTriangleFace_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { return hx::Val( _hx___frontBufferTexture ); }
		if (HX_FIELD_EQ(inName,"__flushGLFramebuffer") ) { return hx::Val( _hx___flushGLFramebuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setGLBlendEquation") ) { return hx::Val( _hx___setGLBlendEquation_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias ); }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { return hx::Val( _hx___enableErrorChecking ); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { return hx::Val( _hx___renderStage3DProgram ); }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { return hx::Val( _hx___quadIndexBufferCount ); }
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bindGLTextureCubeMap") ) { return hx::Val( _hx___bindGLTextureCubeMap_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setBlendFactorsSeparate") ) { return hx::Val( setBlendFactorsSeparate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_enableErrorChecking") ) { return hx::Val( get_enableErrorChecking_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { return hx::Val( _hx___quadIndexBufferElements ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__bindGLElementArrayBuffer") ) { return hx::Val( _hx___bindGLElementArrayBuffer_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn() ); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { return hx::Val( _hx___backBufferWantsBestResolutionOnBrowserZoom ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { outValue = ( _hx___driverInfo ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glDepthStencil") ) { outValue = ( _hx___glDepthStencil ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__glMaxViewportDims") ) { outValue = ( _hx___glMaxViewportDims ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = ( supportsVideoTexture ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__glTextureMaxAnisotropy") ) { outValue = ( _hx___glTextureMaxAnisotropy ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__glMaxTextureMaxAnisotropy") ) { outValue = ( _hx___glMaxTextureMaxAnisotropy ); return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_internal::backend::native::NativeOpenGLRenderContext >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage") ) { _hx___stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__state") ) { _hx___state=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DState >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__cleared") ) { _hx___cleared=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__present") ) { _hx___present=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__programs") ) { _hx___programs=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__contextState") ) { _hx___contextState=inValue.Cast<  ::openfl::_internal::renderer::context3D::Context3DState >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmapDataPool") ) { _hx___bitmapDataPool=inValue.Cast<  ::openfl::_internal::renderer::BitmapDataPool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__quadIndexBuffer") ) { _hx___quadIndexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__backBufferTexture") ) { _hx___backBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__frontBufferTexture") ) { _hx___frontBufferTexture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__enableErrorChecking") ) { _hx___enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderStage3DProgram") ) { _hx___renderStage3DProgram=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__quadIndexBufferCount") ) { _hx___quadIndexBufferCount=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__quadIndexBufferElements") ) { _hx___quadIndexBufferElements=inValue.Cast< int >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolutionOnBrowserZoom") ) { _hx___backBufferWantsBestResolutionOnBrowserZoom=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__driverInfo") ) { _hx___driverInfo=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__glDepthStencil") ) { _hx___glDepthStencil=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__glMaxViewportDims") ) { _hx___glMaxViewportDims=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< bool >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__glTextureMaxAnisotropy") ) { _hx___glTextureMaxAnisotropy=ioValue.Cast< int >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__glMaxTextureMaxAnisotropy") ) { _hx___glMaxTextureMaxAnisotropy=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backBufferHeight",ce,3d,76,f3));
	outFields->push(HX_("backBufferWidth",ff,f9,53,8c));
	outFields->push(HX_("driverInfo",b6,18,7b,e3));
	outFields->push(HX_("enableErrorChecking",7f,3c,19,ba));
	outFields->push(HX_("maxBackBufferHeight",92,ac,2a,8e));
	outFields->push(HX_("maxBackBufferWidth",bb,8f,62,be));
	outFields->push(HX_("profile",29,49,49,f3));
	outFields->push(HX_("totalGPUMemory",e9,89,1b,9c));
	outFields->push(HX_("gl",25,5a,00,00));
	outFields->push(HX_("__backBufferAntiAlias",e7,9b,20,bd));
	outFields->push(HX_("__backBufferTexture",f4,e5,95,65));
	outFields->push(HX_("__backBufferWantsBestResolution",0c,81,2c,ec));
	outFields->push(HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd));
	outFields->push(HX_("__bitmapDataPool",55,be,55,89));
	outFields->push(HX_("__cleared",0c,58,93,2c));
	outFields->push(HX_("__context",cf,e6,c5,9a));
	outFields->push(HX_("__contextState",c2,f0,30,2b));
	outFields->push(HX_("__renderStage3DProgram",6b,88,79,ad));
	outFields->push(HX_("__enableErrorChecking",5f,5d,0d,28));
	outFields->push(HX_("__fragmentConstants",7f,a5,a6,65));
	outFields->push(HX_("__frontBufferTexture",72,b0,71,38));
	outFields->push(HX_("__positionScale",01,d2,7f,6a));
	outFields->push(HX_("__present",db,8b,2a,bb));
	outFields->push(HX_("__programs",8f,5c,60,29));
	outFields->push(HX_("__quadIndexBuffer",0b,2d,32,36));
	outFields->push(HX_("__quadIndexBufferCount",c4,5f,48,67));
	outFields->push(HX_("__quadIndexBufferElements",62,a2,7c,95));
	outFields->push(HX_("__stage",9e,c3,69,ee));
	outFields->push(HX_("__stage3D",cf,93,18,af));
	outFields->push(HX_("__state",f1,ce,69,ee));
	outFields->push(HX_("__vertexConstants",6b,1f,14,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_("backBufferHeight",ce,3d,76,f3)},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_("backBufferWidth",ff,f9,53,8c)},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_("driverInfo",b6,18,7b,e3)},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_("maxBackBufferHeight",92,ac,2a,8e)},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_("maxBackBufferWidth",bb,8f,62,be)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Context3D_obj,profile),HX_("profile",29,49,49,f3)},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_("totalGPUMemory",e9,89,1b,9c)},
	{hx::fsObject /*  ::lime::_internal::backend::native::NativeOpenGLRenderContext */ ,(int)offsetof(Context3D_obj,gl),HX_("gl",25,5a,00,00)},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_("__backBufferAntiAlias",e7,9b,20,bd)},
	{hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(Context3D_obj,_hx___backBufferTexture),HX_("__backBufferTexture",f4,e5,95,65)},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_("__backBufferWantsBestResolution",0c,81,2c,ec)},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolutionOnBrowserZoom),HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd)},
	{hx::fsObject /*  ::openfl::_internal::renderer::BitmapDataPool */ ,(int)offsetof(Context3D_obj,_hx___bitmapDataPool),HX_("__bitmapDataPool",55,be,55,89)},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___cleared),HX_("__cleared",0c,58,93,2c)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(Context3D_obj,_hx___context),HX_("__context",cf,e6,c5,9a)},
	{hx::fsObject /*  ::openfl::_internal::renderer::context3D::Context3DState */ ,(int)offsetof(Context3D_obj,_hx___contextState),HX_("__contextState",c2,f0,30,2b)},
	{hx::fsObject /*  ::openfl::display3D::Program3D */ ,(int)offsetof(Context3D_obj,_hx___renderStage3DProgram),HX_("__renderStage3DProgram",6b,88,79,ad)},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___enableErrorChecking),HX_("__enableErrorChecking",5f,5d,0d,28)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_("__fragmentConstants",7f,a5,a6,65)},
	{hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(Context3D_obj,_hx___frontBufferTexture),HX_("__frontBufferTexture",72,b0,71,38)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_("__positionScale",01,d2,7f,6a)},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___present),HX_("__present",db,8b,2a,bb)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Context3D_obj,_hx___programs),HX_("__programs",8f,5c,60,29)},
	{hx::fsObject /*  ::openfl::display3D::IndexBuffer3D */ ,(int)offsetof(Context3D_obj,_hx___quadIndexBuffer),HX_("__quadIndexBuffer",0b,2d,32,36)},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferCount),HX_("__quadIndexBufferCount",c4,5f,48,67)},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___quadIndexBufferElements),HX_("__quadIndexBufferElements",62,a2,7c,95)},
	{hx::fsObject /*  ::openfl::display::Stage */ ,(int)offsetof(Context3D_obj,_hx___stage),HX_("__stage",9e,c3,69,ee)},
	{hx::fsObject /*  ::openfl::display::Stage3D */ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_("__stage3D",cf,93,18,af)},
	{hx::fsObject /*  ::openfl::_internal::renderer::context3D::Context3DState */ ,(int)offsetof(Context3D_obj,_hx___state),HX_("__state",f1,ce,69,ee)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_("__vertexConstants",6b,1f,14,b9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_("supportsVideoTexture",44,35,75,67)},
	{hx::fsString,(void *) &Context3D_obj::_hx___driverInfo,HX_("__driverInfo",d6,93,0e,1c)},
	{hx::fsInt,(void *) &Context3D_obj::_hx___glDepthStencil,HX_("__glDepthStencil",1e,c0,95,83)},
	{hx::fsInt,(void *) &Context3D_obj::_hx___glMaxTextureMaxAnisotropy,HX_("__glMaxTextureMaxAnisotropy",ea,71,58,8e)},
	{hx::fsInt,(void *) &Context3D_obj::_hx___glMaxViewportDims,HX_("__glMaxViewportDims",b0,ca,60,28)},
	{hx::fsInt,(void *) &Context3D_obj::_hx___glTextureMaxAnisotropy,HX_("__glTextureMaxAnisotropy",d0,57,23,08)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_("backBufferHeight",ce,3d,76,f3),
	HX_("backBufferWidth",ff,f9,53,8c),
	HX_("driverInfo",b6,18,7b,e3),
	HX_("maxBackBufferHeight",92,ac,2a,8e),
	HX_("maxBackBufferWidth",bb,8f,62,be),
	HX_("profile",29,49,49,f3),
	HX_("totalGPUMemory",e9,89,1b,9c),
	HX_("gl",25,5a,00,00),
	HX_("__backBufferAntiAlias",e7,9b,20,bd),
	HX_("__backBufferTexture",f4,e5,95,65),
	HX_("__backBufferWantsBestResolution",0c,81,2c,ec),
	HX_("__backBufferWantsBestResolutionOnBrowserZoom",50,f3,6e,fd),
	HX_("__bitmapDataPool",55,be,55,89),
	HX_("__cleared",0c,58,93,2c),
	HX_("__context",cf,e6,c5,9a),
	HX_("__contextState",c2,f0,30,2b),
	HX_("__renderStage3DProgram",6b,88,79,ad),
	HX_("__enableErrorChecking",5f,5d,0d,28),
	HX_("__fragmentConstants",7f,a5,a6,65),
	HX_("__frontBufferTexture",72,b0,71,38),
	HX_("__positionScale",01,d2,7f,6a),
	HX_("__present",db,8b,2a,bb),
	HX_("__programs",8f,5c,60,29),
	HX_("__quadIndexBuffer",0b,2d,32,36),
	HX_("__quadIndexBufferCount",c4,5f,48,67),
	HX_("__quadIndexBufferElements",62,a2,7c,95),
	HX_("__stage",9e,c3,69,ee),
	HX_("__stage3D",cf,93,18,af),
	HX_("__state",f1,ce,69,ee),
	HX_("__vertexConstants",6b,1f,14,b9),
	HX_("clear",8d,71,5b,48),
	HX_("configureBackBuffer",0d,3c,11,04),
	HX_("createCubeTexture",ca,46,30,c8),
	HX_("createIndexBuffer",16,40,47,48),
	HX_("createProgram",e8,22,3c,dc),
	HX_("createRectangleTexture",88,8b,b3,f2),
	HX_("createTexture",3f,a1,23,87),
	HX_("createVertexBuffer",a0,ec,c7,6a),
	HX_("createVideoTexture",bc,6e,fb,b2),
	HX_("dispose",9f,80,4c,bb),
	HX_("drawToBitmapData",38,55,b6,f4),
	HX_("drawTriangles",07,44,68,de),
	HX_("present",fb,3a,dc,39),
	HX_("setBlendFactors",35,4b,cd,f5),
	HX_("setBlendFactorsSeparate",b8,e3,58,51),
	HX_("setColorMask",ed,8b,13,48),
	HX_("setCulling",ee,06,67,a6),
	HX_("setDepthTest",f3,e2,cc,c7),
	HX_("setProgram",02,6f,d8,46),
	HX_("setProgramConstantsFromByteArray",3a,1f,12,d4),
	HX_("setProgramConstantsFromMatrix",d8,d0,45,be),
	HX_("setProgramConstantsFromVector",5a,4b,db,99),
	HX_("setRenderToBackBuffer",9a,84,fb,ad),
	HX_("setRenderToTexture",e8,2c,92,46),
	HX_("setSamplerStateAt",7e,30,51,ac),
	HX_("setScissorRectangle",35,04,2c,03),
	HX_("setStencilActions",a3,ec,a6,2c),
	HX_("setStencilReferenceValue",c0,df,a3,11),
	HX_("setTextureAt",ac,ee,98,d3),
	HX_("setVertexBufferAt",d9,58,f9,c7),
	HX_("__bindGLArrayBuffer",57,ea,20,16),
	HX_("__bindGLElementArrayBuffer",ff,26,62,10),
	HX_("__bindGLFramebuffer",cb,a7,8c,d2),
	HX_("__bindGLTexture2D",cb,a0,28,31),
	HX_("__bindGLTextureCubeMap",ee,58,b1,ec),
	HX_("__dispose",7f,d1,9a,3c),
	HX_("__drawTriangles",e7,7c,1a,66),
	HX_("__flushGL",c9,2a,9b,eb),
	HX_("__flushGLBlend",c8,74,8a,c5),
	HX_("__flushGLColor",da,fd,f1,5a),
	HX_("__flushGLCulling",a7,ba,f2,dd),
	HX_("__flushGLDepth",7a,7d,bf,e7),
	HX_("__flushGLFramebuffer",a4,d4,08,ba),
	HX_("__flushGLProgram",bb,22,64,7e),
	HX_("__flushGLScissor",53,00,52,8f),
	HX_("__flushGLStencil",33,96,6e,0a),
	HX_("__flushGLTextures",21,4f,e1,f8),
	HX_("__flushGLViewport",4f,a4,b7,2f),
	HX_("__getGLBlend",36,8d,59,ee),
	HX_("__getGLCompareMode",4d,ad,57,0d),
	HX_("__getGLStencilAction",b7,a4,86,0d),
	HX_("__getGLTriangleFace",40,95,87,c3),
	HX_("__renderStage3D",19,ef,69,b1),
	HX_("__setGLBlend",aa,2b,d7,f1),
	HX_("__setGLBlendEquation",56,5d,f8,75),
	HX_("__setGLCullFace",b6,81,af,ac),
	HX_("__setGLDepthTest",ce,86,e6,10),
	HX_("__setGLFrontFace",bf,65,2a,ee),
	HX_("__setGLScissorTest",a7,26,13,08),
	HX_("__setGLStencilTest",87,2c,60,ef),
	HX_("get_enableErrorChecking",16,e3,6e,c2),
	HX_("set_enableErrorChecking",22,4c,d0,c4),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glDepthStencil,"__glDepthStencil");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMaxTextureMaxAnisotropy,"__glMaxTextureMaxAnisotropy");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glMaxViewportDims,"__glMaxViewportDims");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___glTextureMaxAnisotropy,"__glTextureMaxAnisotropy");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___driverInfo,"__driverInfo");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glDepthStencil,"__glDepthStencil");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMaxTextureMaxAnisotropy,"__glMaxTextureMaxAnisotropy");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glMaxViewportDims,"__glMaxViewportDims");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___glTextureMaxAnisotropy,"__glTextureMaxAnisotropy");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_("supportsVideoTexture",44,35,75,67),
	HX_("__driverInfo",d6,93,0e,1c),
	HX_("__glDepthStencil",1e,c0,95,83),
	HX_("__glMaxTextureMaxAnisotropy",ea,71,58,8e),
	HX_("__glMaxViewportDims",b0,ca,60,28),
	HX_("__glTextureMaxAnisotropy",d0,57,23,08),
	::String(null())
};

void Context3D_obj::__register()
{
	Context3D_obj _hx_dummy;
	Context3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display3D.Context3D",a7,bf,a0,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_153_boot)
HXDLIN( 153)		supportsVideoTexture = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_255_boot)
HXDLIN( 255)		_hx___glDepthStencil = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_256_boot)
HXDLIN( 256)		_hx___glMaxTextureMaxAnisotropy = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_257_boot)
HXDLIN( 257)		_hx___glMaxViewportDims = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_258_boot)
HXDLIN( 258)		_hx___glTextureMaxAnisotropy = -1;
            	}
}

} // end namespace openfl
} // end namespace display3D
