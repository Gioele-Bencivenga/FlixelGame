// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGL2RenderContext_WebGL2RenderContext_Impl_
#include <lime/graphics/_WebGL2RenderContext/WebGL2RenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_atf_ATFReader
#include <openfl/_internal/formats/atf/ATFReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_SamplerState
#include <openfl/_internal/renderer/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ccb53fcc86b81631_39_new,"openfl.display3D.textures.CubeTexture","new",0x2100f37b,"openfl.display3D.textures.CubeTexture.new","openfl/display3D/textures/CubeTexture.hx",39,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_85_uploadCompressedTextureFromByteArray,"openfl.display3D.textures.CubeTexture","uploadCompressedTextureFromByteArray",0x47d49053,"openfl.display3D.textures.CubeTexture.uploadCompressedTextureFromByteArray","openfl/display3D/textures/CubeTexture.hx",85,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_93_uploadCompressedTextureFromByteArray,"openfl.display3D.textures.CubeTexture","uploadCompressedTextureFromByteArray",0x47d49053,"openfl.display3D.textures.CubeTexture.uploadCompressedTextureFromByteArray","openfl/display3D/textures/CubeTexture.hx",93,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_144_uploadFromBitmapData,"openfl.display3D.textures.CubeTexture","uploadFromBitmapData",0xf44b3429,"openfl.display3D.textures.CubeTexture.uploadFromBitmapData","openfl/display3D/textures/CubeTexture.hx",144,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_214_uploadFromByteArray,"openfl.display3D.textures.CubeTexture","uploadFromByteArray",0x1e356101,"openfl.display3D.textures.CubeTexture.uploadFromByteArray","openfl/display3D/textures/CubeTexture.hx",214,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_238_uploadFromTypedArray,"openfl.display3D.textures.CubeTexture","uploadFromTypedArray",0xb8da2b3f,"openfl.display3D.textures.CubeTexture.uploadFromTypedArray","openfl/display3D/textures/CubeTexture.hx",238,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_256___getGLFramebuffer,"openfl.display3D.textures.CubeTexture","__getGLFramebuffer",0x0b1986d7,"openfl.display3D.textures.CubeTexture.__getGLFramebuffer","openfl/display3D/textures/CubeTexture.hx",256,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_287___setSamplerState,"openfl.display3D.textures.CubeTexture","__setSamplerState",0x909e23e6,"openfl.display3D.textures.CubeTexture.__setSamplerState","openfl/display3D/textures/CubeTexture.hx",287,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_324___sideToTarget,"openfl.display3D.textures.CubeTexture","__sideToTarget",0x72cba3c8,"openfl.display3D.textures.CubeTexture.__sideToTarget","openfl/display3D/textures/CubeTexture.hx",324,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_352___uploadCompressedTextureFromByteArray,"openfl.display3D.textures.CubeTexture","__uploadCompressedTextureFromByteArray",0x02145eb3,"openfl.display3D.textures.CubeTexture.__uploadCompressedTextureFromByteArray","openfl/display3D/textures/CubeTexture.hx",352,0xffe9b114)
HX_LOCAL_STACK_FRAME(_hx_pos_ccb53fcc86b81631_340___uploadCompressedTextureFromByteArray,"openfl.display3D.textures.CubeTexture","__uploadCompressedTextureFromByteArray",0x02145eb3,"openfl.display3D.textures.CubeTexture.__uploadCompressedTextureFromByteArray","openfl/display3D/textures/CubeTexture.hx",340,0xffe9b114)
static const bool _hx_array_data_3a151a09_12[] = {
	0,
};
namespace openfl{
namespace display3D{
namespace textures{

void CubeTexture_obj::__construct( ::openfl::display3D::Context3D context,int size, ::Dynamic format,bool optimizeForRenderToTexture,int streamingLevels){
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_39_new)
HXLINE(  40)		super::__construct(context);
HXLINE(  42)		this->_hx___size = size;
HXLINE(  43)		this->_hx___width = (this->_hx___height = this->_hx___size);
HXLINE(  45)		this->_hx___optimizeForRenderToTexture = optimizeForRenderToTexture;
HXLINE(  46)		this->_hx___streamingLevels = streamingLevels;
HXLINE(  48)		this->_hx___textureTarget = this->_hx___context->gl->TEXTURE_CUBE_MAP;
HXLINE(  49)		this->_hx___uploadedSides = 0;
            	}

Dynamic CubeTexture_obj::__CreateEmpty() { return new CubeTexture_obj; }

void *CubeTexture_obj::_hx_vtable = 0;

Dynamic CubeTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CubeTexture_obj > _hx_result = new CubeTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool CubeTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19affbf1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19affbf1;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x2d6abef7;
	}
}

void CubeTexture_obj::uploadCompressedTextureFromByteArray( ::openfl::utils::ByteArrayData data,int byteArrayOffset,hx::Null< bool >  __o_async){
            		bool async = __o_async.Default(false);
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_85_uploadCompressedTextureFromByteArray)
HXLINE(  84)		 ::openfl::display3D::textures::CubeTexture _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  86)		if (!(async)) {
HXLINE(  88)			this->_hx___uploadCompressedTextureFromByteArray(data,byteArrayOffset);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::display3D::textures::CubeTexture,_gthis, ::openfl::utils::ByteArrayData,data,int,byteArrayOffset) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ccb53fcc86b81631_93_uploadCompressedTextureFromByteArray)
HXLINE(  94)				_gthis->_hx___uploadCompressedTextureFromByteArray(data,byteArrayOffset);
HXLINE(  96)				 ::openfl::events::Event event = null();
HXLINE( 101)				event =  ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("textureReady",88,4d,5a,df),null(),null());
HXLINE( 104)				_gthis->dispatchEvent(event);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  92)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(_gthis,data,byteArrayOffset)),1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(CubeTexture_obj,uploadCompressedTextureFromByteArray,(void))

void CubeTexture_obj::uploadFromBitmapData( ::openfl::display::BitmapData source,int side,hx::Null< int >  __o_miplevel,hx::Null< bool >  __o_generateMipmap){
            		int miplevel = __o_miplevel.Default(0);
            		bool generateMipmap = __o_generateMipmap.Default(false);
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_144_uploadFromBitmapData)
HXLINE( 146)		if (hx::IsNull( source )) {
HXLINE( 146)			return;
            		}
HXLINE( 147)		int size = (this->_hx___size >> miplevel);
HXLINE( 148)		if ((size == 0)) {
HXLINE( 148)			return;
            		}
HXLINE( 150)		 ::lime::graphics::Image image = this->_hx___getImage(source);
HXLINE( 151)		if (hx::IsNull( image )) {
HXLINE( 151)			return;
            		}
HXLINE( 173)		this->uploadFromTypedArray(image->get_data(),side,miplevel);
            	}


HX_DEFINE_DYNAMIC_FUNC4(CubeTexture_obj,uploadFromBitmapData,(void))

void CubeTexture_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData data,int byteArrayOffset,int side,hx::Null< int >  __o_miplevel){
            		int miplevel = __o_miplevel.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_ccb53fcc86b81631_214_uploadFromByteArray)
HXDLIN( 214)		 ::Dynamic elements = null();
HXDLIN( 214)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 214)		::cpp::VirtualArray array = null();
HXDLIN( 214)		 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 214)		 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 214)		 ::Dynamic byteoffset = byteArrayOffset;
HXDLIN( 214)		 ::Dynamic len = null();
HXLINE(  92)		if (hx::IsNull( byteoffset )) {
HXLINE(  92)			byteoffset = 0;
            		}
HXLINE( 214)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 214)		if (hx::IsNotNull( elements )) {
HXDLIN( 214)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            		}
            		else {
HXDLIN( 214)			if (hx::IsNotNull( array )) {
HXDLIN( 214)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 214)				_this->byteOffset = 0;
HXDLIN( 214)				_this->length = array->get_length();
HXDLIN( 214)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 214)				 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 214)				_this->buffer = this2;
HXDLIN( 214)				_this->copyFromArray(array,null());
HXDLIN( 214)				this1 = _this;
            			}
            			else {
HXDLIN( 214)				if (hx::IsNotNull( vector )) {
HXDLIN( 214)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 214)					::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 214)					_this1->byteOffset = 0;
HXDLIN( 214)					_this1->length = array1->get_length();
HXDLIN( 214)					_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 214)					 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 214)					_this1->buffer = this3;
HXDLIN( 214)					_this1->copyFromArray(array1,null());
HXDLIN( 214)					this1 = _this1;
            				}
            				else {
HXDLIN( 214)					if (hx::IsNotNull( view )) {
HXDLIN( 214)						 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 214)						 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 214)						int srcLength = view->length;
HXDLIN( 214)						int srcByteOffset = view->byteOffset;
HXDLIN( 214)						int srcElementSize = view->bytesPerElement;
HXDLIN( 214)						int elementSize = _this2->bytesPerElement;
HXDLIN( 214)						if ((view->type == _this2->type)) {
HXDLIN( 214)							int srcLength1 = srcData->length;
HXDLIN( 214)							int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 214)							 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 214)							_this2->buffer = this4;
HXDLIN( 214)							_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            						}
            						else {
HXDLIN( 214)							HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            						}
HXDLIN( 214)						_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 214)						_this2->byteOffset = 0;
HXDLIN( 214)						_this2->length = srcLength;
HXDLIN( 214)						this1 = _this2;
            					}
            					else {
HXDLIN( 214)						if (hx::IsNotNull( buffer )) {
HXDLIN( 214)							 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 214)							int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 214)							if ((in_byteOffset < 0)) {
HXDLIN( 214)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 214)							if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXDLIN( 214)								HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            							}
HXDLIN( 214)							int bufferByteLength = buffer->length;
HXDLIN( 214)							int elementSize1 = _this3->bytesPerElement;
HXDLIN( 214)							int newByteLength = bufferByteLength;
HXDLIN( 214)							if (hx::IsNull( len )) {
HXDLIN( 214)								newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 214)								if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXDLIN( 214)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 214)								if ((newByteLength < 0)) {
HXDLIN( 214)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
            							else {
HXDLIN( 214)								newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN( 214)								int newRange = (in_byteOffset + newByteLength);
HXDLIN( 214)								if ((newRange > bufferByteLength)) {
HXDLIN( 214)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
            							}
HXDLIN( 214)							_this3->buffer = buffer;
HXDLIN( 214)							_this3->byteOffset = in_byteOffset;
HXDLIN( 214)							_this3->byteLength = newByteLength;
HXDLIN( 214)							_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 214)							this1 = _this3;
            						}
            						else {
HXDLIN( 214)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            						}
            					}
            				}
            			}
            		}
HXDLIN( 214)		this->uploadFromTypedArray(this1,side,miplevel);
            	}


HX_DEFINE_DYNAMIC_FUNC4(CubeTexture_obj,uploadFromByteArray,(void))

void CubeTexture_obj::uploadFromTypedArray( ::lime::utils::ArrayBufferView data,int side,hx::Null< int >  __o_miplevel){
            		int miplevel = __o_miplevel.Default(0);
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_238_uploadFromTypedArray)
HXLINE( 239)		if (hx::IsNull( data )) {
HXLINE( 239)			return;
            		}
HXLINE( 241)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 243)		int size = (this->_hx___size >> miplevel);
HXLINE( 244)		if ((size == 0)) {
HXLINE( 244)			return;
            		}
HXLINE( 246)		int target = this->_hx___sideToTarget(side);
HXLINE( 248)		this->_hx___context->_hx___bindGLTextureCubeMap(this->_hx___textureID);
HXLINE( 249)		{
HXLINE( 249)			int internalformat = this->_hx___internalFormat;
HXDLIN( 249)			int format = this->_hx___format;
HXDLIN( 249)			int type = gl->UNSIGNED_BYTE;
HXDLIN( 249)			{
HXLINE( 249)				::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data,null(),0);
HXDLIN( 249)				gl->texImage2D(target,miplevel,internalformat,size,size,0,format,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            			}
            		}
HXLINE( 250)		this->_hx___context->_hx___bindGLTextureCubeMap(null());
HXLINE( 252)		 ::openfl::display3D::textures::CubeTexture _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 252)		_hx_tmp->_hx___uploadedSides = (_hx_tmp->_hx___uploadedSides | (1 << side));
            	}


HX_DEFINE_DYNAMIC_FUNC3(CubeTexture_obj,uploadFromTypedArray,(void))

 ::lime::graphics::opengl::GLObject CubeTexture_obj::_hx___getGLFramebuffer(bool enableDepthAndStencil,int antiAlias,int surfaceSelector){
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_256___getGLFramebuffer)
HXLINE( 257)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 259)		if (hx::IsNull( this->_hx___glFramebuffer )) {
HXLINE( 261)			this->_hx___glFramebuffer = gl->createFramebuffer();
HXLINE( 262)			this->_hx___framebufferSurface = -1;
            		}
HXLINE( 265)		if ((this->_hx___framebufferSurface != surfaceSelector)) {
HXLINE( 267)			this->_hx___framebufferSurface = surfaceSelector;
HXLINE( 269)			this->_hx___context->_hx___bindGLFramebuffer(this->_hx___glFramebuffer);
HXLINE( 270)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,(gl->TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector),this->_hx___textureID,0);
HXLINE( 272)			if (this->_hx___context->_hx___enableErrorChecking) {
HXLINE( 274)				int code = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXLINE( 276)				if ((code != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 278)					::lime::utils::Log_obj::error((((((HX_("Error: Context3D.setRenderToTexture status:",4c,0a,86,52) + code) + HX_(" width:",94,67,ab,7e)) + this->_hx___width) + HX_(" height:",53,26,89,26)) + this->_hx___height),hx::SourceInfo(HX_("openfl/display3D/textures/CubeTexture.hx",14,b1,e9,ff),278,HX_("openfl.display3D.textures.CubeTexture",09,1a,15,3a),HX_("__getGLFramebuffer",92,f3,72,c9)));
            				}
            			}
            		}
HXLINE( 283)		return this->super::_hx___getGLFramebuffer(enableDepthAndStencil,antiAlias,surfaceSelector);
            	}


bool CubeTexture_obj::_hx___setSamplerState( ::openfl::_internal::renderer::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_ccb53fcc86b81631_287___setSamplerState)
HXLINE( 288)		if (this->super::_hx___setSamplerState(state)) {
HXLINE( 290)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 292)			bool _hx_tmp;
HXDLIN( 292)			if (hx::IsNotEq( state->mipfilter,2 )) {
HXLINE( 292)				_hx_tmp = !(this->_hx___samplerState->mipmapGenerated);
            			}
            			else {
HXLINE( 292)				_hx_tmp = false;
            			}
HXDLIN( 292)			if (_hx_tmp) {
HXLINE( 294)				gl->generateMipmap(gl->TEXTURE_CUBE_MAP);
HXLINE( 295)				this->_hx___samplerState->mipmapGenerated = true;
            			}
HXLINE( 298)			if ((::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy != 0)) {
HXLINE( 300)				int aniso;
HXDLIN( 300)				 ::Dynamic _hx_switch_0 = state->filter;
            				if (  (_hx_switch_0==0) ){
HXLINE( 300)					aniso = 16;
HXDLIN( 300)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==1) ){
HXLINE( 300)					aniso = 2;
HXDLIN( 300)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==2) ){
HXLINE( 300)					aniso = 4;
HXDLIN( 300)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==3) ){
HXLINE( 300)					aniso = 8;
HXDLIN( 300)					goto _hx_goto_7;
            				}
            				/* default */{
HXLINE( 300)					aniso = 1;
            				}
            				_hx_goto_7:;
HXLINE( 309)				if ((aniso > ::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy)) {
HXLINE( 311)					aniso = ::openfl::display3D::Context3D_obj::_hx___glMaxTextureMaxAnisotropy;
            				}
HXLINE( 314)				gl->texParameterf(gl->TEXTURE_CUBE_MAP,::openfl::display3D::Context3D_obj::_hx___glTextureMaxAnisotropy,( (Float)(aniso) ));
            			}
HXLINE( 317)			return true;
            		}
HXLINE( 320)		return false;
            	}


int CubeTexture_obj::_hx___sideToTarget(int side){
            	HX_GC_STACKFRAME(&_hx_pos_ccb53fcc86b81631_324___sideToTarget)
HXLINE( 325)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 327)		switch((int)(side)){
            			case (int)0: {
HXLINE( 329)				return gl->TEXTURE_CUBE_MAP_POSITIVE_X;
            			}
            			break;
            			case (int)1: {
HXLINE( 330)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_X;
            			}
            			break;
            			case (int)2: {
HXLINE( 331)				return gl->TEXTURE_CUBE_MAP_POSITIVE_Y;
            			}
            			break;
            			case (int)3: {
HXLINE( 332)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_Y;
            			}
            			break;
            			case (int)4: {
HXLINE( 333)				return gl->TEXTURE_CUBE_MAP_POSITIVE_Z;
            			}
            			break;
            			case (int)5: {
HXLINE( 334)				return gl->TEXTURE_CUBE_MAP_NEGATIVE_Z;
            			}
            			break;
            			default:{
HXLINE( 335)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            		}
HXLINE( 327)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CubeTexture_obj,_hx___sideToTarget,return )

void CubeTexture_obj::_hx___uploadCompressedTextureFromByteArray( ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::openfl::display3D::textures::CubeTexture,_gthis,::Array< bool >,hasTexture,bool,alpha, ::lime::_internal::backend::native::NativeOpenGLRenderContext,gl) HXARGC(7)
            		void _hx_run(int side,int level,int gpuFormat,int width,int height,int blockLength, ::haxe::io::Bytes bytes){
            			HX_GC_STACKFRAME(&_hx_pos_ccb53fcc86b81631_352___uploadCompressedTextureFromByteArray)
HXLINE( 353)			 ::Dynamic format;
HXDLIN( 353)			if (alpha) {
HXLINE( 353)				format = ::openfl::display3D::textures::TextureBase_obj::_hx___compressedFormatsAlpha->get(gpuFormat);
            			}
            			else {
HXLINE( 353)				format = ::openfl::display3D::textures::TextureBase_obj::_hx___compressedFormats->get(gpuFormat);
            			}
HXLINE( 354)			if (hx::IsEq( format,0 )) {
HXLINE( 354)				return;
            			}
HXLINE( 356)			hasTexture[0] = true;
HXLINE( 357)			int target = _gthis->_hx___sideToTarget(side);
HXLINE( 359)			_gthis->_hx___format = ( (int)(format) );
HXLINE( 360)			_gthis->_hx___internalFormat = ( (int)(format) );
HXLINE( 362)			bool _hx_tmp;
HXDLIN( 362)			if (alpha) {
HXLINE( 362)				_hx_tmp = (gpuFormat == 2);
            			}
            			else {
HXLINE( 362)				_hx_tmp = false;
            			}
HXDLIN( 362)			if (_hx_tmp) {
HXLINE( 364)				int size = ::Std_obj::_hx_int((( (Float)(blockLength) ) / ( (Float)(2) )));
HXLINE( 366)				int _gthis1 = _gthis->_hx___internalFormat;
HXLINE( 367)				 ::Dynamic elements = null();
HXDLIN( 367)				::cpp::VirtualArray array = null();
HXDLIN( 367)				 ::openfl::_Vector::IntVector vector = null();
HXDLIN( 367)				 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 367)				 ::Dynamic byteoffset = 0;
HXLINE(  92)				if (hx::IsNull( byteoffset )) {
HXLINE(  92)					byteoffset = 0;
            				}
HXLINE( 367)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 367)				if (hx::IsNotNull( elements )) {
HXLINE( 367)					this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            				}
            				else {
HXLINE( 367)					if (hx::IsNotNull( array )) {
HXLINE( 367)						 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 367)						_this->byteOffset = 0;
HXDLIN( 367)						_this->length = array->get_length();
HXDLIN( 367)						_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 367)						 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 367)						_this->buffer = this2;
HXDLIN( 367)						_this->copyFromArray(array,null());
HXDLIN( 367)						this1 = _this;
            					}
            					else {
HXLINE( 367)						if (hx::IsNotNull( vector )) {
HXLINE( 367)							 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 367)							::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 367)							_this1->byteOffset = 0;
HXDLIN( 367)							_this1->length = array1->get_length();
HXDLIN( 367)							_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 367)							 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 367)							_this1->buffer = this3;
HXDLIN( 367)							_this1->copyFromArray(array1,null());
HXDLIN( 367)							this1 = _this1;
            						}
            						else {
HXLINE( 367)							if (hx::IsNotNull( view )) {
HXLINE( 367)								 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 367)								 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 367)								int srcLength = view->length;
HXDLIN( 367)								int srcByteOffset = view->byteOffset;
HXDLIN( 367)								int srcElementSize = view->bytesPerElement;
HXDLIN( 367)								int elementSize = _this2->bytesPerElement;
HXDLIN( 367)								if ((view->type == _this2->type)) {
HXLINE( 367)									int srcLength1 = srcData->length;
HXDLIN( 367)									int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 367)									 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 367)									_this2->buffer = this4;
HXDLIN( 367)									_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            								}
            								else {
HXLINE( 367)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 367)								_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 367)								_this2->byteOffset = 0;
HXDLIN( 367)								_this2->length = srcLength;
HXDLIN( 367)								this1 = _this2;
            							}
            							else {
HXLINE( 367)								if (hx::IsNotNull( bytes )) {
HXLINE( 367)									 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 367)									int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 367)									if ((in_byteOffset < 0)) {
HXLINE( 367)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 367)									if ((hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 367)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 367)									int bufferByteLength = bytes->length;
HXDLIN( 367)									int elementSize1 = _this3->bytesPerElement;
HXDLIN( 367)									int newByteLength = bufferByteLength;
HXDLIN( 367)									if (hx::IsNull( size )) {
HXLINE( 367)										newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 367)										if ((hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 367)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 367)										if ((newByteLength < 0)) {
HXLINE( 367)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 367)										newByteLength = (size * _this3->bytesPerElement);
HXDLIN( 367)										int newRange = (in_byteOffset + newByteLength);
HXDLIN( 367)										if ((newRange > bufferByteLength)) {
HXLINE( 367)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 367)									_this3->buffer = bytes;
HXDLIN( 367)									_this3->byteOffset = in_byteOffset;
HXDLIN( 367)									_this3->byteLength = newByteLength;
HXDLIN( 367)									_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 367)									this1 = _this3;
            								}
            								else {
HXLINE( 367)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXLINE( 366)				::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::compressedTexImage2D(gl,target,level,_gthis1,width,height,0,this1);
HXLINE( 369)				 ::openfl::display3D::textures::CubeTexture alphaTexture =  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,_gthis->_hx___context,_gthis->_hx___size,3,_gthis->_hx___optimizeForRenderToTexture,_gthis->_hx___streamingLevels);
HXLINE( 370)				alphaTexture->_hx___format = ( (int)(format) );
HXLINE( 371)				alphaTexture->_hx___internalFormat = ( (int)(format) );
HXLINE( 373)				_gthis->_hx___context->_hx___bindGLTextureCubeMap(alphaTexture->_hx___textureID);
HXLINE( 374)				int alphaTexture1 = alphaTexture->_hx___internalFormat;
HXLINE( 375)				 ::Dynamic elements1 = null();
HXDLIN( 375)				::cpp::VirtualArray array2 = null();
HXDLIN( 375)				 ::openfl::_Vector::IntVector vector1 = null();
HXDLIN( 375)				 ::lime::utils::ArrayBufferView view1 = null();
HXDLIN( 375)				 ::Dynamic byteoffset1 = size;
HXLINE(  92)				if (hx::IsNull( byteoffset1 )) {
HXLINE(  92)					byteoffset1 = 0;
            				}
HXLINE( 375)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 375)				if (hx::IsNotNull( elements1 )) {
HXLINE( 375)					this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements1,4);
            				}
            				else {
HXLINE( 375)					if (hx::IsNotNull( array2 )) {
HXLINE( 375)						 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 375)						_this4->byteOffset = 0;
HXDLIN( 375)						_this4->length = array2->get_length();
HXDLIN( 375)						_this4->byteLength = (_this4->length * _this4->bytesPerElement);
HXDLIN( 375)						 ::haxe::io::Bytes this6 = ::haxe::io::Bytes_obj::alloc(_this4->byteLength);
HXDLIN( 375)						_this4->buffer = this6;
HXDLIN( 375)						_this4->copyFromArray(array2,null());
HXDLIN( 375)						this5 = _this4;
            					}
            					else {
HXLINE( 375)						if (hx::IsNotNull( vector1 )) {
HXLINE( 375)							 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 375)							::cpp::VirtualArray array3 = ( (::cpp::VirtualArray)(vector1->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 375)							_this5->byteOffset = 0;
HXDLIN( 375)							_this5->length = array3->get_length();
HXDLIN( 375)							_this5->byteLength = (_this5->length * _this5->bytesPerElement);
HXDLIN( 375)							 ::haxe::io::Bytes this7 = ::haxe::io::Bytes_obj::alloc(_this5->byteLength);
HXDLIN( 375)							_this5->buffer = this7;
HXDLIN( 375)							_this5->copyFromArray(array3,null());
HXDLIN( 375)							this5 = _this5;
            						}
            						else {
HXLINE( 375)							if (hx::IsNotNull( view1 )) {
HXLINE( 375)								 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 375)								 ::haxe::io::Bytes srcData1 = view1->buffer;
HXDLIN( 375)								int srcLength2 = view1->length;
HXDLIN( 375)								int srcByteOffset1 = view1->byteOffset;
HXDLIN( 375)								int srcElementSize1 = view1->bytesPerElement;
HXDLIN( 375)								int elementSize2 = _this6->bytesPerElement;
HXDLIN( 375)								if ((view1->type == _this6->type)) {
HXLINE( 375)									int srcLength3 = srcData1->length;
HXDLIN( 375)									int cloneLength1 = (srcLength3 - srcByteOffset1);
HXDLIN( 375)									 ::haxe::io::Bytes this8 = ::haxe::io::Bytes_obj::alloc(cloneLength1);
HXDLIN( 375)									_this6->buffer = this8;
HXDLIN( 375)									_this6->buffer->blit(0,srcData1,srcByteOffset1,cloneLength1);
            								}
            								else {
HXLINE( 375)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 375)								_this6->byteLength = (_this6->bytesPerElement * srcLength2);
HXDLIN( 375)								_this6->byteOffset = 0;
HXDLIN( 375)								_this6->length = srcLength2;
HXDLIN( 375)								this5 = _this6;
            							}
            							else {
HXLINE( 375)								if (hx::IsNotNull( bytes )) {
HXLINE( 375)									 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 375)									int in_byteOffset1 = ( (int)(byteoffset1) );
HXDLIN( 375)									if ((in_byteOffset1 < 0)) {
HXLINE( 375)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 375)									if ((hx::Mod(in_byteOffset1,_this7->bytesPerElement) != 0)) {
HXLINE( 375)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 375)									int bufferByteLength1 = bytes->length;
HXDLIN( 375)									int elementSize3 = _this7->bytesPerElement;
HXDLIN( 375)									int newByteLength1 = bufferByteLength1;
HXDLIN( 375)									if (hx::IsNull( size )) {
HXLINE( 375)										newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 375)										if ((hx::Mod(bufferByteLength1,_this7->bytesPerElement) != 0)) {
HXLINE( 375)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 375)										if ((newByteLength1 < 0)) {
HXLINE( 375)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 375)										newByteLength1 = (size * _this7->bytesPerElement);
HXDLIN( 375)										int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 375)										if ((newRange1 > bufferByteLength1)) {
HXLINE( 375)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 375)									_this7->buffer = bytes;
HXDLIN( 375)									_this7->byteOffset = in_byteOffset1;
HXDLIN( 375)									_this7->byteLength = newByteLength1;
HXDLIN( 375)									_this7->length = ::Std_obj::_hx_int((( (Float)(newByteLength1) ) / ( (Float)(_this7->bytesPerElement) )));
HXDLIN( 375)									this5 = _this7;
            								}
            								else {
HXLINE( 375)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXLINE( 374)				::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::compressedTexImage2D(gl,target,level,alphaTexture1,width,height,0,this5);
HXLINE( 377)				_gthis->_hx___alphaTexture = alphaTexture;
            			}
            			else {
HXLINE( 381)				int _gthis2 = _gthis->_hx___internalFormat;
HXLINE( 382)				 ::Dynamic elements2 = null();
HXDLIN( 382)				::cpp::VirtualArray array4 = null();
HXDLIN( 382)				 ::openfl::_Vector::IntVector vector2 = null();
HXDLIN( 382)				 ::lime::utils::ArrayBufferView view2 = null();
HXDLIN( 382)				 ::Dynamic byteoffset2 = 0;
HXLINE(  92)				if (hx::IsNull( byteoffset2 )) {
HXLINE(  92)					byteoffset2 = 0;
            				}
HXLINE( 382)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 382)				if (hx::IsNotNull( elements2 )) {
HXLINE( 382)					this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements2,4);
            				}
            				else {
HXLINE( 382)					if (hx::IsNotNull( array4 )) {
HXLINE( 382)						 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 382)						_this8->byteOffset = 0;
HXDLIN( 382)						_this8->length = array4->get_length();
HXDLIN( 382)						_this8->byteLength = (_this8->length * _this8->bytesPerElement);
HXDLIN( 382)						 ::haxe::io::Bytes this10 = ::haxe::io::Bytes_obj::alloc(_this8->byteLength);
HXDLIN( 382)						_this8->buffer = this10;
HXDLIN( 382)						_this8->copyFromArray(array4,null());
HXDLIN( 382)						this9 = _this8;
            					}
            					else {
HXLINE( 382)						if (hx::IsNotNull( vector2 )) {
HXLINE( 382)							 ::lime::utils::ArrayBufferView _this9 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 382)							::cpp::VirtualArray array5 = ( (::cpp::VirtualArray)(vector2->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 382)							_this9->byteOffset = 0;
HXDLIN( 382)							_this9->length = array5->get_length();
HXDLIN( 382)							_this9->byteLength = (_this9->length * _this9->bytesPerElement);
HXDLIN( 382)							 ::haxe::io::Bytes this11 = ::haxe::io::Bytes_obj::alloc(_this9->byteLength);
HXDLIN( 382)							_this9->buffer = this11;
HXDLIN( 382)							_this9->copyFromArray(array5,null());
HXDLIN( 382)							this9 = _this9;
            						}
            						else {
HXLINE( 382)							if (hx::IsNotNull( view2 )) {
HXLINE( 382)								 ::lime::utils::ArrayBufferView _this10 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 382)								 ::haxe::io::Bytes srcData2 = view2->buffer;
HXDLIN( 382)								int srcLength4 = view2->length;
HXDLIN( 382)								int srcByteOffset2 = view2->byteOffset;
HXDLIN( 382)								int srcElementSize2 = view2->bytesPerElement;
HXDLIN( 382)								int elementSize4 = _this10->bytesPerElement;
HXDLIN( 382)								if ((view2->type == _this10->type)) {
HXLINE( 382)									int srcLength5 = srcData2->length;
HXDLIN( 382)									int cloneLength2 = (srcLength5 - srcByteOffset2);
HXDLIN( 382)									 ::haxe::io::Bytes this12 = ::haxe::io::Bytes_obj::alloc(cloneLength2);
HXDLIN( 382)									_this10->buffer = this12;
HXDLIN( 382)									_this10->buffer->blit(0,srcData2,srcByteOffset2,cloneLength2);
            								}
            								else {
HXLINE( 382)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 382)								_this10->byteLength = (_this10->bytesPerElement * srcLength4);
HXDLIN( 382)								_this10->byteOffset = 0;
HXDLIN( 382)								_this10->length = srcLength4;
HXDLIN( 382)								this9 = _this10;
            							}
            							else {
HXLINE( 382)								if (hx::IsNotNull( bytes )) {
HXLINE( 382)									 ::lime::utils::ArrayBufferView _this11 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 382)									int in_byteOffset2 = ( (int)(byteoffset2) );
HXDLIN( 382)									if ((in_byteOffset2 < 0)) {
HXLINE( 382)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 382)									if ((hx::Mod(in_byteOffset2,_this11->bytesPerElement) != 0)) {
HXLINE( 382)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 382)									int bufferByteLength2 = bytes->length;
HXDLIN( 382)									int elementSize5 = _this11->bytesPerElement;
HXDLIN( 382)									int newByteLength2 = bufferByteLength2;
HXDLIN( 382)									if (hx::IsNull( blockLength )) {
HXLINE( 382)										newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 382)										if ((hx::Mod(bufferByteLength2,_this11->bytesPerElement) != 0)) {
HXLINE( 382)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 382)										if ((newByteLength2 < 0)) {
HXLINE( 382)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 382)										newByteLength2 = (blockLength * _this11->bytesPerElement);
HXDLIN( 382)										int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 382)										if ((newRange2 > bufferByteLength2)) {
HXLINE( 382)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 382)									_this11->buffer = bytes;
HXDLIN( 382)									_this11->byteOffset = in_byteOffset2;
HXDLIN( 382)									_this11->byteLength = newByteLength2;
HXDLIN( 382)									_this11->length = ::Std_obj::_hx_int((( (Float)(newByteLength2) ) / ( (Float)(_this11->bytesPerElement) )));
HXDLIN( 382)									this9 = _this11;
            								}
            								else {
HXLINE( 382)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXLINE( 381)				::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::compressedTexImage2D(gl,target,level,_gthis2,width,height,0,this9);
            			}
            		}
            		HX_END_LOCAL_FUNC7((void))

            	HX_GC_STACKFRAME(&_hx_pos_ccb53fcc86b81631_340___uploadCompressedTextureFromByteArray)
HXLINE( 339)		 ::openfl::display3D::textures::CubeTexture _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 341)		 ::openfl::_internal::formats::atf::ATFReader reader =  ::openfl::_internal::formats::atf::ATFReader_obj::__alloc( HX_CTX ,data,byteArrayOffset);
HXLINE( 342)		bool alpha = reader->readHeader(this->_hx___size,this->_hx___size,true);
HXLINE( 344)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 346)		this->_hx___context->_hx___bindGLTextureCubeMap(this->_hx___textureID);
HXLINE( 348)		::Array< bool > hasTexture = ::Array_obj< bool >::fromData( _hx_array_data_3a151a09_12,1);
HXLINE( 351)		reader->readTextures( ::Dynamic(new _hx_Closure_0(_gthis,hasTexture,alpha,gl)));
HXLINE( 386)		if (!(hasTexture->__get(0))) {
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements3 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer = null();
HXDLIN( 390)				::cpp::VirtualArray array6 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector3 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view3 = null();
HXDLIN( 390)				 ::Dynamic len = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this13;
HXDLIN( 390)				if (hx::IsNotNull( elements3 )) {
HXLINE( 390)					this13 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements3,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array6 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this12 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this12->byteOffset = 0;
HXDLIN( 390)						_this12->length = array6->get_length();
HXDLIN( 390)						_this12->byteLength = (_this12->length * _this12->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this14 = ::haxe::io::Bytes_obj::alloc(_this12->byteLength);
HXDLIN( 390)						_this12->buffer = this14;
HXDLIN( 390)						_this12->copyFromArray(array6,null());
HXDLIN( 390)						this13 = _this12;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector3 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this13 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array7 = ( (::cpp::VirtualArray)(vector3->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this13->byteOffset = 0;
HXDLIN( 390)							_this13->length = array7->get_length();
HXDLIN( 390)							_this13->byteLength = (_this13->length * _this13->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this15 = ::haxe::io::Bytes_obj::alloc(_this13->byteLength);
HXDLIN( 390)							_this13->buffer = this15;
HXDLIN( 390)							_this13->copyFromArray(array7,null());
HXDLIN( 390)							this13 = _this13;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view3 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this14 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData3 = view3->buffer;
HXDLIN( 390)								int srcLength6 = view3->length;
HXDLIN( 390)								int srcByteOffset3 = view3->byteOffset;
HXDLIN( 390)								int srcElementSize3 = view3->bytesPerElement;
HXDLIN( 390)								int elementSize6 = _this14->bytesPerElement;
HXDLIN( 390)								if ((view3->type == _this14->type)) {
HXLINE( 390)									int srcLength7 = srcData3->length;
HXDLIN( 390)									int cloneLength3 = (srcLength7 - srcByteOffset3);
HXDLIN( 390)									 ::haxe::io::Bytes this16 = ::haxe::io::Bytes_obj::alloc(cloneLength3);
HXDLIN( 390)									_this14->buffer = this16;
HXDLIN( 390)									_this14->buffer->blit(0,srcData3,srcByteOffset3,cloneLength3);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this14->byteLength = (_this14->bytesPerElement * srcLength6);
HXDLIN( 390)								_this14->byteOffset = 0;
HXDLIN( 390)								_this14->length = srcLength6;
HXDLIN( 390)								this13 = _this14;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this15 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset3 = 0;
HXDLIN( 390)									if ((in_byteOffset3 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset3,_this15->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength3 = buffer->length;
HXDLIN( 390)									int elementSize7 = _this15->bytesPerElement;
HXDLIN( 390)									int newByteLength3 = bufferByteLength3;
HXDLIN( 390)									if (hx::IsNull( len )) {
HXLINE( 390)										newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength3,_this15->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength3 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength3 = (( (int)(len) ) * _this15->bytesPerElement);
HXDLIN( 390)										int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 390)										if ((newRange3 > bufferByteLength3)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this15->buffer = buffer;
HXDLIN( 390)									_this15->byteOffset = in_byteOffset3;
HXDLIN( 390)									_this15->byteLength = newByteLength3;
HXDLIN( 390)									_this15->length = ::Std_obj::_hx_int((( (Float)(newByteLength3) ) / ( (Float)(_this15->bytesPerElement) )));
HXDLIN( 390)									this13 = _this15;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data1 = this13;
HXLINE( 391)				{
HXLINE( 391)					int target1 = this->_hx___sideToTarget(0);
HXDLIN( 391)					int internalformat = this->_hx___internalFormat;
HXDLIN( 391)					int width1 = this->_hx___size;
HXDLIN( 391)					int height1 = this->_hx___size;
HXDLIN( 391)					int format1 = this->_hx___format;
HXDLIN( 391)					int type = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data1,null(),0);
HXDLIN( 391)						gl->texImage2D(target1,0,internalformat,width1,height1,0,format1,type,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements4 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer1 = null();
HXDLIN( 390)				::cpp::VirtualArray array8 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector4 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view4 = null();
HXDLIN( 390)				 ::Dynamic len1 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this17;
HXDLIN( 390)				if (hx::IsNotNull( elements4 )) {
HXLINE( 390)					this17 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements4,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array8 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this16 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this16->byteOffset = 0;
HXDLIN( 390)						_this16->length = array8->get_length();
HXDLIN( 390)						_this16->byteLength = (_this16->length * _this16->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this18 = ::haxe::io::Bytes_obj::alloc(_this16->byteLength);
HXDLIN( 390)						_this16->buffer = this18;
HXDLIN( 390)						_this16->copyFromArray(array8,null());
HXDLIN( 390)						this17 = _this16;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector4 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this17 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array9 = ( (::cpp::VirtualArray)(vector4->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this17->byteOffset = 0;
HXDLIN( 390)							_this17->length = array9->get_length();
HXDLIN( 390)							_this17->byteLength = (_this17->length * _this17->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this19 = ::haxe::io::Bytes_obj::alloc(_this17->byteLength);
HXDLIN( 390)							_this17->buffer = this19;
HXDLIN( 390)							_this17->copyFromArray(array9,null());
HXDLIN( 390)							this17 = _this17;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view4 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this18 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData4 = view4->buffer;
HXDLIN( 390)								int srcLength8 = view4->length;
HXDLIN( 390)								int srcByteOffset4 = view4->byteOffset;
HXDLIN( 390)								int srcElementSize4 = view4->bytesPerElement;
HXDLIN( 390)								int elementSize8 = _this18->bytesPerElement;
HXDLIN( 390)								if ((view4->type == _this18->type)) {
HXLINE( 390)									int srcLength9 = srcData4->length;
HXDLIN( 390)									int cloneLength4 = (srcLength9 - srcByteOffset4);
HXDLIN( 390)									 ::haxe::io::Bytes this20 = ::haxe::io::Bytes_obj::alloc(cloneLength4);
HXDLIN( 390)									_this18->buffer = this20;
HXDLIN( 390)									_this18->buffer->blit(0,srcData4,srcByteOffset4,cloneLength4);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this18->byteLength = (_this18->bytesPerElement * srcLength8);
HXDLIN( 390)								_this18->byteOffset = 0;
HXDLIN( 390)								_this18->length = srcLength8;
HXDLIN( 390)								this17 = _this18;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer1 )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this19 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset4 = 0;
HXDLIN( 390)									if ((in_byteOffset4 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset4,_this19->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength4 = buffer1->length;
HXDLIN( 390)									int elementSize9 = _this19->bytesPerElement;
HXDLIN( 390)									int newByteLength4 = bufferByteLength4;
HXDLIN( 390)									if (hx::IsNull( len1 )) {
HXLINE( 390)										newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength4,_this19->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength4 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength4 = (( (int)(len1) ) * _this19->bytesPerElement);
HXDLIN( 390)										int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 390)										if ((newRange4 > bufferByteLength4)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this19->buffer = buffer1;
HXDLIN( 390)									_this19->byteOffset = in_byteOffset4;
HXDLIN( 390)									_this19->byteLength = newByteLength4;
HXDLIN( 390)									_this19->length = ::Std_obj::_hx_int((( (Float)(newByteLength4) ) / ( (Float)(_this19->bytesPerElement) )));
HXDLIN( 390)									this17 = _this19;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data2 = this17;
HXLINE( 391)				{
HXLINE( 391)					int target2 = this->_hx___sideToTarget(1);
HXDLIN( 391)					int internalformat1 = this->_hx___internalFormat;
HXDLIN( 391)					int width2 = this->_hx___size;
HXDLIN( 391)					int height2 = this->_hx___size;
HXDLIN( 391)					int format2 = this->_hx___format;
HXDLIN( 391)					int type1 = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data2,null(),0);
HXDLIN( 391)						gl->texImage2D(target2,0,internalformat1,width2,height2,0,format2,type1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements5 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer2 = null();
HXDLIN( 390)				::cpp::VirtualArray array10 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector5 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view5 = null();
HXDLIN( 390)				 ::Dynamic len2 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this21;
HXDLIN( 390)				if (hx::IsNotNull( elements5 )) {
HXLINE( 390)					this21 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements5,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array10 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this20 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this20->byteOffset = 0;
HXDLIN( 390)						_this20->length = array10->get_length();
HXDLIN( 390)						_this20->byteLength = (_this20->length * _this20->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this22 = ::haxe::io::Bytes_obj::alloc(_this20->byteLength);
HXDLIN( 390)						_this20->buffer = this22;
HXDLIN( 390)						_this20->copyFromArray(array10,null());
HXDLIN( 390)						this21 = _this20;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector5 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this21 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array11 = ( (::cpp::VirtualArray)(vector5->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this21->byteOffset = 0;
HXDLIN( 390)							_this21->length = array11->get_length();
HXDLIN( 390)							_this21->byteLength = (_this21->length * _this21->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this23 = ::haxe::io::Bytes_obj::alloc(_this21->byteLength);
HXDLIN( 390)							_this21->buffer = this23;
HXDLIN( 390)							_this21->copyFromArray(array11,null());
HXDLIN( 390)							this21 = _this21;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view5 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this22 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData5 = view5->buffer;
HXDLIN( 390)								int srcLength10 = view5->length;
HXDLIN( 390)								int srcByteOffset5 = view5->byteOffset;
HXDLIN( 390)								int srcElementSize5 = view5->bytesPerElement;
HXDLIN( 390)								int elementSize10 = _this22->bytesPerElement;
HXDLIN( 390)								if ((view5->type == _this22->type)) {
HXLINE( 390)									int srcLength11 = srcData5->length;
HXDLIN( 390)									int cloneLength5 = (srcLength11 - srcByteOffset5);
HXDLIN( 390)									 ::haxe::io::Bytes this24 = ::haxe::io::Bytes_obj::alloc(cloneLength5);
HXDLIN( 390)									_this22->buffer = this24;
HXDLIN( 390)									_this22->buffer->blit(0,srcData5,srcByteOffset5,cloneLength5);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this22->byteLength = (_this22->bytesPerElement * srcLength10);
HXDLIN( 390)								_this22->byteOffset = 0;
HXDLIN( 390)								_this22->length = srcLength10;
HXDLIN( 390)								this21 = _this22;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer2 )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this23 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset5 = 0;
HXDLIN( 390)									if ((in_byteOffset5 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset5,_this23->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength5 = buffer2->length;
HXDLIN( 390)									int elementSize11 = _this23->bytesPerElement;
HXDLIN( 390)									int newByteLength5 = bufferByteLength5;
HXDLIN( 390)									if (hx::IsNull( len2 )) {
HXLINE( 390)										newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength5,_this23->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength5 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength5 = (( (int)(len2) ) * _this23->bytesPerElement);
HXDLIN( 390)										int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 390)										if ((newRange5 > bufferByteLength5)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this23->buffer = buffer2;
HXDLIN( 390)									_this23->byteOffset = in_byteOffset5;
HXDLIN( 390)									_this23->byteLength = newByteLength5;
HXDLIN( 390)									_this23->length = ::Std_obj::_hx_int((( (Float)(newByteLength5) ) / ( (Float)(_this23->bytesPerElement) )));
HXDLIN( 390)									this21 = _this23;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data3 = this21;
HXLINE( 391)				{
HXLINE( 391)					int target3 = this->_hx___sideToTarget(2);
HXDLIN( 391)					int internalformat2 = this->_hx___internalFormat;
HXDLIN( 391)					int width3 = this->_hx___size;
HXDLIN( 391)					int height3 = this->_hx___size;
HXDLIN( 391)					int format3 = this->_hx___format;
HXDLIN( 391)					int type2 = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data3,null(),0);
HXDLIN( 391)						gl->texImage2D(target3,0,internalformat2,width3,height3,0,format3,type2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements6 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer3 = null();
HXDLIN( 390)				::cpp::VirtualArray array12 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector6 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view6 = null();
HXDLIN( 390)				 ::Dynamic len3 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this25;
HXDLIN( 390)				if (hx::IsNotNull( elements6 )) {
HXLINE( 390)					this25 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements6,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array12 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this24 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this24->byteOffset = 0;
HXDLIN( 390)						_this24->length = array12->get_length();
HXDLIN( 390)						_this24->byteLength = (_this24->length * _this24->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this26 = ::haxe::io::Bytes_obj::alloc(_this24->byteLength);
HXDLIN( 390)						_this24->buffer = this26;
HXDLIN( 390)						_this24->copyFromArray(array12,null());
HXDLIN( 390)						this25 = _this24;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector6 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this25 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array13 = ( (::cpp::VirtualArray)(vector6->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this25->byteOffset = 0;
HXDLIN( 390)							_this25->length = array13->get_length();
HXDLIN( 390)							_this25->byteLength = (_this25->length * _this25->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this27 = ::haxe::io::Bytes_obj::alloc(_this25->byteLength);
HXDLIN( 390)							_this25->buffer = this27;
HXDLIN( 390)							_this25->copyFromArray(array13,null());
HXDLIN( 390)							this25 = _this25;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view6 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this26 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData6 = view6->buffer;
HXDLIN( 390)								int srcLength12 = view6->length;
HXDLIN( 390)								int srcByteOffset6 = view6->byteOffset;
HXDLIN( 390)								int srcElementSize6 = view6->bytesPerElement;
HXDLIN( 390)								int elementSize12 = _this26->bytesPerElement;
HXDLIN( 390)								if ((view6->type == _this26->type)) {
HXLINE( 390)									int srcLength13 = srcData6->length;
HXDLIN( 390)									int cloneLength6 = (srcLength13 - srcByteOffset6);
HXDLIN( 390)									 ::haxe::io::Bytes this28 = ::haxe::io::Bytes_obj::alloc(cloneLength6);
HXDLIN( 390)									_this26->buffer = this28;
HXDLIN( 390)									_this26->buffer->blit(0,srcData6,srcByteOffset6,cloneLength6);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this26->byteLength = (_this26->bytesPerElement * srcLength12);
HXDLIN( 390)								_this26->byteOffset = 0;
HXDLIN( 390)								_this26->length = srcLength12;
HXDLIN( 390)								this25 = _this26;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer3 )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this27 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset6 = 0;
HXDLIN( 390)									if ((in_byteOffset6 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset6,_this27->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength6 = buffer3->length;
HXDLIN( 390)									int elementSize13 = _this27->bytesPerElement;
HXDLIN( 390)									int newByteLength6 = bufferByteLength6;
HXDLIN( 390)									if (hx::IsNull( len3 )) {
HXLINE( 390)										newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength6,_this27->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength6 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength6 = (( (int)(len3) ) * _this27->bytesPerElement);
HXDLIN( 390)										int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 390)										if ((newRange6 > bufferByteLength6)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this27->buffer = buffer3;
HXDLIN( 390)									_this27->byteOffset = in_byteOffset6;
HXDLIN( 390)									_this27->byteLength = newByteLength6;
HXDLIN( 390)									_this27->length = ::Std_obj::_hx_int((( (Float)(newByteLength6) ) / ( (Float)(_this27->bytesPerElement) )));
HXDLIN( 390)									this25 = _this27;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data4 = this25;
HXLINE( 391)				{
HXLINE( 391)					int target4 = this->_hx___sideToTarget(3);
HXDLIN( 391)					int internalformat3 = this->_hx___internalFormat;
HXDLIN( 391)					int width4 = this->_hx___size;
HXDLIN( 391)					int height4 = this->_hx___size;
HXDLIN( 391)					int format4 = this->_hx___format;
HXDLIN( 391)					int type3 = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data4,null(),0);
HXDLIN( 391)						gl->texImage2D(target4,0,internalformat3,width4,height4,0,format4,type3,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements7 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer4 = null();
HXDLIN( 390)				::cpp::VirtualArray array14 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector7 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view7 = null();
HXDLIN( 390)				 ::Dynamic len4 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this29;
HXDLIN( 390)				if (hx::IsNotNull( elements7 )) {
HXLINE( 390)					this29 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements7,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array14 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this28 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this28->byteOffset = 0;
HXDLIN( 390)						_this28->length = array14->get_length();
HXDLIN( 390)						_this28->byteLength = (_this28->length * _this28->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this30 = ::haxe::io::Bytes_obj::alloc(_this28->byteLength);
HXDLIN( 390)						_this28->buffer = this30;
HXDLIN( 390)						_this28->copyFromArray(array14,null());
HXDLIN( 390)						this29 = _this28;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector7 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this29 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array15 = ( (::cpp::VirtualArray)(vector7->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this29->byteOffset = 0;
HXDLIN( 390)							_this29->length = array15->get_length();
HXDLIN( 390)							_this29->byteLength = (_this29->length * _this29->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this31 = ::haxe::io::Bytes_obj::alloc(_this29->byteLength);
HXDLIN( 390)							_this29->buffer = this31;
HXDLIN( 390)							_this29->copyFromArray(array15,null());
HXDLIN( 390)							this29 = _this29;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view7 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this30 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData7 = view7->buffer;
HXDLIN( 390)								int srcLength14 = view7->length;
HXDLIN( 390)								int srcByteOffset7 = view7->byteOffset;
HXDLIN( 390)								int srcElementSize7 = view7->bytesPerElement;
HXDLIN( 390)								int elementSize14 = _this30->bytesPerElement;
HXDLIN( 390)								if ((view7->type == _this30->type)) {
HXLINE( 390)									int srcLength15 = srcData7->length;
HXDLIN( 390)									int cloneLength7 = (srcLength15 - srcByteOffset7);
HXDLIN( 390)									 ::haxe::io::Bytes this32 = ::haxe::io::Bytes_obj::alloc(cloneLength7);
HXDLIN( 390)									_this30->buffer = this32;
HXDLIN( 390)									_this30->buffer->blit(0,srcData7,srcByteOffset7,cloneLength7);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this30->byteLength = (_this30->bytesPerElement * srcLength14);
HXDLIN( 390)								_this30->byteOffset = 0;
HXDLIN( 390)								_this30->length = srcLength14;
HXDLIN( 390)								this29 = _this30;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer4 )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this31 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset7 = 0;
HXDLIN( 390)									if ((in_byteOffset7 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset7,_this31->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength7 = buffer4->length;
HXDLIN( 390)									int elementSize15 = _this31->bytesPerElement;
HXDLIN( 390)									int newByteLength7 = bufferByteLength7;
HXDLIN( 390)									if (hx::IsNull( len4 )) {
HXLINE( 390)										newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength7,_this31->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength7 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength7 = (( (int)(len4) ) * _this31->bytesPerElement);
HXDLIN( 390)										int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 390)										if ((newRange7 > bufferByteLength7)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this31->buffer = buffer4;
HXDLIN( 390)									_this31->byteOffset = in_byteOffset7;
HXDLIN( 390)									_this31->byteLength = newByteLength7;
HXDLIN( 390)									_this31->length = ::Std_obj::_hx_int((( (Float)(newByteLength7) ) / ( (Float)(_this31->bytesPerElement) )));
HXDLIN( 390)									this29 = _this31;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data5 = this29;
HXLINE( 391)				{
HXLINE( 391)					int target5 = this->_hx___sideToTarget(4);
HXDLIN( 391)					int internalformat4 = this->_hx___internalFormat;
HXDLIN( 391)					int width5 = this->_hx___size;
HXDLIN( 391)					int height5 = this->_hx___size;
HXDLIN( 391)					int format5 = this->_hx___format;
HXDLIN( 391)					int type4 = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data5,null(),0);
HXDLIN( 391)						gl->texImage2D(target5,0,internalformat4,width5,height5,0,format5,type4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
HXLINE( 389)			{
HXLINE( 390)				 ::Dynamic elements8 = ((this->_hx___size * this->_hx___size) * 4);
HXDLIN( 390)				 ::haxe::io::Bytes buffer5 = null();
HXDLIN( 390)				::cpp::VirtualArray array16 = null();
HXDLIN( 390)				 ::openfl::_Vector::IntVector vector8 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView view8 = null();
HXDLIN( 390)				 ::Dynamic len5 = null();
HXDLIN( 390)				 ::lime::utils::ArrayBufferView this33;
HXDLIN( 390)				if (hx::IsNotNull( elements8 )) {
HXLINE( 390)					this33 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements8,4);
            				}
            				else {
HXLINE( 390)					if (hx::IsNotNull( array16 )) {
HXLINE( 390)						 ::lime::utils::ArrayBufferView _this32 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)						_this32->byteOffset = 0;
HXDLIN( 390)						_this32->length = array16->get_length();
HXDLIN( 390)						_this32->byteLength = (_this32->length * _this32->bytesPerElement);
HXDLIN( 390)						 ::haxe::io::Bytes this34 = ::haxe::io::Bytes_obj::alloc(_this32->byteLength);
HXDLIN( 390)						_this32->buffer = this34;
HXDLIN( 390)						_this32->copyFromArray(array16,null());
HXDLIN( 390)						this33 = _this32;
            					}
            					else {
HXLINE( 390)						if (hx::IsNotNull( vector8 )) {
HXLINE( 390)							 ::lime::utils::ArrayBufferView _this33 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)							::cpp::VirtualArray array17 = ( (::cpp::VirtualArray)(vector8->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
HXDLIN( 390)							_this33->byteOffset = 0;
HXDLIN( 390)							_this33->length = array17->get_length();
HXDLIN( 390)							_this33->byteLength = (_this33->length * _this33->bytesPerElement);
HXDLIN( 390)							 ::haxe::io::Bytes this35 = ::haxe::io::Bytes_obj::alloc(_this33->byteLength);
HXDLIN( 390)							_this33->buffer = this35;
HXDLIN( 390)							_this33->copyFromArray(array17,null());
HXDLIN( 390)							this33 = _this33;
            						}
            						else {
HXLINE( 390)							if (hx::IsNotNull( view8 )) {
HXLINE( 390)								 ::lime::utils::ArrayBufferView _this34 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)								 ::haxe::io::Bytes srcData8 = view8->buffer;
HXDLIN( 390)								int srcLength16 = view8->length;
HXDLIN( 390)								int srcByteOffset8 = view8->byteOffset;
HXDLIN( 390)								int srcElementSize8 = view8->bytesPerElement;
HXDLIN( 390)								int elementSize16 = _this34->bytesPerElement;
HXDLIN( 390)								if ((view8->type == _this34->type)) {
HXLINE( 390)									int srcLength17 = srcData8->length;
HXDLIN( 390)									int cloneLength8 = (srcLength17 - srcByteOffset8);
HXDLIN( 390)									 ::haxe::io::Bytes this36 = ::haxe::io::Bytes_obj::alloc(cloneLength8);
HXDLIN( 390)									_this34->buffer = this36;
HXDLIN( 390)									_this34->buffer->blit(0,srcData8,srcByteOffset8,cloneLength8);
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            								}
HXDLIN( 390)								_this34->byteLength = (_this34->bytesPerElement * srcLength16);
HXDLIN( 390)								_this34->byteOffset = 0;
HXDLIN( 390)								_this34->length = srcLength16;
HXDLIN( 390)								this33 = _this34;
            							}
            							else {
HXLINE( 390)								if (hx::IsNotNull( buffer5 )) {
HXLINE( 390)									 ::lime::utils::ArrayBufferView _this35 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 390)									int in_byteOffset8 = 0;
HXDLIN( 390)									if ((in_byteOffset8 < 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									if ((hx::Mod(in_byteOffset8,_this35->bytesPerElement) != 0)) {
HXLINE( 390)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 390)									int bufferByteLength8 = buffer5->length;
HXDLIN( 390)									int elementSize17 = _this35->bytesPerElement;
HXDLIN( 390)									int newByteLength8 = bufferByteLength8;
HXDLIN( 390)									if (hx::IsNull( len5 )) {
HXLINE( 390)										newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 390)										if ((hx::Mod(bufferByteLength8,_this35->bytesPerElement) != 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
HXDLIN( 390)										if ((newByteLength8 < 0)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
            									else {
HXLINE( 390)										newByteLength8 = (( (int)(len5) ) * _this35->bytesPerElement);
HXDLIN( 390)										int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 390)										if ((newRange8 > bufferByteLength8)) {
HXLINE( 390)											HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            										}
            									}
HXDLIN( 390)									_this35->buffer = buffer5;
HXDLIN( 390)									_this35->byteOffset = in_byteOffset8;
HXDLIN( 390)									_this35->byteLength = newByteLength8;
HXDLIN( 390)									_this35->length = ::Std_obj::_hx_int((( (Float)(newByteLength8) ) / ( (Float)(_this35->bytesPerElement) )));
HXDLIN( 390)									this33 = _this35;
            								}
            								else {
HXLINE( 390)									HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            								}
            							}
            						}
            					}
            				}
HXDLIN( 390)				 ::lime::utils::ArrayBufferView data6 = this33;
HXLINE( 391)				{
HXLINE( 391)					int target6 = this->_hx___sideToTarget(5);
HXDLIN( 391)					int internalformat5 = this->_hx___internalFormat;
HXDLIN( 391)					int width6 = this->_hx___size;
HXDLIN( 391)					int height6 = this->_hx___size;
HXDLIN( 391)					int format6 = this->_hx___format;
HXDLIN( 391)					int type5 = gl->UNSIGNED_BYTE;
HXDLIN( 391)					{
HXLINE( 391)						::lime::utils::_BytePointer::BytePointer_Impl__obj::set(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer,null(),data6,null(),0);
HXDLIN( 391)						gl->texImage2D(target6,0,internalformat5,width6,height6,0,format6,type5,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(::lime::graphics::_WebGL2RenderContext::WebGL2RenderContext_Impl__obj::_hx___tempPointer));
            					}
            				}
            			}
            		}
HXLINE( 396)		this->_hx___context->_hx___bindGLTextureCubeMap(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(CubeTexture_obj,_hx___uploadCompressedTextureFromByteArray,(void))


hx::ObjectPtr< CubeTexture_obj > CubeTexture_obj::__new( ::openfl::display3D::Context3D context,int size, ::Dynamic format,bool optimizeForRenderToTexture,int streamingLevels) {
	hx::ObjectPtr< CubeTexture_obj > __this = new CubeTexture_obj();
	__this->__construct(context,size,format,optimizeForRenderToTexture,streamingLevels);
	return __this;
}

hx::ObjectPtr< CubeTexture_obj > CubeTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context,int size, ::Dynamic format,bool optimizeForRenderToTexture,int streamingLevels) {
	CubeTexture_obj *__this = (CubeTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CubeTexture_obj), true, "openfl.display3D.textures.CubeTexture"));
	*(void **)__this = CubeTexture_obj::_hx_vtable;
	__this->__construct(context,size,format,optimizeForRenderToTexture,streamingLevels);
	return __this;
}

CubeTexture_obj::CubeTexture_obj()
{
}

hx::Val CubeTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__size") ) { return hx::Val( _hx___size ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__sideToTarget") ) { return hx::Val( _hx___sideToTarget_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uploadedSides") ) { return hx::Val( _hx___uploadedSides ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__getGLFramebuffer") ) { return hx::Val( _hx___getGLFramebuffer_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferSurface") ) { return hx::Val( _hx___framebufferSurface ); }
		if (HX_FIELD_EQ(inName,"uploadFromBitmapData") ) { return hx::Val( uploadFromBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { return hx::Val( uploadFromTypedArray_dyn() ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"uploadCompressedTextureFromByteArray") ) { return hx::Val( uploadCompressedTextureFromByteArray_dyn() ); }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"__uploadCompressedTextureFromByteArray") ) { return hx::Val( _hx___uploadCompressedTextureFromByteArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CubeTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__size") ) { _hx___size=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uploadedSides") ) { _hx___uploadedSides=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferSurface") ) { _hx___framebufferSurface=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CubeTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__framebufferSurface",e0,3b,24,cd));
	outFields->push(HX_("__size",e1,03,4c,fb));
	outFields->push(HX_("__uploadedSides",1c,d7,55,a3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CubeTexture_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(CubeTexture_obj,_hx___framebufferSurface),HX_("__framebufferSurface",e0,3b,24,cd)},
	{hx::fsInt,(int)offsetof(CubeTexture_obj,_hx___size),HX_("__size",e1,03,4c,fb)},
	{hx::fsInt,(int)offsetof(CubeTexture_obj,_hx___uploadedSides),HX_("__uploadedSides",1c,d7,55,a3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CubeTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String CubeTexture_obj_sMemberFields[] = {
	HX_("__framebufferSurface",e0,3b,24,cd),
	HX_("__size",e1,03,4c,fb),
	HX_("__uploadedSides",1c,d7,55,a3),
	HX_("uploadCompressedTextureFromByteArray",ce,c7,86,c5),
	HX_("uploadFromBitmapData",a4,85,65,0d),
	HX_("uploadFromByteArray",e6,17,1b,ee),
	HX_("uploadFromTypedArray",ba,7c,f4,d1),
	HX_("__getGLFramebuffer",92,f3,72,c9),
	HX_("__setSamplerState",8b,e7,cf,5d),
	HX_("__sideToTarget",03,57,2b,63),
	HX_("__uploadCompressedTextureFromByteArray",ee,aa,5f,fa),
	::String(null()) };

hx::Class CubeTexture_obj::__mClass;

void CubeTexture_obj::__register()
{
	CubeTexture_obj _hx_dummy;
	CubeTexture_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display3D.textures.CubeTexture",09,1a,15,3a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CubeTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CubeTexture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CubeTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CubeTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
