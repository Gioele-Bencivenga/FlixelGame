// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_html_HTMLParser
#include <openfl/_internal/formats/html/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DisplayObjectType
#include <openfl/_internal/renderer/DisplayObjectType.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_808_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",808,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_852_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",852,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_879_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",879,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_905_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",905,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_955_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",955,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1010_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",1010,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1042_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",1042,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1066_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",1066,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1099_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",1099,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1130_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",1130,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1156_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",1156,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1195_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",1195,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1234_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",1234,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1328_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",1328,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1349_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",1349,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1366_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",1366,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1422_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1422,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1552_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",1552,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1573___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",1573,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1578___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",1578,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1589___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",1589,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1613___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",1613,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1620___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",1620,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1643___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",1643,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1650___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",1650,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1673___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",1673,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1687___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",1687,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1717___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",1717,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1739___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",1739,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1864___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1864,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1869___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1869,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1886___getCharBoundaries,"openfl.text.TextField","__getCharBoundaries",0x097fccb0,"openfl.text.TextField.__getCharBoundaries","openfl/text/TextField.hx",1886,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1918___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1918,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1955___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1955,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1971___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1971,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2020___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",2020,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2052___getRenderBounds,"openfl.text.TextField","__getRenderBounds",0xe45ea05d,"openfl.text.TextField.__getRenderBounds","openfl/text/TextField.hx",2052,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2076___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",2076,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2100___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",2100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2116___replaceSelectedText,"openfl.text.TextField","__replaceSelectedText",0x229f8d38,"openfl.text.TextField.__replaceSelectedText","openfl/text/TextField.hx",2116,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2147___replaceText,"openfl.text.TextField","__replaceText",0x6f2a5d3d,"openfl.text.TextField.__replaceText","openfl/text/TextField.hx",2147,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2269___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",2269,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2277___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",2277,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2293___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",2293,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2309___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",2309,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2320___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",2320,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2350___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",2350,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2391___updateScrollV,"openfl.text.TextField","__updateScrollV",0x4ea991dc,"openfl.text.TextField.__updateScrollV","openfl/text/TextField.hx",2391,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2432___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",2432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2469___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",2469,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2477_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",2477,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2481_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",2481,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2492_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",2492,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2496_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",2496,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2509_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",2509,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2513_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",2513,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2525_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",2525,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2529_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",2529,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2541_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",2541,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2545_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",2545,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2557_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",2557,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2561_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",2561,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2572_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",2572,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2580_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",2580,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2585_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",2585,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2589_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",2589,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2601_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",2601,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2605_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",2605,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2621_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",2621,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2633_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",2633,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2638_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",2638,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2650_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",2650,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2654_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",2654,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2660_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",2660,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2679_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",2679,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2684_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",2684,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2736_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2736,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2747_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2747,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2751_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2751,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2765_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2765,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2772_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2772,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2780_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2780,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2785_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2785,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2790_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2790,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2794_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2794,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2809_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2809,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2817_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2817,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2821_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2821,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2833_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2833,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2837_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2837,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2855_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2855,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2859_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2859,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2874_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2874,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2878_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2878,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2896_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2896,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2901_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2901,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2906_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2906,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2910_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2910,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2922_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2922,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2927_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2927,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2931_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2931,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2964_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2964,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2968_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2968,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2984_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2984,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2990_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2990,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2997_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2997,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3001_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",3001,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3028_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",3028,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3034_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",3034,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3050_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",3050,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3054_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",3054,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3067_get_x,"openfl.text.TextField","get_x",0xd93e9aab,"openfl.text.TextField.get_x","openfl/text/TextField.hx",3067,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3071_set_x,"openfl.text.TextField","set_x",0xc20d90b7,"openfl.text.TextField.set_x","openfl/text/TextField.hx",3071,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3078_get_y,"openfl.text.TextField","get_y",0xd93e9aac,"openfl.text.TextField.get_y","openfl/text/TextField.hx",3078,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3082_set_y,"openfl.text.TextField","set_y",0xc20d90b8,"openfl.text.TextField.set_y","openfl/text/TextField.hx",3082,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3089_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",3089,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3121_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",3121,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3161_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",3161,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3166_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",3166,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3173_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",3173,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3206_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",3206,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3217_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",3217,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3237_this_onMouseWheel,"openfl.text.TextField","this_onMouseWheel",0xdbfcc352,"openfl.text.TextField.this_onMouseWheel","openfl/text/TextField.hx",3237,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3243_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",3243,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_3484_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",3484,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_130_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",130,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_808_new)
HXLINE( 809)		super::__construct();
HXLINE( 811)		this->_hx___type = ::openfl::_internal::renderer::DisplayObjectType_obj::TEXTFIELD_dyn();
HXLINE( 813)		this->_hx___caretIndex = -1;
HXLINE( 814)		this->_hx___displayAsPassword = false;
HXLINE( 815)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 816)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 817)		this->_hx___layoutDirty = true;
HXLINE( 818)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 819)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 820)		this->_hx___mouseWheelEnabled = true;
HXLINE( 821)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 823)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 825)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),12,0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),3,0,0,0,0);
HXLINE( 826)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = 0;
HXLINE( 827)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 828)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = 0;
HXLINE( 829)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 832)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 833)		{
HXLINE( 833)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 833)			( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,0,0));
            		}
HXLINE( 835)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 836)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 837)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 838)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
HXLINE( 839)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->this_onMouseWheel_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_852_appendText)
HXLINE( 853)		bool _hx_tmp;
HXDLIN( 853)		if (hx::IsNotNull( text )) {
HXLINE( 853)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 853)			_hx_tmp = true;
            		}
HXDLIN( 853)		if (_hx_tmp) {
HXLINE( 853)			return;
            		}
HXLINE( 855)		this->_hx___dirty = true;
HXLINE( 856)		this->_hx___layoutDirty = true;
HXLINE( 857)		if (!(this->_hx___renderDirty)) {
HXLINE( 857)			this->_hx___renderDirty = true;
HXDLIN( 857)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 859)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 861)		::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 861)		( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
HXLINE( 863)		this->_hx___updateScrollV();
HXLINE( 864)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_879_getCharBoundaries)
HXLINE( 880)		bool _hx_tmp;
HXDLIN( 880)		if ((charIndex >= 0)) {
HXLINE( 880)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE( 880)			_hx_tmp = true;
            		}
HXDLIN( 880)		if (_hx_tmp) {
HXLINE( 880)			return null();
            		}
HXLINE( 882)		 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 884)		if (this->_hx___getCharBoundaries(charIndex,rect)) {
HXLINE( 886)			return rect;
            		}
            		else {
HXLINE( 890)			return null();
            		}
HXLINE( 884)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_905_getCharIndexAtPoint)
HXLINE( 906)		bool _hx_tmp;
HXDLIN( 906)		bool _hx_tmp1;
HXDLIN( 906)		bool _hx_tmp2;
HXDLIN( 906)		if (!((x <= 2))) {
HXLINE( 906)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE( 906)			_hx_tmp2 = true;
            		}
HXDLIN( 906)		if (!(_hx_tmp2)) {
HXLINE( 906)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE( 906)			_hx_tmp1 = true;
            		}
HXDLIN( 906)		if (!(_hx_tmp1)) {
HXLINE( 906)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE( 906)			_hx_tmp = true;
            		}
HXDLIN( 906)		if (_hx_tmp) {
HXLINE( 906)			return -1;
            		}
HXLINE( 908)		this->_hx___updateLayout();
HXLINE( 910)		x = (x + this->get_scrollH());
HXLINE( 912)		{
HXLINE( 912)			int _g = 0;
HXDLIN( 912)			int _g1 = (this->get_scrollV() - 1);
HXDLIN( 912)			while((_g < _g1)){
HXLINE( 912)				_g = (_g + 1);
HXDLIN( 912)				int i = (_g - 1);
HXLINE( 914)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE( 917)		{
HXLINE( 917)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN( 917)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 917)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 919)				bool _hx_tmp3;
HXDLIN( 919)				if ((y >= group1->offsetY)) {
HXLINE( 919)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE( 919)					_hx_tmp3 = false;
            				}
HXDLIN( 919)				if (_hx_tmp3) {
HXLINE( 921)					bool _hx_tmp4;
HXDLIN( 921)					if ((x >= group1->offsetX)) {
HXLINE( 921)						_hx_tmp4 = (x <= (group1->offsetX + group1->width));
            					}
            					else {
HXLINE( 921)						_hx_tmp4 = false;
            					}
HXDLIN( 921)					if (_hx_tmp4) {
HXLINE( 923)						Float advance = ((Float)0.0);
HXLINE( 925)						{
HXLINE( 925)							int _g3 = 0;
HXDLIN( 925)							int _g4 = group1->positions->length;
HXDLIN( 925)							while((_g3 < _g4)){
HXLINE( 925)								_g3 = (_g3 + 1);
HXDLIN( 925)								int i1 = (_g3 - 1);
HXLINE( 927)								Float advance1;
HXDLIN( 927)								bool advance2;
HXDLIN( 927)								if ((i1 >= 0)) {
HXLINE( 927)									advance2 = (i1 < group1->positions->length);
            								}
            								else {
HXLINE( 927)									advance2 = false;
            								}
HXDLIN( 927)								if (advance2) {
HXLINE( 927)									advance1 = group1->positions->__get(i1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 927)									advance1 = ( (Float)(0) );
            								}
HXDLIN( 927)								advance = (advance + advance1);
HXLINE( 929)								if ((x <= (group1->offsetX + advance))) {
HXLINE( 931)									return (group1->startIndex + i1);
            								}
            							}
            						}
HXLINE( 935)						return group1->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 940)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_955_getFirstCharInParagraph)
HXLINE( 956)		bool _hx_tmp;
HXDLIN( 956)		if ((charIndex >= 0)) {
HXLINE( 956)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE( 956)			_hx_tmp = true;
            		}
HXDLIN( 956)		if (_hx_tmp) {
HXLINE( 956)			return -1;
            		}
HXLINE( 958)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 959)		int startIndex = 0;
HXLINE( 961)		while((index > -1)){
HXLINE( 963)			if ((index < charIndex)) {
HXLINE( 965)				startIndex = (index + 1);
            			}
            			else {
HXLINE( 967)				if ((index >= charIndex)) {
HXLINE( 969)					goto _hx_goto_7;
            				}
            			}
HXLINE( 972)			index = this->_hx___textEngine->getLineBreakIndex((index + 1));
            		}
            		_hx_goto_7:;
HXLINE( 975)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1010_getLineIndexAtPoint)
HXLINE(1011)		this->_hx___updateLayout();
HXLINE(1013)		bool _hx_tmp;
HXDLIN(1013)		bool _hx_tmp1;
HXDLIN(1013)		bool _hx_tmp2;
HXDLIN(1013)		if (!((x <= 2))) {
HXLINE(1013)			_hx_tmp2 = (x > (this->get_width() + 4));
            		}
            		else {
HXLINE(1013)			_hx_tmp2 = true;
            		}
HXDLIN(1013)		if (!(_hx_tmp2)) {
HXLINE(1013)			_hx_tmp1 = (y <= 0);
            		}
            		else {
HXLINE(1013)			_hx_tmp1 = true;
            		}
HXDLIN(1013)		if (!(_hx_tmp1)) {
HXLINE(1013)			_hx_tmp = (y > (this->get_height() + 4));
            		}
            		else {
HXLINE(1013)			_hx_tmp = true;
            		}
HXDLIN(1013)		if (_hx_tmp) {
HXLINE(1013)			return -1;
            		}
HXLINE(1015)		{
HXLINE(1015)			int _g = 0;
HXDLIN(1015)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1015)			while((_g < _g1)){
HXLINE(1015)				_g = (_g + 1);
HXDLIN(1015)				int i = (_g - 1);
HXLINE(1017)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1020)		{
HXLINE(1020)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1020)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1020)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1022)				bool _hx_tmp3;
HXDLIN(1022)				if ((y >= group1->offsetY)) {
HXLINE(1022)					_hx_tmp3 = (y <= (group1->offsetY + group1->height));
            				}
            				else {
HXLINE(1022)					_hx_tmp3 = false;
            				}
HXDLIN(1022)				if (_hx_tmp3) {
HXLINE(1024)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1028)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1042_getLineIndexOfChar)
HXLINE(1043)		bool _hx_tmp;
HXDLIN(1043)		if ((charIndex >= 0)) {
HXLINE(1043)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1043)			_hx_tmp = true;
            		}
HXDLIN(1043)		if (_hx_tmp) {
HXLINE(1043)			return -1;
            		}
HXLINE(1045)		this->_hx___updateLayout();
HXLINE(1047)		{
HXLINE(1047)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1047)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1047)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1049)				bool _hx_tmp1;
HXDLIN(1049)				if ((group1->startIndex <= charIndex)) {
HXLINE(1049)					_hx_tmp1 = (group1->endIndex >= charIndex);
            				}
            				else {
HXLINE(1049)					_hx_tmp1 = false;
            				}
HXDLIN(1049)				if (_hx_tmp1) {
HXLINE(1051)					return group1->lineIndex;
            				}
            			}
            		}
HXLINE(1055)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1066_getLineLength)
HXLINE(1067)		this->_hx___updateLayout();
HXLINE(1069)		bool _hx_tmp;
HXDLIN(1069)		if ((lineIndex >= 0)) {
HXLINE(1069)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1069)			_hx_tmp = true;
            		}
HXDLIN(1069)		if (_hx_tmp) {
HXLINE(1069)			return 0;
            		}
HXLINE(1071)		int startIndex = -1;
HXLINE(1072)		int endIndex = -1;
HXLINE(1074)		{
HXLINE(1074)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1074)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1074)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1076)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1078)					if ((startIndex == -1)) {
HXLINE(1078)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1080)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1082)						endIndex = group1->startIndex;
HXLINE(1083)						goto _hx_goto_14;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE(1087)		if ((endIndex == -1)) {
HXLINE(1087)			endIndex = this->_hx___text.length;
            		}
HXLINE(1088)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1099_getLineMetrics)
HXLINE(1100)		this->_hx___updateLayout();
HXLINE(1102)		Float ascender = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE(1103)		Float descender = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE(1104)		Float leading = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE(1105)		Float lineHeight = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE(1106)		Float lineWidth = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE(1110)		Float margin;
HXDLIN(1110)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==0) ){
HXLINE(1110)			margin = ((this->_hx___textEngine->width - lineWidth) / ( (Float)(2) ));
HXDLIN(1110)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==1) ||  (_hx_switch_0==4) ){
HXLINE(1110)			margin = ((this->_hx___textEngine->width - lineWidth) - ( (Float)(2) ));
HXDLIN(1110)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==2) ||  (_hx_switch_0==3) ||  (_hx_switch_0==5) ){
HXLINE(1110)			margin = ( (Float)(2) );
HXDLIN(1110)			goto _hx_goto_16;
            		}
            		_hx_goto_16:;
HXLINE(1117)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1130_getLineOffset)
HXLINE(1131)		this->_hx___updateLayout();
HXLINE(1133)		bool _hx_tmp;
HXDLIN(1133)		if ((lineIndex >= 0)) {
HXLINE(1133)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1133)			_hx_tmp = true;
            		}
HXDLIN(1133)		if (_hx_tmp) {
HXLINE(1133)			return -1;
            		}
HXLINE(1135)		{
HXLINE(1135)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1135)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1135)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1137)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1139)					return group1->startIndex;
            				}
            			}
            		}
HXLINE(1143)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1156_getLineText)
HXLINE(1157)		this->_hx___updateLayout();
HXLINE(1159)		bool _hx_tmp;
HXDLIN(1159)		if ((lineIndex >= 0)) {
HXLINE(1159)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1159)			_hx_tmp = true;
            		}
HXDLIN(1159)		if (_hx_tmp) {
HXLINE(1159)			return null();
            		}
HXLINE(1161)		int startIndex = -1;
HXLINE(1162)		int endIndex = -1;
HXLINE(1164)		{
HXLINE(1164)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1164)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1164)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1166)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1168)					if ((startIndex == -1)) {
HXLINE(1168)						startIndex = group1->startIndex;
            					}
            				}
            				else {
HXLINE(1170)					if ((group1->lineIndex == (lineIndex + 1))) {
HXLINE(1172)						endIndex = group1->startIndex;
HXLINE(1173)						goto _hx_goto_20;
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE(1177)		if ((endIndex == -1)) {
HXLINE(1177)			endIndex = this->_hx___text.length;
            		}
HXLINE(1179)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1195_getParagraphLength)
HXLINE(1196)		bool _hx_tmp;
HXDLIN(1196)		if ((charIndex >= 0)) {
HXLINE(1196)			_hx_tmp = (charIndex > this->get_text().length);
            		}
            		else {
HXLINE(1196)			_hx_tmp = true;
            		}
HXDLIN(1196)		if (_hx_tmp) {
HXLINE(1196)			return -1;
            		}
HXLINE(1198)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE(1200)		if ((charIndex >= this->get_text().length)) {
HXLINE(1200)			return ((this->get_text().length - startIndex) + 1);
            		}
HXLINE(1202)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + 1);
HXLINE(1204)		if ((endIndex == 0)) {
HXLINE(1204)			endIndex = this->_hx___text.length;
            		}
HXLINE(1205)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(-1);
            		int endIndex = __o_endIndex.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1234_getTextFormat)
HXLINE(1235)		 ::openfl::text::TextFormat format = null();
HXLINE(1237)		bool _hx_tmp;
HXDLIN(1237)		bool _hx_tmp1;
HXDLIN(1237)		bool _hx_tmp2;
HXDLIN(1237)		if ((beginIndex < this->get_text().length)) {
HXLINE(1237)			_hx_tmp2 = (beginIndex < -1);
            		}
            		else {
HXLINE(1237)			_hx_tmp2 = true;
            		}
HXDLIN(1237)		if (!(_hx_tmp2)) {
HXLINE(1237)			_hx_tmp1 = (endIndex > this->get_text().length);
            		}
            		else {
HXLINE(1237)			_hx_tmp1 = true;
            		}
HXDLIN(1237)		if (!(_hx_tmp1)) {
HXLINE(1237)			_hx_tmp = (endIndex < -1);
            		}
            		else {
HXLINE(1237)			_hx_tmp = true;
            		}
HXDLIN(1237)		if (_hx_tmp) {
HXLINE(1238)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds",37,5a,d3,87)));
            		}
HXLINE(1240)		if ((beginIndex == -1)) {
HXLINE(1240)			beginIndex = 0;
            		}
HXLINE(1241)		if ((endIndex == -1)) {
HXLINE(1241)			endIndex = this->get_text().length;
            		}
HXLINE(1243)		if ((beginIndex >= endIndex)) {
HXLINE(1243)			return  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1245)		{
HXLINE(1245)			 ::Dynamic group = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(1245)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1245)				 ::openfl::_internal::text::TextFormatRange group1 = ( ( ::openfl::_internal::text::TextFormatRange)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1247)				bool _hx_tmp3;
HXDLIN(1247)				bool _hx_tmp4;
HXDLIN(1247)				if ((group1->start <= beginIndex)) {
HXLINE(1247)					_hx_tmp4 = (group1->end > beginIndex);
            				}
            				else {
HXLINE(1247)					_hx_tmp4 = false;
            				}
HXDLIN(1247)				if (!(_hx_tmp4)) {
HXLINE(1247)					if ((group1->start < endIndex)) {
HXLINE(1247)						_hx_tmp3 = (group1->end >= endIndex);
            					}
            					else {
HXLINE(1247)						_hx_tmp3 = false;
            					}
            				}
            				else {
HXLINE(1247)					_hx_tmp3 = true;
            				}
HXDLIN(1247)				if (_hx_tmp3) {
HXLINE(1249)					if (hx::IsNull( format )) {
HXLINE(1251)						format = group1->format->clone();
            					}
            					else {
HXLINE(1255)						if ((group1->format->font != format->font)) {
HXLINE(1255)							format->font = null();
            						}
HXLINE(1256)						if (hx::IsNotEq( group1->format->size,format->size )) {
HXLINE(1256)							format->size = null();
            						}
HXLINE(1257)						if (hx::IsNotEq( group1->format->color,format->color )) {
HXLINE(1257)							format->color = null();
            						}
HXLINE(1258)						if (hx::IsNotEq( group1->format->bold,format->bold )) {
HXLINE(1258)							format->bold = null();
            						}
HXLINE(1259)						if (hx::IsNotEq( group1->format->italic,format->italic )) {
HXLINE(1259)							format->italic = null();
            						}
HXLINE(1260)						if (hx::IsNotEq( group1->format->underline,format->underline )) {
HXLINE(1260)							format->underline = null();
            						}
HXLINE(1261)						if ((group1->format->url != format->url)) {
HXLINE(1261)							format->url = null();
            						}
HXLINE(1262)						if ((group1->format->target != format->target)) {
HXLINE(1262)							format->target = null();
            						}
HXLINE(1263)						if (hx::IsNotEq( group1->format->align,format->align )) {
HXLINE(1263)							format->align = null();
            						}
HXLINE(1264)						if (hx::IsNotEq( group1->format->leftMargin,format->leftMargin )) {
HXLINE(1264)							format->leftMargin = null();
            						}
HXLINE(1265)						if (hx::IsNotEq( group1->format->rightMargin,format->rightMargin )) {
HXLINE(1265)							format->rightMargin = null();
            						}
HXLINE(1266)						if (hx::IsNotEq( group1->format->indent,format->indent )) {
HXLINE(1266)							format->indent = null();
            						}
HXLINE(1267)						if (hx::IsNotEq( group1->format->leading,format->leading )) {
HXLINE(1267)							format->leading = null();
            						}
HXLINE(1268)						if (hx::IsNotEq( group1->format->blockIndent,format->blockIndent )) {
HXLINE(1268)							format->blockIndent = null();
            						}
HXLINE(1269)						if (hx::IsNotEq( group1->format->bullet,format->bullet )) {
HXLINE(1269)							format->bullet = null();
            						}
HXLINE(1270)						if (hx::IsNotEq( group1->format->kerning,format->kerning )) {
HXLINE(1270)							format->kerning = null();
            						}
HXLINE(1271)						if (hx::IsNotEq( group1->format->letterSpacing,format->letterSpacing )) {
HXLINE(1271)							format->letterSpacing = null();
            						}
HXLINE(1272)						if (hx::IsNotEq( group1->format->tabStops,format->tabStops )) {
HXLINE(1272)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE(1277)		if (hx::IsNull( format )) {
HXLINE(1277)			format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1278)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1328_replaceSelectedText)
HXDLIN(1328)		this->_hx___replaceSelectedText(value,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1349_replaceText)
HXDLIN(1349)		this->_hx___replaceText(beginIndex,endIndex,newText,false);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1366_setSelection)
HXLINE(1367)		this->_hx___selectionIndex = beginIndex;
HXLINE(1368)		this->_hx___caretIndex = endIndex;
HXLINE(1370)		this->_hx___updateScrollV();
HXLINE(1372)		this->_hx___stopCursorTimer();
HXLINE(1373)		this->_hx___startCursorTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1422_setTextFormat)
HXLINE(1423)		int max = this->get_text().length;
HXLINE(1424)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(1426)		if ((beginIndex < 0)) {
HXLINE(1426)			beginIndex = 0;
            		}
HXLINE(1427)		if ((endIndex < 0)) {
HXLINE(1427)			endIndex = 0;
            		}
HXLINE(1429)		if ((endIndex == 0)) {
HXLINE(1431)			if ((beginIndex == 0)) {
HXLINE(1433)				endIndex = max;
            			}
            			else {
HXLINE(1437)				endIndex = (beginIndex + 1);
            			}
            		}
HXLINE(1441)		if ((endIndex < beginIndex)) {
HXLINE(1441)			return;
            		}
HXLINE(1443)		bool _hx_tmp;
HXDLIN(1443)		if ((beginIndex == 0)) {
HXLINE(1443)			_hx_tmp = (endIndex >= max);
            		}
            		else {
HXLINE(1443)			_hx_tmp = false;
            		}
HXDLIN(1443)		if (_hx_tmp) {
HXLINE(1447)			this->_hx___textFormat->_hx___merge(format);
HXLINE(1449)			{
HXLINE(1449)				int _g = 0;
HXDLIN(1449)				int _g1 = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN(1449)				while((_g < _g1)){
HXLINE(1449)					_g = (_g + 1);
HXDLIN(1449)					int i = (_g - 1);
HXLINE(1451)					range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1452)					range->format->_hx___merge(this->_hx___textFormat);
            				}
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1552_setTextFormat)
HXLINE(1553)				bool _hx_tmp3;
HXDLIN(1553)				if ((a->start >= b->start)) {
HXLINE(1553)					_hx_tmp3 = (a->end < b->end);
            				}
            				else {
HXLINE(1553)					_hx_tmp3 = true;
            				}
HXDLIN(1553)				if (_hx_tmp3) {
HXLINE(1555)					return -1;
            				}
            				else {
HXLINE(1557)					bool _hx_tmp4;
HXDLIN(1557)					if ((a->start <= b->start)) {
HXLINE(1557)						_hx_tmp4 = (a->end > b->end);
            					}
            					else {
HXLINE(1557)						_hx_tmp4 = true;
            					}
HXDLIN(1557)					if (_hx_tmp4) {
HXLINE(1559)						return 1;
            					}
            				}
HXLINE(1562)				return 0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1457)			int index = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE(1458)			int searchIndex;
HXLINE(1460)			while((index > 0)){
HXLINE(1462)				index = (index - 1);
HXLINE(1463)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1465)				bool _hx_tmp1;
HXDLIN(1465)				if ((range->start == beginIndex)) {
HXLINE(1465)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE(1465)					_hx_tmp1 = false;
            				}
HXDLIN(1465)				if (_hx_tmp1) {
HXLINE(1469)					range->format = this->_hx___textFormat->clone();
HXLINE(1470)					range->format->_hx___merge(format);
HXLINE(1472)					this->_hx___dirty = true;
HXLINE(1473)					this->_hx___layoutDirty = true;
HXLINE(1474)					if (!(this->_hx___renderDirty)) {
HXLINE(1474)						this->_hx___renderDirty = true;
HXDLIN(1474)						this->_hx___setParentRenderDirty();
            					}
HXLINE(1476)					return;
            				}
HXLINE(1479)				bool _hx_tmp2;
HXDLIN(1479)				if ((range->start >= beginIndex)) {
HXLINE(1479)					_hx_tmp2 = (range->end <= endIndex);
            				}
            				else {
HXLINE(1479)					_hx_tmp2 = false;
            				}
HXDLIN(1479)				if (_hx_tmp2) {
HXLINE(1483)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,0);
HXLINE(1485)					if ((searchIndex > -1)) {
HXLINE(1487)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,1);
            					}
            				}
            			}
HXLINE(1492)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN(1492)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE(1496)			if ((beginIndex > 0)) {
HXLINE(1498)				int _g2 = 0;
HXDLIN(1498)				int _g11 = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN(1498)				while((_g2 < _g11)){
HXLINE(1498)					_g2 = (_g2 + 1);
HXDLIN(1498)					int i1 = (_g2 - 1);
HXLINE(1500)					range = this->_hx___textEngine->textFormatRanges->get(i1).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1502)					if ((range->end >= beginIndex)) {
HXLINE(1504)						prevRange = range;
HXLINE(1506)						goto _hx_goto_30;
            					}
            				}
            				_hx_goto_30:;
            			}
HXLINE(1511)			if ((endIndex < max)) {
HXLINE(1513)				int ni = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE(1515)				while(true){
HXLINE(1515)					ni = (ni - 1);
HXDLIN(1515)					if (!((ni >= 0))) {
HXLINE(1515)						goto _hx_goto_31;
            					}
HXLINE(1517)					range = this->_hx___textEngine->textFormatRanges->get(ni).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1519)					if ((range->start <= endIndex)) {
HXLINE(1521)						nextRange = range;
HXLINE(1523)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXLINE(1528)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE(1532)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN(1532)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE(1533)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE(1536)			if (hx::IsNotNull( prevRange )) {
HXLINE(1538)				prevRange->end = beginIndex;
            			}
HXLINE(1541)			if (hx::IsNotNull( nextRange )) {
HXLINE(1543)				nextRange->start = endIndex;
            			}
HXLINE(1546)			 ::openfl::text::TextFormat textFormat = this->_hx___textFormat->clone();
HXLINE(1547)			textFormat->_hx___merge(format);
HXLINE(1549)			{
HXLINE(1549)				::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(1549)				( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex));
            			}
HXLINE(1551)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE(1566)		this->_hx___dirty = true;
HXLINE(1567)		this->_hx___layoutDirty = true;
HXLINE(1568)		if (!(this->_hx___renderDirty)) {
HXLINE(1568)			this->_hx___renderDirty = true;
HXDLIN(1568)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1573___allowMouseFocus)
HXDLIN(1573)		bool _hx_tmp;
HXDLIN(1573)		if (hx::IsNotEq( this->_hx___textEngine->type,1 )) {
HXDLIN(1573)			_hx_tmp = this->get_tabEnabled();
            		}
            		else {
HXDLIN(1573)			_hx_tmp = true;
            		}
HXDLIN(1573)		if (!(_hx_tmp)) {
HXDLIN(1573)			return this->get_selectable();
            		}
            		else {
HXDLIN(1573)			return true;
            		}
HXDLIN(1573)		return false;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1578___caretBeginningOfLine)
HXDLIN(1578)		bool _hx_tmp;
HXDLIN(1578)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN(1578)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN(1578)			_hx_tmp = true;
            		}
HXDLIN(1578)		if (_hx_tmp) {
HXLINE(1580)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE(1584)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1589___caretEndOfLine)
HXLINE(1590)		int lineIndex;
HXLINE(1592)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1594)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE(1598)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            		}
HXLINE(1601)		if ((lineIndex < (this->_hx___textEngine->numLines - 1))) {
HXLINE(1603)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + 1)) - 1);
            		}
            		else {
HXLINE(1607)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1613___caretNextCharacter)
HXDLIN(1613)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE(1615)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1620___caretNextLine)
HXLINE(1621)		if (hx::IsNull( lineIndex )) {
HXLINE(1623)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1626)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - 1) )) {
HXLINE(1628)			if (hx::IsNull( caretIndex )) {
HXLINE(1630)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1633)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(( (int)(caretIndex) ),(lineIndex + 1));
            		}
            		else {
HXLINE(1637)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1643___caretPreviousCharacter)
HXDLIN(1643)		if ((this->_hx___caretIndex > 0)) {
HXLINE(1645)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1650___caretPreviousLine)
HXLINE(1651)		if (hx::IsNull( lineIndex )) {
HXLINE(1653)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE(1656)		if (hx::IsGreater( lineIndex,0 )) {
HXLINE(1658)			if (hx::IsNull( caretIndex )) {
HXLINE(1660)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE(1663)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(( (int)(caretIndex) ),(( (int)(lineIndex) ) - 1));
            		}
            		else {
HXLINE(1667)			this->_hx___caretIndex = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1673___disableInput)
HXDLIN(1673)		bool _hx_tmp;
HXDLIN(1673)		if (this->_hx___inputEnabled) {
HXDLIN(1673)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(1673)			_hx_tmp = false;
            		}
HXDLIN(1673)		if (_hx_tmp) {
HXLINE(1676)			this->stage->window->_hx___backend->setTextInputEnabled(false);
HXLINE(1677)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1678)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1681)			this->_hx___inputEnabled = false;
HXLINE(1682)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1687___dispatch)
HXLINE(1688)		bool _hx_tmp;
HXDLIN(1688)		if ((event->eventPhase == 2)) {
HXLINE(1688)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE(1688)			_hx_tmp = false;
            		}
HXDLIN(1688)		if (_hx_tmp) {
HXLINE(1690)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE(1691)			Float group = this->get_mouseX();
HXDLIN(1691)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1693)			if (hx::IsNotNull( group1 )) {
HXLINE(1695)				::String url = group1->format->url;
HXLINE(1697)				bool _hx_tmp1;
HXDLIN(1697)				if (hx::IsNotNull( url )) {
HXLINE(1697)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1697)					_hx_tmp1 = false;
            				}
HXDLIN(1697)				if (_hx_tmp1) {
HXLINE(1699)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE(1701)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr(6,null())));
            					}
            					else {
HXLINE(1705)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE(1711)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1717___enableInput)
HXDLIN(1717)		if (hx::IsNotNull( this->stage )) {
HXLINE(1719)			this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1721)			if (!(this->_hx___inputEnabled)) {
HXLINE(1723)				this->stage->window->_hx___backend->setTextInputEnabled(true);
HXLINE(1725)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1727)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1728)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1731)				this->_hx___inputEnabled = true;
HXLINE(1732)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1739___fromSymbol)
HXLINE(1740)		this->_hx___symbol = symbol;
HXLINE(1742)		this->set_width(symbol->width);
HXLINE(1743)		this->set_height(symbol->height);
HXLINE(1745)		this->_hx___offsetX = symbol->x;
HXLINE(1746)		this->_hx___offsetY = symbol->y;
HXLINE(1748)		this->set_multiline(symbol->multiline);
HXLINE(1749)		this->set_wordWrap(symbol->wordWrap);
HXLINE(1750)		this->set_displayAsPassword(symbol->password);
HXLINE(1752)		if (symbol->border) {
HXLINE(1754)			this->set_border(true);
HXLINE(1755)			this->set_background(true);
            		}
HXLINE(1758)		this->set_selectable(symbol->selectable);
HXLINE(1760)		if (symbol->input) {
HXLINE(1762)			this->set_type(1);
            		}
HXLINE(1765)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1766)		if (hx::IsNotNull( symbol->color )) {
HXLINE(1766)			format->color = (( (int)(symbol->color) ) & 16777215);
            		}
HXLINE(1767)		format->size = ::Math_obj::round((( (Float)(symbol->fontHeight) ) / ( (Float)(20) )));
HXLINE(1769)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID)) );
HXLINE(1771)		if (hx::IsNotNull( font )) {
HXLINE(1781)			format->_hx___ascent = ((( (Float)(font->ascent) ) / ( (Float)(20) )) / ( (Float)(1024) ));
HXLINE(1782)			format->_hx___descent = ((( (Float)(font->descent) ) / ( (Float)(20) )) / ( (Float)(1024) ));
            		}
HXLINE(1785)		format->font = symbol->fontName;
HXLINE(1787)		bool found = false;
HXLINE(1789)		{
HXLINE(1789)			::String _g = format->font;
HXDLIN(1789)			if (hx::IsNull( _g )) {
HXLINE(1792)				found = true;
            			}
            			else {
HXLINE(1789)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE(1792)					found = true;
HXDLIN(1792)					goto _hx_goto_45;
            				}
            				/* default */{
HXLINE(1795)					int _g1 = 0;
HXDLIN(1795)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1795)					while((_g1 < _g11->length)){
HXLINE(1795)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN(1795)						_g1 = (_g1 + 1);
HXLINE(1797)						if ((font1->name == format->font)) {
HXLINE(1799)							found = true;
HXLINE(1800)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
            				_hx_goto_45:;
            			}
            		}
HXLINE(1805)		if (!(found)) {
HXLINE(1807)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("g",67,00,00,00));
HXLINE(1809)			{
HXLINE(1809)				int _g12 = 0;
HXDLIN(1809)				::Array< ::Dynamic> _g2 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1809)				while((_g12 < _g2->length)){
HXLINE(1809)					 ::openfl::text::Font font2 = _g2->__get(_g12).StaticCast<  ::openfl::text::Font >();
HXDLIN(1809)					_g12 = (_g12 + 1);
HXLINE(1811)					::String _hx_tmp = alpha->replace(font2->name,HX_("",00,00,00,00)).substr(0,symbol->fontName.length);
HXDLIN(1811)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1813)						format->font = font2->name;
HXLINE(1814)						found = true;
HXLINE(1815)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            		}
HXLINE(1820)		if (found) {
HXLINE(1822)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1824)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1826)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1827)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("openfl/text/TextField.hx",94,20,f0,cc),1827,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1830)		if (hx::IsNotNull( symbol->align )) {
HXLINE(1832)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1832)				format->align = 0;
            			}
            			else {
HXLINE(1833)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1833)					format->align = 4;
            				}
            				else {
HXLINE(1834)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1834)						format->align = 2;
            					}
            				}
            			}
HXLINE(1836)			format->leftMargin = ::Std_obj::_hx_int((( (Float)(symbol->leftMargin) ) / ( (Float)(20) )));
HXLINE(1837)			format->rightMargin = ::Std_obj::_hx_int((( (Float)(symbol->rightMargin) ) / ( (Float)(20) )));
HXLINE(1838)			format->indent = ::Std_obj::_hx_int((( (Float)(symbol->indent) ) / ( (Float)(20) )));
HXLINE(1839)			format->leading = ::Std_obj::_hx_int((( (Float)(symbol->leading) ) / ( (Float)(20) )));
            		}
HXLINE(1842)		this->set_defaultTextFormat(format);
HXLINE(1844)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1846)			if (symbol->html) {
HXLINE(1848)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1852)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1864___getAdvance)
HXDLIN(1864)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1869___getBounds)
HXLINE(1870)		this->_hx___updateLayout();
HXLINE(1872)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(1873)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1875)		 ::openfl::geom::Matrix matrix1 = matrix;
HXDLIN(1875)		matrix1->tx = (matrix1->tx + this->_hx___offsetX);
HXLINE(1876)		 ::openfl::geom::Matrix matrix2 = matrix;
HXDLIN(1876)		matrix2->ty = (matrix2->ty + this->_hx___offsetY);
HXLINE(1878)		bounds->_hx___transform(bounds,matrix);
HXLINE(1880)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1882)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool TextField_obj::_hx___getCharBoundaries(int charIndex, ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1886___getCharBoundaries)
HXLINE(1887)		bool _hx_tmp;
HXDLIN(1887)		if ((charIndex >= 0)) {
HXLINE(1887)			_hx_tmp = (charIndex > (this->_hx___text.length - 1));
            		}
            		else {
HXLINE(1887)			_hx_tmp = true;
            		}
HXDLIN(1887)		if (_hx_tmp) {
HXLINE(1887)			return false;
            		}
HXLINE(1889)		this->_hx___updateLayout();
HXLINE(1891)		{
HXLINE(1891)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1891)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1891)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1893)				bool _hx_tmp1;
HXDLIN(1893)				if ((charIndex >= group1->startIndex)) {
HXLINE(1893)					_hx_tmp1 = (charIndex < group1->endIndex);
            				}
            				else {
HXLINE(1893)					_hx_tmp1 = false;
            				}
HXDLIN(1893)				if (_hx_tmp1) {
HXLINE(1895)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1897)						Float x = group1->offsetX;
HXLINE(1899)						{
HXLINE(1899)							int _g1 = 0;
HXDLIN(1899)							int _g2 = (charIndex - group1->startIndex);
HXDLIN(1899)							while((_g1 < _g2)){
HXLINE(1899)								_g1 = (_g1 + 1);
HXDLIN(1899)								int i = (_g1 - 1);
HXLINE(1901)								Float x1;
HXDLIN(1901)								bool x2;
HXDLIN(1901)								if ((i >= 0)) {
HXLINE(1901)									x2 = (i < group1->positions->length);
            								}
            								else {
HXLINE(1901)									x2 = false;
            								}
HXDLIN(1901)								if (x2) {
HXLINE(1901)									x1 = group1->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1901)									x1 = ( (Float)(0) );
            								}
HXDLIN(1901)								x = (x + x1);
            							}
            						}
HXLINE(1905)						int index = (charIndex - group1->startIndex);
HXDLIN(1905)						Float lastPosition;
HXDLIN(1905)						bool lastPosition1;
HXDLIN(1905)						if ((index >= 0)) {
HXLINE(1905)							lastPosition1 = (index < group1->positions->length);
            						}
            						else {
HXLINE(1905)							lastPosition1 = false;
            						}
HXDLIN(1905)						if (lastPosition1) {
HXLINE(1905)							lastPosition = group1->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE(1905)							lastPosition = ( (Float)(0) );
            						}
HXLINE(1907)						rect->setTo(x,group1->offsetY,lastPosition,(group1->ascent + group1->descent));
HXLINE(1908)						return true;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE(1914)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharBoundaries,return )

int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1918___getCharIndexOnDifferentLine)
HXLINE(1919)		bool _hx_tmp;
HXDLIN(1919)		if ((charIndex >= 0)) {
HXLINE(1919)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(1919)			_hx_tmp = true;
            		}
HXDLIN(1919)		if (_hx_tmp) {
HXLINE(1919)			return -1;
            		}
HXLINE(1920)		bool _hx_tmp1;
HXDLIN(1920)		if ((lineIndex >= 0)) {
HXLINE(1920)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - 1));
            		}
            		else {
HXLINE(1920)			_hx_tmp1 = true;
            		}
HXDLIN(1920)		if (_hx_tmp1) {
HXLINE(1920)			return -1;
            		}
HXLINE(1922)		 ::Dynamic x = null();
HXDLIN(1922)		 ::Dynamic y = null();
HXLINE(1924)		{
HXLINE(1924)			 ::Dynamic group = this->_hx___textEngine->layoutGroups->iterator();
HXDLIN(1924)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1924)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1926)				bool _hx_tmp2;
HXDLIN(1926)				if ((charIndex >= group1->startIndex)) {
HXLINE(1926)					_hx_tmp2 = (charIndex <= group1->endIndex);
            				}
            				else {
HXLINE(1926)					_hx_tmp2 = false;
            				}
HXDLIN(1926)				if (_hx_tmp2) {
HXLINE(1928)					x = group1->offsetX;
HXLINE(1930)					{
HXLINE(1930)						int _g1 = 0;
HXDLIN(1930)						int _g2 = (charIndex - group1->startIndex);
HXDLIN(1930)						while((_g1 < _g2)){
HXLINE(1930)							_g1 = (_g1 + 1);
HXDLIN(1930)							int i = (_g1 - 1);
HXLINE(1932)							Float x1;
HXDLIN(1932)							bool x2;
HXDLIN(1932)							if ((i >= 0)) {
HXLINE(1932)								x2 = (i < group1->positions->length);
            							}
            							else {
HXLINE(1932)								x2 = false;
            							}
HXDLIN(1932)							if (x2) {
HXLINE(1932)								x1 = group1->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1932)								x1 = ( (Float)(0) );
            							}
HXDLIN(1932)							x = (x + x1);
            						}
            					}
HXLINE(1935)					if (hx::IsNotNull( y )) {
HXLINE(1935)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
HXLINE(1938)				if ((group1->lineIndex == lineIndex)) {
HXLINE(1940)					y = (group1->offsetY + (group1->height / ( (Float)(2) )));
HXLINE(1942)					{
HXLINE(1942)						int _g11 = 0;
HXDLIN(1942)						int _g21 = (this->get_scrollV() - 1);
HXDLIN(1942)						while((_g11 < _g21)){
HXLINE(1942)							_g11 = (_g11 + 1);
HXDLIN(1942)							int i1 = (_g11 - 1);
HXLINE(1944)							y = (y - this->_hx___textEngine->lineHeights->get(i1));
            						}
            					}
HXLINE(1947)					if (hx::IsNotNull( x )) {
HXLINE(1947)						return this->_hx___getPosition(( (Float)(x) ),( (Float)(y) ));
            					}
            				}
            			}
            		}
HXLINE(1951)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

::String TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1955___getCursor)
HXLINE(1956)		Float group = this->get_mouseX();
HXDLIN(1956)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1958)		bool _hx_tmp;
HXDLIN(1958)		if (hx::IsNotNull( group1 )) {
HXLINE(1958)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1958)			_hx_tmp = false;
            		}
HXDLIN(1958)		if (_hx_tmp) {
HXLINE(1960)			return HX_("button",f2,61,e0,d9);
            		}
            		else {
HXLINE(1962)			if (this->_hx___textEngine->selectable) {
HXLINE(1964)				return HX_("ibeam",58,ca,26,b6);
            			}
            		}
HXLINE(1967)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
            		bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1971___getGroup)
HXLINE(1972)		this->_hx___updateLayout();
HXLINE(1974)		x = (x + this->get_scrollH());
HXLINE(1976)		{
HXLINE(1976)			int _g = 0;
HXDLIN(1976)			int _g1 = (this->get_scrollV() - 1);
HXDLIN(1976)			while((_g < _g1)){
HXLINE(1976)				_g = (_g + 1);
HXDLIN(1976)				int i = (_g - 1);
HXLINE(1978)				y = (y + this->_hx___textEngine->lineHeights->get(i));
            			}
            		}
HXLINE(1981)		bool _hx_tmp;
HXDLIN(1981)		if (!(precise)) {
HXLINE(1981)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1981)			_hx_tmp = false;
            		}
HXDLIN(1981)		if (_hx_tmp) {
HXLINE(1981)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1983)		bool firstGroup = true;
HXLINE(1984)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1984)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1986)		{
HXLINE(1986)			int _g2 = 0;
HXDLIN(1986)			int _g3 = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1986)			while((_g2 < _g3)){
HXLINE(1986)				_g2 = (_g2 + 1);
HXDLIN(1986)				int i1 = (_g2 - 1);
HXLINE(1988)				group = this->_hx___textEngine->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1990)				if ((i1 < (this->_hx___textEngine->layoutGroups->get_length() - 1))) {
HXLINE(1992)					nextGroup = this->_hx___textEngine->layoutGroups->get((i1 + 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1996)					nextGroup = null();
            				}
HXLINE(1999)				if (firstGroup) {
HXLINE(2001)					if ((y < group->offsetY)) {
HXLINE(2001)						y = group->offsetY;
            					}
HXLINE(2002)					if ((x < group->offsetX)) {
HXLINE(2002)						x = group->offsetX;
            					}
HXLINE(2003)					firstGroup = false;
            				}
HXLINE(2006)				bool _hx_tmp1;
HXDLIN(2006)				bool _hx_tmp2;
HXDLIN(2006)				if ((y >= group->offsetY)) {
HXLINE(2006)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(2006)					_hx_tmp2 = false;
            				}
HXDLIN(2006)				if (!(_hx_tmp2)) {
HXLINE(2006)					if (!(precise)) {
HXLINE(2006)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(2006)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(2006)					_hx_tmp1 = true;
            				}
HXDLIN(2006)				if (_hx_tmp1) {
HXLINE(2008)					bool _hx_tmp3;
HXDLIN(2008)					bool _hx_tmp4;
HXDLIN(2008)					if ((x >= group->offsetX)) {
HXLINE(2008)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(2008)						_hx_tmp4 = false;
            					}
HXDLIN(2008)					if (!(_hx_tmp4)) {
HXLINE(2009)						if (!(precise)) {
HXLINE(2009)							if (hx::IsNotNull( nextGroup )) {
HXLINE(2008)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(2008)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(2008)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(2008)						_hx_tmp3 = true;
            					}
HXDLIN(2008)					if (_hx_tmp3) {
HXLINE(2011)						return group;
            					}
            				}
            			}
            		}
HXLINE(2016)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2020___getPosition)
HXLINE(2021)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(2023)		if (hx::IsNull( group )) {
HXLINE(2025)			return this->_hx___text.length;
            		}
HXLINE(2028)		Float advance = ((Float)0.0);
HXLINE(2030)		{
HXLINE(2030)			int _g = 0;
HXDLIN(2030)			int _g1 = group->positions->length;
HXDLIN(2030)			while((_g < _g1)){
HXLINE(2030)				_g = (_g + 1);
HXDLIN(2030)				int i = (_g - 1);
HXLINE(2032)				Float advance1;
HXDLIN(2032)				bool advance2;
HXDLIN(2032)				if ((i >= 0)) {
HXLINE(2032)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(2032)					advance2 = false;
            				}
HXDLIN(2032)				if (advance2) {
HXLINE(2032)					advance1 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(2032)					advance1 = ( (Float)(0) );
            				}
HXDLIN(2032)				advance = (advance + advance1);
HXLINE(2034)				if ((x <= (group->offsetX + advance))) {
HXLINE(2036)					Float _hx_tmp;
HXDLIN(2036)					bool _hx_tmp1;
HXDLIN(2036)					if ((i >= 0)) {
HXLINE(2036)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(2036)						_hx_tmp1 = false;
            					}
HXDLIN(2036)					if (_hx_tmp1) {
HXLINE(2036)						_hx_tmp = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(2036)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(2036)					Float _hx_tmp2;
HXDLIN(2036)					bool _hx_tmp3;
HXDLIN(2036)					if ((i >= 0)) {
HXLINE(2036)						_hx_tmp3 = (i < group->positions->length);
            					}
            					else {
HXLINE(2036)						_hx_tmp3 = false;
            					}
HXDLIN(2036)					if (_hx_tmp3) {
HXLINE(2036)						_hx_tmp2 = group->positions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(2036)						_hx_tmp2 = ( (Float)(0) );
            					}
HXDLIN(2036)					if ((x <= ((group->offsetX + (advance - _hx_tmp)) + (_hx_tmp2 / ( (Float)(2) ))))) {
HXLINE(2038)						return (group->startIndex + i);
            					}
            					else {
HXLINE(2042)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(2042)							return ((group->startIndex + i) + 1);
            						}
            						else {
HXLINE(2042)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(2047)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

void TextField_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2052___getRenderBounds)
HXDLIN(2052)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE(2054)			this->_hx___updateLayout();
HXLINE(2056)			 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2057)			bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(2062)			bounds->_hx___transform(bounds,matrix);
HXLINE(2064)			rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(2066)			::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            		}
            		else {
HXLINE(2070)			this->super::_hx___getRenderBounds(rect,matrix);
            		}
            	}


bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2076___hitTest)
HXLINE(2077)		bool _hx_tmp;
HXDLIN(2077)		bool _hx_tmp1;
HXDLIN(2077)		if (!(!(hitObject->get_visible()))) {
HXLINE(2077)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(2077)			_hx_tmp1 = true;
            		}
HXDLIN(2077)		if (!(_hx_tmp1)) {
HXLINE(2077)			if (interactiveOnly) {
HXLINE(2077)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(2077)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(2077)			_hx_tmp = true;
            		}
HXDLIN(2077)		if (_hx_tmp) {
HXLINE(2077)			return false;
            		}
HXLINE(2078)		bool _hx_tmp2;
HXDLIN(2078)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(2078)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(2078)			_hx_tmp2 = false;
            		}
HXDLIN(2078)		if (_hx_tmp2) {
HXLINE(2078)			return false;
            		}
HXLINE(2080)		this->_hx___getRenderTransform();
HXLINE(2081)		this->_hx___updateLayout();
HXLINE(2083)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2083)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2083)		Float px;
HXDLIN(2083)		if ((norm == 0)) {
HXLINE(2083)			px = -(_this->tx);
            		}
            		else {
HXLINE(2083)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2084)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2084)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2084)		Float py;
HXDLIN(2084)		if ((norm1 == 0)) {
HXLINE(2084)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2084)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2086)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2088)			if (hx::IsNotNull( stack )) {
HXLINE(2090)				stack->push(hitObject);
            			}
HXLINE(2093)			return true;
            		}
HXLINE(2096)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2100___hitTestMask)
HXLINE(2101)		this->_hx___getRenderTransform();
HXLINE(2102)		this->_hx___updateLayout();
HXLINE(2104)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2104)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(2104)		Float px;
HXDLIN(2104)		if ((norm == 0)) {
HXLINE(2104)			px = -(_this->tx);
            		}
            		else {
HXLINE(2104)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(2105)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN(2105)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(2105)		Float py;
HXDLIN(2105)		if ((norm1 == 0)) {
HXLINE(2105)			py = -(_this1->ty);
            		}
            		else {
HXLINE(2105)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(2107)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(2109)			return true;
            		}
HXLINE(2112)		return false;
            	}


void TextField_obj::_hx___replaceSelectedText(::String value,hx::Null< bool >  __o_restrict){
            		bool restrict = __o_restrict.Default(true);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2116___replaceSelectedText)
HXLINE(2117)		if (hx::IsNull( value )) {
HXLINE(2117)			value = HX_("",00,00,00,00);
            		}
HXLINE(2118)		bool _hx_tmp;
HXDLIN(2118)		if ((value == HX_("",00,00,00,00))) {
HXLINE(2118)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE(2118)			_hx_tmp = false;
            		}
HXDLIN(2118)		if (_hx_tmp) {
HXLINE(2118)			return;
            		}
HXLINE(2120)		int startIndex;
HXDLIN(2120)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE(2120)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2120)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE(2121)		int endIndex;
HXDLIN(2121)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE(2121)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE(2121)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE(2123)		bool _hx_tmp1;
HXDLIN(2123)		bool _hx_tmp2;
HXDLIN(2123)		if ((startIndex == endIndex)) {
HXLINE(2123)			_hx_tmp2 = (this->_hx___textEngine->maxChars > 0);
            		}
            		else {
HXLINE(2123)			_hx_tmp2 = false;
            		}
HXDLIN(2123)		if (_hx_tmp2) {
HXLINE(2123)			_hx_tmp1 = (this->_hx___text.length == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE(2123)			_hx_tmp1 = false;
            		}
HXDLIN(2123)		if (_hx_tmp1) {
HXLINE(2123)			return;
            		}
HXLINE(2125)		if ((startIndex > this->_hx___text.length)) {
HXLINE(2125)			startIndex = this->_hx___text.length;
            		}
HXLINE(2126)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2126)			endIndex = this->_hx___text.length;
            		}
HXLINE(2127)		if ((endIndex < startIndex)) {
HXLINE(2129)			int cache = endIndex;
HXLINE(2130)			endIndex = startIndex;
HXLINE(2131)			startIndex = cache;
            		}
HXLINE(2133)		if ((startIndex < 0)) {
HXLINE(2133)			startIndex = 0;
            		}
HXLINE(2135)		this->_hx___replaceText(startIndex,endIndex,value,restrict);
HXLINE(2137)		int i = (startIndex + value.length);
HXLINE(2138)		if ((i > this->_hx___text.length)) {
HXLINE(2138)			i = this->_hx___text.length;
            		}
HXLINE(2140)		this->setSelection(i,i);
HXLINE(2143)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___replaceSelectedText,(void))

void TextField_obj::_hx___replaceText(int beginIndex,int endIndex,::String newText,bool restrict){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2147___replaceText)
HXLINE(2148)		bool _hx_tmp;
HXDLIN(2148)		bool _hx_tmp1;
HXDLIN(2148)		bool _hx_tmp2;
HXDLIN(2148)		if ((endIndex >= beginIndex)) {
HXLINE(2148)			_hx_tmp2 = (beginIndex < 0);
            		}
            		else {
HXLINE(2148)			_hx_tmp2 = true;
            		}
HXDLIN(2148)		if (!(_hx_tmp2)) {
HXLINE(2148)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE(2148)			_hx_tmp1 = true;
            		}
HXDLIN(2148)		if (!(_hx_tmp1)) {
HXLINE(2148)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE(2148)			_hx_tmp = true;
            		}
HXDLIN(2148)		if (_hx_tmp) {
HXLINE(2148)			return;
            		}
HXLINE(2150)		if (restrict) {
HXLINE(2152)			newText = this->_hx___textEngine->restrictText(newText);
HXLINE(2154)			if ((this->_hx___textEngine->maxChars > 0)) {
HXLINE(2156)				int removeLength = (endIndex - beginIndex);
HXLINE(2157)				int maxLength = ((this->_hx___textEngine->maxChars - this->_hx___text.length) + removeLength);
HXLINE(2159)				if ((maxLength <= 0)) {
HXLINE(2161)					newText = HX_("",00,00,00,00);
            				}
            				else {
HXLINE(2163)					if ((maxLength < newText.length)) {
HXLINE(2165)						newText = newText.substr(0,maxLength);
            					}
            				}
            			}
            		}
HXLINE(2170)		::String _hx_tmp3 = (this->_hx___text.substring(0,beginIndex) + newText);
HXDLIN(2170)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE(2171)		if ((endIndex > this->_hx___text.length)) {
HXLINE(2171)			endIndex = this->_hx___text.length;
            		}
HXLINE(2173)		int offset = (newText.length - (endIndex - beginIndex));
HXLINE(2175)		int i = 0;
HXLINE(2176)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE(2178)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE(2180)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2182)			if ((beginIndex == endIndex)) {
HXLINE(2184)				if ((range->end >= beginIndex)) {
HXLINE(2188)					if ((range->start > endIndex)) {
HXLINE(2191)						 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN(2191)						range1->start = (range1->start + offset);
HXLINE(2192)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN(2192)						range2->end = (range2->end + offset);
            					}
            					else {
HXLINE(2196)						bool _hx_tmp4;
HXDLIN(2196)						bool _hx_tmp5;
HXDLIN(2196)						if ((range->start < range->end)) {
HXLINE(2196)							_hx_tmp5 = (range->end == beginIndex);
            						}
            						else {
HXLINE(2196)							_hx_tmp5 = false;
            						}
HXDLIN(2196)						if (_hx_tmp5) {
HXLINE(2196)							_hx_tmp4 = (i < (this->_hx___textEngine->textFormatRanges->get_length() - 1));
            						}
            						else {
HXLINE(2196)							_hx_tmp4 = false;
            						}
HXDLIN(2196)						if (!(_hx_tmp4)) {
HXLINE(2204)							 ::openfl::_internal::text::TextFormatRange range3 = range;
HXDLIN(2204)							range3->end = (range3->end + offset);
            						}
            					}
            				}
            			}
            			else {
HXLINE(2210)				if ((range->end >= beginIndex)) {
HXLINE(2214)					if ((range->start >= endIndex)) {
HXLINE(2217)						 ::openfl::_internal::text::TextFormatRange range4 = range;
HXDLIN(2217)						range4->start = (range4->start + offset);
HXLINE(2218)						 ::openfl::_internal::text::TextFormatRange range5 = range;
HXDLIN(2218)						range5->end = (range5->end + offset);
            					}
            					else {
HXLINE(2220)						bool _hx_tmp6;
HXDLIN(2220)						if ((range->start >= beginIndex)) {
HXLINE(2220)							_hx_tmp6 = (range->end <= endIndex);
            						}
            						else {
HXLINE(2220)							_hx_tmp6 = false;
            						}
HXDLIN(2220)						if (_hx_tmp6) {
HXLINE(2223)							if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(2225)								this->_hx___textEngine->textFormatRanges->splice(i,1);
            							}
            							else {
HXLINE(2230)								range->start = 0;
HXLINE(2231)								range->end = newText.length;
            							}
            						}
            						else {
HXLINE(2234)							if ((range->start <= beginIndex)) {
HXLINE(2236)								if ((range->end < endIndex)) {
HXLINE(2239)									range->end = beginIndex;
            								}
            								else {
HXLINE(2244)									 ::openfl::_internal::text::TextFormatRange range6 = range;
HXDLIN(2244)									range6->end = (range6->end + offset);
            								}
            							}
            							else {
HXLINE(2252)								range->start = beginIndex;
HXLINE(2253)								 ::openfl::_internal::text::TextFormatRange range7 = range;
HXDLIN(2253)								range7->end = (range7->end + offset);
            							}
            						}
            					}
            				}
            			}
HXLINE(2257)			i = (i + 1);
            		}
HXLINE(2260)		this->_hx___updateScrollV();
HXLINE(2261)		this->_hx___updateScrollH();
HXLINE(2263)		this->_hx___dirty = true;
HXLINE(2264)		this->_hx___layoutDirty = true;
HXLINE(2265)		if (!(this->_hx___renderDirty)) {
HXLINE(2265)			this->_hx___renderDirty = true;
HXDLIN(2265)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextField_obj,_hx___replaceText,(void))

void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2269___startCursorTimer)
HXLINE(2270)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),600);
HXLINE(2271)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(2272)		this->_hx___dirty = true;
HXLINE(2273)		if (!(this->_hx___renderDirty)) {
HXLINE(2273)			this->_hx___renderDirty = true;
HXDLIN(2273)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2277___startTextInput)
HXLINE(2278)		if ((this->_hx___caretIndex < 0)) {
HXLINE(2280)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2281)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(2284)		bool enableInput = true;
HXLINE(2286)		if (enableInput) {
HXLINE(2288)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2293___stopCursorTimer)
HXLINE(2294)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(2296)			this->_hx___cursorTimer->stop();
HXLINE(2297)			this->_hx___cursorTimer = null();
            		}
HXLINE(2300)		if (this->_hx___showCursor) {
HXLINE(2302)			this->_hx___showCursor = false;
HXLINE(2303)			this->_hx___dirty = true;
HXLINE(2304)			if (!(this->_hx___renderDirty)) {
HXLINE(2304)				this->_hx___renderDirty = true;
HXDLIN(2304)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2309___stopTextInput)
HXLINE(2310)		bool disableInput = true;
HXLINE(2312)		if (disableInput) {
HXLINE(2314)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2320___updateLayout)
HXDLIN(2320)		if (this->_hx___layoutDirty) {
HXLINE(2322)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(2323)			this->_hx___textEngine->update();
HXLINE(2325)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,2 )) {
HXLINE(2327)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(2329)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==0) ){
HXLINE(2335)						 ::openfl::text::TextField _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2335)						Float _hx_tmp = _g->get_x();
HXDLIN(2335)						_g->set_x((_hx_tmp + ((cacheWidth - this->_hx___textEngine->width) / ( (Float)(2) ))));
HXDLIN(2335)						goto _hx_goto_73;
            					}
            					if (  (_hx_switch_0==3) ){
HXLINE(2332)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(2332)						Float _hx_tmp1 = _g1->get_x();
HXDLIN(2332)						_g1->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(2332)						goto _hx_goto_73;
            					}
            					/* default */{
            					}
            					_hx_goto_73:;
            				}
HXLINE(2341)				this->_hx___textEngine->getBounds();
            			}
HXLINE(2344)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2350___updateScrollH)
HXDLIN(2350)		bool _hx_tmp;
HXDLIN(2350)		if (!(this->get_multiline())) {
HXDLIN(2350)			_hx_tmp = hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(2350)			_hx_tmp = false;
            		}
HXDLIN(2350)		if (_hx_tmp) {
HXLINE(2352)			this->_hx___layoutDirty = true;
HXLINE(2353)			this->_hx___updateLayout();
HXLINE(2355)			Float offsetX = ((this->_hx___textEngine->textWidth - this->_hx___textEngine->width) + 4);
HXLINE(2357)			if ((offsetX > 0)) {
HXLINE(2362)				int _hx_tmp1 = this->_hx___caretIndex;
HXDLIN(2362)				if ((_hx_tmp1 >= this->get_text().length)) {
HXLINE(2364)					this->set_scrollH(::Math_obj::ceil(offsetX));
            				}
            				else {
HXLINE(2368)					 ::openfl::geom::Rectangle caret = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2369)					this->_hx___getCharBoundaries(this->_hx___caretIndex,caret);
HXLINE(2371)					Float caret1 = caret->x;
HXDLIN(2371)					if ((caret1 < this->get_scrollH())) {
HXLINE(2373)						this->set_scrollH(::Math_obj::floor((caret->x - ( (Float)(2) ))));
            					}
            					else {
HXLINE(2375)						Float caret2 = caret->x;
HXDLIN(2375)						int _hx_tmp2 = this->get_scrollH();
HXDLIN(2375)						if ((caret2 > (_hx_tmp2 + this->_hx___textEngine->width))) {
HXLINE(2377)							this->set_scrollH(::Math_obj::ceil(((caret->x - this->_hx___textEngine->width) - ( (Float)(2) ))));
            						}
            					}
HXLINE(2380)					::openfl::geom::Rectangle_obj::_hx___pool->release(caret);
            				}
            			}
            			else {
HXLINE(2385)				this->set_scrollH(0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2391___updateScrollV)
HXLINE(2392)		this->_hx___layoutDirty = true;
HXLINE(2393)		this->_hx___updateLayout();
HXLINE(2395)		int lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
HXLINE(2397)		bool _hx_tmp;
HXDLIN(2397)		if ((lineIndex == -1)) {
HXLINE(2397)			_hx_tmp = (this->_hx___caretIndex > 0);
            		}
            		else {
HXLINE(2397)			_hx_tmp = false;
            		}
HXDLIN(2397)		if (_hx_tmp) {
HXLINE(2400)			lineIndex = (this->getLineIndexOfChar((this->_hx___caretIndex - 1)) + 1);
            		}
HXLINE(2403)		if (((lineIndex + 1) < this->get_scrollV())) {
HXLINE(2405)			this->set_scrollV((lineIndex + 1));
            		}
            		else {
HXLINE(2407)			if (((lineIndex + 1) > this->get_bottomScrollV())) {
HXLINE(2409)				int i = lineIndex;
HXDLIN(2409)				Float tempHeight = ((Float)0.0);
HXLINE(2411)				while((i >= 0)){
HXLINE(2413)					Float _hx_tmp1 = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXDLIN(2413)					if ((_hx_tmp1 <= (this->get_height() - ( (Float)(4) )))) {
HXLINE(2415)						tempHeight = (tempHeight + this->_hx___textEngine->lineHeights->get(i));
HXLINE(2416)						i = (i - 1);
            					}
            					else {
HXLINE(2419)						goto _hx_goto_76;
            					}
            				}
            				_hx_goto_76:;
HXLINE(2422)				this->set_scrollV((i + 2));
            			}
            			else {
HXLINE(2427)				this->set_scrollV(this->get_scrollV());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollV,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2432___updateText)
HXLINE(2442)		this->_hx___textEngine->set_text(value);
HXLINE(2443)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(2445)		if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(2447)			this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            		}
HXLINE(2450)		if (!(this->_hx___displayAsPassword)) {
HXLINE(2452)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(2456)			int length = this->get_text().length;
HXLINE(2457)			::String mask = HX_("",00,00,00,00);
HXLINE(2459)			{
HXLINE(2459)				int _g = 0;
HXDLIN(2459)				int _g1 = length;
HXDLIN(2459)				while((_g < _g1)){
HXLINE(2459)					_g = (_g + 1);
HXDLIN(2459)					int i = (_g - 1);
HXLINE(2461)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(2464)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2469___updateTransforms)
HXLINE(2470)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(2471)		{
HXLINE(2471)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(2471)			Float px = this->_hx___offsetX;
HXDLIN(2471)			Float py = this->_hx___offsetY;
HXDLIN(2471)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(2471)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2477_get_antiAliasType)
HXDLIN(2477)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2481_set_antiAliasType)
HXLINE(2482)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(2487)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2492_get_autoSize)
HXDLIN(2492)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2496_set_autoSize)
HXLINE(2497)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(2499)			this->_hx___dirty = true;
HXLINE(2500)			this->_hx___layoutDirty = true;
HXLINE(2501)			if (!(this->_hx___renderDirty)) {
HXLINE(2501)				this->_hx___renderDirty = true;
HXDLIN(2501)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2504)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2509_get_background)
HXDLIN(2509)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2513_set_background)
HXLINE(2514)		if ((value != this->_hx___textEngine->background)) {
HXLINE(2516)			this->_hx___dirty = true;
HXLINE(2517)			if (!(this->_hx___renderDirty)) {
HXLINE(2517)				this->_hx___renderDirty = true;
HXDLIN(2517)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2520)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2525_get_backgroundColor)
HXDLIN(2525)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2529_set_backgroundColor)
HXLINE(2530)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(2532)			this->_hx___dirty = true;
HXLINE(2533)			if (!(this->_hx___renderDirty)) {
HXLINE(2533)				this->_hx___renderDirty = true;
HXDLIN(2533)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2536)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2541_get_border)
HXDLIN(2541)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2545_set_border)
HXLINE(2546)		if ((value != this->_hx___textEngine->border)) {
HXLINE(2548)			this->_hx___dirty = true;
HXLINE(2549)			if (!(this->_hx___renderDirty)) {
HXLINE(2549)				this->_hx___renderDirty = true;
HXDLIN(2549)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2552)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2557_get_borderColor)
HXDLIN(2557)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2561_set_borderColor)
HXLINE(2562)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(2564)			this->_hx___dirty = true;
HXLINE(2565)			if (!(this->_hx___renderDirty)) {
HXLINE(2565)				this->_hx___renderDirty = true;
HXDLIN(2565)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2568)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2572_get_bottomScrollV)
HXLINE(2573)		this->_hx___updateLayout();
HXLINE(2575)		return this->_hx___textEngine->get_bottomScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2580_get_caretIndex)
HXDLIN(2580)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2585_get_defaultTextFormat)
HXDLIN(2585)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2589_set_defaultTextFormat)
HXLINE(2590)		this->_hx___textFormat->_hx___merge(value);
HXLINE(2592)		this->_hx___layoutDirty = true;
HXLINE(2593)		this->_hx___dirty = true;
HXLINE(2594)		if (!(this->_hx___renderDirty)) {
HXLINE(2594)			this->_hx___renderDirty = true;
HXDLIN(2594)			this->_hx___setParentRenderDirty();
            		}
HXLINE(2596)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2601_get_displayAsPassword)
HXDLIN(2601)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2605_set_displayAsPassword)
HXLINE(2606)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(2608)			this->_hx___dirty = true;
HXLINE(2609)			this->_hx___layoutDirty = true;
HXLINE(2610)			if (!(this->_hx___renderDirty)) {
HXLINE(2610)				this->_hx___renderDirty = true;
HXDLIN(2610)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2612)			this->_hx___displayAsPassword = value;
HXLINE(2613)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2616)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2621_get_embedFonts)
HXDLIN(2621)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2633_set_embedFonts)
HXDLIN(2633)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2638_get_gridFitType)
HXDLIN(2638)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2650_set_gridFitType)
HXDLIN(2650)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2654_get_height)
HXLINE(2655)		this->_hx___updateLayout();
HXLINE(2656)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2656)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2660_set_height)
HXLINE(2661)		if ((value != this->_hx___textEngine->height)) {
HXLINE(2663)			this->_hx___setTransformDirty();
HXLINE(2664)			this->_hx___dirty = true;
HXLINE(2665)			this->_hx___layoutDirty = true;
HXLINE(2666)			if (!(this->_hx___renderDirty)) {
HXLINE(2666)				this->_hx___renderDirty = true;
HXDLIN(2666)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2668)			this->_hx___textEngine->height = value;
            		}
HXLINE(2671)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(2671)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2679_get_htmlText)
HXDLIN(2679)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2684_set_htmlText)
HXLINE(2685)		bool _hx_tmp;
HXDLIN(2685)		if (!(!(this->_hx___isHTML))) {
HXLINE(2685)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2685)			_hx_tmp = true;
            		}
HXDLIN(2685)		if (_hx_tmp) {
HXLINE(2687)			this->_hx___dirty = true;
HXLINE(2688)			this->_hx___layoutDirty = true;
HXLINE(2689)			if (!(this->_hx___renderDirty)) {
HXLINE(2689)				this->_hx___renderDirty = true;
HXDLIN(2689)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2692)		this->_hx___isHTML = true;
HXLINE(2698)		value = ::openfl::_internal::formats::html::HTMLParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2728)		this->_hx___updateText(value);
HXLINE(2730)		this->_hx___updateScrollV();
HXLINE(2732)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2736_get_length)
HXLINE(2737)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(2739)			return this->_hx___text.length;
            		}
HXLINE(2742)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2747_get_maxChars)
HXDLIN(2747)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2751_set_maxChars)
HXLINE(2752)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2754)			this->_hx___textEngine->maxChars = value;
HXLINE(2756)			this->_hx___dirty = true;
HXLINE(2757)			this->_hx___layoutDirty = true;
HXLINE(2758)			if (!(this->_hx___renderDirty)) {
HXLINE(2758)				this->_hx___renderDirty = true;
HXDLIN(2758)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2761)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2765_get_maxScrollH)
HXLINE(2766)		this->_hx___updateLayout();
HXLINE(2768)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2772_get_maxScrollV)
HXLINE(2773)		this->_hx___updateLayout();
HXLINE(2775)		return this->_hx___textEngine->get_maxScrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2780_get_mouseWheelEnabled)
HXDLIN(2780)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2785_set_mouseWheelEnabled)
HXDLIN(2785)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2790_get_multiline)
HXDLIN(2790)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2794_set_multiline)
HXLINE(2795)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2797)			this->_hx___dirty = true;
HXLINE(2798)			this->_hx___layoutDirty = true;
HXLINE(2799)			this->_hx___updateText(this->_hx___text);
HXLINE(2801)			this->_hx___updateScrollH();
HXLINE(2802)			if (!(this->_hx___renderDirty)) {
HXLINE(2802)				this->_hx___renderDirty = true;
HXDLIN(2802)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2805)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2809_get_numLines)
HXLINE(2810)		this->_hx___updateLayout();
HXLINE(2812)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2817_get_restrict)
HXDLIN(2817)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2821_set_restrict)
HXLINE(2822)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2824)			this->_hx___textEngine->set_restrict(value);
HXLINE(2825)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2828)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2833_get_scrollH)
HXDLIN(2833)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2837_set_scrollH)
HXLINE(2838)		this->_hx___updateLayout();
HXLINE(2840)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2840)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2841)		if ((value < 0)) {
HXLINE(2841)			value = 0;
            		}
HXLINE(2843)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2845)			this->_hx___dirty = true;
HXLINE(2846)			if (!(this->_hx___renderDirty)) {
HXLINE(2846)				this->_hx___renderDirty = true;
HXDLIN(2846)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2847)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2850)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2855_get_scrollV)
HXDLIN(2855)		return this->_hx___textEngine->get_scrollV();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2859_set_scrollV)
HXLINE(2860)		this->_hx___updateLayout();
HXLINE(2862)		if ((value != this->_hx___textEngine->get_scrollV())) {
HXLINE(2864)			this->_hx___dirty = true;
HXLINE(2865)			if (!(this->_hx___renderDirty)) {
HXLINE(2865)				this->_hx___renderDirty = true;
HXDLIN(2865)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2866)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2869)		return this->_hx___textEngine->set_scrollV(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2874_get_selectable)
HXDLIN(2874)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2878_set_selectable)
HXLINE(2879)		bool _hx_tmp;
HXDLIN(2879)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2879)			_hx_tmp = hx::IsEq( this->get_type(),1 );
            		}
            		else {
HXLINE(2879)			_hx_tmp = false;
            		}
HXDLIN(2879)		if (_hx_tmp) {
HXLINE(2881)			bool _hx_tmp1;
HXDLIN(2881)			if (hx::IsNotNull( this->stage )) {
HXLINE(2881)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2881)				_hx_tmp1 = false;
            			}
HXDLIN(2881)			if (_hx_tmp1) {
HXLINE(2883)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2885)				if (!(value)) {
HXLINE(2887)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2891)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2896_get_selectionBeginIndex)
HXDLIN(2896)		return ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2901_get_selectionEndIndex)
HXDLIN(2901)		return ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2906_get_sharpness)
HXDLIN(2906)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2910_set_sharpness)
HXLINE(2911)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2913)			this->_hx___dirty = true;
HXLINE(2914)			if (!(this->_hx___renderDirty)) {
HXLINE(2914)				this->_hx___renderDirty = true;
HXDLIN(2914)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2917)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2922_get_tabEnabled)
HXDLIN(2922)		if (hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2922)			return hx::IsEq( this->_hx___textEngine->type,1 );
            		}
            		else {
HXDLIN(2922)			return ( (bool)(this->_hx___tabEnabled) );
            		}
HXDLIN(2922)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2927_get_text)
HXDLIN(2927)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2931_set_text)
HXLINE(2932)		bool _hx_tmp;
HXDLIN(2932)		if (!(this->_hx___isHTML)) {
HXLINE(2932)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2932)			_hx_tmp = true;
            		}
HXDLIN(2932)		if (_hx_tmp) {
HXLINE(2934)			this->_hx___dirty = true;
HXLINE(2935)			this->_hx___layoutDirty = true;
HXLINE(2936)			if (!(this->_hx___renderDirty)) {
HXLINE(2936)				this->_hx___renderDirty = true;
HXDLIN(2936)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2940)			return value;
            		}
HXLINE(2943)		if ((this->_hx___textEngine->textFormatRanges->get_length() > 1)) {
HXLINE(2945)			::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2945)			( ( ::openfl::_Vector::ObjectVector)(this1) )->splice(1,(this->_hx___textEngine->textFormatRanges->get_length() - 1));
            		}
HXLINE(2948)		::String utfValue = value;
HXLINE(2949)		 ::openfl::_internal::text::TextFormatRange range = this->_hx___textEngine->textFormatRanges->get(0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2950)		range->format = this->_hx___textFormat;
HXLINE(2951)		range->start = 0;
HXLINE(2952)		range->end = utfValue.length;
HXLINE(2954)		this->_hx___isHTML = false;
HXLINE(2956)		this->_hx___updateText(value);
HXLINE(2957)		this->_hx___updateScrollV();
HXLINE(2959)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2964_get_textColor)
HXDLIN(2964)		return ( (int)(this->_hx___textFormat->color) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2968_set_textColor)
HXLINE(2969)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2971)			this->_hx___dirty = true;
HXLINE(2972)			if (!(this->_hx___renderDirty)) {
HXLINE(2972)				this->_hx___renderDirty = true;
HXDLIN(2972)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2975)		{
HXLINE(2975)			 ::Dynamic range = this->_hx___textEngine->textFormatRanges->iterator();
HXDLIN(2975)			while(( (bool)(range->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2975)				 ::openfl::_internal::text::TextFormatRange range1 = ( ( ::openfl::_internal::text::TextFormatRange)(range->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2977)				range1->format->color = value;
            			}
            		}
HXLINE(2980)		return ( (int)((this->_hx___textFormat->color = value)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2984_get_textWidth)
HXLINE(2985)		this->_hx___updateLayout();
HXLINE(2986)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2990_get_textHeight)
HXLINE(2991)		this->_hx___updateLayout();
HXLINE(2992)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2997_get_type)
HXDLIN(2997)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3001_set_type)
HXLINE(3002)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(3004)			if (hx::IsEq( value,1 )) {
HXLINE(3006)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(3008)				this->this_onFocusIn(null());
HXLINE(3009)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(3013)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(3015)				this->_hx___stopTextInput();
HXLINE(3016)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(3019)			this->_hx___dirty = true;
HXLINE(3020)			this->_hx___layoutDirty = true;
HXLINE(3021)			if (!(this->_hx___renderDirty)) {
HXLINE(3021)				this->_hx___renderDirty = true;
HXDLIN(3021)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3024)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3028_get_width)
HXLINE(3029)		this->_hx___updateLayout();
HXLINE(3030)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3034_set_width)
HXLINE(3035)		if ((value != this->_hx___textEngine->width)) {
HXLINE(3037)			this->_hx___setTransformDirty();
HXLINE(3038)			this->_hx___dirty = true;
HXLINE(3039)			this->_hx___layoutDirty = true;
HXLINE(3040)			if (!(this->_hx___renderDirty)) {
HXLINE(3040)				this->_hx___renderDirty = true;
HXDLIN(3040)				this->_hx___setParentRenderDirty();
            			}
HXLINE(3042)			this->_hx___textEngine->width = value;
            		}
HXLINE(3045)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3050_get_wordWrap)
HXDLIN(3050)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3054_set_wordWrap)
HXLINE(3055)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(3057)			this->_hx___dirty = true;
HXLINE(3058)			this->_hx___layoutDirty = true;
HXLINE(3059)			if (!(this->_hx___renderDirty)) {
HXLINE(3059)				this->_hx___renderDirty = true;
HXDLIN(3059)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3062)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

Float TextField_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3067_get_x)
HXDLIN(3067)		return (this->_hx___transform->tx + this->_hx___offsetX);
            	}


Float TextField_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3071_set_x)
HXLINE(3072)		if ((value != (this->_hx___transform->tx + this->_hx___offsetX))) {
HXLINE(3072)			this->_hx___setTransformDirty();
            		}
HXLINE(3073)		return (this->_hx___transform->tx = (value - this->_hx___offsetX));
            	}


Float TextField_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3078_get_y)
HXDLIN(3078)		return (this->_hx___transform->ty + this->_hx___offsetY);
            	}


Float TextField_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3082_set_y)
HXLINE(3083)		if ((value != (this->_hx___transform->ty + this->_hx___offsetY))) {
HXLINE(3083)			this->_hx___setTransformDirty();
            		}
HXLINE(3084)		return (this->_hx___transform->ty = (value - this->_hx___offsetY));
            	}


void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3089_stage_onMouseMove)
HXLINE(3090)		if (hx::IsNull( this->stage )) {
HXLINE(3090)			return;
            		}
HXLINE(3092)		bool _hx_tmp;
HXDLIN(3092)		if (this->_hx___textEngine->selectable) {
HXLINE(3092)			_hx_tmp = (this->_hx___selectionIndex >= 0);
            		}
            		else {
HXLINE(3092)			_hx_tmp = false;
            		}
HXDLIN(3092)		if (_hx_tmp) {
HXLINE(3094)			this->_hx___updateLayout();
HXLINE(3096)			Float position = this->get_mouseX();
HXDLIN(3096)			Float position1 = (position + this->get_scrollH());
HXDLIN(3096)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(3098)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(3100)				this->_hx___caretIndex = position2;
HXLINE(3112)				{
HXLINE(3113)					this->_hx___dirty = true;
HXLINE(3114)					if (!(this->_hx___renderDirty)) {
HXLINE(3114)						this->_hx___renderDirty = true;
HXDLIN(3114)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3121_stage_onMouseUp)
HXLINE(3122)		if (hx::IsNull( this->stage )) {
HXLINE(3122)			return;
            		}
HXLINE(3124)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(3125)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(3127)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3129)			this->_hx___getWorldTransform();
HXLINE(3130)			this->_hx___updateLayout();
HXLINE(3132)			Float upPos = this->get_mouseX();
HXDLIN(3132)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(3132)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(3133)			int leftPos = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3134)			int rightPos = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___selectionIndex) ),( (Float)(upPos2) )));
HXLINE(3139)			this->_hx___selectionIndex = leftPos;
HXLINE(3140)			this->_hx___caretIndex = rightPos;
HXLINE(3142)			if (this->_hx___inputEnabled) {
HXLINE(3144)				this->this_onFocusIn(null());
HXLINE(3146)				this->_hx___stopCursorTimer();
HXLINE(3147)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3161_this_onAddedToStage)
HXDLIN(3161)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3166_this_onFocusIn)
HXDLIN(3166)		bool _hx_tmp;
HXDLIN(3166)		bool _hx_tmp1;
HXDLIN(3166)		if (hx::IsEq( this->get_type(),1 )) {
HXDLIN(3166)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(3166)			_hx_tmp1 = false;
            		}
HXDLIN(3166)		if (_hx_tmp1) {
HXDLIN(3166)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(3166)			_hx_tmp = false;
            		}
HXDLIN(3166)		if (_hx_tmp) {
HXLINE(3168)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3173_this_onFocusOut)
HXLINE(3174)		this->_hx___stopCursorTimer();
HXLINE(3178)		bool _hx_tmp;
HXDLIN(3178)		if (hx::IsNotNull( event->relatedObject )) {
HXLINE(3178)			_hx_tmp = !(::Std_obj::is(event->relatedObject,hx::ClassOf< ::openfl::text::TextField >()));
            		}
            		else {
HXLINE(3178)			_hx_tmp = true;
            		}
HXDLIN(3178)		if (_hx_tmp) {
HXLINE(3180)			this->_hx___stopTextInput();
            		}
            		else {
HXLINE(3184)			if (hx::IsNotNull( this->stage )) {
HXLINE(3187)				this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(3188)				this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
            			}
HXLINE(3192)			this->_hx___inputEnabled = false;
            		}
HXLINE(3195)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3197)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3198)			this->_hx___dirty = true;
HXLINE(3199)			if (!(this->_hx___renderDirty)) {
HXLINE(3199)				this->_hx___renderDirty = true;
HXDLIN(3199)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3206_this_onKeyDown)
HXDLIN(3206)		bool _hx_tmp;
HXDLIN(3206)		bool _hx_tmp1;
HXDLIN(3206)		bool _hx_tmp2;
HXDLIN(3206)		if (this->get_selectable()) {
HXDLIN(3206)			_hx_tmp2 = hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXDLIN(3206)			_hx_tmp2 = false;
            		}
HXDLIN(3206)		if (_hx_tmp2) {
HXDLIN(3206)			_hx_tmp1 = (event->keyCode == 67);
            		}
            		else {
HXDLIN(3206)			_hx_tmp1 = false;
            		}
HXDLIN(3206)		if (_hx_tmp1) {
HXDLIN(3206)			if (!(event->commandKey)) {
HXDLIN(3206)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(3206)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(3206)			_hx_tmp = false;
            		}
HXDLIN(3206)		if (_hx_tmp) {
HXLINE(3208)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3210)				::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3217_this_onMouseDown)
HXLINE(3218)		bool _hx_tmp;
HXDLIN(3218)		if (!(this->get_selectable())) {
HXLINE(3218)			_hx_tmp = hx::IsNotEq( this->get_type(),1 );
            		}
            		else {
HXLINE(3218)			_hx_tmp = false;
            		}
HXDLIN(3218)		if (_hx_tmp) {
HXLINE(3218)			return;
            		}
HXLINE(3220)		this->_hx___updateLayout();
HXLINE(3222)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(3222)		Float _hx_tmp2 = (_hx_tmp1 + this->get_scrollH());
HXDLIN(3222)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp2,this->get_mouseY());
HXLINE(3223)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3226)		{
HXLINE(3227)			this->_hx___dirty = true;
HXLINE(3228)			if (!(this->_hx___renderDirty)) {
HXLINE(3228)				this->_hx___renderDirty = true;
HXDLIN(3228)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(3231)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(3232)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::this_onMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_3237_this_onMouseWheel)
HXDLIN(3237)		 ::openfl::text::TextField _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(3237)		int _hx_tmp = _g->get_scrollV();
HXDLIN(3237)		_g->set_scrollV((_hx_tmp - event->delta));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseWheel,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3243_window_onKeyDown)
HXDLIN(3243)		switch((int)(key)){
            			case (int)8: {
HXLINE(3261)				bool _hx_tmp;
HXDLIN(3261)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3261)					_hx_tmp = (this->_hx___caretIndex > 0);
            				}
            				else {
HXLINE(3261)					_hx_tmp = false;
            				}
HXDLIN(3261)				if (_hx_tmp) {
HXLINE(3263)					this->_hx___selectionIndex = (this->_hx___caretIndex - 1);
            				}
HXLINE(3266)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3268)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3269)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3271)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(3471)				if (this->get_selectable()) {
HXLINE(3472)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3474)						this->_hx___caretIndex = this->_hx___text.length;
HXLINE(3475)						this->_hx___selectionIndex = 0;
            					}
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(3421)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3423)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3425)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(3447)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3449)					if (hx::IsNotNull( ::lime::_hx_system::Clipboard_obj::get_text() )) {
HXLINE(3451)						 ::openfl::events::TextEvent te =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,::lime::_hx_system::Clipboard_obj::get_text());
HXLINE(3453)						this->dispatchEvent(te);
HXLINE(3455)						if (!(te->isDefaultPrevented())) {
HXLINE(3457)							this->_hx___replaceSelectedText(::lime::_hx_system::Clipboard_obj::get_text(),true);
HXLINE(3459)							this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            						}
            					}
            				}
            				else {
HXLINE(3466)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(3466)					( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->_hx___textEngine->textFormatRanges->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(3432)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(3434)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(3436)						::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(3438)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3439)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(3275)				bool _hx_tmp1;
HXDLIN(3275)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3275)					_hx_tmp1 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(3275)					_hx_tmp1 = false;
            				}
HXDLIN(3275)				if (_hx_tmp1) {
HXLINE(3277)					this->_hx___selectionIndex = (this->_hx___caretIndex + 1);
            				}
HXLINE(3280)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(3282)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(3283)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(3285)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(3409)				if (this->get_selectable()) {
HXLINE(3410)					this->_hx___caretBeginningOfLine();
HXLINE(3411)					this->_hx___stopCursorTimer();
HXLINE(3412)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741901: {
HXLINE(3414)				if (this->get_selectable()) {
HXLINE(3415)					this->_hx___caretEndOfLine();
HXLINE(3416)					this->_hx___stopCursorTimer();
HXLINE(3417)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(3321)				if (this->get_selectable()) {
HXLINE(3322)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3324)						this->_hx___caretEndOfLine();
HXLINE(3326)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3328)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3331)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3333)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(3337)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3339)								this->_hx___caretNextCharacter();
            							}
            							else {
HXLINE(3343)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            							}
HXLINE(3346)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3349)					this->_hx___updateScrollH();
HXLINE(3350)					this->_hx___updateScrollV();
HXLINE(3352)					this->_hx___stopCursorTimer();
HXLINE(3353)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741904: {
HXLINE(3288)				if (this->get_selectable()) {
HXLINE(3289)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(3291)						this->_hx___caretBeginningOfLine();
HXLINE(3293)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(3295)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
            					else {
HXLINE(3298)						if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3300)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(3304)							if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3306)								this->_hx___caretPreviousCharacter();
            							}
            							else {
HXLINE(3310)								this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) )));
            							}
HXLINE(3313)							this->_hx___selectionIndex = this->_hx___caretIndex;
            						}
            					}
HXLINE(3316)					this->_hx___updateScrollH();
HXLINE(3317)					this->_hx___updateScrollV();
HXLINE(3318)					this->_hx___stopCursorTimer();
HXLINE(3319)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741905: {
HXLINE(3355)				if (this->get_selectable()) {
HXLINE(3356)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3356)						return;
            					}
HXLINE(3358)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3360)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(3364)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3366)							this->_hx___caretNextLine(null(),null());
            						}
            						else {
HXLINE(3370)							int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
HXLINE(3371)							this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            						}
HXLINE(3374)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3377)					this->_hx___updateScrollV();
HXLINE(3379)					this->_hx___stopCursorTimer();
HXLINE(3380)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)1073741906: {
HXLINE(3382)				if (this->get_selectable()) {
HXLINE(3383)					if (!(this->_hx___textEngine->multiline)) {
HXLINE(3383)						return;
            					}
HXLINE(3385)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(3387)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(3391)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(3393)							this->_hx___caretPreviousLine(null(),null());
            						}
            						else {
HXLINE(3397)							int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
HXLINE(3398)							this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->_hx___caretIndex) ),( (Float)(this->_hx___selectionIndex) ))));
            						}
HXLINE(3401)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
HXLINE(3404)					this->_hx___updateScrollV();
HXLINE(3406)					this->_hx___stopCursorTimer();
HXLINE(3407)					this->_hx___startCursorTimer();
            				}
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(3246)				if (this->_hx___textEngine->multiline) {
HXLINE(3248)					 ::openfl::events::TextEvent te1 =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,true,HX_("\n",0a,00,00,00));
HXLINE(3250)					this->dispatchEvent(te1);
HXLINE(3252)					if (!(te1->isDefaultPrevented())) {
HXLINE(3254)						this->_hx___replaceSelectedText(HX_("\n",0a,00,00,00),true);
HXLINE(3256)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_3484_window_onTextInput)
HXLINE(3485)		this->_hx___replaceSelectedText(value,true);
HXLINE(3488)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___domRender,"__domRender");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { return hx::Val( _hx___domRender ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__replaceText") ) { return hx::Val( _hx___replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollV") ) { return hx::Val( _hx___updateScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseWheel") ) { return hx::Val( this_onMouseWheel_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCharBoundaries") ) { return hx::Val( _hx___getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__replaceSelectedText") ) { return hx::Val( _hx___replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__domRender") ) { _hx___domRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("defaultTextFormat",e5,c7,e0,0a));
	outFields->push(HX_("displayAsPassword",0f,cb,96,ea));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("htmlText",b8,1f,38,10));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("mouseWheelEnabled",eb,16,54,65));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("selectionBeginIndex",95,7f,17,d7));
	outFields->push(HX_("selectionEndIndex",a3,0d,42,4b));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textColor",76,01,4a,e3));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("__bounds",95,f1,4c,0e));
	outFields->push(HX_("__caretIndex",af,31,ef,15));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__dirty",f2,a8,2e,44));
	outFields->push(HX_("__displayAsPassword",ef,f3,86,9d));
	outFields->push(HX_("__domRender",58,38,ba,4f));
	outFields->push(HX_("__inputEnabled",b7,e0,1d,37));
	outFields->push(HX_("__isHTML",75,61,94,0a));
	outFields->push(HX_("__layoutDirty",e8,e9,31,d3));
	outFields->push(HX_("__mouseWheelEnabled",cb,3f,44,18));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__selectionIndex",46,0a,c3,7d));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__text",cd,2f,f2,fb));
	outFields->push(HX_("__htmlText",d8,92,70,b3));
	outFields->push(HX_("__textEngine",6f,43,08,6c));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextField_obj,_hx___bounds),HX_("__bounds",95,f1,4c,0e)},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_("__caretIndex",af,31,ef,15)},
	{hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_("__dirty",f2,a8,2e,44)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_("__displayAsPassword",ef,f3,86,9d)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___domRender),HX_("__domRender",58,38,ba,4f)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_("__inputEnabled",b7,e0,1d,37)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_("__isHTML",75,61,94,0a)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_("__layoutDirty",e8,e9,31,d3)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_("__mouseWheelEnabled",cb,3f,44,18)},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_("__selectionIndex",46,0a,c3,7d)},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{hx::fsObject /*  ::openfl::_internal::symbols::DynamicTextSymbol */ ,(int)offsetof(TextField_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_("__text",cd,2f,f2,fb)},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_("__htmlText",d8,92,70,b3)},
	{hx::fsObject /*  ::openfl::_internal::text::TextEngine */ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_("__textEngine",6f,43,08,6c)},
	{hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::openfl::text::TextFormat */ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_("__defaultTextFormat",c5,f0,d0,bd)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_("__missingFontWarning",a7,0d,0e,1a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_("__bounds",95,f1,4c,0e),
	HX_("__caretIndex",af,31,ef,15),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__dirty",f2,a8,2e,44),
	HX_("__displayAsPassword",ef,f3,86,9d),
	HX_("__domRender",58,38,ba,4f),
	HX_("__inputEnabled",b7,e0,1d,37),
	HX_("__isHTML",75,61,94,0a),
	HX_("__layoutDirty",e8,e9,31,d3),
	HX_("__mouseWheelEnabled",cb,3f,44,18),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__selectionIndex",46,0a,c3,7d),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__symbol",78,1a,0d,97),
	HX_("__text",cd,2f,f2,fb),
	HX_("__htmlText",d8,92,70,b3),
	HX_("__textEngine",6f,43,08,6c),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("appendText",a7,cf,05,5b),
	HX_("getCharBoundaries",74,85,a1,8b),
	HX_("getCharIndexAtPoint",17,ee,9c,aa),
	HX_("getFirstCharInParagraph",f9,5c,3d,08),
	HX_("getLineIndexAtPoint",35,dc,50,98),
	HX_("getLineIndexOfChar",b5,68,99,a1),
	HX_("getLineLength",30,ec,21,d0),
	HX_("getLineMetrics",b9,ab,c6,f2),
	HX_("getLineOffset",dd,ee,59,91),
	HX_("getLineText",77,dd,16,b0),
	HX_("getParagraphLength",fe,0e,4e,c4),
	HX_("getTextFormat",fa,6b,f1,90),
	HX_("replaceSelectedText",fc,fe,33,bb),
	HX_("replaceText",01,6b,95,61),
	HX_("setSelection",4a,b8,6a,b2),
	HX_("setTextFormat",06,4e,f7,d5),
	HX_("__allowMouseFocus",3c,92,71,07),
	HX_("__caretBeginningOfLine",45,c9,47,fd),
	HX_("__caretEndOfLine",03,74,b1,5c),
	HX_("__caretNextCharacter",d3,7b,4f,ea),
	HX_("__caretNextLine",0a,68,ad,0d),
	HX_("__caretPreviousCharacter",8f,ce,6c,11),
	HX_("__caretPreviousLine",ce,0e,89,48),
	HX_("__disableInput",22,64,62,1d),
	HX_("__dispatch",da,41,9c,c1),
	HX_("__enableInput",67,4b,65,d1),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getAdvance",ac,09,01,77),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__getCharBoundaries",54,ae,91,3e),
	HX_("__getCharIndexOnDifferentLine",08,76,0f,0a),
	HX_("__getCursor",ec,60,6b,e9),
	HX_("__getGroup",e9,35,04,9d),
	HX_("__getPosition",3f,a4,66,39),
	HX_("__getRenderBounds",01,11,b8,7b),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__hitTestMask",b1,14,fd,3b),
	HX_("__replaceSelectedText",dc,1f,28,29),
	HX_("__replaceText",e1,ab,0d,aa),
	HX_("__startCursorTimer",ed,46,a3,83),
	HX_("__startTextInput",7b,ae,85,aa),
	HX_("__stopCursorTimer",0d,cd,6c,26),
	HX_("__stopTextInput",9b,6c,cb,a1),
	HX_("__updateLayout",b3,d8,3c,79),
	HX_("__updateScrollH",72,d1,f8,83),
	HX_("__updateScrollV",80,d1,f8,83),
	HX_("__updateText",76,32,42,3e),
	HX_("__updateTransforms",10,f4,b0,50),
	HX_("get_antiAliasType",bf,cf,6a,ee),
	HX_("set_antiAliasType",cb,a7,d8,11),
	HX_("get_autoSize",d9,43,93,e4),
	HX_("set_autoSize",4d,67,8c,f9),
	HX_("get_background",37,1c,13,9c),
	HX_("set_background",ab,04,33,bc),
	HX_("get_backgroundColor",ac,1d,52,98),
	HX_("set_backgroundColor",b8,10,ef,d4),
	HX_("get_border",b5,bc,a1,54),
	HX_("set_border",29,5b,1f,58),
	HX_("get_borderColor",6e,f4,b6,97),
	HX_("set_borderColor",7a,71,82,93),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_caretIndex",d8,3e,51,53),
	HX_("get_defaultTextFormat",bc,ca,8e,89),
	HX_("set_defaultTextFormat",c8,98,97,dd),
	HX_("get_displayAsPassword",e6,cd,44,69),
	HX_("set_displayAsPassword",f2,9b,4d,bd),
	HX_("get_embedFonts",74,4f,d7,04),
	HX_("set_embedFonts",e8,37,f7,24),
	HX_("get_gridFitType",9c,aa,f5,74),
	HX_("set_gridFitType",a8,27,c1,70),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_htmlText",c1,d3,51,c5),
	HX_("set_htmlText",35,f7,4a,da),
	HX_("get_length",af,04,8f,8f),
	HX_("get_maxChars",a2,a3,ea,a4),
	HX_("set_maxChars",16,c7,e3,b9),
	HX_("get_maxScrollH",a0,35,f2,10),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("get_mouseWheelEnabled",c2,19,02,e4),
	HX_("set_mouseWheelEnabled",ce,e7,0a,38),
	HX_("get_multiline",c4,a6,75,5f),
	HX_("set_multiline",d0,88,7b,a4),
	HX_("get_numLines",e2,a5,2b,e7),
	HX_("get_restrict",45,7f,b8,a6),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollH",b2,93,d2,b6),
	HX_("set_scrollH",be,9a,3f,c1),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("get_selectable",df,3e,20,3a),
	HX_("set_selectable",53,27,40,5a),
	HX_("get_selectionBeginIndex",2c,26,6d,df),
	HX_("get_selectionEndIndex",7a,10,f0,c9),
	HX_("get_sharpness",58,f6,88,dc),
	HX_("set_sharpness",64,d8,8e,21),
	HX_("get_tabEnabled",f5,7e,fe,b5),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	HX_("get_textColor",4d,d5,ad,a4),
	HX_("set_textColor",59,b7,b3,e9),
	HX_("get_textWidth",f0,19,b4,24),
	HX_("get_textHeight",bd,10,32,af),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	HX_("get_wordWrap",bd,c8,f4,b5),
	HX_("set_wordWrap",31,ec,ed,ca),
	HX_("get_x",4f,a5,60,91),
	HX_("set_x",5b,9b,2f,7a),
	HX_("get_y",50,a5,60,91),
	HX_("set_y",5c,9b,2f,7a),
	HX_("stage_onMouseMove",76,bc,61,de),
	HX_("stage_onMouseUp",80,ac,07,d1),
	HX_("this_onAddedToStage",23,9e,ce,72),
	HX_("this_onFocusIn",1d,62,fb,dc),
	HX_("this_onFocusOut",56,0b,ff,7e),
	HX_("this_onKeyDown",e1,85,bf,37),
	HX_("this_onMouseDown",67,5d,aa,6d),
	HX_("this_onMouseWheel",f6,33,56,73),
	HX_("window_onKeyDown",f3,7d,3b,d1),
	HX_("window_onTextInput",ef,a0,6a,c0),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_("__defaultTextFormat",c5,f0,d0,bd),
	HX_("__missingFontWarning",a7,0d,0e,1a),
	::String(null())
};

void TextField_obj::__register()
{
	TextField_obj _hx_dummy;
	TextField_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.text.TextField",ca,a8,d5,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_130_boot)
HXDLIN( 130)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
