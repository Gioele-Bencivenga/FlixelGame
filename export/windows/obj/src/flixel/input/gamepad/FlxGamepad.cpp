// Generated by Haxe 4.0.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxAnalogToDigitalMode
#include <flixel/input/gamepad/FlxAnalogToDigitalMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAttachment
#include <flixel/input/gamepad/FlxGamepadAttachment.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadDeadZoneMode
#include <flixel/input/gamepad/FlxGamepadDeadZoneMode.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadModel
#include <flixel/input/gamepad/FlxGamepadModel.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadAnalogList
#include <flixel/input/gamepad/lists/FlxGamepadAnalogList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadMotionValueList
#include <flixel/input/gamepad/lists/FlxGamepadMotionValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadPointerValueList
#include <flixel/input/gamepad/lists/FlxGamepadPointerValueList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_LogitechMapping
#include <flixel/input/gamepad/mappings/LogitechMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MFiMapping
#include <flixel/input/gamepad/mappings/MFiMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
#include <flixel/input/gamepad/mappings/MayflashWiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_OUYAMapping
#include <flixel/input/gamepad/mappings/OUYAMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PS4Mapping
#include <flixel/input/gamepad/mappings/PS4Mapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_PSVitaMapping
#include <flixel/input/gamepad/mappings/PSVitaMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_WiiRemoteMapping
#include <flixel/input/gamepad/mappings/WiiRemoteMapping.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_XInputMapping
#include <flixel/input/gamepad/mappings/XInputMapping.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputControl
#include <openfl/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInputDevice
#include <openfl/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a9014dd1064fc14_29_new,"flixel.input.gamepad.FlxGamepad","new",0x48c92544,"flixel.input.gamepad.FlxGamepad.new","flixel/input/gamepad/FlxGamepad.hx",29,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_171_getButton,"flixel.input.gamepad.FlxGamepad","getButton",0xf881030c,"flixel.input.gamepad.FlxGamepad.getButton","flixel/input/gamepad/FlxGamepad.hx",171,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_186_applyAxisFlip,"flixel.input.gamepad.FlxGamepad","applyAxisFlip",0xd984f960,"flixel.input.gamepad.FlxGamepad.applyAxisFlip","flixel/input/gamepad/FlxGamepad.hx",186,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_196_update,"flixel.input.gamepad.FlxGamepad","update",0x525157a5,"flixel.input.gamepad.FlxGamepad.update","flixel/input/gamepad/FlxGamepad.hx",196,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_262_reset,"flixel.input.gamepad.FlxGamepad","reset",0x36e79fb3,"flixel.input.gamepad.FlxGamepad.reset","flixel/input/gamepad/FlxGamepad.hx",262,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_285_destroy,"flixel.input.gamepad.FlxGamepad","destroy",0x3b91c3de,"flixel.input.gamepad.FlxGamepad.destroy","flixel/input/gamepad/FlxGamepad.hx",285,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_310_checkStatus,"flixel.input.gamepad.FlxGamepad","checkStatus",0x42f892fe,"flixel.input.gamepad.FlxGamepad.checkStatus","flixel/input/gamepad/FlxGamepad.hx",310,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_354_checkStatusRaw,"flixel.input.gamepad.FlxGamepad","checkStatusRaw",0x11516d8a,"flixel.input.gamepad.FlxGamepad.checkStatusRaw","flixel/input/gamepad/FlxGamepad.hx",354,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_369_anyPressed,"flixel.input.gamepad.FlxGamepad","anyPressed",0xee8d44b2,"flixel.input.gamepad.FlxGamepad.anyPressed","flixel/input/gamepad/FlxGamepad.hx",369,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_391_anyPressedRaw,"flixel.input.gamepad.FlxGamepad","anyPressedRaw",0x4ffbc456,"flixel.input.gamepad.FlxGamepad.anyPressedRaw","flixel/input/gamepad/FlxGamepad.hx",391,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_411_anyJustPressed,"flixel.input.gamepad.FlxGamepad","anyJustPressed",0xd6d7c7e6,"flixel.input.gamepad.FlxGamepad.anyJustPressed","flixel/input/gamepad/FlxGamepad.hx",411,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_432_anyJustPressedRaw,"flixel.input.gamepad.FlxGamepad","anyJustPressedRaw",0xeb4439a2,"flixel.input.gamepad.FlxGamepad.anyJustPressedRaw","flixel/input/gamepad/FlxGamepad.hx",432,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_452_anyJustReleased,"flixel.input.gamepad.FlxGamepad","anyJustReleased",0x2ccd2ef9,"flixel.input.gamepad.FlxGamepad.anyJustReleased","flixel/input/gamepad/FlxGamepad.hx",452,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_473_anyJustReleasedRaw,"flixel.input.gamepad.FlxGamepad","anyJustReleasedRaw",0x1df8406f,"flixel.input.gamepad.FlxGamepad.anyJustReleasedRaw","flixel/input/gamepad/FlxGamepad.hx",473,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_492_firstPressedID,"flixel.input.gamepad.FlxGamepad","firstPressedID",0xeb182e49,"flixel.input.gamepad.FlxGamepad.firstPressedID","flixel/input/gamepad/FlxGamepad.hx",492,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_500_firstPressedRawID,"flixel.input.gamepad.FlxGamepad","firstPressedRawID",0xee1a19f5,"flixel.input.gamepad.FlxGamepad.firstPressedRawID","flixel/input/gamepad/FlxGamepad.hx",500,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_517_firstJustPressedID,"flixel.input.gamepad.FlxGamepad","firstJustPressedID",0x153c347d,"flixel.input.gamepad.FlxGamepad.firstJustPressedID","flixel/input/gamepad/FlxGamepad.hx",517,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_525_firstJustPressedRawID,"flixel.input.gamepad.FlxGamepad","firstJustPressedRawID",0xcc1cec41,"flixel.input.gamepad.FlxGamepad.firstJustPressedRawID","flixel/input/gamepad/FlxGamepad.hx",525,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_542_firstJustReleasedID,"flixel.input.gamepad.FlxGamepad","firstJustReleasedID",0x71e64c58,"flixel.input.gamepad.FlxGamepad.firstJustReleasedID","flixel/input/gamepad/FlxGamepad.hx",542,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_550_firstJustReleasedRawID,"flixel.input.gamepad.FlxGamepad","firstJustReleasedRawID",0xfa5cef46,"flixel.input.gamepad.FlxGamepad.firstJustReleasedRawID","flixel/input/gamepad/FlxGamepad.hx",550,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_569_getAxis,"flixel.input.gamepad.FlxGamepad","getAxis",0x2a07633b,"flixel.input.gamepad.FlxGamepad.getAxis","flixel/input/gamepad/FlxGamepad.hx",569,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_597_getAxisRaw,"flixel.input.gamepad.FlxGamepad","getAxisRaw",0x2bb6a16d,"flixel.input.gamepad.FlxGamepad.getAxisRaw","flixel/input/gamepad/FlxGamepad.hx",597,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_607_isAxisForAnalogStick,"flixel.input.gamepad.FlxGamepad","isAxisForAnalogStick",0x770b861e,"flixel.input.gamepad.FlxGamepad.isAxisForAnalogStick","flixel/input/gamepad/FlxGamepad.hx",607,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_625_getAnalogStickByAxis,"flixel.input.gamepad.FlxGamepad","getAnalogStickByAxis",0xdbfed05e,"flixel.input.gamepad.FlxGamepad.getAnalogStickByAxis","flixel/input/gamepad/FlxGamepad.hx",625,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_642_getXAxis,"flixel.input.gamepad.FlxGamepad","getXAxis",0xb657655f,"flixel.input.gamepad.FlxGamepad.getXAxis","flixel/input/gamepad/FlxGamepad.hx",642,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_650_getXAxisRaw,"flixel.input.gamepad.FlxGamepad","getXAxisRaw",0x9b9f8dc9,"flixel.input.gamepad.FlxGamepad.getXAxisRaw","flixel/input/gamepad/FlxGamepad.hx",650,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_659_getYAxis,"flixel.input.gamepad.FlxGamepad","getYAxis",0x49bdf9e0,"flixel.input.gamepad.FlxGamepad.getYAxis","flixel/input/gamepad/FlxGamepad.hx",659,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_668_getYAxisRaw,"flixel.input.gamepad.FlxGamepad","getYAxisRaw",0xd4d1ffe8,"flixel.input.gamepad.FlxGamepad.getYAxisRaw","flixel/input/gamepad/FlxGamepad.hx",668,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_679_getAnalogAxes,"flixel.input.gamepad.FlxGamepad","getAnalogAxes",0xfcc3298f,"flixel.input.gamepad.FlxGamepad.getAnalogAxes","flixel/input/gamepad/FlxGamepad.hx",679,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_686_anyButton,"flixel.input.gamepad.FlxGamepad","anyButton",0xd989e1e2,"flixel.input.gamepad.FlxGamepad.anyButton","flixel/input/gamepad/FlxGamepad.hx",686,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_701_anyInput,"flixel.input.gamepad.FlxGamepad","anyInput",0x4fe8921a,"flixel.input.gamepad.FlxGamepad.anyInput","flixel/input/gamepad/FlxGamepad.hx",701,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_731_getAxisValue,"flixel.input.gamepad.FlxGamepad","getAxisValue",0xcd45f636,"flixel.input.gamepad.FlxGamepad.getAxisValue","flixel/input/gamepad/FlxGamepad.hx",731,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_761_getAnalogXAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogXAxisValue",0xef30b762,"flixel.input.gamepad.FlxGamepad.getAnalogXAxisValue","flixel/input/gamepad/FlxGamepad.hx",761,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_771_getAnalogYAxisValue,"flixel.input.gamepad.FlxGamepad","getAnalogYAxisValue",0xaf7b2f41,"flixel.input.gamepad.FlxGamepad.getAnalogYAxisValue","flixel/input/gamepad/FlxGamepad.hx",771,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_781_getAnalogAxisValueCircular,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueCircular",0x954ad2e5,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueCircular","flixel/input/gamepad/FlxGamepad.hx",781,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_799_getAnalogAxisValueIndependent,"flixel.input.gamepad.FlxGamepad","getAnalogAxisValueIndependent",0x41d504b4,"flixel.input.gamepad.FlxGamepad.getAnalogAxisValueIndependent","flixel/input/gamepad/FlxGamepad.hx",799,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_807_handleAxisMove,"flixel.input.gamepad.FlxGamepad","handleAxisMove",0x0dec85b6,"flixel.input.gamepad.FlxGamepad.handleAxisMove","flixel/input/gamepad/FlxGamepad.hx",807,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_826_handleAxisMoveSub,"flixel.input.gamepad.FlxGamepad","handleAxisMoveSub",0xcf80d16a,"flixel.input.gamepad.FlxGamepad.handleAxisMoveSub","flixel/input/gamepad/FlxGamepad.hx",826,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_858_createMappingForModel,"flixel.input.gamepad.FlxGamepad","createMappingForModel",0x1a17db56,"flixel.input.gamepad.FlxGamepad.createMappingForModel","flixel/input/gamepad/FlxGamepad.hx",858,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_875_get_name,"flixel.input.gamepad.FlxGamepad","get_name",0xdbd29e70,"flixel.input.gamepad.FlxGamepad.get_name","flixel/input/gamepad/FlxGamepad.hx",875,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_883_set_model,"flixel.input.gamepad.FlxGamepad","set_model",0xd59c83f0,"flixel.input.gamepad.FlxGamepad.set_model","flixel/input/gamepad/FlxGamepad.hx",883,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_891_set_attachment,"flixel.input.gamepad.FlxGamepad","set_attachment",0xa3a9463c,"flixel.input.gamepad.FlxGamepad.set_attachment","flixel/input/gamepad/FlxGamepad.hx",891,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_899_get_deadZone,"flixel.input.gamepad.FlxGamepad","get_deadZone",0x3fdae195,"flixel.input.gamepad.FlxGamepad.get_deadZone","flixel/input/gamepad/FlxGamepad.hx",899,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_904_set_deadZone,"flixel.input.gamepad.FlxGamepad","set_deadZone",0x54d40509,"flixel.input.gamepad.FlxGamepad.set_deadZone","flixel/input/gamepad/FlxGamepad.hx",904,0xdb78a809)
HX_LOCAL_STACK_FRAME(_hx_pos_0a9014dd1064fc14_909_toString,"flixel.input.gamepad.FlxGamepad","toString",0x4b874148,"flixel.input.gamepad.FlxGamepad.toString","flixel/input/gamepad/FlxGamepad.hx",909,0xdb78a809)
namespace flixel{
namespace input{
namespace gamepad{

void FlxGamepad_obj::__construct(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_29_new)
HXLINE( 134)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 128)		this->_deadZone = ((Float)0.15);
HXLINE( 125)		this->axisActive = false;
HXLINE( 124)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 124)		{
HXLINE( 124)			_g->push(0);
HXDLIN( 124)			_g->push(0);
HXDLIN( 124)			_g->push(0);
HXDLIN( 124)			_g->push(0);
HXDLIN( 124)			_g->push(0);
HXDLIN( 124)			_g->push(0);
            		}
HXDLIN( 124)		this->axis = _g;
HXLINE(  81)		this->deadZoneMode = ::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::INDEPENDENT_AXES_dyn();
HXLINE(  58)		this->connected = true;
HXLINE( 138)		this->id = ID;
HXLINE( 140)		this->manager = Manager;
HXLINE( 142)		this->pressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 143)		this->released =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,0,hx::ObjectPtr<OBJ_>(this));
HXLINE( 144)		this->justPressed =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,2,hx::ObjectPtr<OBJ_>(this));
HXLINE( 145)		this->justReleased =  ::flixel::input::gamepad::lists::FlxGamepadButtonList_obj::__alloc( HX_CTX ,-1,hx::ObjectPtr<OBJ_>(this));
HXLINE( 146)		this->analog =  ::flixel::input::gamepad::lists::FlxGamepadAnalogList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 147)		this->motion =  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 148)		this->pointer =  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 150)		if (hx::IsNull( Model )) {
HXLINE( 159)			Model = ::flixel::input::gamepad::FlxGamepadModel_obj::XINPUT_dyn();
            		}
HXLINE( 163)		if (hx::IsNull( Attachment )) {
HXLINE( 164)			Attachment = ::flixel::input::gamepad::FlxGamepadAttachment_obj::NONE_dyn();
            		}
HXLINE( 166)		this->set_model(Model);
HXLINE( 167)		this->detectedModel = Model;
            	}

Dynamic FlxGamepad_obj::__CreateEmpty() { return new FlxGamepad_obj; }

void *FlxGamepad_obj::_hx_vtable = 0;

Dynamic FlxGamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGamepad_obj > _hx_result = new FlxGamepad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxGamepad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x74532b62;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::gamepad::FlxGamepad_obj::destroy,
};

void *FlxGamepad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_input_gamepad_FlxGamepad__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::flixel::input::gamepad::FlxGamepadButton FlxGamepad_obj::getButton(int RawID){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_171_getButton)
HXLINE( 172)		if ((RawID == -1)) {
HXLINE( 173)			return null();
            		}
HXLINE( 174)		 ::flixel::input::gamepad::FlxGamepadButton gamepadButton = this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 176)		if (hx::IsNull( gamepadButton )) {
HXLINE( 178)			gamepadButton =  ::flixel::input::gamepad::FlxGamepadButton_obj::__alloc( HX_CTX ,RawID);
HXLINE( 179)			this->buttons[RawID] = gamepadButton;
            		}
HXLINE( 182)		return gamepadButton;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getButton,return )

Float FlxGamepad_obj::applyAxisFlip(Float axisValue,int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_186_applyAxisFlip)
HXLINE( 187)		if (this->mapping->isAxisFlipped(axisID)) {
HXLINE( 188)			axisValue = (axisValue * ( (Float)(-1) ));
            		}
HXLINE( 189)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,applyAxisFlip,return )

void FlxGamepad_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_196_update)
HXLINE( 198)		 ::openfl::ui::GameInputControl control;
HXLINE( 199)		 ::flixel::input::gamepad::FlxGamepadButton button;
HXLINE( 201)		if (hx::IsNull( this->_device )) {
HXLINE( 202)			return;
            		}
HXLINE( 204)		{
HXLINE( 204)			int _g = 0;
HXDLIN( 204)			int _g1 = this->_device->get_numControls();
HXDLIN( 204)			while((_g < _g1)){
HXLINE( 204)				_g = (_g + 1);
HXDLIN( 204)				int i = (_g - 1);
HXLINE( 206)				control = this->_device->getControlAt(i);
HXLINE( 209)				button = this->getButton(i);
HXLINE( 211)				if (this->isAxisForAnalogStick(i)) {
HXLINE( 213)					this->handleAxisMove(i,control->value,button->value);
            				}
HXLINE( 216)				button->value = control->value;
HXLINE( 218)				Float value = ::Math_obj::abs(control->value);
HXLINE( 220)				if ((value < this->get_deadZone())) {
HXLINE( 222)					button->release();
            				}
            				else {
HXLINE( 224)					if ((value > this->get_deadZone())) {
HXLINE( 226)						button->press();
            					}
            				}
            			}
            		}
HXLINE( 252)		{
HXLINE( 252)			int _g2 = 0;
HXDLIN( 252)			::Array< ::Dynamic> _g3 = this->buttons;
HXDLIN( 252)			while((_g2 < _g3->length)){
HXLINE( 252)				 ::flixel::input::gamepad::FlxGamepadButton button1 = _g3->__get(_g2).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 252)				_g2 = (_g2 + 1);
HXLINE( 254)				if (hx::IsNotNull( button1 )) {
HXLINE( 256)					button1->update();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,update,(void))

void FlxGamepad_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_262_reset)
HXLINE( 263)		{
HXLINE( 263)			int _g = 0;
HXDLIN( 263)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 263)			while((_g < _g1->length)){
HXLINE( 263)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 263)				_g = (_g + 1);
HXLINE( 265)				if (hx::IsNotNull( button )) {
HXLINE( 267)					button->reset();
            				}
            			}
            		}
HXLINE( 271)		int numAxis = this->axis->length;
HXLINE( 273)		{
HXLINE( 273)			int _g2 = 0;
HXDLIN( 273)			int _g3 = numAxis;
HXDLIN( 273)			while((_g2 < _g3)){
HXLINE( 273)				_g2 = (_g2 + 1);
HXDLIN( 273)				int i = (_g2 - 1);
HXLINE( 275)				this->axis[i] = ( (Float)(0) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,reset,(void))

void FlxGamepad_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_285_destroy)
HXLINE( 286)		this->connected = false;
HXLINE( 288)		this->buttons = null();
HXLINE( 289)		this->axis = null();
HXLINE( 290)		this->manager = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,destroy,(void))

bool FlxGamepad_obj::checkStatus(int ID,int Status){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_310_checkStatus)
HXDLIN( 310)		switch((int)(ID)){
            			case (int)-2: {
HXLINE( 313)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 318)						return this->justReleased->get_ANY();
            					}
            					break;
            					case (int)0: {
HXLINE( 317)						return this->released->get_ANY();
            					}
            					break;
            					case (int)1: {
HXLINE( 315)						return this->pressed->get_ANY();
            					}
            					break;
            					case (int)2: {
HXLINE( 316)						return this->justPressed->get_ANY();
            					}
            					break;
            				}
            			}
            			break;
            			case (int)-1: {
HXLINE( 321)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 326)						return this->justReleased->get_NONE();
            					}
            					break;
            					case (int)0: {
HXLINE( 325)						return this->released->get_NONE();
            					}
            					break;
            					case (int)1: {
HXLINE( 323)						return this->pressed->get_NONE();
            					}
            					break;
            					case (int)2: {
HXLINE( 324)						return this->justPressed->get_NONE();
            					}
            					break;
            				}
            			}
            			break;
            			default:{
HXLINE( 329)				int rawID = this->mapping->getRawID(ID);
HXLINE( 330)				 ::flixel::input::gamepad::FlxGamepadButton button = this->buttons->__get(rawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXLINE( 331)				if (hx::IsNull( button )) {
HXLINE( 333)					return false;
            				}
HXLINE( 335)				int value = button->current;
HXLINE( 336)				switch((int)(Status)){
            					case (int)-1: {
HXLINE( 341)						return (value == -1);
            					}
            					break;
            					case (int)0: {
HXLINE( 339)						return (value == 0);
            					}
            					break;
            					case (int)1: {
HXLINE( 338)						return (value == 1);
            					}
            					break;
            					case (int)2: {
HXLINE( 340)						return (value == 2);
            					}
            					break;
            				}
            			}
            		}
HXLINE( 310)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatus,return )

bool FlxGamepad_obj::checkStatusRaw(int RawID,int Status){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_354_checkStatusRaw)
HXLINE( 355)		if (hx::IsNotNull( this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 357)			return (this->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == Status);
            		}
HXLINE( 359)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,checkStatusRaw,return )

bool FlxGamepad_obj::anyPressed(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_369_anyPressed)
HXLINE( 370)		{
HXLINE( 370)			int _g = 0;
HXDLIN( 370)			while((_g < IDArray->length)){
HXLINE( 370)				int id = IDArray->__get(_g);
HXDLIN( 370)				_g = (_g + 1);
HXLINE( 372)				int raw = this->mapping->getRawID(id);
HXLINE( 373)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 375)					 ::flixel::input::gamepad::FlxGamepadButton _this = this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 375)					bool _hx_tmp;
HXDLIN( 375)					if ((_this->current != 1)) {
HXLINE( 375)						_hx_tmp = (_this->current == 2);
            					}
            					else {
HXLINE( 375)						_hx_tmp = true;
            					}
HXDLIN( 375)					if (_hx_tmp) {
HXLINE( 377)						return true;
            					}
            				}
            			}
            		}
HXLINE( 381)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressed,return )

bool FlxGamepad_obj::anyPressedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_391_anyPressedRaw)
HXLINE( 392)		{
HXLINE( 392)			int _g = 0;
HXDLIN( 392)			while((_g < RawIDArray->length)){
HXLINE( 392)				int b = RawIDArray->__get(_g);
HXDLIN( 392)				_g = (_g + 1);
HXLINE( 394)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 396)					 ::flixel::input::gamepad::FlxGamepadButton _this = this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 396)					bool _hx_tmp;
HXDLIN( 396)					if ((_this->current != 1)) {
HXLINE( 396)						_hx_tmp = (_this->current == 2);
            					}
            					else {
HXLINE( 396)						_hx_tmp = true;
            					}
HXDLIN( 396)					if (_hx_tmp) {
HXLINE( 397)						return true;
            					}
            				}
            			}
            		}
HXLINE( 401)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyPressedRaw,return )

bool FlxGamepad_obj::anyJustPressed(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_411_anyJustPressed)
HXLINE( 412)		{
HXLINE( 412)			int _g = 0;
HXDLIN( 412)			while((_g < IDArray->length)){
HXLINE( 412)				int b = IDArray->__get(_g);
HXDLIN( 412)				_g = (_g + 1);
HXLINE( 414)				int raw = this->mapping->getRawID(b);
HXLINE( 415)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 417)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == 2)) {
HXLINE( 418)						return true;
            					}
            				}
            			}
            		}
HXLINE( 422)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressed,return )

bool FlxGamepad_obj::anyJustPressedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_432_anyJustPressedRaw)
HXLINE( 433)		{
HXLINE( 433)			int _g = 0;
HXDLIN( 433)			while((_g < RawIDArray->length)){
HXLINE( 433)				int b = RawIDArray->__get(_g);
HXDLIN( 433)				_g = (_g + 1);
HXLINE( 435)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 437)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == 2)) {
HXLINE( 438)						return true;
            					}
            				}
            			}
            		}
HXLINE( 442)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustPressedRaw,return )

bool FlxGamepad_obj::anyJustReleased(::Array< int > IDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_452_anyJustReleased)
HXLINE( 453)		{
HXLINE( 453)			int _g = 0;
HXDLIN( 453)			while((_g < IDArray->length)){
HXLINE( 453)				int b = IDArray->__get(_g);
HXDLIN( 453)				_g = (_g + 1);
HXLINE( 455)				int raw = this->mapping->getRawID(b);
HXLINE( 456)				if (hx::IsNotNull( this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 458)					if ((this->buttons->__get(raw).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == -1)) {
HXLINE( 459)						return true;
            					}
            				}
            			}
            		}
HXLINE( 463)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleased,return )

bool FlxGamepad_obj::anyJustReleasedRaw(::Array< int > RawIDArray){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_473_anyJustReleasedRaw)
HXLINE( 474)		{
HXLINE( 474)			int _g = 0;
HXDLIN( 474)			while((_g < RawIDArray->length)){
HXLINE( 474)				int b = RawIDArray->__get(_g);
HXDLIN( 474)				_g = (_g + 1);
HXLINE( 476)				if (hx::IsNotNull( this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >() )) {
HXLINE( 478)					if ((this->buttons->__get(b).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >()->current == -1)) {
HXLINE( 479)						return true;
            					}
            				}
            			}
            		}
HXLINE( 483)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyJustReleasedRaw,return )

int FlxGamepad_obj::firstPressedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_492_firstPressedID)
HXDLIN( 492)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 492)		return _hx_tmp->getID(this->firstPressedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedID,return )

int FlxGamepad_obj::firstPressedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_500_firstPressedRawID)
HXLINE( 501)		{
HXLINE( 501)			int _g = 0;
HXDLIN( 501)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 501)			while((_g < _g1->length)){
HXLINE( 501)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 501)				_g = (_g + 1);
HXLINE( 503)				bool _hx_tmp;
HXDLIN( 503)				if (hx::IsNotNull( button )) {
HXLINE( 503)					if ((button->current != 0)) {
HXLINE( 503)						_hx_tmp = (button->current == -1);
            					}
            					else {
HXLINE( 503)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE( 503)					_hx_tmp = false;
            				}
HXDLIN( 503)				if (_hx_tmp) {
HXLINE( 505)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 508)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstPressedRawID,return )

int FlxGamepad_obj::firstJustPressedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_517_firstJustPressedID)
HXDLIN( 517)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 517)		return _hx_tmp->getID(this->firstJustPressedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedID,return )

int FlxGamepad_obj::firstJustPressedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_525_firstJustPressedRawID)
HXLINE( 526)		{
HXLINE( 526)			int _g = 0;
HXDLIN( 526)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 526)			while((_g < _g1->length)){
HXLINE( 526)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 526)				_g = (_g + 1);
HXLINE( 528)				bool _hx_tmp;
HXDLIN( 528)				if (hx::IsNotNull( button )) {
HXLINE( 528)					_hx_tmp = (button->current == 2);
            				}
            				else {
HXLINE( 528)					_hx_tmp = false;
            				}
HXDLIN( 528)				if (_hx_tmp) {
HXLINE( 530)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 533)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustPressedRawID,return )

int FlxGamepad_obj::firstJustReleasedID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_542_firstJustReleasedID)
HXDLIN( 542)		 ::flixel::input::gamepad::mappings::FlxGamepadMapping _hx_tmp = this->mapping;
HXDLIN( 542)		return _hx_tmp->getID(this->firstJustReleasedRawID());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedID,return )

int FlxGamepad_obj::firstJustReleasedRawID(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_550_firstJustReleasedRawID)
HXLINE( 551)		{
HXLINE( 551)			int _g = 0;
HXDLIN( 551)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 551)			while((_g < _g1->length)){
HXLINE( 551)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 551)				_g = (_g + 1);
HXLINE( 553)				bool _hx_tmp;
HXDLIN( 553)				if (hx::IsNotNull( button )) {
HXLINE( 553)					_hx_tmp = (button->current == -1);
            				}
            				else {
HXLINE( 553)					_hx_tmp = false;
            				}
HXDLIN( 553)				if (_hx_tmp) {
HXLINE( 555)					return ( (int)(button->ID) );
            				}
            			}
            		}
HXLINE( 558)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,firstJustReleasedRawID,return )

Float FlxGamepad_obj::getAxis(int AxisButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_569_getAxis)
HXDLIN( 569)		Float axisValue = this->getAxisValue(this->mapping->getRawID(AxisButtonID));
HXDLIN( 569)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 569)		if ((_hx_tmp > this->get_deadZone())) {
HXDLIN( 569)			return axisValue;
            		}
            		else {
HXDLIN( 569)			return ( (Float)(0) );
            		}
HXDLIN( 569)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxis,return )

Float FlxGamepad_obj::getAxisRaw(int RawAxisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_597_getAxisRaw)
HXLINE( 598)		Float axisValue = this->getAxisValue(RawAxisID);
HXLINE( 599)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 599)		if ((_hx_tmp > this->get_deadZone())) {
HXLINE( 601)			return axisValue;
            		}
HXLINE( 603)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisRaw,return )

bool FlxGamepad_obj::isAxisForAnalogStick(int AxisIndex){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_607_isAxisForAnalogStick)
HXLINE( 608)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXLINE( 609)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXLINE( 611)		if (hx::IsNotNull( leftStick )) {
HXLINE( 613)			bool _hx_tmp;
HXDLIN( 613)			if ((AxisIndex != leftStick->x)) {
HXLINE( 613)				_hx_tmp = (AxisIndex == leftStick->y);
            			}
            			else {
HXLINE( 613)				_hx_tmp = true;
            			}
HXDLIN( 613)			if (_hx_tmp) {
HXLINE( 614)				return true;
            			}
            		}
HXLINE( 616)		if (hx::IsNotNull( rightStick )) {
HXLINE( 618)			bool _hx_tmp1;
HXDLIN( 618)			if ((AxisIndex != rightStick->x)) {
HXLINE( 618)				_hx_tmp1 = (AxisIndex == rightStick->y);
            			}
            			else {
HXLINE( 618)				_hx_tmp1 = true;
            			}
HXDLIN( 618)			if (_hx_tmp1) {
HXLINE( 619)				return true;
            			}
            		}
HXLINE( 621)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,isAxisForAnalogStick,return )

 ::flixel::input::gamepad::FlxGamepadAnalogStick FlxGamepad_obj::getAnalogStickByAxis(int AxisIndex){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_625_getAnalogStickByAxis)
HXLINE( 626)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXLINE( 627)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXLINE( 629)		bool _hx_tmp;
HXDLIN( 629)		bool _hx_tmp1;
HXDLIN( 629)		if (hx::IsNotNull( leftStick )) {
HXLINE( 629)			_hx_tmp1 = (AxisIndex == leftStick->x);
            		}
            		else {
HXLINE( 629)			_hx_tmp1 = false;
            		}
HXDLIN( 629)		if (!(_hx_tmp1)) {
HXLINE( 629)			_hx_tmp = (AxisIndex == leftStick->y);
            		}
            		else {
HXLINE( 629)			_hx_tmp = true;
            		}
HXDLIN( 629)		if (_hx_tmp) {
HXLINE( 630)			return leftStick;
            		}
HXLINE( 631)		bool _hx_tmp2;
HXDLIN( 631)		bool _hx_tmp3;
HXDLIN( 631)		if (hx::IsNotNull( rightStick )) {
HXLINE( 631)			_hx_tmp3 = (AxisIndex == rightStick->x);
            		}
            		else {
HXLINE( 631)			_hx_tmp3 = false;
            		}
HXDLIN( 631)		if (!(_hx_tmp3)) {
HXLINE( 631)			_hx_tmp2 = (AxisIndex == rightStick->y);
            		}
            		else {
HXLINE( 631)			_hx_tmp2 = true;
            		}
HXDLIN( 631)		if (_hx_tmp2) {
HXLINE( 632)			return rightStick;
            		}
HXLINE( 633)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogStickByAxis,return )

Float FlxGamepad_obj::getXAxis(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_642_getXAxis)
HXDLIN( 642)		return this->getAnalogXAxisValue(this->mapping->getAnalogStick(AxesButtonID));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxis,return )

Float FlxGamepad_obj::getXAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_650_getXAxisRaw)
HXDLIN( 650)		return this->getAnalogXAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getXAxisRaw,return )

Float FlxGamepad_obj::getYAxis(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_659_getYAxis)
HXDLIN( 659)		return this->getYAxisRaw(this->mapping->getAnalogStick(AxesButtonID));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxis,return )

Float FlxGamepad_obj::getYAxisRaw( ::flixel::input::gamepad::FlxGamepadAnalogStick Stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_668_getYAxisRaw)
HXDLIN( 668)		return this->getAnalogYAxisValue(Stick);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getYAxisRaw,return )

 ::flixel::math::FlxPoint FlxGamepad_obj::getAnalogAxes(int AxesButtonID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_679_getAnalogAxes)
HXDLIN( 679)		Float x = this->getAnalogXAxisValue(this->mapping->getAnalogStick(AxesButtonID));
HXDLIN( 679)		Float y = this->getYAxisRaw(this->mapping->getAnalogStick(AxesButtonID));
HXDLIN( 679)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(x,y);
HXDLIN( 679)		point->_inPool = false;
HXDLIN( 679)		return point;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxes,return )

bool FlxGamepad_obj::anyButton(hx::Null< int >  __o_state){
            		int state = __o_state.Default(1);
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_686_anyButton)
HXLINE( 687)		{
HXLINE( 687)			int _g = 0;
HXDLIN( 687)			::Array< ::Dynamic> _g1 = this->buttons;
HXDLIN( 687)			while((_g < _g1->length)){
HXLINE( 687)				 ::flixel::input::gamepad::FlxGamepadButton button = _g1->__get(_g).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 687)				_g = (_g + 1);
HXLINE( 689)				bool _hx_tmp;
HXDLIN( 689)				if (hx::IsNotNull( button )) {
HXLINE( 689)					_hx_tmp = button->hasState(state);
            				}
            				else {
HXLINE( 689)					_hx_tmp = false;
            				}
HXDLIN( 689)				if (_hx_tmp) {
HXLINE( 691)					return true;
            				}
            			}
            		}
HXLINE( 694)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,anyButton,return )

bool FlxGamepad_obj::anyInput(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_701_anyInput)
HXLINE( 702)		if (this->anyButton(null())) {
HXLINE( 703)			return true;
            		}
HXLINE( 705)		int numAxis = this->axis->length;
HXLINE( 707)		{
HXLINE( 707)			int _g = 0;
HXDLIN( 707)			int _g1 = numAxis;
HXDLIN( 707)			while((_g < _g1)){
HXLINE( 707)				_g = (_g + 1);
HXDLIN( 707)				int i = (_g - 1);
HXLINE( 709)				if ((this->axis->__get(0) != 0)) {
HXLINE( 711)					return true;
            				}
            			}
            		}
HXLINE( 727)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,anyInput,return )

Float FlxGamepad_obj::getAxisValue(int AxisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_731_getAxisValue)
HXLINE( 732)		Float axisValue = ( (Float)(0) );
HXLINE( 735)		if ((AxisID == -1)) {
HXLINE( 737)			return ( (Float)(0) );
            		}
HXLINE( 739)		bool _hx_tmp;
HXDLIN( 739)		bool _hx_tmp1;
HXDLIN( 739)		if (hx::IsNotNull( this->_device )) {
HXLINE( 739)			_hx_tmp1 = this->_device->enabled;
            		}
            		else {
HXLINE( 739)			_hx_tmp1 = false;
            		}
HXDLIN( 739)		if (_hx_tmp1) {
HXLINE( 739)			 ::Dynamic Max = (this->_device->get_numControls() - 1);
HXDLIN( 739)			if ((AxisID >= 0)) {
HXLINE( 739)				if (hx::IsNotNull( Max )) {
HXLINE( 739)					_hx_tmp = hx::IsLessEq( AxisID,Max );
            				}
            				else {
HXLINE( 739)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 739)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 739)			_hx_tmp = false;
            		}
HXDLIN( 739)		if (_hx_tmp) {
HXLINE( 741)			axisValue = this->_device->getControlAt(AxisID)->value;
            		}
HXLINE( 752)		if (this->isAxisForAnalogStick(AxisID)) {
HXLINE( 754)			Float axisValue1 = axisValue;
HXDLIN( 754)			if (this->mapping->isAxisFlipped(AxisID)) {
HXLINE( 754)				axisValue1 = (axisValue1 * ( (Float)(-1) ));
            			}
HXDLIN( 754)			axisValue = axisValue1;
            		}
HXLINE( 757)		return axisValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAxisValue,return )

Float FlxGamepad_obj::getAnalogXAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_761_getAnalogXAxisValue)
HXLINE( 762)		if (hx::IsNull( stick )) {
HXLINE( 763)			return ( (Float)(0) );
            		}
HXLINE( 764)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 765)			return this->getAnalogAxisValueCircular(stick,stick->x);
            		}
            		else {
HXLINE( 767)			return this->getAnalogAxisValueIndependent(stick->x);
            		}
HXLINE( 764)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogXAxisValue,return )

Float FlxGamepad_obj::getAnalogYAxisValue( ::flixel::input::gamepad::FlxGamepadAnalogStick stick){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_771_getAnalogYAxisValue)
HXLINE( 772)		if (hx::IsNull( stick )) {
HXLINE( 773)			return ( (Float)(0) );
            		}
HXLINE( 774)		if (hx::IsEq( this->deadZoneMode,::flixel::input::gamepad::FlxGamepadDeadZoneMode_obj::CIRCULAR_dyn() )) {
HXLINE( 775)			return this->getAnalogAxisValueCircular(stick,stick->y);
            		}
            		else {
HXLINE( 777)			return this->getAnalogAxisValueIndependent(stick->y);
            		}
HXLINE( 774)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogYAxisValue,return )

Float FlxGamepad_obj::getAnalogAxisValueCircular( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_781_getAnalogAxisValueCircular)
HXLINE( 782)		if (hx::IsNull( stick )) {
HXLINE( 783)			return ( (Float)(0) );
            		}
HXLINE( 784)		Float xAxis = this->getAxisValue(stick->x);
HXLINE( 785)		Float yAxis = this->getAxisValue(stick->y);
HXLINE( 787)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(xAxis,yAxis);
HXDLIN( 787)		point->_inPool = false;
HXDLIN( 787)		 ::flixel::math::FlxPoint vector = point;
HXLINE( 788)		Float length = ::Math_obj::sqrt(((vector->x * vector->x) + (vector->y * vector->y)));
HXLINE( 789)		vector->put();
HXLINE( 791)		if ((length > this->get_deadZone())) {
HXLINE( 793)			return this->getAxisValue(axisID);
            		}
HXLINE( 795)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxGamepad_obj,getAnalogAxisValueCircular,return )

Float FlxGamepad_obj::getAnalogAxisValueIndependent(int axisID){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_799_getAnalogAxisValueIndependent)
HXLINE( 800)		Float axisValue = this->getAxisValue(axisID);
HXLINE( 801)		Float _hx_tmp = ::Math_obj::abs(axisValue);
HXDLIN( 801)		if ((_hx_tmp > this->get_deadZone())) {
HXLINE( 802)			return axisValue;
            		}
HXLINE( 803)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,getAnalogAxisValueIndependent,return )

void FlxGamepad_obj::handleAxisMove(int axis,Float newValue,Float oldValue){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_807_handleAxisMove)
HXLINE( 808)		Float axisValue = newValue;
HXDLIN( 808)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 808)			axisValue = (axisValue * ( (Float)(-1) ));
            		}
HXDLIN( 808)		newValue = axisValue;
HXLINE( 809)		Float axisValue1 = oldValue;
HXDLIN( 809)		if (this->mapping->isAxisFlipped(axis)) {
HXLINE( 809)			axisValue1 = (axisValue1 * ( (Float)(-1) ));
            		}
HXDLIN( 809)		oldValue = axisValue1;
HXLINE( 812)		 ::flixel::input::gamepad::FlxGamepadAnalogStick leftStick = this->mapping->leftStick;
HXDLIN( 812)		 ::flixel::input::gamepad::FlxGamepadAnalogStick rightStick = this->mapping->rightStick;
HXDLIN( 812)		 ::flixel::input::gamepad::FlxGamepadAnalogStick stick;
HXDLIN( 812)		bool stick1;
HXDLIN( 812)		bool stick2;
HXDLIN( 812)		if (hx::IsNotNull( leftStick )) {
HXLINE( 812)			stick2 = (axis == leftStick->x);
            		}
            		else {
HXLINE( 812)			stick2 = false;
            		}
HXDLIN( 812)		if (!(stick2)) {
HXLINE( 812)			stick1 = (axis == leftStick->y);
            		}
            		else {
HXLINE( 812)			stick1 = true;
            		}
HXDLIN( 812)		if (stick1) {
HXLINE( 812)			stick = leftStick;
            		}
            		else {
HXLINE( 812)			bool stick3;
HXDLIN( 812)			bool stick4;
HXDLIN( 812)			if (hx::IsNotNull( rightStick )) {
HXLINE( 812)				stick4 = (axis == rightStick->x);
            			}
            			else {
HXLINE( 812)				stick4 = false;
            			}
HXDLIN( 812)			if (!(stick4)) {
HXLINE( 812)				stick3 = (axis == rightStick->y);
            			}
            			else {
HXLINE( 812)				stick3 = true;
            			}
HXDLIN( 812)			if (stick3) {
HXLINE( 812)				stick = rightStick;
            			}
            			else {
HXLINE( 812)				stick = null();
            			}
            		}
HXDLIN( 812)		 ::flixel::input::gamepad::FlxGamepadAnalogStick stick5 = stick;
HXLINE( 813)		bool _hx_tmp;
HXDLIN( 813)		if (hx::IsNotEq( stick5->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() )) {
HXLINE( 813)			_hx_tmp = hx::IsEq( stick5->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::BOTH_dyn() );
            		}
            		else {
HXLINE( 813)			_hx_tmp = true;
            		}
HXDLIN( 813)		if (_hx_tmp) {
HXLINE( 815)			this->handleAxisMoveSub(stick5,axis,newValue,oldValue,((Float)1.0));
HXLINE( 816)			this->handleAxisMoveSub(stick5,axis,newValue,oldValue,((Float)-1.0));
HXLINE( 818)			bool _hx_tmp1 = hx::IsEq( stick5->mode,::flixel::input::gamepad::FlxAnalogToDigitalMode_obj::ONLY_DIGITAL_dyn() );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxGamepad_obj,handleAxisMove,(void))

void FlxGamepad_obj::handleAxisMoveSub( ::flixel::input::gamepad::FlxGamepadAnalogStick stick,int axis,Float value,Float oldValue,hx::Null< Float >  __o_sign){
            		Float sign = __o_sign.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_826_handleAxisMoveSub)
HXLINE( 827)		int digitalButton = -1;
HXLINE( 829)		if ((axis == stick->x)) {
HXLINE( 831)			if ((sign < 0)) {
HXLINE( 831)				digitalButton = stick->rawLeft;
            			}
            			else {
HXLINE( 831)				digitalButton = stick->rawRight;
            			}
            		}
            		else {
HXLINE( 833)			if ((axis == stick->y)) {
HXLINE( 835)				if ((sign < 0)) {
HXLINE( 835)					digitalButton = stick->rawUp;
            				}
            				else {
HXLINE( 835)					digitalButton = stick->rawDown;
            				}
            			}
            		}
HXLINE( 838)		Float threshold = stick->digitalThreshold;
HXLINE( 839)		Float valueSign = (value * sign);
HXLINE( 840)		Float oldValueSign = (oldValue * sign);
HXLINE( 842)		bool _hx_tmp;
HXDLIN( 842)		if ((valueSign > threshold)) {
HXLINE( 842)			_hx_tmp = (oldValueSign <= threshold);
            		}
            		else {
HXLINE( 842)			_hx_tmp = false;
            		}
HXDLIN( 842)		if (_hx_tmp) {
HXLINE( 844)			 ::flixel::input::gamepad::FlxGamepadButton btn = this->getButton(digitalButton);
HXLINE( 845)			if (hx::IsNotNull( btn )) {
HXLINE( 846)				btn->press();
            			}
            		}
            		else {
HXLINE( 848)			bool _hx_tmp1;
HXDLIN( 848)			if ((valueSign <= threshold)) {
HXLINE( 848)				_hx_tmp1 = (oldValueSign > threshold);
            			}
            			else {
HXLINE( 848)				_hx_tmp1 = false;
            			}
HXDLIN( 848)			if (_hx_tmp1) {
HXLINE( 850)				 ::flixel::input::gamepad::FlxGamepadButton btn1 = this->getButton(digitalButton);
HXLINE( 851)				if (hx::IsNotNull( btn1 )) {
HXLINE( 852)					btn1->release();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxGamepad_obj,handleAxisMoveSub,(void))

 ::flixel::input::gamepad::mappings::FlxGamepadMapping FlxGamepad_obj::createMappingForModel( ::flixel::input::gamepad::FlxGamepadModel model){
            	HX_GC_STACKFRAME(&_hx_pos_0a9014dd1064fc14_858_createMappingForModel)
HXDLIN( 858)		switch((int)(model->_hx_getIndex())){
            			case (int)0: {
HXLINE( 860)				return  ::flixel::input::gamepad::mappings::LogitechMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)1: {
HXLINE( 861)				return  ::flixel::input::gamepad::mappings::OUYAMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)2: {
HXLINE( 862)				return  ::flixel::input::gamepad::mappings::PS4Mapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)3: {
HXLINE( 863)				return  ::flixel::input::gamepad::mappings::PSVitaMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)4: {
HXLINE( 864)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)5: {
HXLINE( 865)				return  ::flixel::input::gamepad::mappings::MayflashWiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)6: {
HXLINE( 866)				return  ::flixel::input::gamepad::mappings::WiiRemoteMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			case (int)7: {
HXLINE( 867)				return  ::flixel::input::gamepad::mappings::MFiMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            			break;
            			default:{
HXLINE( 869)				return  ::flixel::input::gamepad::mappings::XInputMapping_obj::__alloc( HX_CTX ,this->attachment);
            			}
            		}
HXLINE( 858)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,createMappingForModel,return )

::String FlxGamepad_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_875_get_name)
HXLINE( 876)		if (hx::IsNull( this->_device )) {
HXLINE( 877)			return null();
            		}
HXLINE( 878)		return this->_device->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_name,return )

 ::flixel::input::gamepad::FlxGamepadModel FlxGamepad_obj::set_model( ::flixel::input::gamepad::FlxGamepadModel Model){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_883_set_model)
HXLINE( 884)		this->model = Model;
HXLINE( 885)		this->mapping = this->createMappingForModel(this->model);
HXLINE( 887)		return this->model;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_model,return )

 ::flixel::input::gamepad::FlxGamepadAttachment FlxGamepad_obj::set_attachment( ::flixel::input::gamepad::FlxGamepadAttachment Attachment){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_891_set_attachment)
HXLINE( 892)		this->attachment = Attachment;
HXLINE( 893)		this->mapping->set_attachment(Attachment);
HXLINE( 894)		return this->attachment;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_attachment,return )

Float FlxGamepad_obj::get_deadZone(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_899_get_deadZone)
HXDLIN( 899)		bool _hx_tmp;
HXDLIN( 899)		if (hx::IsNotNull( this->manager )) {
HXDLIN( 899)			_hx_tmp = hx::IsNull( this->manager->globalDeadZone );
            		}
            		else {
HXDLIN( 899)			_hx_tmp = true;
            		}
HXDLIN( 899)		if (_hx_tmp) {
HXDLIN( 899)			return this->_deadZone;
            		}
            		else {
HXDLIN( 899)			return ( (Float)(this->manager->globalDeadZone) );
            		}
HXDLIN( 899)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,get_deadZone,return )

Float FlxGamepad_obj::set_deadZone(Float deadZone){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_904_set_deadZone)
HXDLIN( 904)		return (this->_deadZone = deadZone);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGamepad_obj,set_deadZone,return )

::String FlxGamepad_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0a9014dd1064fc14_909_toString)
HXLINE( 910)		 ::Dynamic value = this->id;
HXDLIN( 910)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 910)		_this->label = HX_("id",db,5b,00,00);
HXDLIN( 910)		_this->value = value;
HXLINE( 911)		 ::Dynamic value1 = this->model;
HXDLIN( 911)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 911)		_this1->label = HX_("model",a9,23,58,0c);
HXDLIN( 911)		_this1->value = value1;
HXLINE( 912)		 ::Dynamic value2 = this->get_deadZone();
HXDLIN( 912)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 912)		_this2->label = HX_("deadZone",f0,3e,2e,58);
HXDLIN( 912)		_this2->value = value2;
HXLINE( 909)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(3)->init(0,_this)->init(1,_this1)->init(2,_this2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGamepad_obj,toString,return )


hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__new(int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	hx::ObjectPtr< FlxGamepad_obj > __this = new FlxGamepad_obj();
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

hx::ObjectPtr< FlxGamepad_obj > FlxGamepad_obj::__alloc(hx::Ctx *_hx_ctx,int ID, ::flixel::input::gamepad::FlxGamepadManager Manager, ::flixel::input::gamepad::FlxGamepadModel Model, ::flixel::input::gamepad::FlxGamepadAttachment Attachment) {
	FlxGamepad_obj *__this = (FlxGamepad_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxGamepad_obj), true, "flixel.input.gamepad.FlxGamepad"));
	*(void **)__this = FlxGamepad_obj::_hx_vtable;
	__this->__construct(ID,Manager,Model,Attachment);
	return __this;
}

FlxGamepad_obj::FlxGamepad_obj()
{
}

void FlxGamepad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGamepad);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(detectedModel,"detectedModel");
	HX_MARK_MEMBER_NAME(mapping,"mapping");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(attachment,"attachment");
	HX_MARK_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_MARK_MEMBER_NAME(pressed,"pressed");
	HX_MARK_MEMBER_NAME(released,"released");
	HX_MARK_MEMBER_NAME(justPressed,"justPressed");
	HX_MARK_MEMBER_NAME(justReleased,"justReleased");
	HX_MARK_MEMBER_NAME(analog,"analog");
	HX_MARK_MEMBER_NAME(motion,"motion");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(axis,"axis");
	HX_MARK_MEMBER_NAME(axisActive,"axisActive");
	HX_MARK_MEMBER_NAME(manager,"manager");
	HX_MARK_MEMBER_NAME(_deadZone,"_deadZone");
	HX_MARK_MEMBER_NAME(_device,"_device");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void FlxGamepad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(detectedModel,"detectedModel");
	HX_VISIT_MEMBER_NAME(mapping,"mapping");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(attachment,"attachment");
	HX_VISIT_MEMBER_NAME(deadZoneMode,"deadZoneMode");
	HX_VISIT_MEMBER_NAME(pressed,"pressed");
	HX_VISIT_MEMBER_NAME(released,"released");
	HX_VISIT_MEMBER_NAME(justPressed,"justPressed");
	HX_VISIT_MEMBER_NAME(justReleased,"justReleased");
	HX_VISIT_MEMBER_NAME(analog,"analog");
	HX_VISIT_MEMBER_NAME(motion,"motion");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(axis,"axis");
	HX_VISIT_MEMBER_NAME(axisActive,"axisActive");
	HX_VISIT_MEMBER_NAME(manager,"manager");
	HX_VISIT_MEMBER_NAME(_deadZone,"_deadZone");
	HX_VISIT_MEMBER_NAME(_device,"_device");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

hx::Val FlxGamepad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"axis") ) { return hx::Val( axis ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { return hx::Val( analog ); }
		if (HX_FIELD_EQ(inName,"motion") ) { return hx::Val( motion ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { return hx::Val( mapping ); }
		if (HX_FIELD_EQ(inName,"pressed") ) { return hx::Val( pressed ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"manager") ) { return hx::Val( manager ); }
		if (HX_FIELD_EQ(inName,"_device") ) { return hx::Val( _device ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return hx::Val( buttons ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAxis") ) { return hx::Val( getAxis_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_deadZone() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released ); }
		if (HX_FIELD_EQ(inName,"getXAxis") ) { return hx::Val( getXAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYAxis") ) { return hx::Val( getYAxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyInput") ) { return hx::Val( anyInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return hx::Val( connected ); }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { return hx::Val( _deadZone ); }
		if (HX_FIELD_EQ(inName,"getButton") ) { return hx::Val( getButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyButton") ) { return hx::Val( anyButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_model") ) { return hx::Val( set_model_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { return hx::Val( attachment ); }
		if (HX_FIELD_EQ(inName,"axisActive") ) { return hx::Val( axisActive ); }
		if (HX_FIELD_EQ(inName,"anyPressed") ) { return hx::Val( anyPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAxisRaw") ) { return hx::Val( getAxisRaw_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { return hx::Val( justPressed ); }
		if (HX_FIELD_EQ(inName,"checkStatus") ) { return hx::Val( checkStatus_dyn() ); }
		if (HX_FIELD_EQ(inName,"getXAxisRaw") ) { return hx::Val( getXAxisRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYAxisRaw") ) { return hx::Val( getYAxisRaw_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { return hx::Val( deadZoneMode ); }
		if (HX_FIELD_EQ(inName,"justReleased") ) { return hx::Val( justReleased ); }
		if (HX_FIELD_EQ(inName,"getAxisValue") ) { return hx::Val( getAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_deadZone") ) { return hx::Val( get_deadZone_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_deadZone") ) { return hx::Val( set_deadZone_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { return hx::Val( detectedModel ); }
		if (HX_FIELD_EQ(inName,"applyAxisFlip") ) { return hx::Val( applyAxisFlip_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyPressedRaw") ) { return hx::Val( anyPressedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogAxes") ) { return hx::Val( getAnalogAxes_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"checkStatusRaw") ) { return hx::Val( checkStatusRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"anyJustPressed") ) { return hx::Val( anyJustPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstPressedID") ) { return hx::Val( firstPressedID_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleAxisMove") ) { return hx::Val( handleAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_attachment") ) { return hx::Val( set_attachment_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"anyJustReleased") ) { return hx::Val( anyJustReleased_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"anyJustPressedRaw") ) { return hx::Val( anyJustPressedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstPressedRawID") ) { return hx::Val( firstPressedRawID_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleAxisMoveSub") ) { return hx::Val( handleAxisMoveSub_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"anyJustReleasedRaw") ) { return hx::Val( anyJustReleasedRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"firstJustPressedID") ) { return hx::Val( firstJustPressedID_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstJustReleasedID") ) { return hx::Val( firstJustReleasedID_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogXAxisValue") ) { return hx::Val( getAnalogXAxisValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogYAxisValue") ) { return hx::Val( getAnalogYAxisValue_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"isAxisForAnalogStick") ) { return hx::Val( isAxisForAnalogStick_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAnalogStickByAxis") ) { return hx::Val( getAnalogStickByAxis_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"firstJustPressedRawID") ) { return hx::Val( firstJustPressedRawID_dyn() ); }
		if (HX_FIELD_EQ(inName,"createMappingForModel") ) { return hx::Val( createMappingForModel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"firstJustReleasedRawID") ) { return hx::Val( firstJustReleasedRawID_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueCircular") ) { return hx::Val( getAnalogAxisValueCircular_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"getAnalogAxisValueIndependent") ) { return hx::Val( getAnalogAxisValueIndependent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxGamepad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_model(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >()) );model=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"analog") ) { analog=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadAnalogList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"motion") ) { motion=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mapping") ) { mapping=inValue.Cast<  ::flixel::input::gamepad::mappings::FlxGamepadMapping >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"manager") ) { manager=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_device") ) { _device=inValue.Cast<  ::openfl::ui::GameInputDevice >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deadZone") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_deadZone(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"released") ) { released=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deadZone") ) { _deadZone=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attachment") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_attachment(inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >()) );attachment=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadAttachment >(); return inValue; }
		if (HX_FIELD_EQ(inName,"axisActive") ) { axisActive=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { justPressed=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"deadZoneMode") ) { deadZoneMode=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadDeadZoneMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"justReleased") ) { justReleased=inValue.Cast<  ::flixel::input::gamepad::lists::FlxGamepadButtonList >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectedModel") ) { detectedModel=inValue.Cast<  ::flixel::input::gamepad::FlxGamepadModel >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxGamepad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("detectedModel",c7,fe,45,f3));
	outFields->push(HX_("mapping",0e,7b,7a,44));
	outFields->push(HX_("connected",c9,e2,f6,a2));
	outFields->push(HX_("attachment",e3,07,73,dd));
	outFields->push(HX_("deadZone",f0,3e,2e,58));
	outFields->push(HX_("deadZoneMode",73,76,8a,42));
	outFields->push(HX_("pressed",a2,d2,e6,39));
	outFields->push(HX_("released",bd,88,e7,76));
	outFields->push(HX_("justPressed",d6,0d,a7,f2));
	outFields->push(HX_("justReleased",09,1b,5b,66));
	outFields->push(HX_("analog",30,d6,21,5f));
	outFields->push(HX_("motion",36,86,5d,cb));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("axis",a1,1c,79,40));
	outFields->push(HX_("axisActive",47,81,10,2c));
	outFields->push(HX_("manager",6d,92,c1,13));
	outFields->push(HX_("_deadZone",4f,36,c4,9f));
	outFields->push(HX_("_device",35,ee,ee,df));
	outFields->push(HX_("buttons",41,52,75,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGamepad_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxGamepad_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadModel */ ,(int)offsetof(FlxGamepad_obj,model),HX_("model",a9,23,58,0c)},
	{hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadModel */ ,(int)offsetof(FlxGamepad_obj,detectedModel),HX_("detectedModel",c7,fe,45,f3)},
	{hx::fsObject /*  ::flixel::input::gamepad::mappings::FlxGamepadMapping */ ,(int)offsetof(FlxGamepad_obj,mapping),HX_("mapping",0e,7b,7a,44)},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,connected),HX_("connected",c9,e2,f6,a2)},
	{hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadAttachment */ ,(int)offsetof(FlxGamepad_obj,attachment),HX_("attachment",e3,07,73,dd)},
	{hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadDeadZoneMode */ ,(int)offsetof(FlxGamepad_obj,deadZoneMode),HX_("deadZoneMode",73,76,8a,42)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,pressed),HX_("pressed",a2,d2,e6,39)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,released),HX_("released",bd,88,e7,76)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,justPressed),HX_("justPressed",d6,0d,a7,f2)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadButtonList */ ,(int)offsetof(FlxGamepad_obj,justReleased),HX_("justReleased",09,1b,5b,66)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadAnalogList */ ,(int)offsetof(FlxGamepad_obj,analog),HX_("analog",30,d6,21,5f)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadMotionValueList */ ,(int)offsetof(FlxGamepad_obj,motion),HX_("motion",36,86,5d,cb)},
	{hx::fsObject /*  ::flixel::input::gamepad::lists::FlxGamepadPointerValueList */ ,(int)offsetof(FlxGamepad_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(FlxGamepad_obj,axis),HX_("axis",a1,1c,79,40)},
	{hx::fsBool,(int)offsetof(FlxGamepad_obj,axisActive),HX_("axisActive",47,81,10,2c)},
	{hx::fsObject /*  ::flixel::input::gamepad::FlxGamepadManager */ ,(int)offsetof(FlxGamepad_obj,manager),HX_("manager",6d,92,c1,13)},
	{hx::fsFloat,(int)offsetof(FlxGamepad_obj,_deadZone),HX_("_deadZone",4f,36,c4,9f)},
	{hx::fsObject /*  ::openfl::ui::GameInputDevice */ ,(int)offsetof(FlxGamepad_obj,_device),HX_("_device",35,ee,ee,df)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxGamepad_obj,buttons),HX_("buttons",41,52,75,ca)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxGamepad_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxGamepad_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("model",a9,23,58,0c),
	HX_("detectedModel",c7,fe,45,f3),
	HX_("mapping",0e,7b,7a,44),
	HX_("connected",c9,e2,f6,a2),
	HX_("attachment",e3,07,73,dd),
	HX_("deadZoneMode",73,76,8a,42),
	HX_("pressed",a2,d2,e6,39),
	HX_("released",bd,88,e7,76),
	HX_("justPressed",d6,0d,a7,f2),
	HX_("justReleased",09,1b,5b,66),
	HX_("analog",30,d6,21,5f),
	HX_("motion",36,86,5d,cb),
	HX_("pointer",bd,c0,21,51),
	HX_("axis",a1,1c,79,40),
	HX_("axisActive",47,81,10,2c),
	HX_("manager",6d,92,c1,13),
	HX_("_deadZone",4f,36,c4,9f),
	HX_("_device",35,ee,ee,df),
	HX_("buttons",41,52,75,ca),
	HX_("getButton",28,eb,36,56),
	HX_("applyAxisFlip",7c,1f,87,cb),
	HX_("update",09,86,05,87),
	HX_("reset",cf,49,c8,e6),
	HX_("destroy",fa,2c,86,24),
	HX_("checkStatus",1a,ba,0d,e8),
	HX_("checkStatusRaw",ee,9f,30,e1),
	HX_("anyPressed",16,75,02,90),
	HX_("anyPressedRaw",72,ea,fd,41),
	HX_("anyJustPressed",4a,fa,b6,a6),
	HX_("anyJustPressedRaw",be,9d,89,5f),
	HX_("anyJustReleased",15,14,3a,40),
	HX_("anyJustReleasedRaw",d3,74,6a,66),
	HX_("firstPressedID",ad,60,f7,ba),
	HX_("firstPressedRawID",11,7e,5f,62),
	HX_("firstJustPressedID",e1,68,ae,5d),
	HX_("firstJustPressedRawID",5d,8e,1c,78),
	HX_("firstJustReleasedID",74,ef,61,8d),
	HX_("firstJustReleasedRawID",aa,25,0b,ce),
	HX_("getAxis",57,cc,fb,12),
	HX_("getAxisRaw",d1,d1,2b,cd),
	HX_("isAxisForAnalogStick",82,9b,be,67),
	HX_("getAnalogStickByAxis",c2,e5,b1,cc),
	HX_("getXAxis",c3,f4,3e,a3),
	HX_("getXAxisRaw",e5,b4,b4,40),
	HX_("getYAxis",44,89,a5,36),
	HX_("getYAxisRaw",04,27,e7,79),
	HX_("getAnalogAxes",ab,4f,c5,ee),
	HX_("anyButton",fe,c9,3f,37),
	HX_("anyInput",7e,21,d0,3c),
	HX_("getAxisValue",9a,07,b3,9a),
	HX_("getAnalogXAxisValue",7e,5a,ac,0a),
	HX_("getAnalogYAxisValue",5d,d2,f6,ca),
	HX_("getAnalogAxisValueCircular",49,0b,5e,0f),
	HX_("getAnalogAxisValueIndependent",d0,22,ae,5b),
	HX_("handleAxisMove",1a,b8,cb,dd),
	HX_("handleAxisMoveSub",86,35,c6,43),
	HX_("createMappingForModel",72,7d,17,c6),
	HX_("get_name",d4,2d,ba,c8),
	HX_("set_model",0c,6c,52,33),
	HX_("set_attachment",a0,78,88,73),
	HX_("get_deadZone",f9,f2,47,0d),
	HX_("set_deadZone",6d,16,41,22),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class FlxGamepad_obj::__mClass;

void FlxGamepad_obj::__register()
{
	FlxGamepad_obj _hx_dummy;
	FlxGamepad_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.input.gamepad.FlxGamepad",52,73,7c,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGamepad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGamepad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace gamepad
