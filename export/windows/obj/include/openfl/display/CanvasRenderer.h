// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl_display_CanvasRenderer
#define INCLUDED_openfl_display_CanvasRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
HX_DECLARE_CLASS2(openfl,display,CanvasRenderer)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES CanvasRenderer_obj : public  ::openfl::display::DisplayObjectRenderer_obj
{
	public:
		typedef  ::openfl::display::DisplayObjectRenderer_obj super;
		typedef CanvasRenderer_obj OBJ_;
		CanvasRenderer_obj();

	public:
		enum { _hx_ClassId = 0x0388830d };

		void __construct( ::Dynamic context);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.CanvasRenderer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.CanvasRenderer"); }
		static hx::ObjectPtr< CanvasRenderer_obj > __new( ::Dynamic context);
		static hx::ObjectPtr< CanvasRenderer_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic context);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CanvasRenderer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CanvasRenderer",5b,02,4a,33); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::Dynamic context;
		Float pixelRatio;
		virtual void applySmoothing( ::Dynamic context,bool value);
		::Dynamic applySmoothing_dyn();

		virtual void setTransform( ::openfl::geom::Matrix transform, ::Dynamic context);
		::Dynamic setTransform_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_CanvasRenderer */ 
