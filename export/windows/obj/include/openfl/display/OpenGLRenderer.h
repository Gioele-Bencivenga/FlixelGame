// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#define INCLUDED_openfl_display_OpenGLRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
HX_DECLARE_CLASS4(lime,_internal,backend,native,NativeOpenGLRenderContext)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,OpenGLRenderer)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES OpenGLRenderer_obj : public  ::openfl::display::DisplayObjectRenderer_obj
{
	public:
		typedef  ::openfl::display::DisplayObjectRenderer_obj super;
		typedef OpenGLRenderer_obj OBJ_;
		OpenGLRenderer_obj();

	public:
		enum { _hx_ClassId = 0x38ea65a4 };

		void __construct( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.OpenGLRenderer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.OpenGLRenderer"); }
		static hx::ObjectPtr< OpenGLRenderer_obj > __new( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget);
		static hx::ObjectPtr< OpenGLRenderer_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context, ::openfl::display::BitmapData defaultRenderTarget);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~OpenGLRenderer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OpenGLRenderer",f2,e4,ab,68); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl;
		virtual void applyAlpha(Float alpha);
		::Dynamic applyAlpha_dyn();

		virtual void applyBitmapData( ::openfl::display::BitmapData bitmapData,bool smooth,hx::Null< bool >  repeat);
		::Dynamic applyBitmapData_dyn();

		virtual void applyColorTransform( ::openfl::geom::ColorTransform colorTransform);
		::Dynamic applyColorTransform_dyn();

		virtual void applyHasColorTransform(bool enabled);
		::Dynamic applyHasColorTransform_dyn();

		virtual void applyMatrix(::Array< Float > matrix);
		::Dynamic applyMatrix_dyn();

		virtual  ::lime::utils::ArrayBufferView getMatrix( ::openfl::geom::Matrix transform);
		::Dynamic getMatrix_dyn();

		virtual void setShader( ::openfl::display::Shader shader);
		::Dynamic setShader_dyn();

		virtual void setViewport();
		::Dynamic setViewport_dyn();

		virtual void updateShader();
		::Dynamic updateShader_dyn();

		virtual void useAlphaArray();
		::Dynamic useAlphaArray_dyn();

		virtual void useColorTransformArray();
		::Dynamic useColorTransformArray_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_OpenGLRenderer */ 
