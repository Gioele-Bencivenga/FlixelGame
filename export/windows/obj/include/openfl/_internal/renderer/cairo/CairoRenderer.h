// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#define INCLUDED_openfl__internal_renderer_cairo_CairoRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
HX_DECLARE_CLASS3(lime,graphics,cairo,Cairo)
HX_DECLARE_CLASS2(lime,math,Matrix3)
HX_DECLARE_CLASS4(openfl,_internal,renderer,cairo,CairoRenderer)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,CairoRenderer)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,ITileContainer)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,SimpleButton)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,media,Video)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{


class HXCPP_CLASS_ATTRIBUTES CairoRenderer_obj : public  ::openfl::display::CairoRenderer_obj
{
	public:
		typedef  ::openfl::display::CairoRenderer_obj super;
		typedef CairoRenderer_obj OBJ_;
		CairoRenderer_obj();

	public:
		enum { _hx_ClassId = 0x3a6c56d2 };

		void __construct( ::lime::graphics::cairo::Cairo cairo);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.cairo.CairoRenderer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.cairo.CairoRenderer"); }
		static hx::ObjectPtr< CairoRenderer_obj > __new( ::lime::graphics::cairo::Cairo cairo);
		static hx::ObjectPtr< CairoRenderer_obj > __alloc(hx::Ctx *_hx_ctx, ::lime::graphics::cairo::Cairo cairo);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CairoRenderer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CairoRenderer",cb,c9,86,aa); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::openfl::geom::Matrix _hx___matrix;
		 ::lime::math::Matrix3 _hx___matrix3;
		 ::openfl::geom::ColorTransform _hx___colorTransform;
		void applyMatrix( ::openfl::geom::Matrix transform, ::lime::graphics::cairo::Cairo cairo);

		void _hx___clear();

		void _hx___drawBitmapData( ::openfl::display::BitmapData bitmapData,::Dynamic source, ::openfl::geom::Rectangle clipRect);

		Float _hx___getAlpha(Float value);
		::Dynamic _hx___getAlpha_dyn();

		 ::openfl::geom::ColorTransform _hx___getColorTransform( ::openfl::geom::ColorTransform value);
		::Dynamic _hx___getColorTransform_dyn();

		void _hx___popMask();
		::Dynamic _hx___popMask_dyn();

		void _hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  handleScrollRect);
		::Dynamic _hx___popMaskObject_dyn();

		void _hx___popMaskRect();
		::Dynamic _hx___popMaskRect_dyn();

		void _hx___pushMask( ::openfl::display::DisplayObject mask);
		::Dynamic _hx___pushMask_dyn();

		void _hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  handleScrollRect);
		::Dynamic _hx___pushMaskObject_dyn();

		void _hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform);
		::Dynamic _hx___pushMaskRect_dyn();

		void _hx___render(::Dynamic object);

		void _hx___renderBitmap( ::openfl::display::Bitmap bitmap);
		::Dynamic _hx___renderBitmap_dyn();

		void _hx___renderBitmapData( ::openfl::display::BitmapData bitmapData);
		::Dynamic _hx___renderBitmapData_dyn();

		void _hx___renderDisplayObject( ::openfl::display::DisplayObject object);
		::Dynamic _hx___renderDisplayObject_dyn();

		void _hx___renderDisplayObjectContainer( ::openfl::display::DisplayObjectContainer container);
		::Dynamic _hx___renderDisplayObjectContainer_dyn();

		void _hx___renderMask( ::openfl::display::DisplayObject mask);
		::Dynamic _hx___renderMask_dyn();

		void _hx___renderShape( ::openfl::display::DisplayObject shape);
		::Dynamic _hx___renderShape_dyn();

		void _hx___renderSimpleButton( ::openfl::display::SimpleButton button);
		::Dynamic _hx___renderSimpleButton_dyn();

		void _hx___renderTextField( ::openfl::text::TextField textField);
		::Dynamic _hx___renderTextField_dyn();

		void _hx___renderTilemap( ::openfl::display::Tilemap tilemap);
		::Dynamic _hx___renderTilemap_dyn();

		void _hx___renderVideo( ::openfl::media::Video video);
		::Dynamic _hx___renderVideo_dyn();

		void _hx___setBlendMode( ::Dynamic value);
		::Dynamic _hx___setBlendMode_dyn();

		void _hx___setBlendModeCairo( ::lime::graphics::cairo::Cairo cairo, ::Dynamic value);
		::Dynamic _hx___setBlendModeCairo_dyn();

		bool _hx___updateCacheBitmap( ::openfl::display::DisplayObject object,bool force);
		::Dynamic _hx___updateCacheBitmap_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo

#endif /* INCLUDED_openfl__internal_renderer_cairo_CairoRenderer */ 
