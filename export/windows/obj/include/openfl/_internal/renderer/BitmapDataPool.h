// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl__internal_renderer_BitmapDataPool
#define INCLUDED_openfl__internal_renderer_BitmapDataPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS3(openfl,_internal,renderer,BitmapDataPool)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace openfl{
namespace _internal{
namespace renderer{


class HXCPP_CLASS_ATTRIBUTES BitmapDataPool_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitmapDataPool_obj OBJ_;
		BitmapDataPool_obj();

	public:
		enum { _hx_ClassId = 0x47cae380 };

		void __construct(hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.BitmapDataPool")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.BitmapDataPool"); }
		static hx::ObjectPtr< BitmapDataPool_obj > __new(hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D);
		static hx::ObjectPtr< BitmapDataPool_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_lifetime, ::openfl::display3D::Context3D context3D);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapDataPool_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BitmapDataPool",55,c7,6b,ff); }

		 ::haxe::ds::IntMap _hx___bitmapData;
		 ::haxe::ds::ObjectMap _hx___bitmapDataAge;
		::Array< ::Dynamic> _hx___bitmapDataList;
		 ::openfl::display3D::Context3D _hx___context;
		int _hx___lifetime;
		void cleanup();
		::Dynamic cleanup_dyn();

		 ::openfl::display::BitmapData get(int width,int height);
		::Dynamic get_dyn();

		void release( ::openfl::display::BitmapData bitmapData);
		::Dynamic release_dyn();

		void _hx___cleanBitmapData( ::openfl::display::BitmapData bitmapData);
		::Dynamic _hx___cleanBitmapData_dyn();

		 ::openfl::display::BitmapData _hx___createBitmapData(int width,int height);
		::Dynamic _hx___createBitmapData_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer

#endif /* INCLUDED_openfl__internal_renderer_BitmapDataPool */ 
