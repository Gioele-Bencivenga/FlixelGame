// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasTilemap
#define INCLUDED_openfl__internal_renderer_canvas_CanvasTilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(openfl,_internal,renderer,canvas,CanvasRenderer)
HX_DECLARE_CLASS4(openfl,_internal,renderer,canvas,CanvasTilemap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,CanvasRenderer)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,ITileContainer)
HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,display,TileContainer)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace openfl{
namespace _internal{
namespace renderer{
namespace canvas{


class HXCPP_CLASS_ATTRIBUTES CanvasTilemap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CanvasTilemap_obj OBJ_;
		CanvasTilemap_obj();

	public:
		enum { _hx_ClassId = 0x73185a17 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl._internal.renderer.canvas.CanvasTilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl._internal.renderer.canvas.CanvasTilemap"); }

		inline static hx::ObjectPtr< CanvasTilemap_obj > __new() {
			hx::ObjectPtr< CanvasTilemap_obj > __this = new CanvasTilemap_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< CanvasTilemap_obj > __alloc(hx::Ctx *_hx_ctx) {
			CanvasTilemap_obj *__this = (CanvasTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CanvasTilemap_obj), false, "openfl._internal.renderer.canvas.CanvasTilemap"));
			*(void **)__this = CanvasTilemap_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CanvasTilemap_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CanvasTilemap",16,de,d0,de); }

		static void __boot();
		static  ::Dynamic __meta__;
		static void render( ::openfl::display::Tilemap tilemap, ::openfl::_internal::renderer::canvas::CanvasRenderer renderer);
		static ::Dynamic render_dyn();

		static void renderTileContainer( ::openfl::display::TileContainer group, ::openfl::_internal::renderer::canvas::CanvasRenderer renderer, ::openfl::geom::Matrix parentTransform, ::openfl::display::Tileset defaultTileset,bool smooth,bool alphaEnabled,Float worldAlpha,bool blendModeEnabled, ::Dynamic defaultBlendMode, ::openfl::display::BitmapData cacheBitmapData, ::Dynamic source, ::openfl::geom::Rectangle rect);
		static ::Dynamic renderTileContainer_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace canvas

#endif /* INCLUDED_openfl__internal_renderer_canvas_CanvasTilemap */ 
