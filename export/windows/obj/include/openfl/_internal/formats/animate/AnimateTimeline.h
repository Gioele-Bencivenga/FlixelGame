// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateTimeline
#define INCLUDED_openfl__internal_formats_animate_AnimateTimeline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__internal_utils_ITimeline
#include <openfl/_internal/utils/ITimeline.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(lime,utils,AssetLibrary)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateFrameObject)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateLibrary)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateSpriteSymbol)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateSymbol)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateTimeline)
HX_DECLARE_CLASS5(openfl,_internal,formats,animate,_AnimateTimeline,FrameSymbolInstance)
HX_DECLARE_CLASS3(openfl,_internal,utils,ITimeline)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,FrameLabel)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,utils,AssetLibrary)

namespace openfl{
namespace _internal{
namespace formats{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES AnimateTimeline_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AnimateTimeline_obj OBJ_;
		AnimateTimeline_obj();

	public:
		enum { _hx_ClassId = 0x20e49531 };

		void __construct( ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.formats.animate.AnimateTimeline")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.formats.animate.AnimateTimeline"); }
		static hx::ObjectPtr< AnimateTimeline_obj > __new( ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol);
		static hx::ObjectPtr< AnimateTimeline_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::MovieClip movieClip, ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AnimateTimeline_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("AnimateTimeline",22,16,03,1b); }

		static void __boot();
		static bool _hx___useParentFPS;
		::Array< ::Dynamic> _hx___activeInstances;
		 ::haxe::ds::IntMap _hx___activeInstancesByFrameObjectID;
		int _hx___currentFrame;
		::String _hx___currentFrameLabel;
		::String _hx___currentLabel;
		::Array< ::Dynamic> _hx___currentLabels;
		bool _hx___enabled;
		 ::haxe::ds::IntMap _hx___frameScripts;
		int _hx___frameTime;
		bool _hx___hasDown;
		bool _hx___hasOver;
		bool _hx___hasUp;
		::Array< ::String > _hx___instanceFields;
		int _hx___lastFrameScriptEval;
		int _hx___lastFrameUpdate;
		 ::openfl::_internal::formats::animate::AnimateLibrary _hx___library;
		bool _hx___mouseIsDown;
		 ::openfl::display::MovieClip _hx___movieClip;
		bool _hx___playing;
		 ::openfl::_internal::formats::animate::AnimateSpriteSymbol _hx___symbol;
		int _hx___timeElapsed;
		int _hx___totalFrames;
		void addFrameScript(int index, ::Dynamic method);
		::Dynamic addFrameScript_dyn();

		void gotoAndPlay( ::Dynamic frame,::String scene);
		::Dynamic gotoAndPlay_dyn();

		void gotoAndStop( ::Dynamic frame,::String scene);
		::Dynamic gotoAndStop_dyn();

		void init();
		::Dynamic init_dyn();

		void nextFrame();
		::Dynamic nextFrame_dyn();

		void play();
		::Dynamic play_dyn();

		void prevFrame();
		::Dynamic prevFrame_dyn();

		void stop();
		::Dynamic stop_dyn();

		void enterFrame(int deltaTime);
		::Dynamic enterFrame_dyn();

		void _hx___updateFrameScript(int deltaTime);
		::Dynamic _hx___updateFrameScript_dyn();

		void _hx___updateSymbol(int targetFrame);
		::Dynamic _hx___updateSymbol_dyn();

		bool _hx___evaluateFrameScripts(int advanceToFrame);
		::Dynamic _hx___evaluateFrameScripts_dyn();

		void _hx___fromSymbol( ::openfl::_internal::formats::animate::AnimateLibrary library, ::openfl::_internal::formats::animate::AnimateSpriteSymbol symbol);
		::Dynamic _hx___fromSymbol_dyn();

		int _hx___getNextFrame(int deltaTime);
		::Dynamic _hx___getNextFrame_dyn();

		void _hx___goto(int frame);
		::Dynamic _hx___goto_dyn();

		int _hx___resolveFrameReference( ::Dynamic frame);
		::Dynamic _hx___resolveFrameReference_dyn();

		int _hx___sortDepths( ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance a, ::openfl::_internal::formats::animate::_AnimateTimeline::FrameSymbolInstance b);
		::Dynamic _hx___sortDepths_dyn();

		void _hx___updateDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::formats::animate::AnimateFrameObject frameObject,hx::Null< bool >  reset);
		::Dynamic _hx___updateDisplayObject_dyn();

		void _hx___updateFrameLabel();
		::Dynamic _hx___updateFrameLabel_dyn();

		void _hx___updateInstanceFields();
		::Dynamic _hx___updateInstanceFields_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace animate

#endif /* INCLUDED_openfl__internal_formats_animate_AnimateTimeline */ 
