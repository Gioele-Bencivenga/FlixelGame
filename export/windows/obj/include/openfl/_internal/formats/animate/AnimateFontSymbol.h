// Generated by Haxe 4.0.2
#ifndef INCLUDED_openfl__internal_formats_animate_AnimateFontSymbol
#define INCLUDED_openfl__internal_formats_animate_AnimateFontSymbol

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__internal_formats_animate_AnimateSymbol
#include <openfl/_internal/formats/animate/AnimateSymbol.h>
#endif
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateFontSymbol)
HX_DECLARE_CLASS4(openfl,_internal,formats,animate,AnimateSymbol)
HX_DECLARE_CLASS4(openfl,_internal,formats,swf,ShapeCommand)

namespace openfl{
namespace _internal{
namespace formats{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES AnimateFontSymbol_obj : public  ::openfl::_internal::formats::animate::AnimateSymbol_obj
{
	public:
		typedef  ::openfl::_internal::formats::animate::AnimateSymbol_obj super;
		typedef AnimateFontSymbol_obj OBJ_;
		AnimateFontSymbol_obj();

	public:
		enum { _hx_ClassId = 0x12e3f49b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.formats.animate.AnimateFontSymbol")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.formats.animate.AnimateFontSymbol"); }
		static hx::ObjectPtr< AnimateFontSymbol_obj > __new();
		static hx::ObjectPtr< AnimateFontSymbol_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AnimateFontSymbol_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AnimateFontSymbol",68,d8,ea,7f); }

		::Array< int > advances;
		int ascent;
		bool bold;
		::Array< int > codes;
		int descent;
		::Array< ::Dynamic> glyphs;
		bool italic;
		int leading;
		::String name;
};

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace animate

#endif /* INCLUDED_openfl__internal_formats_animate_AnimateFontSymbol */ 
